// Generated by Construct 3, the game and app creator :: https://www.construct.net
'use strict';
"use strict";
(function(f, b) {
    "object" === typeof exports && "undefined" !== typeof module ? b(exports) : "function" === typeof define && define.amd ? define(["exports"], b) : (f = f || self, b(f.glMatrix = {}))
})(this, function(f) {
    function b(k, m, v) {
        var A = m[0],
            D = m[1],
            E = m[2];
        m = m[3];
        var H = v[0],
            K = v[1],
            M = v[2];
        v = v[3];
        k[0] = A * H + E * K;
        k[1] = D * H + m * K;
        k[2] = A * M + E * v;
        k[3] = D * M + m * v;
        return k
    }

    function a(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        k[2] = m[2] - v[2];
        k[3] = m[3] - v[3];
        return k
    }

    function d(k, m, v) {
        var A = m[0],
            D = m[1],
            E = m[2],
            H = m[3],
            K = m[4];
        m = m[5];
        var M = v[0],
            P = v[1],
            R = v[2],
            T = v[3],
            Z = v[4];
        v = v[5];
        k[0] = A * M + E * P;
        k[1] = D * M + H * P;
        k[2] = A * R + E * T;
        k[3] = D * R + H * T;
        k[4] = A * Z + E * v + K;
        k[5] = D * Z + H * v + m;
        return k
    }

    function c(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        k[2] = m[2] - v[2];
        k[3] = m[3] - v[3];
        k[4] = m[4] - v[4];
        k[5] = m[5] - v[5];
        return k
    }

    function e() {
        var k = new na(9);
        na != Float32Array && (k[1] = 0, k[2] = 0, k[3] = 0, k[5] = 0, k[6] = 0, k[7] = 0);
        k[0] = 1;
        k[4] = 1;
        k[8] = 1;
        return k
    }

    function g(k, m, v) {
        var A = m[0],
            D = m[1],
            E = m[2],
            H = m[3],
            K = m[4],
            M = m[5],
            P = m[6],
            R = m[7];
        m = m[8];
        var T = v[0],
            Z = v[1],
            V = v[2],
            da = v[3],
            ca = v[4],
            aa = v[5],
            ra = v[6],
            ma =
            v[7];
        v = v[8];
        k[0] = T * A + Z * H + V * P;
        k[1] = T * D + Z * K + V * R;
        k[2] = T * E + Z * M + V * m;
        k[3] = da * A + ca * H + aa * P;
        k[4] = da * D + ca * K + aa * R;
        k[5] = da * E + ca * M + aa * m;
        k[6] = ra * A + ma * H + v * P;
        k[7] = ra * D + ma * K + v * R;
        k[8] = ra * E + ma * M + v * m;
        return k
    }

    function h(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        k[2] = m[2] - v[2];
        k[3] = m[3] - v[3];
        k[4] = m[4] - v[4];
        k[5] = m[5] - v[5];
        k[6] = m[6] - v[6];
        k[7] = m[7] - v[7];
        k[8] = m[8] - v[8];
        return k
    }

    function l(k) {
        k[0] = 1;
        k[1] = 0;
        k[2] = 0;
        k[3] = 0;
        k[4] = 0;
        k[5] = 1;
        k[6] = 0;
        k[7] = 0;
        k[8] = 0;
        k[9] = 0;
        k[10] = 1;
        k[11] = 0;
        k[12] = 0;
        k[13] = 0;
        k[14] = 0;
        k[15] = 1;
        return k
    }

    function n(k,
        m, v) {
        var A = m[0],
            D = m[1],
            E = m[2],
            H = m[3],
            K = m[4],
            M = m[5],
            P = m[6],
            R = m[7],
            T = m[8],
            Z = m[9],
            V = m[10],
            da = m[11],
            ca = m[12],
            aa = m[13],
            ra = m[14];
        m = m[15];
        var ma = v[0],
            pa = v[1],
            qa = v[2],
            oa = v[3];
        k[0] = ma * A + pa * K + qa * T + oa * ca;
        k[1] = ma * D + pa * M + qa * Z + oa * aa;
        k[2] = ma * E + pa * P + qa * V + oa * ra;
        k[3] = ma * H + pa * R + qa * da + oa * m;
        ma = v[4];
        pa = v[5];
        qa = v[6];
        oa = v[7];
        k[4] = ma * A + pa * K + qa * T + oa * ca;
        k[5] = ma * D + pa * M + qa * Z + oa * aa;
        k[6] = ma * E + pa * P + qa * V + oa * ra;
        k[7] = ma * H + pa * R + qa * da + oa * m;
        ma = v[8];
        pa = v[9];
        qa = v[10];
        oa = v[11];
        k[8] = ma * A + pa * K + qa * T + oa * ca;
        k[9] = ma * D + pa * M + qa * Z + oa * aa;
        k[10] = ma *
            E + pa * P + qa * V + oa * ra;
        k[11] = ma * H + pa * R + qa * da + oa * m;
        ma = v[12];
        pa = v[13];
        qa = v[14];
        oa = v[15];
        k[12] = ma * A + pa * K + qa * T + oa * ca;
        k[13] = ma * D + pa * M + qa * Z + oa * aa;
        k[14] = ma * E + pa * P + qa * V + oa * ra;
        k[15] = ma * H + pa * R + qa * da + oa * m;
        return k
    }

    function q(k, m, v) {
        var A = m[0],
            D = m[1],
            E = m[2],
            H = m[3],
            K = A + A,
            M = D + D,
            P = E + E;
        m = A * K;
        var R = A * M;
        A *= P;
        var T = D * M;
        D *= P;
        E *= P;
        K *= H;
        M *= H;
        H *= P;
        k[0] = 1 - (T + E);
        k[1] = R + H;
        k[2] = A - M;
        k[3] = 0;
        k[4] = R - H;
        k[5] = 1 - (m + E);
        k[6] = D + K;
        k[7] = 0;
        k[8] = A + M;
        k[9] = D - K;
        k[10] = 1 - (m + T);
        k[11] = 0;
        k[12] = v[0];
        k[13] = v[1];
        k[14] = v[2];
        k[15] = 1;
        return k
    }

    function y(k,
        m) {
        k[0] = m[12];
        k[1] = m[13];
        k[2] = m[14];
        return k
    }

    function w(k, m) {
        var v = m[4],
            A = m[5],
            D = m[6],
            E = m[8],
            H = m[9],
            K = m[10];
        k[0] = Math.hypot(m[0], m[1], m[2]);
        k[1] = Math.hypot(v, A, D);
        k[2] = Math.hypot(E, H, K);
        return k
    }

    function u(k, m) {
        var v = new na(3);
        w(v, m);
        var A = 1 / v[0],
            D = 1 / v[1],
            E = 1 / v[2],
            H = m[0] * A;
        v = m[1] * D;
        var K = m[2] * E,
            M = m[4] * A,
            P = m[5] * D,
            R = m[6] * E;
        A *= m[8];
        D *= m[9];
        m = m[10] * E;
        E = H + P + m;
        0 < E ? (H = 2 * Math.sqrt(E + 1), k[3] = .25 * H, k[0] = (R - D) / H, k[1] = (A - K) / H, k[2] = (v - M) / H) : H > P && H > m ? (H = 2 * Math.sqrt(1 + H - P - m), k[3] = (R - D) / H, k[0] = .25 * H, k[1] = (v + M) / H,
            k[2] = (A + K) / H) : P > m ? (H = 2 * Math.sqrt(1 + P - H - m), k[3] = (A - K) / H, k[0] = (v + M) / H, k[1] = .25 * H, k[2] = (R + D) / H) : (H = 2 * Math.sqrt(1 + m - H - P), k[3] = (v - M) / H, k[0] = (A + K) / H, k[1] = (R + D) / H, k[2] = .25 * H);
        return k
    }

    function p(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        k[2] = m[2] - v[2];
        k[3] = m[3] - v[3];
        k[4] = m[4] - v[4];
        k[5] = m[5] - v[5];
        k[6] = m[6] - v[6];
        k[7] = m[7] - v[7];
        k[8] = m[8] - v[8];
        k[9] = m[9] - v[9];
        k[10] = m[10] - v[10];
        k[11] = m[11] - v[11];
        k[12] = m[12] - v[12];
        k[13] = m[13] - v[13];
        k[14] = m[14] - v[14];
        k[15] = m[15] - v[15];
        return k
    }

    function x() {
        var k = new na(3);
        na != Float32Array &&
            (k[0] = 0, k[1] = 0, k[2] = 0);
        return k
    }

    function t(k) {
        return Math.hypot(k[0], k[1], k[2])
    }

    function r(k, m, v) {
        var A = new na(3);
        A[0] = k;
        A[1] = m;
        A[2] = v;
        return A
    }

    function B(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        k[2] = m[2] - v[2];
        return k
    }

    function z(k, m, v) {
        k[0] = m[0] * v[0];
        k[1] = m[1] * v[1];
        k[2] = m[2] * v[2];
        return k
    }

    function C(k, m, v) {
        k[0] = m[0] / v[0];
        k[1] = m[1] / v[1];
        k[2] = m[2] / v[2];
        return k
    }

    function F(k, m) {
        return Math.hypot(m[0] - k[0], m[1] - k[1], m[2] - k[2])
    }

    function J(k, m) {
        var v = m[0] - k[0],
            A = m[1] - k[1];
        k = m[2] - k[2];
        return v * v + A * A + k * k
    }

    function G(k) {
        var m =
            k[0],
            v = k[1];
        k = k[2];
        return m * m + v * v + k * k
    }

    function I(k, m) {
        var v = m[0],
            A = m[1],
            D = m[2];
        v = v * v + A * A + D * D;
        0 < v && (v = 1 / Math.sqrt(v));
        k[0] = m[0] * v;
        k[1] = m[1] * v;
        k[2] = m[2] * v;
        return k
    }

    function L(k, m) {
        return k[0] * m[0] + k[1] * m[1] + k[2] * m[2]
    }

    function N(k, m, v) {
        var A = m[0],
            D = m[1];
        m = m[2];
        var E = v[0],
            H = v[1];
        v = v[2];
        k[0] = D * v - m * H;
        k[1] = m * E - A * v;
        k[2] = A * H - D * E;
        return k
    }

    function S() {
        var k = new na(4);
        na != Float32Array && (k[0] = 0, k[1] = 0, k[2] = 0, k[3] = 0);
        return k
    }

    function X(k) {
        var m = new na(4);
        m[0] = k[0];
        m[1] = k[1];
        m[2] = k[2];
        m[3] = k[3];
        return m
    }

    function U(k,
        m, v, A) {
        var D = new na(4);
        D[0] = k;
        D[1] = m;
        D[2] = v;
        D[3] = A;
        return D
    }

    function W(k, m) {
        k[0] = m[0];
        k[1] = m[1];
        k[2] = m[2];
        k[3] = m[3];
        return k
    }

    function ia(k, m, v, A, D) {
        k[0] = m;
        k[1] = v;
        k[2] = A;
        k[3] = D;
        return k
    }

    function ka(k, m, v) {
        k[0] = m[0] + v[0];
        k[1] = m[1] + v[1];
        k[2] = m[2] + v[2];
        k[3] = m[3] + v[3];
        return k
    }

    function ya(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        k[2] = m[2] - v[2];
        k[3] = m[3] - v[3];
        return k
    }

    function ta(k, m, v) {
        k[0] = m[0] * v[0];
        k[1] = m[1] * v[1];
        k[2] = m[2] * v[2];
        k[3] = m[3] * v[3];
        return k
    }

    function Ba(k, m, v) {
        k[0] = m[0] / v[0];
        k[1] = m[1] / v[1];
        k[2] =
            m[2] / v[2];
        k[3] = m[3] / v[3];
        return k
    }

    function Ea(k, m, v) {
        k[0] = m[0] * v;
        k[1] = m[1] * v;
        k[2] = m[2] * v;
        k[3] = m[3] * v;
        return k
    }

    function Ca(k, m) {
        return Math.hypot(m[0] - k[0], m[1] - k[1], m[2] - k[2], m[3] - k[3])
    }

    function Aa(k, m) {
        var v = m[0] - k[0],
            A = m[1] - k[1],
            D = m[2] - k[2];
        k = m[3] - k[3];
        return v * v + A * A + D * D + k * k
    }

    function ja(k) {
        return Math.hypot(k[0], k[1], k[2], k[3])
    }

    function Fa(k) {
        var m = k[0],
            v = k[1],
            A = k[2];
        k = k[3];
        return m * m + v * v + A * A + k * k
    }

    function wa(k, m) {
        var v = m[0],
            A = m[1],
            D = m[2];
        m = m[3];
        var E = v * v + A * A + D * D + m * m;
        0 < E && (E = 1 / Math.sqrt(E));
        k[0] =
            v * E;
        k[1] = A * E;
        k[2] = D * E;
        k[3] = m * E;
        return k
    }

    function Da(k, m) {
        return k[0] * m[0] + k[1] * m[1] + k[2] * m[2] + k[3] * m[3]
    }

    function Pa(k, m, v, A) {
        var D = m[0],
            E = m[1],
            H = m[2];
        m = m[3];
        k[0] = D + A * (v[0] - D);
        k[1] = E + A * (v[1] - E);
        k[2] = H + A * (v[2] - H);
        k[3] = m + A * (v[3] - m);
        return k
    }

    function Qa(k, m) {
        return k[0] === m[0] && k[1] === m[1] && k[2] === m[2] && k[3] === m[3]
    }

    function Ra(k, m) {
        var v = k[0],
            A = k[1],
            D = k[2];
        k = k[3];
        var E = m[0],
            H = m[1],
            K = m[2];
        m = m[3];
        return Math.abs(v - E) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(E)) && Math.abs(A - H) <= 1E-6 * Math.max(1, Math.abs(A),
            Math.abs(H)) && Math.abs(D - K) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(K)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
    }

    function Ja() {
        var k = new na(4);
        na != Float32Array && (k[0] = 0, k[1] = 0, k[2] = 0);
        k[3] = 1;
        return k
    }

    function Sa(k, m, v) {
        v *= .5;
        var A = Math.sin(v);
        k[0] = A * m[0];
        k[1] = A * m[1];
        k[2] = A * m[2];
        k[3] = Math.cos(v);
        return k
    }

    function Ta(k, m, v) {
        var A = m[0],
            D = m[1],
            E = m[2];
        m = m[3];
        var H = v[0],
            K = v[1],
            M = v[2];
        v = v[3];
        k[0] = A * v + m * H + D * M - E * K;
        k[1] = D * v + m * K + E * H - A * M;
        k[2] = E * v + m * M + A * K - D * H;
        k[3] = m * v - A * H - D * K - E * M;
        return k
    }

    function Ua(k,
        m, v) {
        v *= .5;
        var A = m[0],
            D = m[1],
            E = m[2];
        m = m[3];
        var H = Math.sin(v);
        v = Math.cos(v);
        k[0] = A * v + m * H;
        k[1] = D * v + E * H;
        k[2] = E * v - D * H;
        k[3] = m * v - A * H;
        return k
    }

    function Va(k, m, v) {
        v *= .5;
        var A = m[0],
            D = m[1],
            E = m[2];
        m = m[3];
        var H = Math.sin(v);
        v = Math.cos(v);
        k[0] = A * v - E * H;
        k[1] = D * v + m * H;
        k[2] = E * v + A * H;
        k[3] = m * v - D * H;
        return k
    }

    function Wa(k, m, v) {
        v *= .5;
        var A = m[0],
            D = m[1],
            E = m[2];
        m = m[3];
        var H = Math.sin(v);
        v = Math.cos(v);
        k[0] = A * v + D * H;
        k[1] = D * v - A * H;
        k[2] = E * v + m * H;
        k[3] = m * v - E * H;
        return k
    }

    function Xa(k, m) {
        var v = m[0],
            A = m[1],
            D = m[2],
            E = Math.sqrt(v * v + A * A + D * D);
        m = Math.exp(m[3]);
        var H = 0 < E ? m * Math.sin(E) / E : 0;
        k[0] = v * H;
        k[1] = A * H;
        k[2] = D * H;
        k[3] = m * Math.cos(E);
        return k
    }

    function Ya(k, m) {
        var v = m[0],
            A = m[1],
            D = m[2];
        m = m[3];
        var E = Math.sqrt(v * v + A * A + D * D);
        E = 0 < E ? Math.atan2(E, m) / E : 0;
        k[0] = v * E;
        k[1] = A * E;
        k[2] = D * E;
        k[3] = .5 * Math.log(v * v + A * A + D * D + m * m);
        return k
    }

    function Ka(k, m, v, A) {
        var D = m[0],
            E = m[1],
            H = m[2];
        m = m[3];
        var K = v[0],
            M = v[1],
            P = v[2];
        v = v[3];
        var R = D * K + E * M + H * P + m * v;
        0 > R && (R = -R, K = -K, M = -M, P = -P, v = -v);
        if (1E-6 < 1 - R) {
            var T = Math.acos(R);
            var Z = Math.sin(T);
            R = Math.sin((1 - A) * T) / Z;
            A = Math.sin(A * T) /
                Z
        } else R = 1 - A;
        k[0] = R * D + A * K;
        k[1] = R * E + A * M;
        k[2] = R * H + A * P;
        k[3] = R * m + A * v;
        return k
    }

    function Za(k, m) {
        var v = m[0] + m[4] + m[8];
        if (0 < v) v = Math.sqrt(v + 1), k[3] = .5 * v, v = .5 / v, k[0] = (m[5] - m[7]) * v, k[1] = (m[6] - m[2]) * v, k[2] = (m[1] - m[3]) * v;
        else {
            var A = 0;
            m[4] > m[0] && (A = 1);
            m[8] > m[3 * A + A] && (A = 2);
            var D = (A + 1) % 3,
                E = (A + 2) % 3;
            v = Math.sqrt(m[3 * A + A] - m[3 * D + D] - m[3 * E + E] + 1);
            k[A] = .5 * v;
            v = .5 / v;
            k[3] = (m[3 * D + E] - m[3 * E + D]) * v;
            k[D] = (m[3 * D + A] + m[3 * A + D]) * v;
            k[E] = (m[3 * E + A] + m[3 * A + E]) * v
        }
        return k
    }

    function $a(k, m, v) {
        var A = .5 * v[0],
            D = .5 * v[1];
        v = .5 * v[2];
        var E = m[0],
            H = m[1],
            K = m[2];
        m = m[3];
        k[0] = E;
        k[1] = H;
        k[2] = K;
        k[3] = m;
        k[4] = A * m + D * K - v * H;
        k[5] = D * m + v * E - A * K;
        k[6] = v * m + A * H - D * E;
        k[7] = -A * E - D * H - v * K;
        return k
    }

    function ab(k, m) {
        k[0] = m[0];
        k[1] = m[1];
        k[2] = m[2];
        k[3] = m[3];
        k[4] = m[4];
        k[5] = m[5];
        k[6] = m[6];
        k[7] = m[7];
        return k
    }

    function bb(k, m, v) {
        var A = m[0],
            D = m[1],
            E = m[2],
            H = m[3],
            K = v[4],
            M = v[5],
            P = v[6],
            R = v[7],
            T = m[4],
            Z = m[5],
            V = m[6];
        m = m[7];
        var da = v[0],
            ca = v[1],
            aa = v[2];
        v = v[3];
        k[0] = A * v + H * da + D * aa - E * ca;
        k[1] = D * v + H * ca + E * da - A * aa;
        k[2] = E * v + H * aa + A * ca - D * da;
        k[3] = H * v - A * da - D * ca - E * aa;
        k[4] = A * R + H * K + D * P - E * M + T * v + m * da + Z * aa - V *
            ca;
        k[5] = D * R + H * M + E * K - A * P + Z * v + m * ca + V * da - T * aa;
        k[6] = E * R + H * P + A * M - D * K + V * v + m * aa + T * ca - Z * da;
        k[7] = H * R - A * K - D * M - E * P + m * v - T * da - Z * ca - V * aa;
        return k
    }

    function cb() {
        var k = new na(2);
        na != Float32Array && (k[0] = 0, k[1] = 0);
        return k
    }

    function db(k, m, v) {
        k[0] = m[0] - v[0];
        k[1] = m[1] - v[1];
        return k
    }

    function eb(k, m, v) {
        k[0] = m[0] * v[0];
        k[1] = m[1] * v[1];
        return k
    }

    function fb(k, m, v) {
        k[0] = m[0] / v[0];
        k[1] = m[1] / v[1];
        return k
    }

    function gb(k, m) {
        return Math.hypot(m[0] - k[0], m[1] - k[1])
    }

    function hb(k, m) {
        var v = m[0] - k[0];
        k = m[1] - k[1];
        return v * v + k * k
    }

    function ib(k) {
        return Math.hypot(k[0],
            k[1])
    }

    function jb(k) {
        var m = k[0];
        k = k[1];
        return m * m + k * k
    }
    var na = "undefined" !== typeof Float32Array ? Float32Array : Array,
        Ga = Math.random,
        kb = Math.PI / 180;
    Math.hypot || (Math.hypot = function() {
        for (var k = 0, m = arguments.length; m--;) k += arguments[m] * arguments[m];
        return Math.sqrt(k)
    });
    var lb = Object.freeze({
            __proto__: null,
            EPSILON: 1E-6,
            get ARRAY_TYPE() {
                return na
            },
            RANDOM: Ga,
            setMatrixArrayType: function(k) {
                na = k
            },
            toRadian: function(k) {
                return k * kb
            },
            equals: function(k, m) {
                return Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
            }
        }),
        mb = Object.freeze({
            __proto__: null,
            create: function() {
                var k = new na(4);
                na != Float32Array && (k[1] = 0, k[2] = 0);
                k[0] = 1;
                k[3] = 1;
                return k
            },
            clone: function(k) {
                var m = new na(4);
                m[0] = k[0];
                m[1] = k[1];
                m[2] = k[2];
                m[3] = k[3];
                return m
            },
            copy: function(k, m) {
                k[0] = m[0];
                k[1] = m[1];
                k[2] = m[2];
                k[3] = m[3];
                return k
            },
            identity: function(k) {
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 1;
                return k
            },
            fromValues: function(k, m, v, A) {
                var D = new na(4);
                D[0] = k;
                D[1] = m;
                D[2] = v;
                D[3] = A;
                return D
            },
            set: function(k, m, v, A, D) {
                k[0] = m;
                k[1] = v;
                k[2] = A;
                k[3] = D;
                return k
            },
            transpose: function(k,
                m) {
                if (k === m) {
                    var v = m[1];
                    k[1] = m[2];
                    k[2] = v
                } else k[0] = m[0], k[1] = m[2], k[2] = m[1], k[3] = m[3];
                return k
            },
            invert: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2];
                m = m[3];
                var E = v * m - D * A;
                if (!E) return null;
                E = 1 / E;
                k[0] = m * E;
                k[1] = -A * E;
                k[2] = -D * E;
                k[3] = v * E;
                return k
            },
            adjoint: function(k, m) {
                var v = m[0];
                k[0] = m[3];
                k[1] = -m[1];
                k[2] = -m[2];
                k[3] = v;
                return k
            },
            determinant: function(k) {
                return k[0] * k[3] - k[2] * k[1]
            },
            multiply: b,
            rotate: function(k, m, v) {
                var A = m[0],
                    D = m[1],
                    E = m[2];
                m = m[3];
                var H = Math.sin(v);
                v = Math.cos(v);
                k[0] = A * v + E * H;
                k[1] = D * v + m * H;
                k[2] = A * -H +
                    E * v;
                k[3] = D * -H + m * v;
                return k
            },
            scale: function(k, m, v) {
                var A = m[1],
                    D = m[2],
                    E = m[3],
                    H = v[0];
                v = v[1];
                k[0] = m[0] * H;
                k[1] = A * H;
                k[2] = D * v;
                k[3] = E * v;
                return k
            },
            fromRotation: function(k, m) {
                var v = Math.sin(m);
                m = Math.cos(m);
                k[0] = m;
                k[1] = v;
                k[2] = -v;
                k[3] = m;
                return k
            },
            fromScaling: function(k, m) {
                k[0] = m[0];
                k[1] = 0;
                k[2] = 0;
                k[3] = m[1];
                return k
            },
            str: function(k) {
                return "mat2(" + k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ")"
            },
            frob: function(k) {
                return Math.hypot(k[0], k[1], k[2], k[3])
            },
            LDU: function(k, m, v, A) {
                k[2] = A[2] / A[0];
                v[0] = A[0];
                v[1] = A[1];
                v[3] = A[3] - k[2] *
                    v[1];
                return [k, m, v]
            },
            add: function(k, m, v) {
                k[0] = m[0] + v[0];
                k[1] = m[1] + v[1];
                k[2] = m[2] + v[2];
                k[3] = m[3] + v[3];
                return k
            },
            subtract: a,
            exactEquals: function(k, m) {
                return k[0] === m[0] && k[1] === m[1] && k[2] === m[2] && k[3] === m[3]
            },
            equals: function(k, m) {
                var v = k[0],
                    A = k[1],
                    D = k[2];
                k = k[3];
                var E = m[0],
                    H = m[1],
                    K = m[2];
                m = m[3];
                return Math.abs(v - E) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(E)) && Math.abs(A - H) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(H)) && Math.abs(D - K) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(K)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k),
                    Math.abs(m))
            },
            multiplyScalar: function(k, m, v) {
                k[0] = m[0] * v;
                k[1] = m[1] * v;
                k[2] = m[2] * v;
                k[3] = m[3] * v;
                return k
            },
            multiplyScalarAndAdd: function(k, m, v, A) {
                k[0] = m[0] + v[0] * A;
                k[1] = m[1] + v[1] * A;
                k[2] = m[2] + v[2] * A;
                k[3] = m[3] + v[3] * A;
                return k
            },
            mul: b,
            sub: a
        }),
        nb = Object.freeze({
            __proto__: null,
            create: function() {
                var k = new na(6);
                na != Float32Array && (k[1] = 0, k[2] = 0, k[4] = 0, k[5] = 0);
                k[0] = 1;
                k[3] = 1;
                return k
            },
            clone: function(k) {
                var m = new na(6);
                m[0] = k[0];
                m[1] = k[1];
                m[2] = k[2];
                m[3] = k[3];
                m[4] = k[4];
                m[5] = k[5];
                return m
            },
            copy: function(k, m) {
                k[0] =
                    m[0];
                k[1] = m[1];
                k[2] = m[2];
                k[3] = m[3];
                k[4] = m[4];
                k[5] = m[5];
                return k
            },
            identity: function(k) {
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 1;
                k[4] = 0;
                k[5] = 0;
                return k
            },
            fromValues: function(k, m, v, A, D, E) {
                var H = new na(6);
                H[0] = k;
                H[1] = m;
                H[2] = v;
                H[3] = A;
                H[4] = D;
                H[5] = E;
                return H
            },
            set: function(k, m, v, A, D, E, H) {
                k[0] = m;
                k[1] = v;
                k[2] = A;
                k[3] = D;
                k[4] = E;
                k[5] = H;
                return k
            },
            invert: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4];
                m = m[5];
                var K = v * E - A * D;
                if (!K) return null;
                K = 1 / K;
                k[0] = E * K;
                k[1] = -A * K;
                k[2] = -D * K;
                k[3] = v * K;
                k[4] = (D * m - E * H) * K;
                k[5] = (A * H - v * m) * K;
                return k
            },
            determinant: function(k) {
                return k[0] * k[3] - k[1] * k[2]
            },
            multiply: d,
            rotate: function(k, m, v) {
                var A = m[0],
                    D = m[1],
                    E = m[2],
                    H = m[3],
                    K = m[4];
                m = m[5];
                var M = Math.sin(v);
                v = Math.cos(v);
                k[0] = A * v + E * M;
                k[1] = D * v + H * M;
                k[2] = A * -M + E * v;
                k[3] = D * -M + H * v;
                k[4] = K;
                k[5] = m;
                return k
            },
            scale: function(k, m, v) {
                var A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4],
                    K = m[5],
                    M = v[0];
                v = v[1];
                k[0] = m[0] * M;
                k[1] = A * M;
                k[2] = D * v;
                k[3] = E * v;
                k[4] = H;
                k[5] = K;
                return k
            },
            translate: function(k, m, v) {
                var A = m[0],
                    D = m[1],
                    E = m[2],
                    H = m[3],
                    K = m[4];
                m = m[5];
                var M = v[0];
                v = v[1];
                k[0] = A;
                k[1] = D;
                k[2] = E;
                k[3] = H;
                k[4] =
                    A * M + E * v + K;
                k[5] = D * M + H * v + m;
                return k
            },
            fromRotation: function(k, m) {
                var v = Math.sin(m);
                m = Math.cos(m);
                k[0] = m;
                k[1] = v;
                k[2] = -v;
                k[3] = m;
                k[4] = 0;
                k[5] = 0;
                return k
            },
            fromScaling: function(k, m) {
                k[0] = m[0];
                k[1] = 0;
                k[2] = 0;
                k[3] = m[1];
                k[4] = 0;
                k[5] = 0;
                return k
            },
            fromTranslation: function(k, m) {
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 1;
                k[4] = m[0];
                k[5] = m[1];
                return k
            },
            str: function(k) {
                return "mat2d(" + k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ", " + k[4] + ", " + k[5] + ")"
            },
            frob: function(k) {
                return Math.hypot(k[0], k[1], k[2], k[3], k[4], k[5], 1)
            },
            add: function(k, m, v) {
                k[0] =
                    m[0] + v[0];
                k[1] = m[1] + v[1];
                k[2] = m[2] + v[2];
                k[3] = m[3] + v[3];
                k[4] = m[4] + v[4];
                k[5] = m[5] + v[5];
                return k
            },
            subtract: c,
            multiplyScalar: function(k, m, v) {
                k[0] = m[0] * v;
                k[1] = m[1] * v;
                k[2] = m[2] * v;
                k[3] = m[3] * v;
                k[4] = m[4] * v;
                k[5] = m[5] * v;
                return k
            },
            multiplyScalarAndAdd: function(k, m, v, A) {
                k[0] = m[0] + v[0] * A;
                k[1] = m[1] + v[1] * A;
                k[2] = m[2] + v[2] * A;
                k[3] = m[3] + v[3] * A;
                k[4] = m[4] + v[4] * A;
                k[5] = m[5] + v[5] * A;
                return k
            },
            exactEquals: function(k, m) {
                return k[0] === m[0] && k[1] === m[1] && k[2] === m[2] && k[3] === m[3] && k[4] === m[4] && k[5] === m[5]
            },
            equals: function(k, m) {
                var v =
                    k[0],
                    A = k[1],
                    D = k[2],
                    E = k[3],
                    H = k[4];
                k = k[5];
                var K = m[0],
                    M = m[1],
                    P = m[2],
                    R = m[3],
                    T = m[4];
                m = m[5];
                return Math.abs(v - K) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(K)) && Math.abs(A - M) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(M)) && Math.abs(D - P) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(P)) && Math.abs(E - R) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(R)) && Math.abs(H - T) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(T)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
            },
            mul: d,
            sub: c
        }),
        ob = Object.freeze({
            __proto__: null,
            create: e,
            fromMat4: function(k,
                m) {
                k[0] = m[0];
                k[1] = m[1];
                k[2] = m[2];
                k[3] = m[4];
                k[4] = m[5];
                k[5] = m[6];
                k[6] = m[8];
                k[7] = m[9];
                k[8] = m[10];
                return k
            },
            clone: function(k) {
                var m = new na(9);
                m[0] = k[0];
                m[1] = k[1];
                m[2] = k[2];
                m[3] = k[3];
                m[4] = k[4];
                m[5] = k[5];
                m[6] = k[6];
                m[7] = k[7];
                m[8] = k[8];
                return m
            },
            copy: function(k, m) {
                k[0] = m[0];
                k[1] = m[1];
                k[2] = m[2];
                k[3] = m[3];
                k[4] = m[4];
                k[5] = m[5];
                k[6] = m[6];
                k[7] = m[7];
                k[8] = m[8];
                return k
            },
            fromValues: function(k, m, v, A, D, E, H, K, M) {
                var P = new na(9);
                P[0] = k;
                P[1] = m;
                P[2] = v;
                P[3] = A;
                P[4] = D;
                P[5] = E;
                P[6] = H;
                P[7] = K;
                P[8] = M;
                return P
            },
            set: function(k, m,
                v, A, D, E, H, K, M, P) {
                k[0] = m;
                k[1] = v;
                k[2] = A;
                k[3] = D;
                k[4] = E;
                k[5] = H;
                k[6] = K;
                k[7] = M;
                k[8] = P;
                return k
            },
            identity: function(k) {
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 1;
                k[5] = 0;
                k[6] = 0;
                k[7] = 0;
                k[8] = 1;
                return k
            },
            transpose: function(k, m) {
                if (k === m) {
                    var v = m[1],
                        A = m[2],
                        D = m[5];
                    k[1] = m[3];
                    k[2] = m[6];
                    k[3] = v;
                    k[5] = m[7];
                    k[6] = A;
                    k[7] = D
                } else k[0] = m[0], k[1] = m[3], k[2] = m[6], k[3] = m[1], k[4] = m[4], k[5] = m[7], k[6] = m[2], k[7] = m[5], k[8] = m[8];
                return k
            },
            invert: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4],
                    K = m[5],
                    M = m[6],
                    P = m[7];
                m = m[8];
                var R = m * H - K * P,
                    T = -m * E + K * M,
                    Z = P * E - H * M,
                    V = v * R + A * T + D * Z;
                if (!V) return null;
                V = 1 / V;
                k[0] = R * V;
                k[1] = (-m * A + D * P) * V;
                k[2] = (K * A - D * H) * V;
                k[3] = T * V;
                k[4] = (m * v - D * M) * V;
                k[5] = (-K * v + D * E) * V;
                k[6] = Z * V;
                k[7] = (-P * v + A * M) * V;
                k[8] = (H * v - A * E) * V;
                return k
            },
            adjoint: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4],
                    K = m[5],
                    M = m[6],
                    P = m[7];
                m = m[8];
                k[0] = H * m - K * P;
                k[1] = D * P - A * m;
                k[2] = A * K - D * H;
                k[3] = K * M - E * m;
                k[4] = v * m - D * M;
                k[5] = D * E - v * K;
                k[6] = E * P - H * M;
                k[7] = A * M - v * P;
                k[8] = v * H - A * E;
                return k
            },
            determinant: function(k) {
                var m = k[3],
                    v = k[4],
                    A = k[5],
                    D = k[6],
                    E = k[7],
                    H = k[8];
                return k[0] * (H *
                    v - A * E) + k[1] * (-H * m + A * D) + k[2] * (E * m - v * D)
            },
            multiply: g,
            translate: function(k, m, v) {
                var A = m[0],
                    D = m[1],
                    E = m[2],
                    H = m[3],
                    K = m[4],
                    M = m[5],
                    P = m[6],
                    R = m[7];
                m = m[8];
                var T = v[0];
                v = v[1];
                k[0] = A;
                k[1] = D;
                k[2] = E;
                k[3] = H;
                k[4] = K;
                k[5] = M;
                k[6] = T * A + v * H + P;
                k[7] = T * D + v * K + R;
                k[8] = T * E + v * M + m;
                return k
            },
            rotate: function(k, m, v) {
                var A = m[0],
                    D = m[1],
                    E = m[2],
                    H = m[3],
                    K = m[4],
                    M = m[5],
                    P = m[6],
                    R = m[7];
                m = m[8];
                var T = Math.sin(v);
                v = Math.cos(v);
                k[0] = v * A + T * H;
                k[1] = v * D + T * K;
                k[2] = v * E + T * M;
                k[3] = v * H - T * A;
                k[4] = v * K - T * D;
                k[5] = v * M - T * E;
                k[6] = P;
                k[7] = R;
                k[8] = m;
                return k
            },
            scale: function(k,
                m, v) {
                var A = v[0];
                v = v[1];
                k[0] = A * m[0];
                k[1] = A * m[1];
                k[2] = A * m[2];
                k[3] = v * m[3];
                k[4] = v * m[4];
                k[5] = v * m[5];
                k[6] = m[6];
                k[7] = m[7];
                k[8] = m[8];
                return k
            },
            fromTranslation: function(k, m) {
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 1;
                k[5] = 0;
                k[6] = m[0];
                k[7] = m[1];
                k[8] = 1;
                return k
            },
            fromRotation: function(k, m) {
                var v = Math.sin(m);
                m = Math.cos(m);
                k[0] = m;
                k[1] = v;
                k[2] = 0;
                k[3] = -v;
                k[4] = m;
                k[5] = 0;
                k[6] = 0;
                k[7] = 0;
                k[8] = 1;
                return k
            },
            fromScaling: function(k, m) {
                k[0] = m[0];
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = m[1];
                k[5] = 0;
                k[6] = 0;
                k[7] = 0;
                k[8] = 1;
                return k
            },
            fromMat2d: function(k,
                m) {
                k[0] = m[0];
                k[1] = m[1];
                k[2] = 0;
                k[3] = m[2];
                k[4] = m[3];
                k[5] = 0;
                k[6] = m[4];
                k[7] = m[5];
                k[8] = 1;
                return k
            },
            fromQuat: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2];
                m = m[3];
                var E = v + v,
                    H = A + A,
                    K = D + D;
                v *= E;
                var M = A * E;
                A *= H;
                var P = D * E,
                    R = D * H;
                D *= K;
                E *= m;
                H *= m;
                m *= K;
                k[0] = 1 - A - D;
                k[3] = M - m;
                k[6] = P + H;
                k[1] = M + m;
                k[4] = 1 - v - D;
                k[7] = R - E;
                k[2] = P - H;
                k[5] = R + E;
                k[8] = 1 - v - A;
                return k
            },
            normalFromMat4: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4],
                    K = m[5],
                    M = m[6],
                    P = m[7],
                    R = m[8],
                    T = m[9],
                    Z = m[10],
                    V = m[11],
                    da = m[12],
                    ca = m[13],
                    aa = m[14];
                m = m[15];
                var ra = v * K - A * H,
                    ma = v * M - D *
                    H,
                    pa = v * P - E * H,
                    qa = A * M - D * K,
                    oa = A * P - E * K,
                    za = D * P - E * M,
                    O = R * ca - T * da,
                    Q = R * aa - Z * da;
                R = R * m - V * da;
                var Y = T * aa - Z * ca;
                T = T * m - V * ca;
                Z = Z * m - V * aa;
                V = ra * Z - ma * T + pa * Y + qa * R - oa * Q + za * O;
                if (!V) return null;
                V = 1 / V;
                k[0] = (K * Z - M * T + P * Y) * V;
                k[1] = (M * R - H * Z - P * Q) * V;
                k[2] = (H * T - K * R + P * O) * V;
                k[3] = (D * T - A * Z - E * Y) * V;
                k[4] = (v * Z - D * R + E * Q) * V;
                k[5] = (A * R - v * T - E * O) * V;
                k[6] = (ca * za - aa * oa + m * qa) * V;
                k[7] = (aa * pa - da * za - m * ma) * V;
                k[8] = (da * oa - ca * pa + m * ra) * V;
                return k
            },
            projection: function(k, m, v) {
                k[0] = 2 / m;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = -2 / v;
                k[5] = 0;
                k[6] = -1;
                k[7] = 1;
                k[8] = 1;
                return k
            },
            str: function(k) {
                return "mat3(" +
                    k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ", " + k[4] + ", " + k[5] + ", " + k[6] + ", " + k[7] + ", " + k[8] + ")"
            },
            frob: function(k) {
                return Math.hypot(k[0], k[1], k[2], k[3], k[4], k[5], k[6], k[7], k[8])
            },
            add: function(k, m, v) {
                k[0] = m[0] + v[0];
                k[1] = m[1] + v[1];
                k[2] = m[2] + v[2];
                k[3] = m[3] + v[3];
                k[4] = m[4] + v[4];
                k[5] = m[5] + v[5];
                k[6] = m[6] + v[6];
                k[7] = m[7] + v[7];
                k[8] = m[8] + v[8];
                return k
            },
            subtract: h,
            multiplyScalar: function(k, m, v) {
                k[0] = m[0] * v;
                k[1] = m[1] * v;
                k[2] = m[2] * v;
                k[3] = m[3] * v;
                k[4] = m[4] * v;
                k[5] = m[5] * v;
                k[6] = m[6] * v;
                k[7] = m[7] * v;
                k[8] = m[8] * v;
                return k
            },
            multiplyScalarAndAdd: function(k,
                m, v, A) {
                k[0] = m[0] + v[0] * A;
                k[1] = m[1] + v[1] * A;
                k[2] = m[2] + v[2] * A;
                k[3] = m[3] + v[3] * A;
                k[4] = m[4] + v[4] * A;
                k[5] = m[5] + v[5] * A;
                k[6] = m[6] + v[6] * A;
                k[7] = m[7] + v[7] * A;
                k[8] = m[8] + v[8] * A;
                return k
            },
            exactEquals: function(k, m) {
                return k[0] === m[0] && k[1] === m[1] && k[2] === m[2] && k[3] === m[3] && k[4] === m[4] && k[5] === m[5] && k[6] === m[6] && k[7] === m[7] && k[8] === m[8]
            },
            equals: function(k, m) {
                var v = k[0],
                    A = k[1],
                    D = k[2],
                    E = k[3],
                    H = k[4],
                    K = k[5],
                    M = k[6],
                    P = k[7];
                k = k[8];
                var R = m[0],
                    T = m[1],
                    Z = m[2],
                    V = m[3],
                    da = m[4],
                    ca = m[5],
                    aa = m[6],
                    ra = m[7];
                m = m[8];
                return Math.abs(v - R) <=
                    1E-6 * Math.max(1, Math.abs(v), Math.abs(R)) && Math.abs(A - T) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(T)) && Math.abs(D - Z) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(Z)) && Math.abs(E - V) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(V)) && Math.abs(H - da) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(da)) && Math.abs(K - ca) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(ca)) && Math.abs(M - aa) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(aa)) && Math.abs(P - ra) <= 1E-6 * Math.max(1, Math.abs(P), Math.abs(ra)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
            },
            mul: g,
            sub: h
        }),
        pb = Object.freeze({
            __proto__: null,
            create: function() {
                var k = new na(16);
                na != Float32Array && (k[1] = 0, k[2] = 0, k[3] = 0, k[4] = 0, k[6] = 0, k[7] = 0, k[8] = 0, k[9] = 0, k[11] = 0, k[12] = 0, k[13] = 0, k[14] = 0);
                k[0] = 1;
                k[5] = 1;
                k[10] = 1;
                k[15] = 1;
                return k
            },
            clone: function(k) {
                var m = new na(16);
                m[0] = k[0];
                m[1] = k[1];
                m[2] = k[2];
                m[3] = k[3];
                m[4] = k[4];
                m[5] = k[5];
                m[6] = k[6];
                m[7] = k[7];
                m[8] = k[8];
                m[9] = k[9];
                m[10] = k[10];
                m[11] = k[11];
                m[12] = k[12];
                m[13] = k[13];
                m[14] = k[14];
                m[15] = k[15];
                return m
            },
            copy: function(k, m) {
                k[0] = m[0];
                k[1] = m[1];
                k[2] = m[2];
                k[3] =
                    m[3];
                k[4] = m[4];
                k[5] = m[5];
                k[6] = m[6];
                k[7] = m[7];
                k[8] = m[8];
                k[9] = m[9];
                k[10] = m[10];
                k[11] = m[11];
                k[12] = m[12];
                k[13] = m[13];
                k[14] = m[14];
                k[15] = m[15];
                return k
            },
            fromValues: function(k, m, v, A, D, E, H, K, M, P, R, T, Z, V, da, ca) {
                var aa = new na(16);
                aa[0] = k;
                aa[1] = m;
                aa[2] = v;
                aa[3] = A;
                aa[4] = D;
                aa[5] = E;
                aa[6] = H;
                aa[7] = K;
                aa[8] = M;
                aa[9] = P;
                aa[10] = R;
                aa[11] = T;
                aa[12] = Z;
                aa[13] = V;
                aa[14] = da;
                aa[15] = ca;
                return aa
            },
            set: function(k, m, v, A, D, E, H, K, M, P, R, T, Z, V, da, ca, aa) {
                k[0] = m;
                k[1] = v;
                k[2] = A;
                k[3] = D;
                k[4] = E;
                k[5] = H;
                k[6] = K;
                k[7] = M;
                k[8] = P;
                k[9] = R;
                k[10] = T;
                k[11] =
                    Z;
                k[12] = V;
                k[13] = da;
                k[14] = ca;
                k[15] = aa;
                return k
            },
            identity: l,
            transpose: function(k, m) {
                if (k === m) {
                    var v = m[1],
                        A = m[2],
                        D = m[3],
                        E = m[6],
                        H = m[7],
                        K = m[11];
                    k[1] = m[4];
                    k[2] = m[8];
                    k[3] = m[12];
                    k[4] = v;
                    k[6] = m[9];
                    k[7] = m[13];
                    k[8] = A;
                    k[9] = E;
                    k[11] = m[14];
                    k[12] = D;
                    k[13] = H;
                    k[14] = K
                } else k[0] = m[0], k[1] = m[4], k[2] = m[8], k[3] = m[12], k[4] = m[1], k[5] = m[5], k[6] = m[9], k[7] = m[13], k[8] = m[2], k[9] = m[6], k[10] = m[10], k[11] = m[14], k[12] = m[3], k[13] = m[7], k[14] = m[11], k[15] = m[15];
                return k
            },
            invert: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4],
                    K = m[5],
                    M = m[6],
                    P = m[7],
                    R = m[8],
                    T = m[9],
                    Z = m[10],
                    V = m[11],
                    da = m[12],
                    ca = m[13],
                    aa = m[14];
                m = m[15];
                var ra = v * K - A * H,
                    ma = v * M - D * H,
                    pa = v * P - E * H,
                    qa = A * M - D * K,
                    oa = A * P - E * K,
                    za = D * P - E * M,
                    O = R * ca - T * da,
                    Q = R * aa - Z * da,
                    Y = R * m - V * da,
                    ba = T * aa - Z * ca,
                    fa = T * m - V * ca,
                    ha = Z * m - V * aa,
                    ea = ra * ha - ma * fa + pa * ba + qa * Y - oa * Q + za * O;
                if (!ea) return null;
                ea = 1 / ea;
                k[0] = (K * ha - M * fa + P * ba) * ea;
                k[1] = (D * fa - A * ha - E * ba) * ea;
                k[2] = (ca * za - aa * oa + m * qa) * ea;
                k[3] = (Z * oa - T * za - V * qa) * ea;
                k[4] = (M * Y - H * ha - P * Q) * ea;
                k[5] = (v * ha - D * Y + E * Q) * ea;
                k[6] = (aa * pa - da * za - m * ma) * ea;
                k[7] = (R * za - Z * pa + V * ma) * ea;
                k[8] = (H * fa - K * Y + P *
                    O) * ea;
                k[9] = (A * Y - v * fa - E * O) * ea;
                k[10] = (da * oa - ca * pa + m * ra) * ea;
                k[11] = (T * pa - R * oa - V * ra) * ea;
                k[12] = (K * Q - H * ba - M * O) * ea;
                k[13] = (v * ba - A * Q + D * O) * ea;
                k[14] = (ca * ma - da * qa - aa * ra) * ea;
                k[15] = (R * qa - T * ma + Z * ra) * ea;
                return k
            },
            adjoint: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2],
                    E = m[3],
                    H = m[4],
                    K = m[5],
                    M = m[6],
                    P = m[7],
                    R = m[8],
                    T = m[9],
                    Z = m[10],
                    V = m[11],
                    da = m[12],
                    ca = m[13],
                    aa = m[14];
                m = m[15];
                k[0] = K * (Z * m - V * aa) - T * (M * m - P * aa) + ca * (M * V - P * Z);
                k[1] = -(A * (Z * m - V * aa) - T * (D * m - E * aa) + ca * (D * V - E * Z));
                k[2] = A * (M * m - P * aa) - K * (D * m - E * aa) + ca * (D * P - E * M);
                k[3] = -(A * (M * V - P * Z) - K * (D *
                    V - E * Z) + T * (D * P - E * M));
                k[4] = -(H * (Z * m - V * aa) - R * (M * m - P * aa) + da * (M * V - P * Z));
                k[5] = v * (Z * m - V * aa) - R * (D * m - E * aa) + da * (D * V - E * Z);
                k[6] = -(v * (M * m - P * aa) - H * (D * m - E * aa) + da * (D * P - E * M));
                k[7] = v * (M * V - P * Z) - H * (D * V - E * Z) + R * (D * P - E * M);
                k[8] = H * (T * m - V * ca) - R * (K * m - P * ca) + da * (K * V - P * T);
                k[9] = -(v * (T * m - V * ca) - R * (A * m - E * ca) + da * (A * V - E * T));
                k[10] = v * (K * m - P * ca) - H * (A * m - E * ca) + da * (A * P - E * K);
                k[11] = -(v * (K * V - P * T) - H * (A * V - E * T) + R * (A * P - E * K));
                k[12] = -(H * (T * aa - Z * ca) - R * (K * aa - M * ca) + da * (K * Z - M * T));
                k[13] = v * (T * aa - Z * ca) - R * (A * aa - D * ca) + da * (A * Z - D * T);
                k[14] = -(v * (K * aa - M * ca) - H *
                    (A * aa - D * ca) + da * (A * M - D * K));
                k[15] = v * (K * Z - M * T) - H * (A * Z - D * T) + R * (A * M - D * K);
                return k
            },
            determinant: function(k) {
                var m = k[0],
                    v = k[1],
                    A = k[2],
                    D = k[3],
                    E = k[4],
                    H = k[5],
                    K = k[6],
                    M = k[7],
                    P = k[8],
                    R = k[9],
                    T = k[10],
                    Z = k[11],
                    V = k[12],
                    da = k[13],
                    ca = k[14];
                k = k[15];
                return (m * H - v * E) * (T * k - Z * ca) - (m * K - A * E) * (R * k - Z * da) + (m * M - D * E) * (R * ca - T * da) + (v * K - A * H) * (P * k - Z * V) - (v * M - D * H) * (P * ca - T * V) + (A * M - D * K) * (P * da - R * V)
            },
            multiply: n,
            translate: function(k, m, v) {
                var A = v[0],
                    D = v[1];
                v = v[2];
                if (m === k) k[12] = m[0] * A + m[4] * D + m[8] * v + m[12], k[13] = m[1] * A + m[5] * D + m[9] * v + m[13], k[14] =
                    m[2] * A + m[6] * D + m[10] * v + m[14], k[15] = m[3] * A + m[7] * D + m[11] * v + m[15];
                else {
                    var E = m[0];
                    var H = m[1];
                    var K = m[2];
                    var M = m[3];
                    var P = m[4];
                    var R = m[5];
                    var T = m[6];
                    var Z = m[7];
                    var V = m[8];
                    var da = m[9];
                    var ca = m[10];
                    var aa = m[11];
                    k[0] = E;
                    k[1] = H;
                    k[2] = K;
                    k[3] = M;
                    k[4] = P;
                    k[5] = R;
                    k[6] = T;
                    k[7] = Z;
                    k[8] = V;
                    k[9] = da;
                    k[10] = ca;
                    k[11] = aa;
                    k[12] = E * A + P * D + V * v + m[12];
                    k[13] = H * A + R * D + da * v + m[13];
                    k[14] = K * A + T * D + ca * v + m[14];
                    k[15] = M * A + Z * D + aa * v + m[15]
                }
                return k
            },
            scale: function(k, m, v) {
                var A = v[0],
                    D = v[1];
                v = v[2];
                k[0] = m[0] * A;
                k[1] = m[1] * A;
                k[2] = m[2] * A;
                k[3] = m[3] * A;
                k[4] =
                    m[4] * D;
                k[5] = m[5] * D;
                k[6] = m[6] * D;
                k[7] = m[7] * D;
                k[8] = m[8] * v;
                k[9] = m[9] * v;
                k[10] = m[10] * v;
                k[11] = m[11] * v;
                k[12] = m[12];
                k[13] = m[13];
                k[14] = m[14];
                k[15] = m[15];
                return k
            },
            rotate: function(k, m, v, A) {
                var D = A[0],
                    E = A[1];
                A = A[2];
                var H = Math.hypot(D, E, A);
                if (1E-6 > H) return null;
                H = 1 / H;
                D *= H;
                E *= H;
                A *= H;
                var K = Math.sin(v);
                var M = Math.cos(v);
                var P = 1 - M;
                v = m[0];
                H = m[1];
                var R = m[2];
                var T = m[3];
                var Z = m[4];
                var V = m[5];
                var da = m[6];
                var ca = m[7];
                var aa = m[8];
                var ra = m[9];
                var ma = m[10];
                var pa = m[11];
                var qa = D * D * P + M;
                var oa = E * D * P + A * K;
                var za = A * D * P - E * K;
                var O =
                    D * E * P - A * K;
                var Q = E * E * P + M;
                var Y = A * E * P + D * K;
                var ba = D * A * P + E * K;
                D = E * A * P - D * K;
                E = A * A * P + M;
                k[0] = v * qa + Z * oa + aa * za;
                k[1] = H * qa + V * oa + ra * za;
                k[2] = R * qa + da * oa + ma * za;
                k[3] = T * qa + ca * oa + pa * za;
                k[4] = v * O + Z * Q + aa * Y;
                k[5] = H * O + V * Q + ra * Y;
                k[6] = R * O + da * Q + ma * Y;
                k[7] = T * O + ca * Q + pa * Y;
                k[8] = v * ba + Z * D + aa * E;
                k[9] = H * ba + V * D + ra * E;
                k[10] = R * ba + da * D + ma * E;
                k[11] = T * ba + ca * D + pa * E;
                m !== k && (k[12] = m[12], k[13] = m[13], k[14] = m[14], k[15] = m[15]);
                return k
            },
            rotateX: function(k, m, v) {
                var A = Math.sin(v);
                v = Math.cos(v);
                var D = m[4],
                    E = m[5],
                    H = m[6],
                    K = m[7],
                    M = m[8],
                    P = m[9],
                    R = m[10],
                    T = m[11];
                m !== k && (k[0] = m[0], k[1] = m[1], k[2] = m[2], k[3] = m[3], k[12] = m[12], k[13] = m[13], k[14] = m[14], k[15] = m[15]);
                k[4] = D * v + M * A;
                k[5] = E * v + P * A;
                k[6] = H * v + R * A;
                k[7] = K * v + T * A;
                k[8] = M * v - D * A;
                k[9] = P * v - E * A;
                k[10] = R * v - H * A;
                k[11] = T * v - K * A;
                return k
            },
            rotateY: function(k, m, v) {
                var A = Math.sin(v);
                v = Math.cos(v);
                var D = m[0],
                    E = m[1],
                    H = m[2],
                    K = m[3],
                    M = m[8],
                    P = m[9],
                    R = m[10],
                    T = m[11];
                m !== k && (k[4] = m[4], k[5] = m[5], k[6] = m[6], k[7] = m[7], k[12] = m[12], k[13] = m[13], k[14] = m[14], k[15] = m[15]);
                k[0] = D * v - M * A;
                k[1] = E * v - P * A;
                k[2] = H * v - R * A;
                k[3] = K * v - T * A;
                k[8] = D * A + M * v;
                k[9] = E * A +
                    P * v;
                k[10] = H * A + R * v;
                k[11] = K * A + T * v;
                return k
            },
            rotateZ: function(k, m, v) {
                var A = Math.sin(v);
                v = Math.cos(v);
                var D = m[0],
                    E = m[1],
                    H = m[2],
                    K = m[3],
                    M = m[4],
                    P = m[5],
                    R = m[6],
                    T = m[7];
                m !== k && (k[8] = m[8], k[9] = m[9], k[10] = m[10], k[11] = m[11], k[12] = m[12], k[13] = m[13], k[14] = m[14], k[15] = m[15]);
                k[0] = D * v + M * A;
                k[1] = E * v + P * A;
                k[2] = H * v + R * A;
                k[3] = K * v + T * A;
                k[4] = M * v - D * A;
                k[5] = P * v - E * A;
                k[6] = R * v - H * A;
                k[7] = T * v - K * A;
                return k
            },
            fromTranslation: function(k, m) {
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = 1;
                k[6] = 0;
                k[7] = 0;
                k[8] = 0;
                k[9] = 0;
                k[10] = 1;
                k[11] = 0;
                k[12] = m[0];
                k[13] =
                    m[1];
                k[14] = m[2];
                k[15] = 1;
                return k
            },
            fromScaling: function(k, m) {
                k[0] = m[0];
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = m[1];
                k[6] = 0;
                k[7] = 0;
                k[8] = 0;
                k[9] = 0;
                k[10] = m[2];
                k[11] = 0;
                k[12] = 0;
                k[13] = 0;
                k[14] = 0;
                k[15] = 1;
                return k
            },
            fromRotation: function(k, m, v) {
                var A = v[0],
                    D = v[1];
                v = v[2];
                var E = Math.hypot(A, D, v);
                if (1E-6 > E) return null;
                E = 1 / E;
                A *= E;
                D *= E;
                v *= E;
                E = Math.sin(m);
                m = Math.cos(m);
                var H = 1 - m;
                k[0] = A * A * H + m;
                k[1] = D * A * H + v * E;
                k[2] = v * A * H - D * E;
                k[3] = 0;
                k[4] = A * D * H - v * E;
                k[5] = D * D * H + m;
                k[6] = v * D * H + A * E;
                k[7] = 0;
                k[8] = A * v * H + D * E;
                k[9] = D * v * H - A * E;
                k[10] = v * v * H + m;
                k[11] =
                    0;
                k[12] = 0;
                k[13] = 0;
                k[14] = 0;
                k[15] = 1;
                return k
            },
            fromXRotation: function(k, m) {
                var v = Math.sin(m);
                m = Math.cos(m);
                k[0] = 1;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = m;
                k[6] = v;
                k[7] = 0;
                k[8] = 0;
                k[9] = -v;
                k[10] = m;
                k[11] = 0;
                k[12] = 0;
                k[13] = 0;
                k[14] = 0;
                k[15] = 1;
                return k
            },
            fromYRotation: function(k, m) {
                var v = Math.sin(m);
                m = Math.cos(m);
                k[0] = m;
                k[1] = 0;
                k[2] = -v;
                k[3] = 0;
                k[4] = 0;
                k[5] = 1;
                k[6] = 0;
                k[7] = 0;
                k[8] = v;
                k[9] = 0;
                k[10] = m;
                k[11] = 0;
                k[12] = 0;
                k[13] = 0;
                k[14] = 0;
                k[15] = 1;
                return k
            },
            fromZRotation: function(k, m) {
                var v = Math.sin(m);
                m = Math.cos(m);
                k[0] = m;
                k[1] = v;
                k[2] =
                    0;
                k[3] = 0;
                k[4] = -v;
                k[5] = m;
                k[6] = 0;
                k[7] = 0;
                k[8] = 0;
                k[9] = 0;
                k[10] = 1;
                k[11] = 0;
                k[12] = 0;
                k[13] = 0;
                k[14] = 0;
                k[15] = 1;
                return k
            },
            fromRotationTranslation: q,
            fromQuat2: function(k, m) {
                var v = new na(3),
                    A = -m[0],
                    D = -m[1],
                    E = -m[2],
                    H = m[3],
                    K = m[4],
                    M = m[5],
                    P = m[6],
                    R = m[7],
                    T = A * A + D * D + E * E + H * H;
                0 < T ? (v[0] = 2 * (K * H + R * A + M * E - P * D) / T, v[1] = 2 * (M * H + R * D + P * A - K * E) / T, v[2] = 2 * (P * H + R * E + K * D - M * A) / T) : (v[0] = 2 * (K * H + R * A + M * E - P * D), v[1] = 2 * (M * H + R * D + P * A - K * E), v[2] = 2 * (P * H + R * E + K * D - M * A));
                q(k, m, v);
                return k
            },
            getTranslation: y,
            getScaling: w,
            getRotation: u,
            fromRotationTranslationScale: function(k,
                m, v, A) {
                var D = m[0],
                    E = m[1],
                    H = m[2],
                    K = m[3],
                    M = D + D,
                    P = E + E,
                    R = H + H;
                m = D * M;
                var T = D * P;
                D *= R;
                var Z = E * P;
                E *= R;
                H *= R;
                M *= K;
                P *= K;
                K *= R;
                R = A[0];
                var V = A[1];
                A = A[2];
                k[0] = (1 - (Z + H)) * R;
                k[1] = (T + K) * R;
                k[2] = (D - P) * R;
                k[3] = 0;
                k[4] = (T - K) * V;
                k[5] = (1 - (m + H)) * V;
                k[6] = (E + M) * V;
                k[7] = 0;
                k[8] = (D + P) * A;
                k[9] = (E - M) * A;
                k[10] = (1 - (m + Z)) * A;
                k[11] = 0;
                k[12] = v[0];
                k[13] = v[1];
                k[14] = v[2];
                k[15] = 1;
                return k
            },
            fromRotationTranslationScaleOrigin: function(k, m, v, A, D) {
                var E = m[0],
                    H = m[1],
                    K = m[2],
                    M = m[3],
                    P = E + E,
                    R = H + H,
                    T = K + K;
                m = E * P;
                var Z = E * R,
                    V = E * T;
                E = H * R;
                H *= T;
                var da = K * T;
                K = M * P;
                R *= M;
                var ca = M * T,
                    aa = A[0],
                    ra = A[1];
                T = A[2];
                A = D[0];
                M = D[1];
                D = D[2];
                P = (1 - (E + da)) * aa;
                var ma = (Z + ca) * aa;
                aa *= V - R;
                Z = (Z - ca) * ra;
                da = (1 - (m + da)) * ra;
                ra *= H + K;
                V = (V + R) * T;
                H = (H - K) * T;
                m = (1 - (m + E)) * T;
                k[0] = P;
                k[1] = ma;
                k[2] = aa;
                k[3] = 0;
                k[4] = Z;
                k[5] = da;
                k[6] = ra;
                k[7] = 0;
                k[8] = V;
                k[9] = H;
                k[10] = m;
                k[11] = 0;
                k[12] = v[0] + A - (P * A + Z * M + V * D);
                k[13] = v[1] + M - (ma * A + da * M + H * D);
                k[14] = v[2] + D - (aa * A + ra * M + m * D);
                k[15] = 1;
                return k
            },
            fromQuat: function(k, m) {
                var v = m[0],
                    A = m[1],
                    D = m[2];
                m = m[3];
                var E = v + v,
                    H = A + A,
                    K = D + D;
                v *= E;
                var M = A * E;
                A *= H;
                var P = D * E,
                    R = D * H;
                D *= K;
                E *= m;
                H *= m;
                m *= K;
                k[0] = 1 - A -
                    D;
                k[1] = M + m;
                k[2] = P - H;
                k[3] = 0;
                k[4] = M - m;
                k[5] = 1 - v - D;
                k[6] = R + E;
                k[7] = 0;
                k[8] = P + H;
                k[9] = R - E;
                k[10] = 1 - v - A;
                k[11] = 0;
                k[12] = 0;
                k[13] = 0;
                k[14] = 0;
                k[15] = 1;
                return k
            },
            frustum: function(k, m, v, A, D, E, H) {
                var K = 1 / (v - m),
                    M = 1 / (D - A),
                    P = 1 / (E - H);
                k[0] = 2 * E * K;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = 2 * E * M;
                k[6] = 0;
                k[7] = 0;
                k[8] = (v + m) * K;
                k[9] = (D + A) * M;
                k[10] = (H + E) * P;
                k[11] = -1;
                k[12] = 0;
                k[13] = 0;
                k[14] = H * E * 2 * P;
                k[15] = 0;
                return k
            },
            perspective: function(k, m, v, A, D) {
                m = 1 / Math.tan(m / 2);
                k[0] = m / v;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = m;
                k[6] = 0;
                k[7] = 0;
                k[8] = 0;
                k[9] = 0;
                k[11] = -1;
                k[12] = 0;
                k[13] = 0;
                k[15] = 0;
                null != D && Infinity !== D ? (v = 1 / (A - D), k[10] = (D + A) * v, k[14] = 2 * D * A * v) : (k[10] = -1, k[14] = -2 * A);
                return k
            },
            perspectiveFromFieldOfView: function(k, m, v, A) {
                var D = Math.tan(m.upDegrees * Math.PI / 180),
                    E = Math.tan(m.downDegrees * Math.PI / 180),
                    H = Math.tan(m.leftDegrees * Math.PI / 180);
                m = Math.tan(m.rightDegrees * Math.PI / 180);
                var K = 2 / (H + m),
                    M = 2 / (D + E);
                k[0] = K;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = M;
                k[6] = 0;
                k[7] = 0;
                k[8] = -((H - m) * K * .5);
                k[9] = (D - E) * M * .5;
                k[10] = A / (v - A);
                k[11] = -1;
                k[12] = 0;
                k[13] = 0;
                k[14] = A * v / (v - A);
                k[15] = 0;
                return k
            },
            ortho: function(k, m, v, A, D, E, H) {
                var K = 1 / (m - v),
                    M = 1 / (A - D),
                    P = 1 / (E - H);
                k[0] = -2 * K;
                k[1] = 0;
                k[2] = 0;
                k[3] = 0;
                k[4] = 0;
                k[5] = -2 * M;
                k[6] = 0;
                k[7] = 0;
                k[8] = 0;
                k[9] = 0;
                k[10] = 2 * P;
                k[11] = 0;
                k[12] = (m + v) * K;
                k[13] = (D + A) * M;
                k[14] = (H + E) * P;
                k[15] = 1;
                return k
            },
            lookAt: function(k, m, v, A) {
                var D = m[0],
                    E = m[1];
                m = m[2];
                var H = A[0];
                var K = A[1];
                var M = A[2];
                var P = v[0];
                A = v[1];
                var R = v[2];
                if (1E-6 > Math.abs(D - P) && 1E-6 > Math.abs(E - A) && 1E-6 > Math.abs(m - R)) return l(k);
                v = D - P;
                A = E - A;
                P = m - R;
                var T = 1 / Math.hypot(v, A, P);
                v *= T;
                A *= T;
                P *= T;
                R = K * P - M * A;
                M = M * v - H * P;
                H = H * A - K * v;
                (T = Math.hypot(R,
                    M, H)) ? (T = 1 / T, R *= T, M *= T, H *= T) : H = M = R = 0;
                K = A * H - P * M;
                var Z = P * R - v * H;
                var V = v * M - A * R;
                (T = Math.hypot(K, Z, V)) ? (T = 1 / T, K *= T, Z *= T, V *= T) : V = Z = K = 0;
                k[0] = R;
                k[1] = K;
                k[2] = v;
                k[3] = 0;
                k[4] = M;
                k[5] = Z;
                k[6] = A;
                k[7] = 0;
                k[8] = H;
                k[9] = V;
                k[10] = P;
                k[11] = 0;
                k[12] = -(R * D + M * E + H * m);
                k[13] = -(K * D + Z * E + V * m);
                k[14] = -(v * D + A * E + P * m);
                k[15] = 1;
                return k
            },
            targetTo: function(k, m, v, A) {
                var D = m[0],
                    E = m[1];
                m = m[2];
                var H = A[0],
                    K = A[1],
                    M = A[2];
                A = D - v[0];
                var P = E - v[1];
                v = m - v[2];
                var R = A * A + P * P + v * v;
                0 < R && (R = 1 / Math.sqrt(R), A *= R, P *= R, v *= R);
                var T = K * v - M * P;
                M = M * A - H * v;
                H = H * P - K * A;
                R = T * T + M *
                    M + H * H;
                0 < R && (R = 1 / Math.sqrt(R), T *= R, M *= R, H *= R);
                k[0] = T;
                k[1] = M;
                k[2] = H;
                k[3] = 0;
                k[4] = P * H - v * M;
                k[5] = v * T - A * H;
                k[6] = A * M - P * T;
                k[7] = 0;
                k[8] = A;
                k[9] = P;
                k[10] = v;
                k[11] = 0;
                k[12] = D;
                k[13] = E;
                k[14] = m;
                k[15] = 1;
                return k
            },
            str: function(k) {
                return "mat4(" + k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ", " + k[4] + ", " + k[5] + ", " + k[6] + ", " + k[7] + ", " + k[8] + ", " + k[9] + ", " + k[10] + ", " + k[11] + ", " + k[12] + ", " + k[13] + ", " + k[14] + ", " + k[15] + ")"
            },
            frob: function(k) {
                return Math.hypot(k[0], k[1], k[2], k[3], k[4], k[5], k[6], k[7], k[8], k[9], k[10], k[11], k[12], k[13], k[14],
                    k[15])
            },
            add: function(k, m, v) {
                k[0] = m[0] + v[0];
                k[1] = m[1] + v[1];
                k[2] = m[2] + v[2];
                k[3] = m[3] + v[3];
                k[4] = m[4] + v[4];
                k[5] = m[5] + v[5];
                k[6] = m[6] + v[6];
                k[7] = m[7] + v[7];
                k[8] = m[8] + v[8];
                k[9] = m[9] + v[9];
                k[10] = m[10] + v[10];
                k[11] = m[11] + v[11];
                k[12] = m[12] + v[12];
                k[13] = m[13] + v[13];
                k[14] = m[14] + v[14];
                k[15] = m[15] + v[15];
                return k
            },
            subtract: p,
            multiplyScalar: function(k, m, v) {
                k[0] = m[0] * v;
                k[1] = m[1] * v;
                k[2] = m[2] * v;
                k[3] = m[3] * v;
                k[4] = m[4] * v;
                k[5] = m[5] * v;
                k[6] = m[6] * v;
                k[7] = m[7] * v;
                k[8] = m[8] * v;
                k[9] = m[9] * v;
                k[10] = m[10] * v;
                k[11] = m[11] * v;
                k[12] = m[12] * v;
                k[13] =
                    m[13] * v;
                k[14] = m[14] * v;
                k[15] = m[15] * v;
                return k
            },
            multiplyScalarAndAdd: function(k, m, v, A) {
                k[0] = m[0] + v[0] * A;
                k[1] = m[1] + v[1] * A;
                k[2] = m[2] + v[2] * A;
                k[3] = m[3] + v[3] * A;
                k[4] = m[4] + v[4] * A;
                k[5] = m[5] + v[5] * A;
                k[6] = m[6] + v[6] * A;
                k[7] = m[7] + v[7] * A;
                k[8] = m[8] + v[8] * A;
                k[9] = m[9] + v[9] * A;
                k[10] = m[10] + v[10] * A;
                k[11] = m[11] + v[11] * A;
                k[12] = m[12] + v[12] * A;
                k[13] = m[13] + v[13] * A;
                k[14] = m[14] + v[14] * A;
                k[15] = m[15] + v[15] * A;
                return k
            },
            exactEquals: function(k, m) {
                return k[0] === m[0] && k[1] === m[1] && k[2] === m[2] && k[3] === m[3] && k[4] === m[4] && k[5] === m[5] && k[6] ===
                    m[6] && k[7] === m[7] && k[8] === m[8] && k[9] === m[9] && k[10] === m[10] && k[11] === m[11] && k[12] === m[12] && k[13] === m[13] && k[14] === m[14] && k[15] === m[15]
            },
            equals: function(k, m) {
                var v = k[0],
                    A = k[1],
                    D = k[2],
                    E = k[3],
                    H = k[4],
                    K = k[5],
                    M = k[6],
                    P = k[7],
                    R = k[8],
                    T = k[9],
                    Z = k[10],
                    V = k[11],
                    da = k[12],
                    ca = k[13],
                    aa = k[14];
                k = k[15];
                var ra = m[0],
                    ma = m[1],
                    pa = m[2],
                    qa = m[3],
                    oa = m[4],
                    za = m[5],
                    O = m[6],
                    Q = m[7],
                    Y = m[8],
                    ba = m[9],
                    fa = m[10],
                    ha = m[11],
                    ea = m[12],
                    ua = m[13],
                    sa = m[14];
                m = m[15];
                return Math.abs(v - ra) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(ra)) && Math.abs(A - ma) <= 1E-6 *
                    Math.max(1, Math.abs(A), Math.abs(ma)) && Math.abs(D - pa) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(pa)) && Math.abs(E - qa) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(qa)) && Math.abs(H - oa) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(oa)) && Math.abs(K - za) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(za)) && Math.abs(M - O) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(O)) && Math.abs(P - Q) <= 1E-6 * Math.max(1, Math.abs(P), Math.abs(Q)) && Math.abs(R - Y) <= 1E-6 * Math.max(1, Math.abs(R), Math.abs(Y)) && Math.abs(T - ba) <= 1E-6 * Math.max(1, Math.abs(T), Math.abs(ba)) &&
                    Math.abs(Z - fa) <= 1E-6 * Math.max(1, Math.abs(Z), Math.abs(fa)) && Math.abs(V - ha) <= 1E-6 * Math.max(1, Math.abs(V), Math.abs(ha)) && Math.abs(da - ea) <= 1E-6 * Math.max(1, Math.abs(da), Math.abs(ea)) && Math.abs(ca - ua) <= 1E-6 * Math.max(1, Math.abs(ca), Math.abs(ua)) && Math.abs(aa - sa) <= 1E-6 * Math.max(1, Math.abs(aa), Math.abs(sa)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
            },
            mul: n,
            sub: p
        }),
        La = function() {
            var k = x();
            return function(m, v, A, D, E, H) {
                v || (v = 3);
                A || (A = 0);
                for (D = D ? Math.min(D * v + A, m.length) : m.length; A < D; A += v) k[0] = m[A],
                    k[1] = m[A + 1], k[2] = m[A + 2], E(k, k, H), m[A] = k[0], m[A + 1] = k[1], m[A + 2] = k[2];
                return m
            }
        }();
    La = Object.freeze({
        __proto__: null,
        create: x,
        clone: function(k) {
            var m = new na(3);
            m[0] = k[0];
            m[1] = k[1];
            m[2] = k[2];
            return m
        },
        length: t,
        fromValues: r,
        copy: function(k, m) {
            k[0] = m[0];
            k[1] = m[1];
            k[2] = m[2];
            return k
        },
        set: function(k, m, v, A) {
            k[0] = m;
            k[1] = v;
            k[2] = A;
            return k
        },
        add: function(k, m, v) {
            k[0] = m[0] + v[0];
            k[1] = m[1] + v[1];
            k[2] = m[2] + v[2];
            return k
        },
        subtract: B,
        multiply: z,
        divide: C,
        ceil: function(k, m) {
            k[0] = Math.ceil(m[0]);
            k[1] = Math.ceil(m[1]);
            k[2] =
                Math.ceil(m[2]);
            return k
        },
        floor: function(k, m) {
            k[0] = Math.floor(m[0]);
            k[1] = Math.floor(m[1]);
            k[2] = Math.floor(m[2]);
            return k
        },
        min: function(k, m, v) {
            k[0] = Math.min(m[0], v[0]);
            k[1] = Math.min(m[1], v[1]);
            k[2] = Math.min(m[2], v[2]);
            return k
        },
        max: function(k, m, v) {
            k[0] = Math.max(m[0], v[0]);
            k[1] = Math.max(m[1], v[1]);
            k[2] = Math.max(m[2], v[2]);
            return k
        },
        round: function(k, m) {
            k[0] = Math.round(m[0]);
            k[1] = Math.round(m[1]);
            k[2] = Math.round(m[2]);
            return k
        },
        scale: function(k, m, v) {
            k[0] = m[0] * v;
            k[1] = m[1] * v;
            k[2] = m[2] * v;
            return k
        },
        scaleAndAdd: function(k,
            m, v, A) {
            k[0] = m[0] + v[0] * A;
            k[1] = m[1] + v[1] * A;
            k[2] = m[2] + v[2] * A;
            return k
        },
        distance: F,
        squaredDistance: J,
        squaredLength: G,
        negate: function(k, m) {
            k[0] = -m[0];
            k[1] = -m[1];
            k[2] = -m[2];
            return k
        },
        inverse: function(k, m) {
            k[0] = 1 / m[0];
            k[1] = 1 / m[1];
            k[2] = 1 / m[2];
            return k
        },
        normalize: I,
        dot: L,
        cross: N,
        lerp: function(k, m, v, A) {
            var D = m[0],
                E = m[1];
            m = m[2];
            k[0] = D + A * (v[0] - D);
            k[1] = E + A * (v[1] - E);
            k[2] = m + A * (v[2] - m);
            return k
        },
        hermite: function(k, m, v, A, D, E) {
            var H = E * E,
                K = H * (2 * E - 3) + 1,
                M = H * (E - 2) + E,
                P = H * (E - 1);
            E = H * (3 - 2 * E);
            k[0] = m[0] * K + v[0] * M + A[0] * P + D[0] *
                E;
            k[1] = m[1] * K + v[1] * M + A[1] * P + D[1] * E;
            k[2] = m[2] * K + v[2] * M + A[2] * P + D[2] * E;
            return k
        },
        bezier: function(k, m, v, A, D, E) {
            var H = 1 - E,
                K = H * H,
                M = E * E,
                P = K * H;
            K *= 3 * E;
            H *= 3 * M;
            E *= M;
            k[0] = m[0] * P + v[0] * K + A[0] * H + D[0] * E;
            k[1] = m[1] * P + v[1] * K + A[1] * H + D[1] * E;
            k[2] = m[2] * P + v[2] * K + A[2] * H + D[2] * E;
            return k
        },
        random: function(k, m) {
            m = m || 1;
            var v = 2 * Ga() * Math.PI,
                A = 2 * Ga() - 1,
                D = Math.sqrt(1 - A * A) * m;
            k[0] = Math.cos(v) * D;
            k[1] = Math.sin(v) * D;
            k[2] = A * m;
            return k
        },
        transformMat4: function(k, m, v) {
            var A = m[0],
                D = m[1];
            m = m[2];
            var E = v[3] * A + v[7] * D + v[11] * m + v[15];
            E = E || 1;
            k[0] =
                (v[0] * A + v[4] * D + v[8] * m + v[12]) / E;
            k[1] = (v[1] * A + v[5] * D + v[9] * m + v[13]) / E;
            k[2] = (v[2] * A + v[6] * D + v[10] * m + v[14]) / E;
            return k
        },
        transformMat3: function(k, m, v) {
            var A = m[0],
                D = m[1];
            m = m[2];
            k[0] = A * v[0] + D * v[3] + m * v[6];
            k[1] = A * v[1] + D * v[4] + m * v[7];
            k[2] = A * v[2] + D * v[5] + m * v[8];
            return k
        },
        transformQuat: function(k, m, v) {
            var A = v[0],
                D = v[1],
                E = v[2],
                H = m[0],
                K = m[1];
            m = m[2];
            var M = D * m - E * K,
                P = E * H - A * m,
                R = A * K - D * H;
            v = 2 * v[3];
            k[0] = H + M * v + 2 * (D * R - E * P);
            k[1] = K + P * v + 2 * (E * M - A * R);
            k[2] = m + R * v + 2 * (A * P - D * M);
            return k
        },
        rotateX: function(k, m, v, A) {
            var D = [],
                E = [];
            D[0] = m[0] -
                v[0];
            D[1] = m[1] - v[1];
            D[2] = m[2] - v[2];
            E[0] = D[0];
            E[1] = D[1] * Math.cos(A) - D[2] * Math.sin(A);
            E[2] = D[1] * Math.sin(A) + D[2] * Math.cos(A);
            k[0] = E[0] + v[0];
            k[1] = E[1] + v[1];
            k[2] = E[2] + v[2];
            return k
        },
        rotateY: function(k, m, v, A) {
            var D = [],
                E = [];
            D[0] = m[0] - v[0];
            D[1] = m[1] - v[1];
            D[2] = m[2] - v[2];
            E[0] = D[2] * Math.sin(A) + D[0] * Math.cos(A);
            E[1] = D[1];
            E[2] = D[2] * Math.cos(A) - D[0] * Math.sin(A);
            k[0] = E[0] + v[0];
            k[1] = E[1] + v[1];
            k[2] = E[2] + v[2];
            return k
        },
        rotateZ: function(k, m, v, A) {
            var D = [],
                E = [];
            D[0] = m[0] - v[0];
            D[1] = m[1] - v[1];
            D[2] = m[2] - v[2];
            E[0] = D[0] *
                Math.cos(A) - D[1] * Math.sin(A);
            E[1] = D[0] * Math.sin(A) + D[1] * Math.cos(A);
            E[2] = D[2];
            k[0] = E[0] + v[0];
            k[1] = E[1] + v[1];
            k[2] = E[2] + v[2];
            return k
        },
        angle: function(k, m) {
            var v = k[0],
                A = k[1],
                D = k[2],
                E = m[0],
                H = m[1],
                K = m[2];
            k = (v = Math.sqrt(v * v + A * A + D * D) * Math.sqrt(E * E + H * H + K * K)) && L(k, m) / v;
            return Math.acos(Math.min(Math.max(k, -1), 1))
        },
        zero: function(k) {
            k[0] = 0;
            k[1] = 0;
            k[2] = 0;
            return k
        },
        str: function(k) {
            return "vec3(" + k[0] + ", " + k[1] + ", " + k[2] + ")"
        },
        exactEquals: function(k, m) {
            return k[0] === m[0] && k[1] === m[1] && k[2] === m[2]
        },
        equals: function(k,
            m) {
            var v = k[0],
                A = k[1];
            k = k[2];
            var D = m[0],
                E = m[1];
            m = m[2];
            return Math.abs(v - D) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(D)) && Math.abs(A - E) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(E)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
        },
        sub: B,
        mul: z,
        div: C,
        dist: F,
        sqrDist: J,
        len: t,
        sqrLen: G,
        forEach: La
    });
    var Ma = function() {
        var k = S();
        return function(m, v, A, D, E, H) {
            v || (v = 4);
            A || (A = 0);
            for (D = D ? Math.min(D * v + A, m.length) : m.length; A < D; A += v) k[0] = m[A], k[1] = m[A + 1], k[2] = m[A + 2], k[3] = m[A + 3], E(k, k, H), m[A] = k[0], m[A + 1] = k[1], m[A +
                2] = k[2], m[A + 3] = k[3];
            return m
        }
    }();
    Ma = Object.freeze({
        __proto__: null,
        create: S,
        clone: X,
        fromValues: U,
        copy: W,
        set: ia,
        add: ka,
        subtract: ya,
        multiply: ta,
        divide: Ba,
        ceil: function(k, m) {
            k[0] = Math.ceil(m[0]);
            k[1] = Math.ceil(m[1]);
            k[2] = Math.ceil(m[2]);
            k[3] = Math.ceil(m[3]);
            return k
        },
        floor: function(k, m) {
            k[0] = Math.floor(m[0]);
            k[1] = Math.floor(m[1]);
            k[2] = Math.floor(m[2]);
            k[3] = Math.floor(m[3]);
            return k
        },
        min: function(k, m, v) {
            k[0] = Math.min(m[0], v[0]);
            k[1] = Math.min(m[1], v[1]);
            k[2] = Math.min(m[2], v[2]);
            k[3] = Math.min(m[3], v[3]);
            return k
        },
        max: function(k, m, v) {
            k[0] = Math.max(m[0], v[0]);
            k[1] = Math.max(m[1], v[1]);
            k[2] = Math.max(m[2], v[2]);
            k[3] = Math.max(m[3], v[3]);
            return k
        },
        round: function(k, m) {
            k[0] = Math.round(m[0]);
            k[1] = Math.round(m[1]);
            k[2] = Math.round(m[2]);
            k[3] = Math.round(m[3]);
            return k
        },
        scale: Ea,
        scaleAndAdd: function(k, m, v, A) {
            k[0] = m[0] + v[0] * A;
            k[1] = m[1] + v[1] * A;
            k[2] = m[2] + v[2] * A;
            k[3] = m[3] + v[3] * A;
            return k
        },
        distance: Ca,
        squaredDistance: Aa,
        length: ja,
        squaredLength: Fa,
        negate: function(k, m) {
            k[0] = -m[0];
            k[1] = -m[1];
            k[2] = -m[2];
            k[3] = -m[3];
            return k
        },
        inverse: function(k, m) {
            k[0] = 1 / m[0];
            k[1] = 1 / m[1];
            k[2] = 1 / m[2];
            k[3] = 1 / m[3];
            return k
        },
        normalize: wa,
        dot: Da,
        cross: function(k, m, v, A) {
            var D = v[0] * A[1] - v[1] * A[0],
                E = v[0] * A[2] - v[2] * A[0],
                H = v[0] * A[3] - v[3] * A[0],
                K = v[1] * A[2] - v[2] * A[1],
                M = v[1] * A[3] - v[3] * A[1];
            v = v[2] * A[3] - v[3] * A[2];
            A = m[0];
            var P = m[1],
                R = m[2];
            m = m[3];
            k[0] = P * v - R * M + m * K;
            k[1] = -(A * v) + R * H - m * E;
            k[2] = A * M - P * H + m * D;
            k[3] = -(A * K) + P * E - R * D;
            return k
        },
        lerp: Pa,
        random: function(k, m) {
            m = m || 1;
            do {
                var v = 2 * Ga() - 1;
                var A = 2 * Ga() - 1;
                var D = v * v + A * A
            } while (1 <= D);
            do {
                var E = 2 * Ga() - 1;
                var H = 2 * Ga() -
                    1;
                var K = E * E + H * H
            } while (1 <= K);
            D = Math.sqrt((1 - D) / K);
            k[0] = m * v;
            k[1] = m * A;
            k[2] = m * E * D;
            k[3] = m * H * D;
            return k
        },
        transformMat4: function(k, m, v) {
            var A = m[0],
                D = m[1],
                E = m[2];
            m = m[3];
            k[0] = v[0] * A + v[4] * D + v[8] * E + v[12] * m;
            k[1] = v[1] * A + v[5] * D + v[9] * E + v[13] * m;
            k[2] = v[2] * A + v[6] * D + v[10] * E + v[14] * m;
            k[3] = v[3] * A + v[7] * D + v[11] * E + v[15] * m;
            return k
        },
        transformQuat: function(k, m, v) {
            var A = m[0],
                D = m[1],
                E = m[2],
                H = v[0],
                K = v[1],
                M = v[2];
            v = v[3];
            var P = v * A + K * E - M * D,
                R = v * D + M * A - H * E,
                T = v * E + H * D - K * A;
            A = -H * A - K * D - M * E;
            k[0] = P * v + A * -H + R * -M - T * -K;
            k[1] = R * v + A * -K + T * -H - P * -M;
            k[2] = T * v + A * -M + P * -K - R * -H;
            k[3] = m[3];
            return k
        },
        zero: function(k) {
            k[0] = 0;
            k[1] = 0;
            k[2] = 0;
            k[3] = 0;
            return k
        },
        str: function(k) {
            return "vec4(" + k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ")"
        },
        exactEquals: Qa,
        equals: Ra,
        sub: ya,
        mul: ta,
        div: Ba,
        dist: Ca,
        sqrDist: Aa,
        len: ja,
        sqrLen: Fa,
        forEach: Ma
    });
    var Na = function() {
            var k = x(),
                m = r(1, 0, 0),
                v = r(0, 1, 0);
            return function(A, D, E) {
                var H = L(D, E);
                if (-.999999 > H) return N(k, m, D), 1E-6 > t(k) && N(k, v, D), I(k, k), Sa(A, k, Math.PI), A;
                if (.999999 < H) return A[0] = 0, A[1] = 0, A[2] = 0, A[3] = 1, A;
                N(k, D, E);
                A[0] = k[0];
                A[1] = k[1];
                A[2] = k[2];
                A[3] = 1 + H;
                return wa(A, A)
            }
        }(),
        Oa = function() {
            var k = Ja(),
                m = Ja();
            return function(v, A, D, E, H, K) {
                Ka(k, A, H, K);
                Ka(m, D, E, K);
                Ka(v, k, m, 2 * K * (1 - K));
                return v
            }
        }(),
        Ia = function() {
            var k = e();
            return function(m, v, A, D) {
                k[0] = A[0];
                k[3] = A[1];
                k[6] = A[2];
                k[1] = D[0];
                k[4] = D[1];
                k[7] = D[2];
                k[2] = -v[0];
                k[5] = -v[1];
                k[8] = -v[2];
                return wa(m, Za(m, k))
            }
        }();
    Na = Object.freeze({
        __proto__: null,
        create: Ja,
        identity: function(k) {
            k[0] = 0;
            k[1] = 0;
            k[2] = 0;
            k[3] = 1;
            return k
        },
        setAxisAngle: Sa,
        getAxisAngle: function(k, m) {
            var v = 2 * Math.acos(m[3]),
                A = Math.sin(v /
                    2);
            1E-6 < A ? (k[0] = m[0] / A, k[1] = m[1] / A, k[2] = m[2] / A) : (k[0] = 1, k[1] = 0, k[2] = 0);
            return v
        },
        getAngle: function(k, m) {
            k = Da(k, m);
            return Math.acos(2 * k * k - 1)
        },
        multiply: Ta,
        rotateX: Ua,
        rotateY: Va,
        rotateZ: Wa,
        calculateW: function(k, m) {
            var v = m[0],
                A = m[1];
            m = m[2];
            k[0] = v;
            k[1] = A;
            k[2] = m;
            k[3] = Math.sqrt(Math.abs(1 - v * v - A * A - m * m));
            return k
        },
        exp: Xa,
        ln: Ya,
        pow: function(k, m, v) {
            Ya(k, m);
            Ea(k, k, v);
            Xa(k, k);
            return k
        },
        slerp: Ka,
        random: function(k) {
            var m = Ga(),
                v = Ga(),
                A = Ga(),
                D = Math.sqrt(1 - m);
            m = Math.sqrt(m);
            k[0] = D * Math.sin(2 * Math.PI * v);
            k[1] = D * Math.cos(2 *
                Math.PI * v);
            k[2] = m * Math.sin(2 * Math.PI * A);
            k[3] = m * Math.cos(2 * Math.PI * A);
            return k
        },
        invert: function(k, m) {
            var v = m[0],
                A = m[1],
                D = m[2];
            m = m[3];
            var E = v * v + A * A + D * D + m * m;
            E = E ? 1 / E : 0;
            k[0] = -v * E;
            k[1] = -A * E;
            k[2] = -D * E;
            k[3] = m * E;
            return k
        },
        conjugate: function(k, m) {
            k[0] = -m[0];
            k[1] = -m[1];
            k[2] = -m[2];
            k[3] = m[3];
            return k
        },
        fromMat3: Za,
        fromEuler: function(k, m, v, A) {
            var D = .5 * Math.PI / 180;
            m *= D;
            v *= D;
            A *= D;
            D = Math.sin(m);
            m = Math.cos(m);
            var E = Math.sin(v);
            v = Math.cos(v);
            var H = Math.sin(A);
            A = Math.cos(A);
            k[0] = D * v * A - m * E * H;
            k[1] = m * E * A + D * v * H;
            k[2] = m * v *
                H - D * E * A;
            k[3] = m * v * A + D * E * H;
            return k
        },
        str: function(k) {
            return "quat(" + k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ")"
        },
        clone: X,
        fromValues: U,
        copy: W,
        set: ia,
        add: ka,
        mul: Ta,
        scale: Ea,
        dot: Da,
        lerp: Pa,
        length: ja,
        len: ja,
        squaredLength: Fa,
        sqrLen: Fa,
        normalize: wa,
        exactEquals: Qa,
        equals: Ra,
        rotationTo: Na,
        sqlerp: Oa,
        setAxes: Ia
    });
    Oa = Object.freeze({
        __proto__: null,
        create: function() {
            var k = new na(8);
            na != Float32Array && (k[0] = 0, k[1] = 0, k[2] = 0, k[4] = 0, k[5] = 0, k[6] = 0, k[7] = 0);
            k[3] = 1;
            return k
        },
        clone: function(k) {
            var m = new na(8);
            m[0] = k[0];
            m[1] = k[1];
            m[2] = k[2];
            m[3] = k[3];
            m[4] = k[4];
            m[5] = k[5];
            m[6] = k[6];
            m[7] = k[7];
            return m
        },
        fromValues: function(k, m, v, A, D, E, H, K) {
            var M = new na(8);
            M[0] = k;
            M[1] = m;
            M[2] = v;
            M[3] = A;
            M[4] = D;
            M[5] = E;
            M[6] = H;
            M[7] = K;
            return M
        },
        fromRotationTranslationValues: function(k, m, v, A, D, E, H) {
            var K = new na(8);
            K[0] = k;
            K[1] = m;
            K[2] = v;
            K[3] = A;
            D *= .5;
            E *= .5;
            H *= .5;
            K[4] = D * A + E * v - H * m;
            K[5] = E * A + H * k - D * v;
            K[6] = H * A + D * m - E * k;
            K[7] = -D * k - E * m - H * v;
            return K
        },
        fromRotationTranslation: $a,
        fromTranslation: function(k, m) {
            k[0] = 0;
            k[1] = 0;
            k[2] = 0;
            k[3] = 1;
            k[4] = .5 * m[0];
            k[5] = .5 * m[1];
            k[6] = .5 *
                m[2];
            k[7] = 0;
            return k
        },
        fromRotation: function(k, m) {
            k[0] = m[0];
            k[1] = m[1];
            k[2] = m[2];
            k[3] = m[3];
            k[4] = 0;
            k[5] = 0;
            k[6] = 0;
            k[7] = 0;
            return k
        },
        fromMat4: function(k, m) {
            var v = Ja();
            u(v, m);
            var A = new na(3);
            y(A, m);
            $a(k, v, A);
            return k
        },
        copy: ab,
        identity: function(k) {
            k[0] = 0;
            k[1] = 0;
            k[2] = 0;
            k[3] = 1;
            k[4] = 0;
            k[5] = 0;
            k[6] = 0;
            k[7] = 0;
            return k
        },
        set: function(k, m, v, A, D, E, H, K, M) {
            k[0] = m;
            k[1] = v;
            k[2] = A;
            k[3] = D;
            k[4] = E;
            k[5] = H;
            k[6] = K;
            k[7] = M;
            return k
        },
        getReal: W,
        getDual: function(k, m) {
            k[0] = m[4];
            k[1] = m[5];
            k[2] = m[6];
            k[3] = m[7];
            return k
        },
        setReal: W,
        setDual: function(k,
            m) {
            k[4] = m[0];
            k[5] = m[1];
            k[6] = m[2];
            k[7] = m[3];
            return k
        },
        getTranslation: function(k, m) {
            var v = m[4],
                A = m[5],
                D = m[6],
                E = m[7],
                H = -m[0],
                K = -m[1],
                M = -m[2];
            m = m[3];
            k[0] = 2 * (v * m + E * H + A * M - D * K);
            k[1] = 2 * (A * m + E * K + D * H - v * M);
            k[2] = 2 * (D * m + E * M + v * K - A * H);
            return k
        },
        translate: function(k, m, v) {
            var A = m[0],
                D = m[1],
                E = m[2],
                H = m[3],
                K = .5 * v[0],
                M = .5 * v[1];
            v = .5 * v[2];
            var P = m[4],
                R = m[5],
                T = m[6];
            m = m[7];
            k[0] = A;
            k[1] = D;
            k[2] = E;
            k[3] = H;
            k[4] = H * K + D * v - E * M + P;
            k[5] = H * M + E * K - A * v + R;
            k[6] = H * v + A * M - D * K + T;
            k[7] = -A * K - D * M - E * v + m;
            return k
        },
        rotateX: function(k, m, v) {
            var A = -m[0],
                D = -m[1],
                E = -m[2],
                H = m[3],
                K = m[4],
                M = m[5],
                P = m[6],
                R = m[7],
                T = K * H + R * A + M * E - P * D,
                Z = M * H + R * D + P * A - K * E,
                V = P * H + R * E + K * D - M * A;
            K = R * H - K * A - M * D - P * E;
            Ua(k, m, v);
            A = k[0];
            D = k[1];
            E = k[2];
            H = k[3];
            k[4] = T * H + K * A + Z * E - V * D;
            k[5] = Z * H + K * D + V * A - T * E;
            k[6] = V * H + K * E + T * D - Z * A;
            k[7] = K * H - T * A - Z * D - V * E;
            return k
        },
        rotateY: function(k, m, v) {
            var A = -m[0],
                D = -m[1],
                E = -m[2],
                H = m[3],
                K = m[4],
                M = m[5],
                P = m[6],
                R = m[7],
                T = K * H + R * A + M * E - P * D,
                Z = M * H + R * D + P * A - K * E,
                V = P * H + R * E + K * D - M * A;
            K = R * H - K * A - M * D - P * E;
            Va(k, m, v);
            A = k[0];
            D = k[1];
            E = k[2];
            H = k[3];
            k[4] = T * H + K * A + Z * E - V * D;
            k[5] = Z * H + K * D + V * A - T * E;
            k[6] = V *
                H + K * E + T * D - Z * A;
            k[7] = K * H - T * A - Z * D - V * E;
            return k
        },
        rotateZ: function(k, m, v) {
            var A = -m[0],
                D = -m[1],
                E = -m[2],
                H = m[3],
                K = m[4],
                M = m[5],
                P = m[6],
                R = m[7],
                T = K * H + R * A + M * E - P * D,
                Z = M * H + R * D + P * A - K * E,
                V = P * H + R * E + K * D - M * A;
            K = R * H - K * A - M * D - P * E;
            Wa(k, m, v);
            A = k[0];
            D = k[1];
            E = k[2];
            H = k[3];
            k[4] = T * H + K * A + Z * E - V * D;
            k[5] = Z * H + K * D + V * A - T * E;
            k[6] = V * H + K * E + T * D - Z * A;
            k[7] = K * H - T * A - Z * D - V * E;
            return k
        },
        rotateByQuatAppend: function(k, m, v) {
            var A = v[0],
                D = v[1],
                E = v[2];
            v = v[3];
            var H = m[0],
                K = m[1],
                M = m[2],
                P = m[3];
            k[0] = H * v + P * A + K * E - M * D;
            k[1] = K * v + P * D + M * A - H * E;
            k[2] = M * v + P * E + H * D - K * A;
            k[3] =
                P * v - H * A - K * D - M * E;
            H = m[4];
            K = m[5];
            M = m[6];
            P = m[7];
            k[4] = H * v + P * A + K * E - M * D;
            k[5] = K * v + P * D + M * A - H * E;
            k[6] = M * v + P * E + H * D - K * A;
            k[7] = P * v - H * A - K * D - M * E;
            return k
        },
        rotateByQuatPrepend: function(k, m, v) {
            var A = m[0],
                D = m[1],
                E = m[2];
            m = m[3];
            var H = v[0],
                K = v[1],
                M = v[2],
                P = v[3];
            k[0] = A * P + m * H + D * M - E * K;
            k[1] = D * P + m * K + E * H - A * M;
            k[2] = E * P + m * M + A * K - D * H;
            k[3] = m * P - A * H - D * K - E * M;
            H = v[4];
            K = v[5];
            M = v[6];
            P = v[7];
            k[4] = A * P + m * H + D * M - E * K;
            k[5] = D * P + m * K + E * H - A * M;
            k[6] = E * P + m * M + A * K - D * H;
            k[7] = m * P - A * H - D * K - E * M;
            return k
        },
        rotateAroundAxis: function(k, m, v, A) {
            if (1E-6 > Math.abs(A)) return ab(k,
                m);
            var D = Math.hypot(v[0], v[1], v[2]);
            A *= .5;
            var E = Math.sin(A),
                H = E * v[0] / D,
                K = E * v[1] / D;
            v = E * v[2] / D;
            A = Math.cos(A);
            D = m[0];
            E = m[1];
            var M = m[2],
                P = m[3];
            k[0] = D * A + P * H + E * v - M * K;
            k[1] = E * A + P * K + M * H - D * v;
            k[2] = M * A + P * v + D * K - E * H;
            k[3] = P * A - D * H - E * K - M * v;
            D = m[4];
            E = m[5];
            M = m[6];
            m = m[7];
            k[4] = D * A + m * H + E * v - M * K;
            k[5] = E * A + m * K + M * H - D * v;
            k[6] = M * A + m * v + D * K - E * H;
            k[7] = m * A - D * H - E * K - M * v;
            return k
        },
        add: function(k, m, v) {
            k[0] = m[0] + v[0];
            k[1] = m[1] + v[1];
            k[2] = m[2] + v[2];
            k[3] = m[3] + v[3];
            k[4] = m[4] + v[4];
            k[5] = m[5] + v[5];
            k[6] = m[6] + v[6];
            k[7] = m[7] + v[7];
            return k
        },
        multiply: bb,
        mul: bb,
        scale: function(k, m, v) {
            k[0] = m[0] * v;
            k[1] = m[1] * v;
            k[2] = m[2] * v;
            k[3] = m[3] * v;
            k[4] = m[4] * v;
            k[5] = m[5] * v;
            k[6] = m[6] * v;
            k[7] = m[7] * v;
            return k
        },
        dot: Da,
        lerp: function(k, m, v, A) {
            var D = 1 - A;
            0 > Da(m, v) && (A = -A);
            k[0] = m[0] * D + v[0] * A;
            k[1] = m[1] * D + v[1] * A;
            k[2] = m[2] * D + v[2] * A;
            k[3] = m[3] * D + v[3] * A;
            k[4] = m[4] * D + v[4] * A;
            k[5] = m[5] * D + v[5] * A;
            k[6] = m[6] * D + v[6] * A;
            k[7] = m[7] * D + v[7] * A;
            return k
        },
        invert: function(k, m) {
            var v = Fa(m);
            k[0] = -m[0] / v;
            k[1] = -m[1] / v;
            k[2] = -m[2] / v;
            k[3] = m[3] / v;
            k[4] = -m[4] / v;
            k[5] = -m[5] / v;
            k[6] = -m[6] / v;
            k[7] = m[7] / v;
            return k
        },
        conjugate: function(k,
            m) {
            k[0] = -m[0];
            k[1] = -m[1];
            k[2] = -m[2];
            k[3] = m[3];
            k[4] = -m[4];
            k[5] = -m[5];
            k[6] = -m[6];
            k[7] = m[7];
            return k
        },
        length: ja,
        len: ja,
        squaredLength: Fa,
        sqrLen: Fa,
        normalize: function(k, m) {
            var v = Fa(m);
            if (0 < v) {
                v = Math.sqrt(v);
                var A = m[0] / v,
                    D = m[1] / v,
                    E = m[2] / v,
                    H = m[3] / v,
                    K = m[4],
                    M = m[5],
                    P = m[6];
                m = m[7];
                var R = A * K + D * M + E * P + H * m;
                k[0] = A;
                k[1] = D;
                k[2] = E;
                k[3] = H;
                k[4] = (K - A * R) / v;
                k[5] = (M - D * R) / v;
                k[6] = (P - E * R) / v;
                k[7] = (m - H * R) / v
            }
            return k
        },
        str: function(k) {
            return "quat2(" + k[0] + ", " + k[1] + ", " + k[2] + ", " + k[3] + ", " + k[4] + ", " + k[5] + ", " + k[6] + ", " + k[7] + ")"
        },
        exactEquals: function(k, m) {
            return k[0] === m[0] && k[1] === m[1] && k[2] === m[2] && k[3] === m[3] && k[4] === m[4] && k[5] === m[5] && k[6] === m[6] && k[7] === m[7]
        },
        equals: function(k, m) {
            var v = k[0],
                A = k[1],
                D = k[2],
                E = k[3],
                H = k[4],
                K = k[5],
                M = k[6];
            k = k[7];
            var P = m[0],
                R = m[1],
                T = m[2],
                Z = m[3],
                V = m[4],
                da = m[5],
                ca = m[6];
            m = m[7];
            return Math.abs(v - P) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(P)) && Math.abs(A - R) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(R)) && Math.abs(D - T) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(T)) && Math.abs(E - Z) <= 1E-6 * Math.max(1, Math.abs(E),
                Math.abs(Z)) && Math.abs(H - V) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(V)) && Math.abs(K - da) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(da)) && Math.abs(M - ca) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(ca)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
        }
    });
    Ia = function() {
        var k = cb();
        return function(m, v, A, D, E, H) {
            v || (v = 2);
            A || (A = 0);
            for (D = D ? Math.min(D * v + A, m.length) : m.length; A < D; A += v) k[0] = m[A], k[1] = m[A + 1], E(k, k, H), m[A] = k[0], m[A + 1] = k[1];
            return m
        }
    }();
    Ia = Object.freeze({
        __proto__: null,
        create: cb,
        clone: function(k) {
            var m =
                new na(2);
            m[0] = k[0];
            m[1] = k[1];
            return m
        },
        fromValues: function(k, m) {
            var v = new na(2);
            v[0] = k;
            v[1] = m;
            return v
        },
        copy: function(k, m) {
            k[0] = m[0];
            k[1] = m[1];
            return k
        },
        set: function(k, m, v) {
            k[0] = m;
            k[1] = v;
            return k
        },
        add: function(k, m, v) {
            k[0] = m[0] + v[0];
            k[1] = m[1] + v[1];
            return k
        },
        subtract: db,
        multiply: eb,
        divide: fb,
        ceil: function(k, m) {
            k[0] = Math.ceil(m[0]);
            k[1] = Math.ceil(m[1]);
            return k
        },
        floor: function(k, m) {
            k[0] = Math.floor(m[0]);
            k[1] = Math.floor(m[1]);
            return k
        },
        min: function(k, m, v) {
            k[0] = Math.min(m[0], v[0]);
            k[1] = Math.min(m[1],
                v[1]);
            return k
        },
        max: function(k, m, v) {
            k[0] = Math.max(m[0], v[0]);
            k[1] = Math.max(m[1], v[1]);
            return k
        },
        round: function(k, m) {
            k[0] = Math.round(m[0]);
            k[1] = Math.round(m[1]);
            return k
        },
        scale: function(k, m, v) {
            k[0] = m[0] * v;
            k[1] = m[1] * v;
            return k
        },
        scaleAndAdd: function(k, m, v, A) {
            k[0] = m[0] + v[0] * A;
            k[1] = m[1] + v[1] * A;
            return k
        },
        distance: gb,
        squaredDistance: hb,
        length: ib,
        squaredLength: jb,
        negate: function(k, m) {
            k[0] = -m[0];
            k[1] = -m[1];
            return k
        },
        inverse: function(k, m) {
            k[0] = 1 / m[0];
            k[1] = 1 / m[1];
            return k
        },
        normalize: function(k, m) {
            var v = m[0],
                A = m[1];
            v = v * v + A * A;
            0 < v && (v = 1 / Math.sqrt(v));
            k[0] = m[0] * v;
            k[1] = m[1] * v;
            return k
        },
        dot: function(k, m) {
            return k[0] * m[0] + k[1] * m[1]
        },
        cross: function(k, m, v) {
            m = m[0] * v[1] - m[1] * v[0];
            k[0] = k[1] = 0;
            k[2] = m;
            return k
        },
        lerp: function(k, m, v, A) {
            var D = m[0];
            m = m[1];
            k[0] = D + A * (v[0] - D);
            k[1] = m + A * (v[1] - m);
            return k
        },
        random: function(k, m) {
            m = m || 1;
            var v = 2 * Ga() * Math.PI;
            k[0] = Math.cos(v) * m;
            k[1] = Math.sin(v) * m;
            return k
        },
        transformMat2: function(k, m, v) {
            var A = m[0];
            m = m[1];
            k[0] = v[0] * A + v[2] * m;
            k[1] = v[1] * A + v[3] * m;
            return k
        },
        transformMat2d: function(k, m,
            v) {
            var A = m[0];
            m = m[1];
            k[0] = v[0] * A + v[2] * m + v[4];
            k[1] = v[1] * A + v[3] * m + v[5];
            return k
        },
        transformMat3: function(k, m, v) {
            var A = m[0];
            m = m[1];
            k[0] = v[0] * A + v[3] * m + v[6];
            k[1] = v[1] * A + v[4] * m + v[7];
            return k
        },
        transformMat4: function(k, m, v) {
            var A = m[0];
            m = m[1];
            k[0] = v[0] * A + v[4] * m + v[12];
            k[1] = v[1] * A + v[5] * m + v[13];
            return k
        },
        rotate: function(k, m, v, A) {
            var D = m[0] - v[0];
            m = m[1] - v[1];
            var E = Math.sin(A);
            A = Math.cos(A);
            k[0] = D * A - m * E + v[0];
            k[1] = D * E + m * A + v[1];
            return k
        },
        angle: function(k, m) {
            var v = k[0];
            k = k[1];
            var A = m[0];
            m = m[1];
            var D = Math.sqrt(v * v + k *
                k) * Math.sqrt(A * A + m * m);
            return Math.acos(Math.min(Math.max(D && (v * A + k * m) / D, -1), 1))
        },
        zero: function(k) {
            k[0] = 0;
            k[1] = 0;
            return k
        },
        str: function(k) {
            return "vec2(" + k[0] + ", " + k[1] + ")"
        },
        exactEquals: function(k, m) {
            return k[0] === m[0] && k[1] === m[1]
        },
        equals: function(k, m) {
            var v = k[0];
            k = k[1];
            var A = m[0];
            m = m[1];
            return Math.abs(v - A) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(A)) && Math.abs(k - m) <= 1E-6 * Math.max(1, Math.abs(k), Math.abs(m))
        },
        len: ib,
        sub: db,
        mul: eb,
        div: fb,
        dist: gb,
        sqrDist: hb,
        sqrLen: jb,
        forEach: Ia
    });
    f.glMatrix = lb;
    f.mat2 = mb;
    f.mat2d = nb;
    f.mat3 = ob;
    f.mat4 = pb;
    f.quat = Na;
    f.quat2 = Oa;
    f.vec2 = Ia;
    f.vec3 = La;
    f.vec4 = Ma;
    Object.defineProperty(f, "__esModule", {
        value: !0
    })
}); {
    "use strict";

    function f(G, I, L) {
        var N = [0, 0];
        var S = G[1][1] - G[0][1];
        var X = G[0][0] - G[1][0];
        G = S * G[0][0] + X * G[0][1];
        var U = I[1][1] - I[0][1];
        var W = I[0][0] - I[1][0];
        I = U * I[0][0] + W * I[0][1];
        var ia = S * W - U * X;
        F(ia, 0, L || 0) || (N[0] = (W * G - X * I) / ia, N[1] = (S * I - U * G) / ia);
        return N
    }

    function b(G, I, L, N) {
        var S = I[0] - G[0];
        I = I[1] - G[1];
        var X = N[0] - L[0],
            U = N[1] - L[1];
        if (0 === X * I - U * S) return !1;
        N = (S * (L[1] - G[1]) + I * (G[0] - L[0])) / (X * I - U * S);
        G = (X * (G[1] - L[1]) + U * (L[0] - G[0])) / (U * S - X * I);
        return 0 <= N && 1 >= N && 0 <= G && 1 >= G
    }

    function a(G, I, L) {
        return (I[0] - G[0]) *
            (L[1] - G[1]) - (L[0] - G[0]) * (I[1] - G[1])
    }

    function d(G, I, L) {
        return 0 < a(G, I, L)
    }

    function c(G, I, L) {
        return 0 <= a(G, I, L)
    }

    function e(G, I, L) {
        return 0 > a(G, I, L)
    }

    function g(G, I, L) {
        return 0 >= a(G, I, L)
    }
    var tmpPoint1$$module$str$c3runtime = [],
        tmpPoint2$$module$str$c3runtime = [];

    function h(G, I, L, N) {
        if (N) {
            var S = tmpPoint1$$module$str$c3runtime,
                X = tmpPoint2$$module$str$c3runtime;
            S[0] = I[0] - G[0];
            S[1] = I[1] - G[1];
            X[0] = L[0] - I[0];
            X[1] = L[1] - I[1];
            return Math.acos((S[0] * X[0] + S[1] * X[1]) / (Math.sqrt(S[0] * S[0] + S[1] * S[1]) * Math.sqrt(X[0] * X[0] +
                X[1] * X[1]))) < N
        }
        return 0 === a(G, I, L)
    }

    function l(G, I) {
        var L = I[0] - G[0];
        G = I[1] - G[1];
        return L * L + G * G
    }

    function n(G, I) {
        var L = G.length;
        return G[0 > I ? I % L + L : I % L]
    }

    function q(G) {
        G.length = 0
    }

    function y(G, I, L, N) {
        for (; L < N; L++) G.push(I[L])
    }

    function w(G) {
        for (var I = [], L = G.length, N = 0; N !== L; N++) I.push(G.pop());
        for (N = 0; N !== L; N++) G[N] = I[N]
    }

    function u(G, I) {
        return e(n(G, I - 1), n(G, I), n(G, I + 1))
    }
    var tmpLine1$$module$str$c3runtime = [],
        tmpLine2$$module$str$c3runtime = [];

    function p(G, I, L) {
        var N = tmpLine1$$module$str$c3runtime,
            S = tmpLine2$$module$str$c3runtime;
        if (c(n(G, I + 1), n(G, I), n(G, L)) && g(n(G, I - 1), n(G, I), n(G, L))) return !1;
        var X = l(n(G, I), n(G, L));
        for (var U = 0; U !== G.length; ++U)
            if ((U + 1) % G.length !== I && U !== I && c(n(G, I), n(G, L), n(G, U + 1)) && g(n(G, I), n(G, L), n(G, U))) {
                N[0] = n(G, I);
                N[1] = n(G, L);
                S[0] = n(G, U);
                S[1] = n(G, U + 1);
                var W = f(N, S);
                if (l(n(G, I), W) < X) return !1
            }
        return !0
    }

    function x(G, I, L) {
        for (var N = 0; N !== G.length; ++N)
            if (N !== I && N !== L && (N + 1) % G.length !== I && (N + 1) % G.length !== L && b(n(G, I), n(G, L), n(G, N), n(G, N + 1))) return !1;
        return !0
    }

    function t(G, I, L, N) {
        N = N || [];
        q(N);
        if (I < L)
            for (var S =
                    I; S <= L; S++) N.push(G[S]);
        else {
            for (S = 0; S <= L; S++) N.push(G[S]);
            for (S = I; S < G.length; S++) N.push(G[S])
        }
        return N
    }

    function r(G) {
        for (var I = [], L, N, S = [], X = Number.MAX_VALUE, U = 0; U < G.length; ++U)
            if (u(G, U))
                for (var W = 0; W < G.length; ++W)
                    if (p(G, U, W)) {
                        L = r(t(G, U, W, S));
                        N = r(t(G, W, U, S));
                        for (var ia = 0; ia < N.length; ia++) L.push(N[ia]);
                        L.length < X && (I = L, X = L.length, I.push([n(G, U), n(G, W)]))
                    }
        return I
    }

    function B(G, I) {
        if (0 === I.length) return [G];
        if (I instanceof Array && I.length && I[0] instanceof Array && 2 === I[0].length && I[0][0] instanceof Array) {
            G = [G];
            for (var L = 0; L < I.length; L++)
                for (var N = I[L], S = 0; S < G.length; S++) {
                    var X = B(G[S], N);
                    if (X) {
                        G.splice(S, 1);
                        G.push(X[0], X[1]);
                        break
                    }
                }
            return G
        }
        N = I;
        L = G.indexOf(N[0]);
        S = G.indexOf(N[1]);
        return -1 !== L && -1 !== S ? [t(G, L, S), t(G, S, L)] : !1
    }

    function z(G, I, L, N, S) {
        var X = I[1] - G[1];
        I = G[0] - I[0];
        G = X * G[0] + I * G[1];
        var U = N[1] - L[1];
        N = L[0] - N[0];
        L = U * L[0] + N * L[1];
        var W = X * N - U * I;
        return F(W, 0, S || 0) ? [0, 0] : [(N * G - I * L) / W, (X * L - U * G) / W]
    }

    function C(G, I, L, N, S, X, U) {
        X = X || 100;
        U = U || 0;
        S = S || 25;
        I = "undefined" !== typeof I ? I : [];
        L = L || [];
        N = N || [];
        var W = [0, 0],
            ia = [0, 0],
            ka = [0, 0],
            ya, ta = 0,
            Ba = 0,
            Ea = 0,
            Ca = [],
            Aa = [];
        if (3 > G.length) return I;
        U++;
        if (U > X) return console.warn("quickDecomp: max level (" + X + ") reached."), I;
        for (var ja = 0; ja < G.length; ++ja)
            if (u(G, ja)) {
                L.push(G[ja]);
                var Fa = ya = Number.MAX_VALUE;
                for (var wa = 0; wa < G.length; ++wa) {
                    if (d(n(G, ja - 1), n(G, ja), n(G, wa)) && g(n(G, ja - 1), n(G, ja), n(G, wa - 1)) && (ka = z(n(G, ja - 1), n(G, ja), n(G, wa), n(G, wa - 1)), e(n(G, ja + 1), n(G, ja), ka))) {
                        var Da = l(G[ja], ka);
                        Da < ya && (ya = Da, ia = ka, Ba = wa)
                    }
                    d(n(G, ja + 1), n(G, ja), n(G, wa + 1)) && g(n(G, ja + 1), n(G, ja), n(G, wa)) &&
                        (ka = z(n(G, ja + 1), n(G, ja), n(G, wa), n(G, wa + 1)), d(n(G, ja - 1), n(G, ja), ka) && (Da = l(G[ja], ka), Da < Fa && (Fa = Da, W = ka, ta = wa)))
                }
                if (Ba === (ta + 1) % G.length) ka[0] = (ia[0] + W[0]) / 2, ka[1] = (ia[1] + W[1]) / 2, N.push(ka), ja < ta ? (y(Ca, G, ja, ta + 1), Ca.push(ka), Aa.push(ka), 0 !== Ba && y(Aa, G, Ba, G.length), y(Aa, G, 0, ja + 1)) : (0 !== ja && y(Ca, G, ja, G.length), y(Ca, G, 0, ta + 1), Ca.push(ka), Aa.push(ka), y(Aa, G, Ba, ja + 1));
                else {
                    Ba > ta && (ta += G.length);
                    W = Number.MAX_VALUE;
                    if (ta < Ba) return I;
                    for (wa = Ba; wa <= ta; ++wa) c(n(G, ja - 1), n(G, ja), n(G, wa)) && g(n(G, ja + 1), n(G, ja),
                        n(G, wa)) && (Da = l(n(G, ja), n(G, wa)), Da < W && x(G, ja, wa) && (W = Da, Ea = wa % G.length));
                    ja < Ea ? (y(Ca, G, ja, Ea + 1), 0 !== Ea && y(Aa, G, Ea, G.length), y(Aa, G, 0, ja + 1)) : (0 !== ja && y(Ca, G, ja, G.length), y(Ca, G, 0, Ea + 1), y(Aa, G, Ea, ja + 1))
                }
                Ca.length < Aa.length ? (C(Ca, I, L, N, S, X, U), C(Aa, I, L, N, S, X, U)) : (C(Aa, I, L, N, S, X, U), C(Ca, I, L, N, S, X, U));
                return I
            }
        I.push(G);
        return I
    }

    function F(G, I, L) {
        return Math.abs(G - I) <= (L || 0)
    }

    function J(G, I, L) {
        return F(G[0], I[0], L) && F(G[1], I[1], L)
    }
    self.polyDecomp = {
        decomp: function(G) {
            var I = r(G);
            return 0 < I.length ? B(G, I) : [G]
        },
        quickDecomp: C,
        isSimple: function(G) {
            var I;
            for (I = 0; I < G.length - 1; I++)
                for (var L = 0; L < I - 1; L++)
                    if (b(G[I], G[I + 1], G[L], G[L + 1])) return !1;
            for (I = 1; I < G.length - 2; I++)
                if (b(G[0], G[G.length - 1], G[I], G[I + 1])) return !1;
            return !0
        },
        removeCollinearPoints: function(G, I) {
            for (var L = 0, N = G.length - 1; 3 < G.length && 0 <= N; --N) h(n(G, N - 1), n(G, N), n(G, N + 1), I) && (G.splice(N % G.length, 1), L++);
            return L
        },
        removeDuplicatePoints: function(G, I) {
            for (var L = G.length - 1; 1 <= L; --L)
                for (var N = G[L], S = L - 1; 0 <= S; --S) J(N, G[S], I) && G.splice(L, 1)
        },
        makeCCW: function(G) {
            for (var I =
                    0, L = 1; L < G.length; ++L)
                if (G[L][1] < G[I][1] || G[L][1] === G[I][1] && G[L][0] > G[I][0]) I = L;
            if (d(n(G, I - 1), n(G, I), n(G, I + 1))) return !1;
            w(G);
            return !0
        }
    }
} {
    "use strict";
    let f = !1,
        b = !1,
        a = "dev";
    const d = self.C3 = class {
        constructor() {
            throw TypeError("static class can't be instantiated");
        }
        static SetReady() {
            f = !0
        }
        static IsReady() {
            return f
        }
        static SetAppStarted() {
            b = !0
        }
        static HasAppStarted() {
            return b
        }
        static SetBuildMode(c) {
            a = c
        }
        static GetBuildMode() {
            return a
        }
        static IsReleaseBuild() {
            return "final" === a
        }
    };
    d.isDebug = !1;
    d.isDebugDefend = !1;
    d.hardwareConcurrency = navigator.hardwareConcurrency || 2;
    self.C3X = {}
} {
    "use strict";
    const f = self.C3;
    f.QueryParser = class {
        constructor(b) {
            this._queryString = b;
            this._parameters = new Map;
            this._Parse()
        }
        _Parse() {
            var b = this._queryString;
            if (b.startsWith("?") || b.startsWith("#")) b = b.substr(1);
            b = b.split("&");
            for (const a of b) this._ParseParameter(a)
        }
        _ParseParameter(b) {
            if (b)
                if (b.includes("=")) {
                    var a = b.indexOf("="),
                        d = decodeURIComponent(b.substring(0, a));
                    b = decodeURIComponent(b.substring(a + 1));
                    this._parameters.set(d, b)
                } else this._parameters.set(b, null)
        }
        LogAll() {
            for (const b of this._parameters) console.log("[QueryParser] Parameter '" +
                b[0] + "' = " + (null === b[1] ? "null" : "'" + b[1] + "'"))
        }
        Has(b) {
            return this._parameters.has(b)
        }
        Get(b) {
            b = this._parameters.get(b);
            return "undefined" === typeof b ? null : b
        }
        ClearHash() {
            history.replaceState("", document.title, location.pathname + location.search)
        }
        Reparse(b) {
            this._queryString = b;
            this._parameters.clear();
            this._Parse()
        }
    };
    f.QueryString = new f.QueryParser(location.search);
    f.LocationHashString = new f.QueryParser(location.hash);
    "dev" !== f.QueryString.Get("mode") && f.SetBuildMode("final")
} {
    "use strict";
    const f = self.C3,
        b = navigator.userAgent;
    let a = {
        linux: /linux|openbsd|freebsd|netbsd/i.test(b),
        chromeOS: /CrOS/.test(b),
        windowsTizen: /trident|iemobile|msie|tizen/i.test(b),
        genericMS: /trident|iemobile|msie|edge\//i.test(b),
        opera: /OPR\//.test(b),
        blackberry: /bb10/i.test(b),
        edge: /edge\//i.test(b),
        trident: /trident/i.test(b),
        webkit: /webkit/i.test(b),
        safari: /safari\//i.test(b),
        chrome: /chrome\//i.test(b),
        chromium: /chromium\//i.test(b),
        crosswalk: /crosswalk|xwalk/i.test(b),
        nwjs: /nwjs/i.test(b),
        amazonwebapp: /amazonwebappplatform/i.test(b),
        webview: /wv\)/.test(b),
        android: /android/i.test(b),
        nokia: /nokiabrowser\/[0-9.]+/i.test(b)
    };
    var JSCompiler_object_inline_windows_0 = /windows\s+nt\s+\d+\.\d+/i.exec(b),
        JSCompiler_object_inline_OSX_1 = /mac\s+os\s+x\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_android_2 = /android\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_opera_3 = /OPR\/[0-9.]+/.exec(b),
        JSCompiler_object_inline_tizen_4 = /tizen\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_iphone_5 = /iphone\s+os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_ipad_6 =
        /ipad[^)]*os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_winPhone_7 = /windows\s+phone\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_winPhoneOS_8 = /windows\s+phone\s+os\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chrome_9 = /chrome\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chromium_10 = /chromium\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_nwjs_11 = /nwjs\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_firefox_12 = /firefox\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_ie_13 = /msie\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edge_14 =
        /edge\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edgeChromium_15 = /edg\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_silk_16 = /silk\/[0-9.]+/i.exec(b);
    let d = "(unknown)",
        c = "(unknown)",
        e = "(unknown)",
        g = "(unknown)",
        h = "(unknown)",
        l = "browser",
        n = !1,
        q = !1,
        y = new Map;

    function w(p, x, t) {
        !0 === x ? (t(), y.set(p, !0)) : x && x.length && (t(x[0]), y.set(p, !0))
    }
    w("isWindows", JSCompiler_object_inline_windows_0, p => {
        d = "Windows";
        if (p = p.split(" ")[2]) switch (p) {
            case "5.0":
                c = "2000";
                break;
            case "5.1":
                c = "XP";
                break;
            case "5.2":
                c = "XP";
                break;
            case "6.0":
                c = "Vista";
                break;
            case "6.1":
                c = "7";
                break;
            case "6.2":
                c = "8";
                break;
            case "6.3":
                c = "8.1";
                break;
            case "10.0":
                c = "10"
        }
    });
    w("isOSX", JSCompiler_object_inline_OSX_1, p => {
        d = "Mac OS X";
        (p = p.split(" ")[3]) && (c = p.replace("_", "."))
    });
    w("isLinux", a.linux, () => {
        d = "Linux"
    });
    w("isChromeOS", a.chromeOS, () => {
        d = "Chrome OS"
    });
    w("isAndroid", !a.windowsTizen && JSCompiler_object_inline_android_2, p => {
        d = "Android";
        (p = p.split(" ")[1]) && (c = p)
    });
    w("isTizen", JSCompiler_object_inline_tizen_4, p => {
        d = "Tizen";
        (p = p.split(" ")[1]) && (c =
            p)
    });
    w("isIPhone", !a.windowsTizen && JSCompiler_object_inline_iphone_5, p => {
        d = "iOS";
        (p = p.split(" ")[2]) && (c = p.replace("_", "."))
    });
    w("isIPad", !a.windowsTizen && JSCompiler_object_inline_ipad_6, p => {
        d = "iOS";
        (p = p.split(" ")[3]) && (c = p.replace("_", "."))
    });
    w("isWindowsPhone", JSCompiler_object_inline_winPhone_7, p => {
        d = "Windows Phone";
        (p = p.split(" ")[2]) && (c = p)
    });
    w("isWindowsPhoneOS", JSCompiler_object_inline_winPhoneOS_8, p => {
        d = "Windows Phone";
        (p = p.split(" ")[3]) && (c = p)
    });
    w("isBlackberry", a.blackberry, () => {
        d = "Blackberry";
        c = "10";
        e = "stock";
        h = "webkit"
    });
    w("isChrome", !a.edge && !a.opera && JSCompiler_object_inline_chrome_9, p => {
        e = "Chrome";
        h = "Chromium";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isOpera", JSCompiler_object_inline_opera_3, p => {
        e = "Opera";
        h = "Chromium";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isChromium", JSCompiler_object_inline_chromium_10, p => {
        h = e = "Chromium";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isFirefox", JSCompiler_object_inline_firefox_12, p => {
        e = "Firefox";
        h = "Gecko";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isInternetExplorer", JSCompiler_object_inline_ie_13,
        p => {
            e = "Internet Explorer";
            h = "Trident";
            (p = p.split(" ")[1]) && (g = p)
        });
    w("isTrident", "Internet Explorer" !== e && a.trident, () => {
        h = "Trident";
        var p = /rv:[0-9.]+/i.exec(b);
        p && p.length && (e = "Internet Explorer", (p = p[0].split(":")[1]) && (g = p))
    });
    w("isEdge", JSCompiler_object_inline_edge_14, p => {
        h = e = "Edge";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isEdgeChromium", JSCompiler_object_inline_edgeChromium_15, p => {
        e = "Edge";
        h = "Chromium";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isSafari", a.safari && !a.nokia && !a.chrome && !a.chromium && !a.genericIE &&
        !a.blackberry, () => {
            e = "Safari";
            h = "WebKit";
            var p = /version\/[0-9.]+/i.exec(b),
                x = /crios\/[0-9.]+/i.exec(b),
                t = /fxios\/[0-9.]+/i.exec(b);
            p && p.length && (p = p[0].split("/")[1]) && (g = p);
            x && x.length && (e = "Chrome for iOS", (x = x[0].split("/")[1]) && (g = x));
            t && t.length && (e = "Firefox for iOS", (t = t[0].split("/")[1]) && (g = t))
        });
    w("isSilk", JSCompiler_object_inline_silk_16, p => {
        e = "Silk";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isCrosswalk", a.crosswalk, () => l = "crosswalk");
    w("isCordova", self.device && (self.device.cordova || self.device.phonegap),
        () => l = "cordova");
    w("isNWJS", JSCompiler_object_inline_nwjs_11, p => {
        l = "nwjs";
        e = "NW.js";
        h = "Chromium";
        (p = p.split("/")[1]) && (g = p)
    });
    w("isAmazonWebApp", a.amazonwebapp, () => l = "webapp");
    w("isHomeScreenWebApp", "nwjs" !== l && "undefined" !== typeof window && (window.matchMedia && window.matchMedia("(display-mode: standalone)").matches || navigator.standalone), () => l = "webapp");
    w("isFalseSafari", "Safari" === e && ("Android" === d || "Tizen" === d || "Blackberry" === d), () => e = "stock");
    w("isAndroidWebview", "Chrome" === e && "browser" === l && a.webview,
        () => l = "webview");
    w("isFirefoxOS", "Firefox" === e && "(unknown)" === d, () => d = "Firefox OS");
    w("isAndroidFallback", "(unknown)" === d && !a.windowsTizen && a.android, () => d = "Android");
    w("isTridentFallback", "(unknown)" === d && a.trident, () => h = "Trident");
    w("isWebkitFallback", "(unknown)" === d && a.webkit, () => h = "WebKit");
    w("isDesktop", (() => "Windows" === d || "Mac OS X" === d || "Linux" === d || "Chrome OS" === d || "nwjs" === l)(), () => n = !0);
    q = "nwjs" === l;
    const u = "Mac OS X" === d && navigator.maxTouchPoints && 2 < navigator.maxTouchPoints;
    u && (d = "iOS",
        c = g, q = n = !1);
    f.Platform = {
        OS: d,
        OSVersion: c,
        Browser: e,
        BrowserVersion: g,
        BrowserVersionNumber: parseFloat(g),
        BrowserEngine: h,
        Context: l,
        IsDesktop: n,
        IsMobile: !n,
        IsDesktopApp: q,
        IsChromeWebStore: !!(self.chrome && self.chrome.runtime && self.chrome.runtime.id),
        IsAppleOS: "Mac OS X" === d || "iOS" === d,
        IsIpadOS: u,
        IsLinux: "Linux" === d
    }
}
"use strict"; {
    const f = new Map,
        b = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAll,
        a = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAllKeys;

    function d(u) {
        return new Promise((p, x) => {
            u.onsuccess = () => p(u.result);
            u.onerror = () => x(u.error)
        })
    }

    function c(u) {
        return new Promise((p, x) => {
            u.oncomplete = () => p();
            u.onerror = () => x(u.error);
            u.onabort = () => x(u.error)
        })
    }

    function e(u, p) {
        return h(u, p)
    }

    function g(u, p) {
        return h(u, p, !0)
    }
    async function h(u, p, x = !1,
        t = !0) {
        const r = await l(u);
        try {
            const B = r.transaction(["keyvaluepairs"], x ? "readwrite" : "readonly");
            return p(B)
        } catch (B) {
            if (t && "InvalidStateError" === B.name) return f.delete(u), h(u, p, x, !1);
            throw B;
        }
    }

    function l(u) {
        q(u);
        let p = f.get(u);
        p instanceof Promise || (p = n(u), f.set(u, p), p.catch(x => f.delete(u)));
        return p
    }
    async function n(u) {
        q(u);
        const p = indexedDB.open(u, 2);
        p.addEventListener("upgradeneeded", x => {
            try {
                x.target.result.createObjectStore("keyvaluepairs")
            } catch (t) {
                console.error(`Failed to create objectstore for database ${u}`,
                    t)
            }
        });
        return d(p)
    }

    function q(u) {
        if ("string" !== typeof u) throw new TypeError("expected string");
    }

    function y(u, p) {
        const x = u.objectStore("keyvaluepairs").openCursor();
        return new Promise(t => {
            const r = [];
            x.onsuccess = B => {
                if (B = B.target.result) {
                    switch (p) {
                        case "entries":
                            r.push([B.key, B.value]);
                            break;
                        case "keys":
                            r.push(B.key);
                            break;
                        case "values":
                            r.push(B.value)
                    }
                    B.continue()
                } else t(r)
            }
        })
    }
    class w {
        constructor(u) {
            q(u);
            this.name = u
        }
        async ready() {
            await l(this.name)
        }
        set(u, p) {
            q(u);
            return g(this.name, async x => {
                var t = x.objectStore("keyvaluepairs").put(p,
                    u);
                t = d(t);
                x = c(x);
                await Promise.all([x, t])
            })
        }
        get(u) {
            q(u);
            return e(this.name, async p => {
                var x = p.objectStore("keyvaluepairs").get(u);
                x = d(x);
                p = c(p);
                [, p] = await Promise.all([p, x]);
                return p
            })
        }
        delete(u) {
            q(u);
            return g(this.name, async p => {
                var x = p.objectStore("keyvaluepairs").delete(u);
                x = d(x);
                p = c(p);
                await Promise.all([p, x])
            })
        }
        clear() {
            return g(this.name, async u => {
                var p = u.objectStore("keyvaluepairs").clear();
                p = d(p);
                u = c(u);
                await Promise.all([u, p])
            })
        }
        keys() {
            return e(this.name, async u => {
                if (a) {
                    var p = u.objectStore("keyvaluepairs").getAllKeys();
                    p = d(p)
                } else p = y(u, "keys");
                u = c(u);
                [, u] = await Promise.all([u, p]);
                return u
            })
        }
        values() {
            return e(this.name, async u => {
                if (b) {
                    var p = u.objectStore("keyvaluepairs").getAll();
                    p = d(p)
                } else p = y(u, "values");
                u = c(u);
                [, u] = await Promise.all([u, p]);
                return u
            })
        }
        entries() {
            return e(this.name, async u => {
                var p = y(u, "entries");
                u = c(u);
                [, p] = await Promise.all([u, p]);
                return p
            })
        }
    }
    self.KVStorageContainer = w
}
"use strict"; {
    const f = self.KVStorageContainer,
        b = [/no available storage method found/i, /an attempt was made to break through the security policy of the user agent/i, /the user denied permission to access the database/i, /a mutation operation was attempted on a database that did not allow mutations/i, /idbfactory\.open\(\) called in an invalid security context/i],
        a = new WeakMap;
    let d = !1;
    "undefined" === typeof indexedDB && (d = !0, console.warn("Unable to use local storage because indexedDB is not defined"));

    function c(l) {
        throw Error(`"${l}" is not implemented`);
    }

    function e(l) {
        if ("function" === typeof l) throw Error("localforage callback API is not implemented; please use the promise API instead");
    }

    function g(l) {
        return "object" === typeof l ? new Promise(n => {
            const {
                port1: q,
                port2: y
            } = new MessageChannel;
            y.onmessage = w => n(w.data);
            q.postMessage(l)
        }) : Promise.resolve(l)
    }
    class h {
        constructor(l) {
            this._inst = l;
            a.set(this, new Map)
        }
        _MaybeSwitchToMemoryFallback(l) {
            if (!d)
                for (const n of b)
                    if (l && n.test(l.message)) {
                        console.error("Unable to use local storage, reverting to in-memory store: ",
                            l, l.message);
                        d = !0;
                        break
                    }
        }
        async _getItemFallback(l) {
            l = a.get(this).get(l);
            l = await g(l);
            return "undefined" === typeof l ? null : l
        }
        async _setItemFallback(l, n) {
            n = await g(n);
            a.get(this).set(l, n)
        }
        _removeItemFallback(l) {
            a.get(this).delete(l)
        }
        _clearFallback() {
            a.get(this).clear()
        }
        _keysFallback() {
            return Array.from(a.get(this).keys())
        }
        IsUsingFallback() {
            return d
        }
        async getItem(l, n) {
            e(n);
            if (d) return await this._getItemFallback(l);
            let q;
            try {
                q = await this._inst.get(l)
            } catch (y) {
                this._MaybeSwitchToMemoryFallback(y);
                if (d) return await this._getItemFallback(l);
                console.error(`Error reading '${l}' from storage, returning null: `, y);
                return null
            }
            return "undefined" === typeof q ? null : q
        }
        async setItem(l, n, q) {
            e(q);
            "undefined" === typeof n && (n = null);
            if (d) await this._setItemFallback(l, n);
            else try {
                await this._inst.set(l, n)
            } catch (y) {
                if (this._MaybeSwitchToMemoryFallback(y), d) await this._setItemFallback(l, n);
                else throw y;
            }
        }
        async removeItem(l, n) {
            e(n);
            if (d) this._removeItemFallback(l);
            else try {
                await this._inst.delete(l)
            } catch (q) {
                this._MaybeSwitchToMemoryFallback(q), d ? this._removeItemFallback(l) :
                    console.error(`Error removing '${l}' from storage: `, q)
            }
        }
        async clear(l) {
            e(l);
            if (d) this._clearFallback();
            else try {
                await this._inst.clear()
            } catch (n) {
                this._MaybeSwitchToMemoryFallback(n), d ? this._clearFallback() : console.error("Error clearing storage: ", n)
            }
        }
        async keys(l) {
            e(l);
            if (d) return this._keysFallback();
            l = [];
            try {
                l = await this._inst.keys()
            } catch (n) {
                this._MaybeSwitchToMemoryFallback(n);
                if (d) return this._keysFallback();
                console.error("Error getting storage keys: ", n)
            }
            return l
        }
        ready(l) {
            e(l);
            return d ? Promise.resolve(!0) :
                this._inst.ready()
        }
        createInstance(l) {
            if ("object" !== typeof l) throw new TypeError("invalid options object");
            l = l.name;
            if ("string" !== typeof l) throw new TypeError("invalid store name");
            l = new f(l);
            return new h(l)
        }
        length(l) {
            c("localforage.length()")
        }
        key(l, n) {
            c("localforage.key()")
        }
        iterate(l, n) {
            c("localforage.iterate()")
        }
        setDriver(l) {
            c("localforage.setDriver()")
        }
        config(l) {
            c("localforage.config()")
        }
        defineDriver(l) {
            c("localforage.defineDriver()")
        }
        driver() {
            c("localforage.driver()")
        }
        supports(l) {
            c("localforage.supports()")
        }
        dropInstance() {
            c("localforage.dropInstance()")
        }
        disableMemoryMode() {
            d = !1
        }
    }
    self.localforage = new h(new f("localforage"))
} {
    "use strict";
    const f = self.C3;
    f.Supports = {};
    f.Supports.WebAnimations = (() => {
        try {
            if ("Safari" === f.Platform.Browser || "undefined" === typeof document) return !1;
            const b = document.createElement("div");
            return "undefined" === typeof b.animate ? !1 : "undefined" !== typeof b.animate([{
                opacity: "0"
            }, {
                opacity: "1"
            }], 1E3).reverse
        } catch (b) {
            return !1
        }
    })();
    f.Supports.DialogElement = "undefined" !== typeof HTMLDialogElement;
    f.Supports.RequestIdleCallback = !!self.requestIdleCallback;
    f.Supports.ImageBitmap = !!self.createImageBitmap;
    f.Supports.ImageBitmapOptions = !1;
    if (f.Supports.ImageBitmap) try {
        self.createImageBitmap(new ImageData(32, 32), {
            premultiplyAlpha: "none"
        }).then(b => {
            f.Supports.ImageBitmapOptions = !0
        }).catch(b => {
            f.Supports.ImageBitmapOptions = !1
        })
    } catch (b) {
        f.Supports.ImageBitmapOptions = !1
    }
    f.Supports.ClipboardReadText = !(!navigator.clipboard || !navigator.clipboard.readText || "Firefox" === f.Platform.Browser);
    f.Supports.PermissionsQuery = !(!navigator.permissions || !navigator.permissions.query);
    f.Supports.Proxies = "undefined" !== typeof Proxy;
    f.Supports.DownloadAttribute =
        (() => "undefined" === typeof document ? !1 : "undefined" !== typeof document.createElement("a").download)();
    f.Supports.CanvasToBlob = (() => "undefined" !== typeof HTMLCanvasElement && HTMLCanvasElement.prototype.toBlob)();
    f.Supports.Fetch = "function" === typeof fetch;
    f.Supports.PersistentStorage = !!(self.isSecureContext && "Opera" !== f.Platform.Browser && navigator.storage && navigator.storage.persist);
    f.Supports.StorageQuotaEstimate = !!(self.isSecureContext && navigator.storage && navigator.storage.estimate);
    f.Supports.Fullscreen =
        (() => {
            if ("undefined" === typeof document || "iOS" === f.Platform.OS) return !1;
            const b = document.documentElement;
            return !!(b.requestFullscreen || b.msRequestFullscreen || b.mozRequestFullScreen || b.webkitRequestFullscreen)
        })();
    f.Supports.ImageDecoder = "undefined" !== typeof self.ImageDecoder;
    f.Supports.NativeFileSystemAPI = !!self.showOpenFilePicker;
    f.Supports.NavigatorFontsQuery = !(!navigator.fonts || !navigator.fonts.query)
} {
    "use strict";
    const f = self.C3;
    if (!String.prototype.trimStart) {
        const b = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*/;
        String.prototype.trimStart = function() {
            return this.replace(b, "")
        }
    }
    if (!String.prototype.trimEnd) {
        const b = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*$/;
        String.prototype.trimEnd = function() {
            return this.replace(b,
                "")
        }
    }
    String.prototype.replaceAll || (String.prototype.replaceAll = function(b, a) {
        return this.replace(new RegExp(f.EscapeRegex(b), "g"), a)
    });
    Array.prototype.values || (Array.prototype.values = function*() {
        for (const b of this) yield b
    });
    if (!Array.prototype.flat) {
        function b(a, d) {
            return a.reduce((c, e) => {
                0 < d && Array.isArray(e) ? Array.prototype.push.apply(c, b(e, d - 1)) : c.push(e);
                return c
            }, [])
        }
        Array.prototype.flat = function(a = 1) {
            return b(this, a)
        }
    }
    RegExp.escape || (RegExp.escape = function(b) {
        return String(b).replace(/[\\^$*+?.()|[\]{}]/g,
            "\\$&")
    });
    navigator.storage && !navigator.storage.estimate && navigator.webkitTemporaryStorage && navigator.webkitTemporaryStorage.queryUsageAndQuota && (navigator.storage.estimate = function() {
        return new Promise((b, a) => navigator.webkitTemporaryStorage.queryUsageAndQuota((d, c) => b({
            usage: d,
            quota: c
        }), a))
    });
    "undefined" === typeof HTMLCollection || HTMLCollection.prototype[Symbol.iterator] || (HTMLCollection.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof NodeList || NodeList.prototype[Symbol.iterator] || (NodeList.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof DOMTokenList || DOMTokenList.prototype[Symbol.iterator] || (DOMTokenList.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof FileList || FileList.prototype[Symbol.iterator] || (FileList.prototype[Symbol.iterator] =
        function() {
            let b = 0;
            return {
                next: () => b >= this.length ? {
                    done: !0
                } : {
                    value: this.item(b++),
                    done: !1
                }
            }
        });
    "undefined" === typeof TextEncoder && (self.TextEncoder = class {
        constructor() {
            Object.defineProperty(this, "encoding", {
                value: "utf-8",
                writable: !1
            })
        }
        encode(b) {
            for (var a = b.length, d = -1, c = new Uint8Array(3 * a), e, g, h = 0; h !== a;) {
                e = b.charCodeAt(h);
                h += 1;
                if (55296 <= e && 56319 >= e) {
                    if (h === a) {
                        c[d += 1] = 239;
                        c[d += 1] = 191;
                        c[d += 1] = 189;
                        break
                    }
                    g = b.charCodeAt(h);
                    if (56320 <= g && 57343 >= g) {
                        if (e = 1024 * (e - 55296) + g - 56320 + 65536, h += 1, 65535 < e) {
                            c[d += 1] = 240 |
                                e >>> 18;
                            c[d += 1] = 128 | e >>> 12 & 63;
                            c[d += 1] = 128 | e >>> 6 & 63;
                            c[d += 1] = 128 | e & 63;
                            continue
                        }
                    } else {
                        c[d += 1] = 239;
                        c[d += 1] = 191;
                        c[d += 1] = 189;
                        continue
                    }
                }
                127 >= e ? c[d += 1] = 0 | e : (2047 >= e ? c[d += 1] = 192 | e >>> 6 : (c[d += 1] = 224 | e >>> 12, c[d += 1] = 128 | e >>> 6 & 63), c[d += 1] = 128 | e & 63)
            }
            return new Uint8Array(c.buffer.slice(0, d + 1))
        }
        toString() {
            return "[object TextEncoder]"
        }
    }, TextEncoder[Symbol.toStringTag] = "TextEncoder");
    if ("undefined" === typeof TextDecoder) {
        function b(c) {
            const e = c[Symbol.iterator]();
            return {
                next: g => e.next(),
                [Symbol.iterator]() {
                    return this
                }
            }
        }

        function a(c) {
            c = c.next();
            if (c.done) throw Error("unexpected end of input");
            if (0 != (c.value & 192 ^ 128)) throw Error("invalid byte");
            return c.value & 63
        }
        const d = new Map;
        d.set("utf-8", (c, e) => {
            if (c.buffer) var g = new Uint8Array(c.buffer, c.byteOffset, c.byteLength);
            else if (g instanceof ArrayBuffer) g = new Uint8Array(c);
            else throw Error("Invalid parameter");
            c = b(g);
            g = [];
            try {
                for (const h of c) {
                    let l;
                    if (127 > h) l = h & 127;
                    else if (223 > h) l = (h & 31) << 6 | a(c);
                    else if (239 > h) l = (h & 15) << 12 | a(c) << 6 | a(c);
                    else if (247 > h) l = (h & 7) << 18 | a(c) <<
                        12 | a(c) << 6 | a(c);
                    else throw Error("Invalid character");
                    g.push(String.fromCodePoint(l))
                }
            } catch (h) {
                if (e) throw h;
                g.push("\ufffd")
            }
            return g.join("")
        });
        d.set("utf8", d.get("utf-8"));
        d.set("utf-16le", (c, e) => {
            throw Error("utf-16le decoder not implemented");
        });
        self.TextDecoder = class {
            constructor(c = "utf-8", e = {}) {
                const g = d.get(c);
                if (!g) throw Error(`TextDecoder polyfill does not support "${c}"`);
                Object.defineProperty(this, "fatal", {
                    value: !0 === e.fatal,
                    writable: !1
                });
                Object.defineProperty(this, "_decoder", {
                    value: g,
                    writable: !1
                });
                Object.defineProperty(this, "encoding", {
                    value: c,
                    writable: !1
                })
            }
            decode(c) {
                return this._decoder(c, this.fatal)
            }
            toString() {
                return "[object TextDecoder]"
            }
        };
        TextDecoder[Symbol.toStringTag] = "TextDecoder"
    }
    "undefined" === typeof self.isSecureContext && (self.isSecureContext = "https:" === location.protocol);
    "undefined" === typeof self.globalThis && (self.globalThis = self)
} {
    "use strict";
    const f = self.C3;

    function b(a) {
        let d = f.GetCallStack();
        console.error("Assertion failure: " + a + "\n\nStack trace:\n" + d)
    }
    self.assert = function(a, d) {
        a || b(d)
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X;
    f.IsNumber = function(d) {
        return "number" === typeof d
    };
    f.IsFiniteNumber = function(d) {
        return f.IsNumber(d) && isFinite(d)
    };
    f.RequireNumber = function(d) {
        if (!f.IsNumber(d)) throw new TypeError("expected number");
    };
    f.RequireOptionalNumber = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireNumberInRange = function(d, c, e) {
        if (!f.IsNumber(d) || isNaN(d) || c > d || e < d) throw new RangeError("number outside of range");
    };
    f.RequireAllNumber = function(...d) {
        for (let c of d);
    };
    f.RequireFiniteNumber =
        function(d) {
            if (!f.IsFiniteNumber(d)) throw new TypeError("expected finite number");
        };
    f.RequireOptionalFiniteNumber = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllFiniteNumber = function(...d) {
        for (let c of d);
    };
    f.IsString = function(d) {
        return "string" === typeof d
    };
    f.RequireString = function(d) {
        if (!f.IsString(d)) throw new TypeError("expected string");
    };
    f.RequireOptionalString = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllString = function(...d) {
        for (let c of d);
    };
    f.IsSimpleObject = function(d) {
        return "object" !==
            typeof d || null === d ? !1 : (d = Object.getPrototypeOf(d)) ? d.constructor === Object : null === d
    };
    f.RequireSimpleObject = function(d) {
        if (!f.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    f.RequireOptionalSimpleObject = function(d) {
        if (!f.IsNullOrUndefined(d) && !f.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    f.IsObject = function(d) {
        return "object" === typeof d && null !== d && !Array.isArray(d)
    };
    f.RequireObject = function(d) {
        if (!f.IsObject(d)) throw new TypeError("expected object");
    };
    f.RequireOptionalObject =
        function(d) {
            f.IsNullOrUndefined(d)
        };
    f.RequireAllObject = function(...d) {
        for (let c of d);
    };
    f.IsFileLike = function(d) {
        return f.IsInstanceOf(d, Blob) && "string" === typeof d.name
    };
    f.RequireFileLike = function(d) {
        if (!f.IsFileLike(d)) throw new TypeError("expected file");
    };
    f.RequireOptionalFileLike = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.IsArray = function(d) {
        return Array.isArray(d)
    };
    f.RequireArray = function(d) {
        if (!f.IsArray(d)) throw new TypeError("expected array");
    };
    f.RequireOptionalArray = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllArray = function(...d) {
        for (let c of d);
    };
    f.Is2DArray = function(d) {
        return f.IsArray(d) ? d.length ? f.IsArray(d[0]) ? !0 : !1 : !0 : !1
    };
    f.Require2DArray = function(d) {
        if (!f.Is2DArray(d)) throw new TypeError("expected 2d array");
        for (let c of d)
            if (!f.IsArray(c)) throw new TypeError("expected 2d array");
    };
    f.RequireOptional2DArray = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.IsFunction = function(d) {
        return "function" === typeof d
    };
    f.RequireFunction = function(d, c) {
        if (!f.IsFunction(d)) throw new TypeError("expected function");
        if (!f.IsNullOrUndefined(c) && d !== c) throw new TypeError("expected same function reference");
    };
    f.RequireOptionalFunction = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllFunction = function(...d) {
        for (let c of d);
    };
    f.RequireAnyFunction = function(d, ...c) {
        if (!f.IsFunction(d)) throw new TypeError("expected function");
        if (!c.length) throw Error("missing comparison functions");
        for (let e of c)
            if (!f.IsNullOrUndefined(e) && d === e) return;
        throw new TypeError("expected same function reference");
    };
    f.RequireOptionalAllFunction =
        function(...d) {
            if (!f.IsNullOrUndefined(d))
                for (let c of d);
        };
    f.IsInstanceOf = function(d, c) {
        return d instanceof c
    };
    f.IsInstanceOfAny = function(d, ...c) {
        for (let e of c)
            if (f.IsInstanceOf(d, e)) return !0;
        return !1
    };
    f.RequireInstanceOf = function(d, c) {
        if (!f.IsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    f.RequireOptionalInstanceOf = function(d, c) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllInstanceOf = function(d, ...c) {
        for (let e of c);
    };
    f.RequireAnyInstanceOf = function(d, ...c) {
        if (!f.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    f.RequireAnyOptionalInstanceOf = function(d, ...c) {
        if (!f.IsNullOrUndefined(d) && !f.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    f.IsArrayOf = function(d, c) {
        for (let e of d)
            if (!f.IsInstanceOf(e, c)) return !1;
        return !0
    };
    f.IsArrayOfFiniteNumbers = function(d) {
        for (let c of d)
            if (!f.IsFiniteNumber(c)) return !1;
        return !0
    };
    f.RequireArrayOf = function(d, c) {
        for (let e of d);
    };
    f.RequireOptionalArrayOf = function(d, c) {
        if (!f.IsNullOrUndefined(d))
            for (let e of d);
    };
    f.RequireArrayOfAny = function(d, ...c) {
        for (let e of d);
    };
    f.RequireOptionalArrayOfAny = function(d, ...c) {
        if (!f.IsNullOrUndefined(d))
            for (let e of d);
    };
    f.IsDOMNode = function(d, c) {
        return f.IsNullOrUndefined(d) || !f.IsString(d.nodeName) ? !1 : !c || f.equalsNoCase(d.nodeName, c)
    };
    f.RequireDOMNode = function(d, c) {
        if (f.IsNullOrUndefined(d) || !f.IsString(d.nodeName)) throw new TypeError("expected DOM node");
        if (c && !f.equalsNoCase(d.nodeName, c)) throw new TypeError(`expected DOM '${c}' node`);
    };
    f.RequireOptionalDOMNode = function(d, c) {
        f.IsNullOrUndefined(d)
    };
    f.IsHTMLElement = function(d,
        c) {
        return f.IsNullOrUndefined(d) || !f.IsString(d.tagName) ? !1 : !c || f.equalsNoCase(d.tagName, c)
    };
    f.RequireHTMLElement = function(d, c) {
        if (f.IsNullOrUndefined(d) || !f.IsString(d.tagName)) throw new TypeError("expected HTML element");
        if (c && !f.equalsNoCase(d.tagName, c)) throw new TypeError(`expected HTML '${c}' element`);
    };
    f.RequireOptionalHTMLElement = function(d, c) {
        f.IsNullOrUndefined(d)
    };
    f.IsDrawable = function(d) {
        return f.IsHTMLElement(d, "img") || f.IsHTMLElement(d, "canvas") || f.IsHTMLElement(d, "video") || "undefined" !==
            typeof OffscreenCanvas && d instanceof OffscreenCanvas || "undefined" !== typeof ImageBitmap && d instanceof ImageBitmap
    };
    f.RequireDrawable = function(d) {
        if (!f.IsDrawable(d)) throw new TypeError("expected drawable");
    };
    f.RequireOptionalDrawable = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.IsDrawableOrImageData = function(d) {
        return d instanceof ImageData ? !0 : f.IsDrawable(d)
    };
    f.RequireDrawableOrImageData = function(d) {
        if (!f.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    f.RequireOptionalDrawableOrImageData =
        function(d) {
            if (!f.IsNullOrUndefined(d) && !f.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
        };
    f.IsStringLike = function(d) {
        return "string" === typeof d || d instanceof f.HtmlString || d instanceof f.BBString
    };
    f.RequireStringLike = function(d) {
        if (!f.IsStringLike(d)) throw new TypeError("expected string-like");
    };
    f.RequireOptionalStringLike = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllStringLike = function(...d) {
        for (let c of d);
    };
    f.RequireOverride = function() {
        throw Error("must be overridden");
    };
    f.NotYetImplemented = function() {
        throw Error("not yet implemented");
    };
    f.IsDefined = function(d, ...c) {
        if ("undefined" === typeof d) return !1;
        for (let e of c) {
            if ("undefined" === typeof d[e]) return !1;
            d = d[e]
        }
        return !0
    };
    f.IsNullOrUndefined = function(d) {
        return "undefined" === typeof d || null === d
    };
    f.AreArrayElementsOfSameType = function(d) {
        let c = d[0].constructor;
        for (let e of d)
            if (e.constructor !== c) return !1;
        return c
    };
    f.AreArrayElementsOfType = function(d, c) {
        for (let e of d)
            if (!(e instanceof c)) return !1;
        return !0
    };
    const a = Object.getPrototypeOf(Uint8Array);
    f.IsTypedArray = function(d) {
        return f.IsInstanceOf(d, a)
    };
    f.RequireTypedArray = function(d) {};
    f.WeakRequireTypedArray = function(d) {
        f.WeakRequireInstanceOf(d, a)
    };
    f.WeakRequireAnyInstanceOf = function(d, ...c) {
        if (!f.WeakIsAnyInstanceOf(d, ...c)) throw new TypeError("unexpected type");
    };
    f.WeakIsAnyInstanceOf = function(d, ...c) {
        for (const e of c)
            if (f.WeakIsInstanceOf(d, e)) return !0;
        return !1
    };
    f.WeakRequireInstanceOf = function(d, c) {
        if (!f.WeakIsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    f.WeakIsInstanceOf =
        function(d, c) {
            for (; d = Object.getPrototypeOf(d);)
                if (d.constructor.name === c.name) return !0;
            return !1
        };
    b.RequireNumber = f.RequireNumber;
    b.RequireOptionalNumber = f.RequireOptionalNumber;
    b.RequireFiniteNumber = f.RequireFiniteNumber;
    b.RequireOptionalFiniteNumber = f.RequireOptionalFiniteNumber;
    b.RequireString = f.RequireString;
    b.RequireOptionalString = f.RequireOptionalString;
    b.RequireObject = f.RequireObject;
    b.RequireOptionalObject = f.RequireOptionalObject;
    b.RequireArray = f.RequireArray;
    b.RequireOptionalArray = f.RequireOptionalArray;
    b.RequireFunction = f.RequireFunction;
    b.RequireOptionalFunction = f.RequireOptionalFunction;
    b.RequireInstanceOf = f.RequireInstanceOf;
    b.RequireOptionalInstanceOf = f.RequireOptionalInstanceOf;
    b.IsNullOrUndefined = f.IsNullOrUndefined
} {
    "use strict";
    const f = self.C3,
        b = new Map;
    f.RafLog = function(p, ...x) {
        b.has(p) || b.set(p, -1); - 1 === b.get(p) && b.set(p, requestAnimationFrame(() => {
            console.log(`%c${p}`, "font-weight: bold", ...x);
            b.set(p, -1)
        }))
    };
    f.GetCallStack = function() {
        return Error().stack
    };
    f.Debugger = function() {
        debugger
    };
    f.cast = function(p, x) {
        return p && p instanceof x ? p : null
    };
    f.getName = function(p) {
        return "undefined" === typeof p ? "undefined" : null === p ? "null" : "boolean" === typeof p ? "<boolean>" : f.IsNumber(p) ? "<number>" : f.IsString(p) ? "<string>" : f.IsArray(p) ?
            "<array>" : "symbol" === typeof p ? "<" + p.toString() + ">" : f.IsFunction(p) ? p.name && "Function" !== p.name ? p.name : "<anonymous function>" : "object" === typeof p ? p.constructor && p.constructor.name && "Object" !== p.constructor.name ? p.constructor.name : "<anonymous object>" : "<unknown>"
    };
    f.getType = function(p) {
        return null === p ? "null" : Array.isArray(p) ? "array" : typeof p
    };
    f.range = function*(p, x) {
        if (!isFinite(Math.abs(p - x))) throw Error("Invalid parameters");
        if (p > x)
            for (--p; p >= x; p--) yield p;
        else
            for (; p < x; p++) yield p
    };

    function a(p, x) {
        p =
            f.getType(p);
        x = f.getType(x);
        return "null" === p || "null" === x ? !0 : "undefined" === p || "undefined" === x ? !1 : p === x
    }
    let d = new Map,
        c = new Map,
        e = new WeakMap,
        g = new WeakMap;
    f.DefendHandler = {};
    const h = new Set(["then", "splice"]);

    function l(p) {
        console.warn("[Defence] " + p + " @", f.GetCallStack())
    }
    f.DefendHandler.get = function(p, x) {
        x in p || "symbol" === typeof x || h.has(x) || l(`Accessed missing property '${x}' from defended object '${f.getName(p)}', returning undefined`);
        g.has(p) && "symbol" !== typeof x && !h.has(x) && l(`Accessed property '${x}' on a released object '${f.getName(p)}'\nObject was originally released at: ${g.get(p)})\nCall stack at access: `);
        return p[x]
    };
    f.DefendHandler.set = function(p, x, t) {
        x in p || d.has(p) || l(`Set non-existent property '${x}' to '${t}' on defended object '${f.getName(p)}'`);
        a(p[x], t) || d.has(p) || l(`Set '${f.getType(p[x])}' property '${x}' to type '${f.getType(t)}' on defended object '${f.getName(p)}'`);
        g.has(p) && l(`Set property '${x}' on a released object '${f.getName(p)}'\nObject was originally released at: ${g.get(p)})\nCall stack at access: `);
        p[x] = t;
        return !0
    };
    f.DefendHandler.deleteProperty = function(p, x) {
        throw new ReferenceError(`Cannot delete property '${x}' from defended object '${f.getName(p)}'`);
    };
    f.DefendHandler.defineProperty = function(p, x, t) {
        throw new ReferenceError(`Cannot define property '${x}' on defended object '${f.getName(p)}'`);
    };
    f.DefendHandler.enumerate = function(p) {
        throw new ReferenceError(`Cannot enumerate defended object '${f.getName(p)}'`);
    };
    let n = -1;

    function q() {
        n = -1;
        if (0 < d.size || 0 < c.size) {
            let p = [...new Set([...d.keys()].map(x => f.getName(x)))].join();
            console.warn(`An object derived from DefendedBase was not protected with debugDefend(). This will disable some checks. See the coding guidelines! Possible affected class names: ${p}`);
            d.clear();
            c.clear()
        }
    }
    f.DefendedBase = class {
        constructor() {
            if (f.isDebugDefend && f.Supports.Proxies) {
                var p = new.target;
                p = Object.create(p.prototype);
                var x = new Proxy(p, f.DefendHandler);
                d.set(p, x);
                c.set(x, p);
                e.set(x, p); - 1 === n && (n = requestAnimationFrame(q));
                return x
            }
        }
    };
    f.debugDefend = function(p) {
        if (f.isDebugDefend && f.Supports.Proxies && p instanceof f.DefendedBase) {
            if (!c.has(p)) return p;
            let x = c.get(p);
            c.delete(p);
            d.delete(x);
            return p
        }
        return f.isDebug ? Object.seal(p) : p
    };
    f.New = function(p, ...x) {
        let t;
        try {
            t = new p(...x)
        } catch (r) {
            throw c.clear(),
                d.clear(), r;
        }
        f.isDebugDefend && u(p, t);
        return f.debugDefend(t)
    };
    f.Release = function(p) {
        (p = e.get(p)) && g.set(p, f.GetCallStack())
    };
    f.WasReleased = function(p) {
        return (p = e.get(p)) ? !!g.get(p) : !1
    };
    let y = new Map;

    function w(p) {
        let x = new Set;
        for (let t in p) x.add(t);
        return x
    }

    function u(p, x) {
        x = w(x);
        let t = y.get(p);
        if (t) {
            let r = [];
            for (let B of t.values()) x.has(B) ? x.delete(B) : r.push(B);
            f.appendArray(r, [...x]);
            r.length && console.warn(`[Defence] '${f.getName(p)}' constructor creates inconsistent properties: ${r.join(", ")}`)
        } else y.set(p,
            x)
    }
    f.PerfMark = class {
        constructor(p) {
            this._name = "";
            p && this.start(p)
        }
        start(p) {
            this._name = p;
            performance.mark(this._name + "-Start")
        }
        end() {
            performance.mark(this._name + "-End");
            performance.measure(this._name, this._name + "-Start", this._name + "-End")
        }
        next(p) {
            this.end();
            this._name = p;
            performance.mark(this._name + "-Start")
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = 2 * Math.PI,
        a = Math.PI / 180,
        d = 180 / Math.PI;
    f.wrap = function(g, h, l) {
        g = Math.floor(g);
        h = Math.floor(h);
        l = Math.floor(l);
        return g < h ? (g = l - (h - g) % (l - h), g === l ? 0 : g) : h + (g - h) % (l - h)
    };
    f.mapToRange = function(g, h, l, n, q) {
        return (g - h) * (q - n) / (l - h) + n
    };
    f.normalize = function(g, h, l) {
        return (g - h) / (l - h)
    };
    f.clamp = function(g, h, l) {
        return g < h ? h : g > l ? l : g
    };
    f.clampAngle = function(g) {
        g %= b;
        0 > g && (g += b);
        return g
    };
    f.toRadians = function(g) {
        return g * a
    };
    f.toDegrees = function(g) {
        return g * d
    };
    f.distanceTo = function(g, h, l, n) {
        return Math.hypot(l -
            g, n - h)
    };
    f.distanceSquared = function(g, h, l, n) {
        g = l - g;
        h = n - h;
        return g * g + h * h
    };
    f.angleTo = function(g, h, l, n) {
        return Math.atan2(n - h, l - g)
    };
    f.angleDiff = function(g, h) {
        if (g === h) return 0;
        g = Math.sin(g) * Math.sin(h) + Math.cos(g) * Math.cos(h);
        return 1 <= g ? 0 : -1 >= g ? Math.PI : Math.acos(g)
    };
    f.angleRotate = function(g, h, l) {
        let n = Math.sin(g),
            q = Math.cos(g),
            y = Math.sin(h),
            w = Math.cos(h);
        return Math.acos(n * y + q * w) > l ? 0 < q * y - n * w ? f.clampAngle(g + l) : f.clampAngle(g - l) : f.clampAngle(h)
    };
    f.angleClockwise = function(g, h) {
        return 0 >= Math.cos(g) * Math.sin(h) -
            Math.sin(g) * Math.cos(h)
    };
    f.angleLerp = function(g, h, l, n = 0) {
        let q = f.angleDiff(g, h);
        n *= b;
        return f.angleClockwise(h, g) ? f.clampAngle(g + (q + n) * l) : f.clampAngle(g - (q + n) * l)
    };
    f.angleLerpClockwise = function(g, h, l, n = 0) {
        const q = f.angleDiff(g, h);
        n *= b;
        return f.angleClockwise(h, g) ? f.clampAngle(g + (q + n) * l) : f.clampAngle((b - q + n) * l)
    };
    f.angleLerpAntiClockwise = function(g, h, l, n = 0) {
        const q = f.angleDiff(g, h);
        n *= b;
        return f.angleClockwise(h, g) ? f.clampAngle((-b + q - n) * l) : f.clampAngle(g - (q + n) * l)
    };
    f.lerp = function(g, h, l) {
        return g + l * (h -
            g)
    };
    f.unlerp = function(g, h, l) {
        return g === h ? 0 : (l - g) / (h - g)
    };
    f.relerp = function(g, h, l, n, q) {
        return f.lerp(n, q, f.unlerp(g, h, l))
    };
    f.qarp = function(g, h, l, n) {
        return f.lerp(f.lerp(g, h, n), f.lerp(h, l, n), n)
    };
    f.cubic = function(g, h, l, n, q) {
        return f.lerp(f.qarp(g, h, l, q), f.qarp(h, l, n, q), q)
    };
    f.cosp = function(g, h, l) {
        return (g + h + (g - h) * Math.cos(l * Math.PI)) / 2
    };
    f.isPOT = function(g) {
        return 0 < g && 0 === (g - 1 & g)
    };
    f.nextHighestPowerOfTwo = function(g) {
        --g;
        for (let h = 1; 32 > h; h <<= 1) g |= g >> h;
        return g + 1
    };
    f.roundToNearestFraction = function(g, h) {
        return Math.round(g *
            h) / h
    };
    f.floorToNearestFraction = function(g, h) {
        return Math.floor(g * h) / h
    };
    f.round6dp = function(g) {
        return Math.round(1E6 * g) / 1E6
    };
    f.toFixed = function(g, h) {
        g = g.toFixed(h);
        for (h = g.length - 1; 0 <= h && "0" === g.charAt(h); --h);
        0 <= h && "." === g.charAt(h) && --h;
        return 0 > h ? g : g.substr(0, h + 1)
    };
    f.PackRGB = function(g, h, l) {
        return f.clamp(g, 0, 255) | f.clamp(h, 0, 255) << 8 | f.clamp(l, 0, 255) << 16
    };
    f.PackRGBAEx = function(g, h, l, n) {
        g = f.clamp(Math.floor(1024 * g), -8192, 8191);
        h = f.clamp(Math.floor(1024 * h), -8192, 8191);
        l = f.clamp(Math.floor(1024 * l), -8192, 8191);
        n = f.clamp(Math.floor(1023 * n), 0, 1023);
        0 > g && (g += 16384);
        0 > h && (h += 16384);
        0 > l && (l += 16384);
        return -(274877906944 * g + 16777216 * h + 1024 * l + n)
    };
    f.PackRGBEx = function(g, h, l) {
        return f.PackRGBAEx(g, h, l, 1)
    };

    function c(g) {
        return 0 === g && 0 > 1 / g
    }
    f.GetRValue = function(g) {
        if (0 <= g) return (g & 255) / 255;
        g = Math.floor(-g / 274877906944);
        8191 < g && (g -= 16384);
        return g / 1024
    };
    f.GetGValue = function(g) {
        if (0 <= g) return ((g & 65280) >> 8) / 255;
        g = Math.floor(-g % 274877906944 / 16777216);
        8191 < g && (g -= 16384);
        return g / 1024
    };
    f.GetBValue = function(g) {
        if (0 <=
            g) return ((g & 16711680) >> 16) / 255;
        g = Math.floor(-g % 16777216 / 1024);
        8191 < g && (g -= 16384);
        return g / 1024
    };
    f.GetAValue = function(g) {
        return c(g) ? 0 : 0 <= g ? 1 : Math.floor(-g % 1024) / 1023
    };
    f.greatestCommonDivisor = function(g, h) {
        g = Math.floor(g);
        for (h = Math.floor(h); 0 !== h;) {
            let l = h;
            h = g % h;
            g = l
        }
        return g
    };
    const e = [
        [3, 2],
        [4, 3],
        [5, 4],
        [5, 3],
        [6, 5],
        [14, 9],
        [16, 9],
        [16, 10],
        [21, 9]
    ];
    f.getAspectRatio = function(g, h) {
        g = Math.floor(g);
        h = Math.floor(h);
        if (g === h) return [1, 1];
        for (var l of e) {
            let n = g / l[0] * l[1];
            if (1 > Math.abs(h - n)) return l.slice(0);
            n = g / l[1] * l[0];
            if (1 > Math.abs(h - n)) return [l[1], l[0]]
        }
        l = f.greatestCommonDivisor(g, h);
        return [g / l, h / l]
    };
    f.segmentsIntersect = function(g, h, l, n, q, y, w, u) {
        var p = Math.min(g, l),
            x = Math.max(q, w);
        if (Math.max(g, l) < Math.min(q, w) || p > x) return !1;
        p = Math.min(h, n);
        x = Math.max(y, u);
        if (Math.max(h, n) < Math.min(y, u) || p > x) return !1;
        p = q - g + w - l;
        x = y - h + u - n;
        g = l - g;
        h = n - h;
        q = w - q;
        y = u - y;
        u = Math.abs(h * q - y * g);
        return Math.abs(q * x - y * p) > u ? !1 : Math.abs(g * x - h * p) <= u
    };
    f.segmentsIntersectPreCalc = function(g, h, l, n, q, y, w, u, p, x, t, r) {
        const B = Math.max(p, t);
        if (y < Math.min(p, t) || q > B) return !1;
        q = Math.max(x, r);
        if (u < Math.min(x, r) || w > q) return !1;
        w = p - g + t - l;
        u = x - h + r - n;
        g = l - g;
        h = n - h;
        p = t - p;
        x = r - x;
        r = Math.abs(h * p - x * g);
        return Math.abs(p * u - x * w) > r ? !1 : Math.abs(g * u - h * w) <= r
    };
    f.segmentIntersectsQuad = function(g, h, l, n, q) {
        const y = Math.min(g, l),
            w = Math.max(g, l),
            u = Math.min(h, n),
            p = Math.max(h, n),
            x = q.getTlx(),
            t = q.getTly(),
            r = q.getTrx(),
            B = q.getTry(),
            z = q.getBrx(),
            C = q.getBry(),
            F = q.getBlx();
        q = q.getBly();
        return f.segmentsIntersectPreCalc(g, h, l, n, y, w, u, p, x, t, r, B) || f.segmentsIntersectPreCalc(g,
            h, l, n, y, w, u, p, r, B, z, C) || f.segmentsIntersectPreCalc(g, h, l, n, y, w, u, p, z, C, F, q) || f.segmentsIntersectPreCalc(g, h, l, n, y, w, u, p, F, q, x, t)
    };
    f.segmentIntersectsAnyN = function(g, h, l, n, q) {
        const y = Math.min(g, l),
            w = Math.max(g, l),
            u = Math.min(h, n),
            p = Math.max(h, n);
        let x = 0;
        for (let t = q.length - 4; x <= t; x += 2)
            if (f.segmentsIntersectPreCalc(g, h, l, n, y, w, u, p, q[x], q[x + 1], q[x + 2], q[x + 3])) return !0;
        return f.segmentsIntersectPreCalc(g, h, l, n, y, w, u, p, q[x], q[x + 1], q[0], q[1])
    };
    f.rayIntersect = function(g, h, l, n, q, y, w, u) {
        l -= g;
        y = u - y;
        const p = l *
            y - (n - h) * (w - q);
        if (0 === p) return 2;
        n = ((h - n) * (w - g) + l * (u - h)) / p;
        return 0 < n && 1.000001 > n ? (y * (w - g) + (q - w) * (u - h)) / p : 2
    };
    f.rayIntersectExtended = function(g, h, l, n, q, y, w, u, p) {
        const x = (w - q) * p;
        p *= u - y;
        return f.rayIntersect(g, h, l, n, q - x, y - p, w + x, u + p)
    };
    f.isPointInTriangleInclusive = function(g, h, l, n, q, y, w, u) {
        q -= l;
        y -= n;
        w -= l;
        u -= n;
        g -= l;
        l = h - n;
        h = q * q + y * y;
        n = q * w + y * u;
        q = q * g + y * l;
        y = w * w + u * u;
        w = w * g + u * l;
        u = 1 / (h * y - n * n);
        y = (y * q - n * w) * u;
        q = (h * w - n * q) * u;
        return 0 <= y && 0 <= q && 1 >= y + q
    };
    f.triangleCartesianToBarycentric = function(g, h, l, n, q, y, w, u) {
        q -= l;
        y -=
            n;
        w -= l;
        u -= n;
        g -= l;
        const p = h - n;
        h = q * q + y * y;
        n = q * w + y * u;
        l = w * w + u * u;
        q = g * q + p * y;
        y = g * w + p * u;
        w = h * l - n * n;
        u = (l * q - n * y) / w;
        q = (h * y - n * q) / w;
        return [1 - u - q, u, q]
    };
    f.triangleBarycentricToCartesian = function(g, h, l, n, q, y, w, u, p) {
        return [g * n + h * y + l * u, g * q + h * w + l * p]
    }
} {
    "use strict";
    const f = self.C3;
    let b = null,
        a = "";
    if ("undefined" !== typeof document) {
        b = document;
        const l = document.querySelector("base");
        if (a = l && l.hasAttribute("href") ? l.getAttribute("href") : "") a.startsWith("/") && (a = a.substr(1)), a.endsWith("/") || (a += "/")
    }
    f.GetBaseHref = function() {
        return a
    };
    f.GetBaseURL = function() {
        if (!b) return "";
        const l = b.location;
        return f.GetPathFromURL(l.origin + l.pathname) + a
    };
    f.GetPathFromURL = function(l) {
        if (!l.length || l.endsWith("/") || l.endsWith("\\")) return l;
        const n = Math.max(l.lastIndexOf("/"),
            l.lastIndexOf("\\"));
        return -1 === n ? "" : l.substr(0, n + 1)
    };
    f.GetFilenameFromURL = function(l) {
        if (!l.length) return l;
        if (l.endsWith("/") || l.endsWith("\\")) return "";
        const n = Math.max(l.lastIndexOf("/"), l.lastIndexOf("\\"));
        return -1 === n ? l : l.substr(n + 1)
    };
    f.GetFileExtension = function(l) {
        let n = l.lastIndexOf(".");
        return 1 > n ? "" : l.substr(n)
    };
    f.GetFileNamePart = function(l) {
        let n = l.lastIndexOf(".");
        return 1 > n ? l : l.substr(0, n)
    };
    f.NormalizeFileSeparator = function(l) {
        return l.replace(/\\/g, "/")
    };
    f.IsFileExtension = function(l,
        n) {
        l = l ? f.GetFileExtension(l).slice(1) : "";
        return n === l
    };
    f.FileNameEquals = function(l, n) {
        let q, y;
        f.IsFileLike(l) && (q = f.GetFileNamePart(l.name));
        f.IsString(l) && (q = f.GetFileNamePart(l));
        f.IsFileLike(n) && (y = f.GetFileNamePart(n.name));
        f.IsString(n) && (y = f.GetFileNamePart(n));
        return q === y
    };
    f.ParseFilePath = function(l) {
        l = f.NormalizeFileSeparator(l);
        let n = /^\w:\//.exec(l);
        n ? (n = n[0], l = l.slice(3), "/" !== l[0] && (l = "/" + l)) : n = "";
        l = l.replace(/\/{2,}/g, "/");
        1 < l.length && "/" === l.slice(-1) && (l = l.slice(0, -1));
        var q = l.lastIndexOf("/") +
            1;
        let y = "",
            w = l,
            u = "";
        0 < q && (y = l.slice(0, q), w = l.slice(q));
        l = w;
        q = w.lastIndexOf(".");
        0 < q && (u = w.slice(q), l = w.slice(0, -u.length));
        return {
            dir: y,
            base: w,
            name: l,
            root: n,
            ext: u,
            full: n + y + w
        }
    };
    f.Wait = function(l, n) {
        return new Promise((q, y) => {
            self.setTimeout(q, l, n)
        })
    };
    f.swallowException = function(l) {
        try {
            l()
        } catch (n) {
            f.isDebug && console.warn("Swallowed exception: ", n)
        }
    };
    f.noop = function() {};
    f.equalsNoCase = function(l, n) {
        return "string" !== typeof l || "string" !== typeof n ? !1 : l === n || l.normalize().toLowerCase() === n.normalize().toLowerCase()
    };
    f.equalsCase = function(l, n) {
        return "string" !== typeof l || "string" !== typeof n ? !1 : l === n ? !0 : l.normalize() === n.normalize()
    };
    f.typedArraySet16 = function(l, n, q) {
        l[q++] = n[0];
        l[q++] = n[1];
        l[q++] = n[2];
        l[q++] = n[3];
        l[q++] = n[4];
        l[q++] = n[5];
        l[q++] = n[6];
        l[q++] = n[7];
        l[q++] = n[8];
        l[q++] = n[9];
        l[q++] = n[10];
        l[q++] = n[11];
        l[q++] = n[12];
        l[q++] = n[13];
        l[q++] = n[14];
        l[q] = n[15]
    };
    f.truncateArray = function(l, n) {
        l.length = n
    };
    f.clearArray = function(l) {
        l && 0 !== l.length && f.truncateArray(l, 0)
    };
    f.clear2DArray = function(l) {
        if (l) {
            for (let n = 0; n <
                l.length; n++) f.truncateArray(l[n], 0);
            f.truncateArray(l, 0)
        }
    };
    f.extendArray = function(l, n, q) {
        n |= 0;
        var y = l.length;
        if (!(n <= y))
            for (; y < n; ++y) l.push(q)
    };
    f.resizeArray = function(l, n, q) {
        n |= 0;
        const y = l.length;
        n < y ? f.truncateArray(l, n) : n > y && f.extendArray(l, n, q)
    };
    f.shallowAssignArray = function(l, n) {
        f.clearArray(l);
        f.appendArray(l, n)
    };
    f.appendArray = function(l, n) {
        if (1E4 > n.length) l.push(...n);
        else
            for (let q = 0, y = n.length; q < y; ++q) l.push(n[q])
    };
    f.arrayRemove = function(l, n) {
        n = Math.floor(n);
        if (!(0 > n || n >= l.length)) {
            for (var q =
                    l.length - 1; n < q; ++n) l[n] = l[n + 1];
            f.truncateArray(l, q)
        }
    };
    f.arrayFindRemove = function(l, n) {
        n = l.indexOf(n);
        0 <= n && l.splice(n, 1)
    };
    f.arraysEqual = function(l, n) {
        let q = l.length;
        if (n.length !== q) return !1;
        for (let y = 0; y < q; ++y)
            if (l[y] !== n[y]) return !1;
        return !0
    };
    f.arrayFilterOut = function(l, n) {
        let q = [],
            y = 0;
        for (let w = 0, u = l.length; w < u; ++w) {
            let p = l[w];
            n(p) ? q.push(p) : (l[y] = p, ++y)
        }
        f.truncateArray(l, y);
        return q
    };
    f.arrayRemoveAllInSet = function(l, n) {
        const q = l.length;
        let y = 0;
        for (let w = 0, u = l.length; w < u; ++w) {
            let p = l[w];
            n.has(p) ||
                (l[y++] = p)
        }
        f.truncateArray(l, y);
        return q - y
    };
    f.isArrayIndexInBounds = function(l, n) {
        return l !== Math.floor(l) ? !1 : 0 <= l && l < n.length
    };
    f.validateArrayIndex = function(l, n) {
        if (!f.isArrayIndexInBounds(l, n)) throw new RangeError("array index out of bounds");
    };
    f.cloneArray = function(l) {
        return l.slice()
    };
    f.deepCloneArray = function(l, n) {
        let q = [];
        for (let y of l)
            if (f.IsObject(y)) {
                l = n(y);
                if (!l) throw Error("missing clone");
                if (l.constructor !== y.constructor) throw Error("object is not a clone");
                q.push(l)
            } else f.IsArray(y) ?
                q.push(f.deepCloneArray(y, n)) : q.push(y);
        return q
    };
    f.clone2DArray = function(l) {
        let n = [];
        for (let q of l) n.push(q.slice());
        return n
    };
    f.mergeSets = function(l, n) {
        return new Set([...l, ...n])
    };
    f.mergeSetsInPlace = function(l, n) {
        for (const q of n) l.add(q);
        return l
    };
    f.first = function(l) {
        for (let n of l) return n;
        return null
    };
    f.xor = function(l, n) {
        return !l !== !n
    };
    f.compare = function(l, n, q) {
        switch (n) {
            case 0:
                return l === q;
            case 1:
                return l !== q;
            case 2:
                return l < q;
            case 3:
                return l <= q;
            case 4:
                return l > q;
            case 5:
                return l >= q;
            default:
                return !1
        }
    };
    f.hasAnyOwnProperty = function(l) {
        for (let n in l)
            if (l.hasOwnProperty(n)) return !0;
        return !1
    };
    f.PromiseAllWithProgress = function(l, n) {
        return l.length ? new Promise((q, y) => {
            const w = [];
            let u = 0,
                p = !1;
            for (let x = 0, t = l.length; x < t; ++x) w.push(void 0), l[x].then(r => {
                p || (w[x] = r, ++u, u === l.length ? q(w) : n(u, l.length))
            }).catch(r => {
                p = !0;
                y(r)
            })
        }) : Promise.resolve([])
    };
    let d = [];
    f.AddLibraryMemoryCallback = function(l) {
        d.push(l)
    };
    f.GetEstimatedLibraryMemoryUsage = function() {
        let l = 0;
        for (let n of d) {
            let q = n();
            l += q
        }
        return Math.floor(l)
    };
    let c = 1;
    const e = new Map,
        g = new MessageChannel;
    g.port2.onmessage = function(l) {
        l = l.data;
        const n = e.get(l);
        e.delete(l);
        n && n(performance.now())
    };
    f.RequestUnlimitedAnimationFrame = function(l) {
        const n = c++;
        e.set(n, l);
        g.port1.postMessage(n);
        return n
    };
    f.CancelUnlimitedAnimationFrame = function(l) {
        e.delete(l)
    };
    f.PostTask = f.RequestUnlimitedAnimationFrame;
    f.WaitForNextTask = function() {
        return new Promise(l => f.PostTask(l))
    };
    const h = new Set;
    f.RequestPostAnimationFrame = function(l) {
        const n = self.requestAnimationFrame(async q => {
            await f.WaitForNextTask();
            h.has(n) && (h.delete(n), l(q))
        });
        h.add(n);
        return n
    };
    f.CancelPostAnimationFrame = function(l) {
        h.has(l) && (self.cancelAnimationFrame(l), h.delete(l))
    }
} {
    "use strict";
    const f = self.C3;
    f.IsAbsoluteURL = function(b) {
        return /^(?:[a-z\-]+:)?\/\//.test(b) || "data:" === b.substr(0, 5) || "blob:" === b.substr(0, 5)
    };
    f.IsRelativeURL = function(b) {
        return !f.IsAbsoluteURL(b)
    };
    f.ThrowIfNotOk = function(b) {
        if (!b.ok) throw Error(`fetch '${b.url}' response returned ${b.status} ${b.statusText}`);
    };
    f.FetchOk = function(b, a) {
        return fetch(b, a).then(d => {
            f.ThrowIfNotOk(d);
            return d
        })
    };
    f.FetchText = function(b) {
        return f.FetchOk(b).then(a => a.text())
    };
    f.FetchJson = function(b) {
        return f.FetchOk(b).then(a =>
            a.json())
    };
    f.FetchBlob = function(b) {
        return f.FetchOk(b).then(a => a.blob())
    };
    f.FetchArrayBuffer = function(b) {
        return f.FetchOk(b).then(a => a.arrayBuffer())
    };
    f.FetchImage = function(b) {
        return new Promise((a, d) => {
            const c = new Image;
            c.onload = () => a(c);
            c.onerror = e => d(e);
            c.src = b
        })
    };
    f.BlobToArrayBuffer = function(b) {
        return "function" === typeof b.arrayBuffer ? b.arrayBuffer() : new Promise((a, d) => {
            const c = new FileReader;
            c.onload = () => a(c.result);
            c.onerror = () => d(c.error);
            c.readAsArrayBuffer(b)
        })
    };
    f.BlobToString = function(b) {
        return "function" ===
            typeof b.text ? b.text() : new Promise((a, d) => {
                const c = new FileReader;
                c.onload = () => a(c.result);
                c.onerror = () => d(c.error);
                c.readAsText(b)
            })
    };
    f.BlobToJson = function(b) {
        return f.BlobToString(b).then(a => JSON.parse(a))
    };
    f.BlobToImage = async function(b, a) {
        b = URL.createObjectURL(b);
        try {
            const d = await f.FetchImage(b);
            URL.revokeObjectURL(b);
            b = "";
            a && "function" === typeof d.decode && await d.decode();
            return d
        } finally {
            b && URL.revokeObjectURL(b)
        }
    };
    f.CreateCanvas = function(b, a) {
        if ("undefined" !== typeof document && "function" ===
            typeof document.createElement) {
            const d = document.createElement("canvas");
            d.width = b;
            d.height = a;
            return d
        }
        return new OffscreenCanvas(b, a)
    };
    f.CanvasToBlob = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = f.clamp(d, 0, 1);
        return b.toBlob ? new Promise(c => b.toBlob(c, a, d)) : b.convertToBlob ? b.convertToBlob({
            type: a,
            quality: d
        }) : f.Asyncify(() => f.CanvasToBlobSync(b, a, d))
    };
    f.CanvasToBlobSync = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = f.clamp(d, 0, 1);
        return f.DataURIToBinaryBlobSync(b.toDataURL(a,
            d))
    };
    f.DataURIToBinaryBlobSync = function(b) {
        b = f.ParseDataURI(b);
        return f.BinaryStringToBlob(b.data, b.mime_type)
    };
    f.ParseDataURI = function(b) {
        if ("data:" !== b.substr(0, 5)) throw new URIError("expected data: uri");
        var a = b.indexOf(",");
        if (0 > a) throw new URIError("expected comma in data: uri");
        var d = b.substring(5, a);
        b = b.substring(a + 1);
        a = d.split(";");
        d = a[0] || "";
        let c = a[2];
        b = "base64" === a[1] || "base64" === c ? atob(b) : decodeURIComponent(b);
        return {
            mime_type: d,
            data: b
        }
    };
    f.BinaryStringToBlob = function(b, a) {
        var d = b.length;
        let c = d >> 2,
            e = new Uint8Array(d),
            g = new Uint32Array(e.buffer, 0, c),
            h, l;
        for (l = h = 0; h < c; ++h) g[h] = b.charCodeAt(l++) | b.charCodeAt(l++) << 8 | b.charCodeAt(l++) << 16 | b.charCodeAt(l++) << 24;
        for (d &= 3; d--;) e[l] = b.charCodeAt(l), ++l;
        return a ? new Blob([e], {
            type: a
        }) : new Blob([e])
    };
    f.DrawableToBlob = function(b, a, d) {
        const c = f.CreateCanvas(b.width, b.height);
        c.getContext("2d").drawImage(b, 0, 0);
        return f.CanvasToBlob(c, a, d)
    };
    f.ImageDataToBlobSync = function(b, a, d) {
        const c = f.CreateCanvas(b.width, b.height);
        c.getContext("2d").putImageData(b,
            0, 0);
        return f.CanvasToBlobSync(c, a, d)
    };
    f.ImageDataToBlob = function(b, a, d) {
        if (f.Supports.ImageBitmapOptions) return createImageBitmap(b, {
            premultiplyAlpha: "none"
        }).then(c => f.DrawableToBlob(c, a, d));
        if (f.Supports.ImageBitmap) return createImageBitmap(b).then(c => f.DrawableToBlob(c, a, d)); {
            const c = f.CreateCanvas(b.width, b.height);
            c.getContext("2d").putImageData(b, 0, 0);
            return f.CanvasToBlob(c, a, d)
        }
    };
    f.CopySet = function(b, a) {
        b.clear();
        for (const d of a) b.add(d)
    };
    f.MapToObject = function(b) {
        const a = Object.create(null);
        for (const [d, c] of b.entries()) a[d] = c;
        return a
    };
    f.ObjectToMap = function(b, a) {
        a.clear();
        for (const [d, c] of Object.entries(b)) a.set(d, c)
    };
    f.ToSuperJSON = function d(a) {
        if ("object" === typeof a && null !== a) {
            if (a instanceof Set) return {
                _c3type_: "set",
                data: [...a].map(c => d(c))
            };
            if (a instanceof Map) return {
                _c3type_: "map",
                data: [...a].map(c => [c[0], d(c[1])])
            }; {
                const c = Object.create(null);
                for (const [e, g] of Object.entries(a)) c[e] = d(g);
                return c
            }
        }
        return a
    };
    f.FromSuperJSON = function c(d) {
        if ("object" === typeof d & null !== d) {
            if ("set" ===
                d._c3type_) return new Set(d.data.map(e => c(e)));
            if ("map" === d._c3type_) return new Map(d.data.map(e => [e[0], c(e[1])])); {
                const e = Object.create(null);
                for (const [g, h] of Object.entries(d)) e[g] = c(h);
                return e
            }
        }
        return d
    };
    f.CSSToCamelCase = function(d) {
        let c = "",
            e = !1;
        for (const g of d) "-" === g ? e = !0 : e ? (c += g.toUpperCase(), e = !1) : c += g;
        return c
    };
    f.IsIterator = function(d) {
        return "object" === typeof d && "function" === typeof d.next
    };
    f.MakeFilledArray = function(d, c) {
        const e = [];
        if ("function" === typeof c)
            for (var g = 0; g < d; ++g) e.push(c());
        else
            for (g = 0; g < d; ++g) e.push(c);
        return e
    }
} {
    "use strict";
    const f = self.C3,
        b = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?/i,
        a = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?,([0-9.])/i;

    function d(e) {
        return 0 === e.length ? "00" : 1 === e.length ? "0" + e : e
    }

    function c(e, g, h) {
        0 > h && (h += 1);
        1 < h && --h;
        return h < 1 / 6 ? e + 6 * (g - e) * h : .5 > h ? g : h < 2 / 3 ? e + (g - e) * (2 / 3 - h) * 6 : e
    }
    f.Color = class {
        constructor(e, g, h, l) {
            this._a = this._b = this._g = this._r = 0;
            e instanceof f.Color ? this.set(e) : this.setRgba(e || 0, g || 0, h || 0, l || 0)
        }
        setRgb(e, g, h) {
            this._r = +e;
            this._g = +g;
            this._b = +h;
            this.clamp();
            return this
        }
        setRgba(e, g, h, l) {
            this._r = +e;
            this._g = +g;
            this._b = +h;
            this._a = +l;
            this.clamp();
            return this
        }
        set(e) {
            this._r = e._r;
            this._g = e._g;
            this._b = e._b;
            this._a = e._a;
            return this
        }
        copy(e) {
            return this.set(e)
        }
        add(e) {
            this._r += e._r;
            this._g += e._g;
            this._b += e._b;
            this._a += e._a;
            this.clamp()
        }
        addRgb(e, g, h, l = 0) {
            this._r += +e;
            this._g += +g;
            this._b += +h;
            this._a += +l;
            this.clamp()
        }
        diff(e) {
            this.setR(Math.max(this._r, e._r) - Math.min(this._r, e._r));
            this.setG(Math.max(this._g, e._g) - Math.min(this._g, e._g));
            this.setB(Math.max(this._b, e._b) - Math.min(this._b, e._b));
            this.setA(Math.max(this._a,
                e._a) - Math.min(this._a, e._a));
            this.clamp()
        }
        copyRgb(e) {
            this._r = e._r;
            this._g = e._g;
            this._b = e._b
        }
        setR(e) {
            this._r = f.clamp(+e, 0, 1)
        }
        getR() {
            return this._r
        }
        setG(e) {
            this._g = f.clamp(+e, 0, 1)
        }
        getG() {
            return this._g
        }
        setB(e) {
            this._b = f.clamp(+e, 0, 1)
        }
        getB() {
            return this._b
        }
        setA(e) {
            this._a = f.clamp(+e, 0, 1)
        }
        getA() {
            return this._a
        }
        clone() {
            return f.New(f.Color, this._r, this._g, this._b, this._a)
        }
        toArray() {
            return [this._r, this._g, this._b, this._a]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(e, g) {
            e[g++] =
                this._r;
            e[g++] = this._g;
            e[g++] = this._b;
            e[g] = this._a
        }
        equals(e) {
            return this._r === e._r && this._g === e._g && this._b === e._b && this._a === e._a
        }
        equalsIgnoringAlpha(e) {
            return this._r === e._r && this._g === e._g && this._b === e._b
        }
        equalsRgb(e, g, h) {
            return this._r === e && this._g === g && this._b === h
        }
        equalsRgba(e, g, h, l) {
            return this._r === e && this._g === g && this._b === h && this._a === l
        }
        multiply(e) {
            this._r *= e._r;
            this._g *= e._g;
            this._b *= e._b;
            this._a *= e._a
        }
        multiplyAlpha(e) {
            this._r *= e;
            this._g *= e;
            this._b *= e;
            this._a *= e
        }
        premultiply() {
            this._r *= this._a;
            this._g *= this._a;
            this._b *= this._a;
            return this
        }
        unpremultiply() {
            this._r /= this._a;
            this._g /= this._a;
            this._b /= this._a;
            return this
        }
        clamp() {
            this._r = f.clamp(this._r, 0, 1);
            this._g = f.clamp(this._g, 0, 1);
            this._b = f.clamp(this._b, 0, 1);
            this._a = f.clamp(this._a, 0, 1);
            return this
        }
        setFromRgbValue(e) {
            this._r = f.GetRValue(e);
            this._g = f.GetGValue(e);
            this._b = f.GetBValue(e);
            this._a = f.GetAValue(e)
        }
        getCssRgb(e, g, h) {
            e = f.IsFiniteNumber(e) ? e : this.getR();
            g = f.IsFiniteNumber(g) ? g : this.getG();
            h = f.IsFiniteNumber(h) ? h : this.getB();
            return `rgb(${100*
e}%, ${100*g}%, ${100*h}%)`
        }
        getCssRgba(e, g, h, l) {
            e = f.IsFiniteNumber(e) ? e : this.getR();
            g = f.IsFiniteNumber(g) ? g : this.getG();
            h = f.IsFiniteNumber(h) ? h : this.getB();
            l = f.IsFiniteNumber(l) ? l : this.getA();
            return `rgba(${100*e}%, ${100*g}%, ${100*h}%, ${l})`
        }
        toHexString() {
            const e = Math.round(255 * this.getR()),
                g = Math.round(255 * this.getG()),
                h = Math.round(255 * this.getB());
            return "#" + d(e.toString(16)) + d(g.toString(16)) + d(h.toString(16))
        }
        parseHexString(e) {
            if ("string" !== typeof e) return !1;
            e = e.trim();
            "#" === e.charAt(0) && (e =
                e.substr(1));
            let g, h;
            if (3 === e.length) g = parseInt(e[0], 16) / 15, h = parseInt(e[1], 16) / 15, e = parseInt(e[2], 16) / 15;
            else if (6 === e.length) g = parseInt(e.substr(0, 2), 16) / 255, h = parseInt(e.substr(2, 2), 16) / 255, e = parseInt(e.substr(4, 2), 16) / 255;
            else return !1;
            isFinite(g) && this.setR(g);
            isFinite(h) && this.setG(h);
            isFinite(e) && this.setB(e);
            this.setA(1);
            return !0
        }
        toCommaSeparatedRgb() {
            const e = Math.round(255 * this.getR()),
                g = Math.round(255 * this.getG()),
                h = Math.round(255 * this.getB());
            return `${e}, ${g}, ${h}`
        }
        toRgbArray() {
            const e =
                Math.round(255 * this.getR()),
                g = Math.round(255 * this.getG()),
                h = Math.round(255 * this.getB());
            return [e, g, h]
        }
        parseCommaSeparatedRgb(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/^rgb\(|\)|%/, "");
            var g = e.split(",");
            if (3 > g.length) return !1;
            e = parseInt(g[0].trim(), 10) / 255;
            const h = parseInt(g[1].trim(), 10) / 255;
            g = parseInt(g[2].trim(), 10) / 255;
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(g) && this.setB(g);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedPercentageRgb(e) {
            if ("string" !== typeof e) return !1;
            e =
                e.replace(/^rgb\(|\)|%/, "");
            var g = e.split(",");
            if (3 > g.length) return !1;
            e = parseInt(g[0].trim(), 10) / 100;
            const h = parseInt(g[1].trim(), 10) / 100;
            g = parseInt(g[2].trim(), 10) / 100;
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(g) && this.setB(g);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedRgba(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/^rgba\(|\)|%/, "");
            var g = e.split(",");
            if (4 > g.length) return !1;
            e = parseInt(g[0].trim(), 10) / 255;
            const h = parseInt(g[1].trim(), 10) / 255,
                l = parseInt(g[2].trim(), 10) / 255;
            g =
                parseFloat(g[3].trim());
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(l) && this.setB(l);
            isFinite(g) && this.setA(g);
            return !0
        }
        parseCommaSeparatedPercentageRgba(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/^rgba\(|\)|%/, "");
            var g = e.split(",");
            if (4 > g.length) return !1;
            e = parseInt(g[0].trim(), 10) / 100;
            const h = parseInt(g[1].trim(), 10) / 100,
                l = parseInt(g[2].trim(), 10) / 100;
            g = parseFloat(g[3].trim());
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(l) && this.setB(l);
            isFinite(g) && this.setA(g);
            return !0
        }
        parseString(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/\s+/, "");
            if (e.includes(",")) {
                if (e.startsWith("rgb(")) return e.includes("%") ? this.parseCommaSeparatedPercentageRgb(e) : this.parseCommaSeparatedRgb(e);
                if (e.startsWith("rgba(")) return e.includes("%") ? this.parseCommaSeparatedPercentageRgba(e) : this.parseCommaSeparatedRgba(e);
                if (e.startsWith("hsl(") || e.startsWith("hsla(")) return this.parseHSLString(e); {
                    const g = e.split(",");
                    if (e.includes("%")) {
                        if (3 === g.length) return this.parseCommaSeparatedPercentageRgb(e);
                        if (4 === g.length) return this.parseCommaSeparatedPercentageRgba(e)
                    } else {
                        if (3 === g.length) return this.parseCommaSeparatedRgb(e);
                        if (4 === g.length) return this.parseCommaSeparatedRgba(e)
                    }
                    return !1
                }
            }
            return this.parseHexString(e)
        }
        toJSON() {
            return [this._r, this._g, this._b, this._a]
        }
        setFromHSLA(e, g, h, l) {
            e %= 360;
            g = f.clamp(g, 0, 100);
            h = f.clamp(h, 0, 100);
            l = f.clamp(l, 0, 1);
            e /= 360;
            g /= 100;
            h /= 100;
            if (0 === g) h = g = e = h;
            else {
                const n = .5 > h ? h * (1 + g) : h + g - h * g,
                    q = 2 * h - n;
                h = c(q, n, e + 1 / 3);
                g = c(q, n, e);
                e = c(q, n, e - 1 / 3)
            }
            this.setR(h);
            this.setG(g);
            this.setB(e);
            this.setA(l);
            return this
        }
        parseHSLString(e) {
            var g = e.replace(/ |hsl|hsla|\(|\)|;/gi, "");
            e = b.exec(g);
            g = a.exec(g);
            return e && 4 === e.length ? (this.setFromHSLA(+e[1], +e[2], +e[3], 1), !0) : g && 5 === g.length ? (this.setFromHSLA(+e[1], +e[2], +e[3], +e[4]), !0) : !1
        }
        toHSLAString() {
            var e = this._r;
            const g = this._g,
                h = this._b,
                l = this._a,
                n = f.Color.GetHue(e, g, h),
                q = f.Color.GetSaturation(e, g, h);
            e = f.Color.GetLuminosity(e, g, h);
            return `hsla(${n}, ${q}%, ${e}%, ${l})`
        }
        toHSLAArray() {
            const e = this._r,
                g = this._g,
                h = this._b;
            return [f.Color.GetHue(e,
                g, h), f.Color.GetSaturation(e, g, h), f.Color.GetLuminosity(e, g, h), this._a]
        }
        setFromJSON(e) {
            !Array.isArray(e) || 3 > e.length || (this._r = e[0], this._g = e[1], this._b = e[2], this._a = 4 <= e.length ? e[3] : 1)
        }
        set r(e) {
            this.setR(e)
        }
        get r() {
            return this.getR()
        }
        set g(e) {
            this.setG(e)
        }
        get g() {
            return this.getG()
        }
        set b(e) {
            this.setB(e)
        }
        get b() {
            return this.getB()
        }
        set a(e) {
            this.setA(e)
        }
        get a() {
            return this.getA()
        }
        setAtIndex(e, g) {
            switch (e) {
                case 0:
                    this.setR(g);
                    break;
                case 1:
                    this.setG(g);
                    break;
                case 2:
                    this.setB(g);
                    break;
                case 3:
                    this.setA(g);
                    break;
                default:
                    throw new RangeError("invalid color index");
            }
        }
        getAtIndex(e) {
            switch (e) {
                case 0:
                    return this.getR();
                case 1:
                    return this.getG();
                case 2:
                    return this.getB();
                case 3:
                    return this.getA();
                default:
                    throw new RangeError("invalid color index");
            }
        }
        static Equals(e, g) {
            let h;
            if (Array.isArray(e)) h = new f.Color, h.setFromJSON(e);
            else if (e instanceof f.Color) h = e;
            else throw Error("unexpected type");
            if (Array.isArray(g)) e = new f.Color, e.setFromJSON(g);
            else if (g instanceof f.Color) e = g;
            else throw Error("unexpected type");
            return h.equals(e)
        }
        static DiffChannel(e, g) {
            return f.clamp(Math.max(e, g) - Math.min(e, g), 0, 1)
        }
        static Diff(e, g) {
            const h = new f.Color;
            h.setR(Math.max(e._r, g._r) - Math.min(e._r, g._r));
            h.setG(Math.max(e._g, g._g) - Math.min(e._g, g._g));
            h.setB(Math.max(e._b, g._b) - Math.min(e._b, g._b));
            h.setA(Math.max(e._a, g._a) - Math.min(e._a, g._a));
            return h
        }
        static DiffNoAlpha(e, g) {
            const h = new f.Color(0, 0, 0, 1);
            h.setR(Math.max(e._r, g._r) - Math.min(e._r, g._r));
            h.setG(Math.max(e._g, g._g) - Math.min(e._g, g._g));
            h.setB(Math.max(e._b, g._b) -
                Math.min(e._b, g._b));
            return h
        }
        static GetHue(e, g, h) {
            const l = Math.max(e, g, h),
                n = Math.min(e, g, h);
            if (l === n) return 0;
            let q = 0;
            switch (l) {
                case e:
                    q = (g - h) / (l - n) + (g < h ? 6 : 0);
                    break;
                case g:
                    q = (h - e) / (l - n) + 2;
                    break;
                case h:
                    q = (e - g) / (l - n) + 4
            }
            return Math.round(q / 6 * 360)
        }
        static GetSaturation(e, g, h) {
            const l = Math.max(e, g, h);
            e = Math.min(e, g, h);
            if (l === e) return 0;
            g = l - e;
            return Math.round(100 * (.5 < (l + e) / 2 ? g / (2 - l - e) : g / (l + e)))
        }
        static GetLuminosity(e, g, h) {
            const l = Math.max(e, g, h);
            return l ? Math.round((l + Math.min(e, g, h)) / 2 * 100) : 0
        }
    };
    f.Color.White =
        Object.freeze(f.New(f.Color, 1, 1, 1, 1));
    f.Color.Black = Object.freeze(f.New(f.Color, 0, 0, 0, 1));
    f.Color.TransparentBlack = Object.freeze(f.New(f.Color, 0, 0, 0, 0))
} {
    "use strict";
    const f = self.C3;
    f.Vector2 = class {
        constructor(b, a) {
            this._y = this._x = 0;
            b instanceof f.Vector2 ? this.copy(b) : this.set(b || 0, a || 0)
        }
        set(b, a) {
            this._x = +b;
            this._y = +a
        }
        copy(b) {
            this._x = b._x;
            this._y = b._y
        }
        equals(b) {
            return this._x === b._x && this._y === b._y
        }
        equalsValues(b, a) {
            return this._x === b && this._y === a
        }
        setX(b) {
            this._x = +b
        }
        getX() {
            return this._x
        }
        setY(b) {
            this._y = +b
        }
        getY() {
            return this._y
        }
        toArray() {
            return [this._x, this._y]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] =
                this._x;
            b[a] = this._y
        }
        offset(b, a) {
            this._x += +b;
            this._y += +a
        }
        scale(b, a) {
            this._x *= b;
            this._y *= a
        }
        divide(b, a) {
            this._x /= b;
            this._y /= a
        }
        round() {
            this._x = Math.round(this._x);
            this._y = Math.round(this._y)
        }
        floor() {
            this._x = Math.floor(this._x);
            this._y = Math.floor(this._y)
        }
        ceil() {
            this._x = Math.ceil(this._x);
            this._y = Math.ceil(this._y)
        }
        angle() {
            return f.angleTo(0, 0, this._x, this._y)
        }
        lengthSquared() {
            return this._x * this._x + this._y * this._y
        }
        length() {
            return Math.sqrt(this.lengthSquared())
        }
        rotatePrecalc(b, a) {
            const d = this._x * a - this._y *
                b;
            this._y = this._y * a + this._x * b;
            this._x = d
        }
        rotate(b) {
            0 !== b && this.rotatePrecalc(Math.sin(b), Math.cos(b))
        }
        rotateAbout(b, a, d) {
            0 === b || a === this._x && d === this._y || (this._x -= a, this._y -= d, this.rotatePrecalc(Math.sin(b), Math.cos(b)), this._x += +a, this._y += +d)
        }
        move(b, a) {
            0 !== a && (this._x += Math.cos(b) * a, this._y += Math.sin(b) * a)
        }
        normalize() {
            const b = this.length();
            0 !== b && 1 !== b && (this._x /= b, this._y /= b)
        }
        clamp(b, a) {
            this._x = f.clamp(this._x, b, a);
            this._y = f.clamp(this._y, b, a)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Rect = class {
        constructor(b, a, d, c) {
            this._bottom = this._right = this._top = this._left = 0;
            b instanceof f.Rect ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0)
        }
        set(b, a, d, c) {
            this._left = +b;
            this._top = +a;
            this._right = +d;
            this._bottom = +c
        }
        setWH(b, a, d, c) {
            b = +b;
            a = +a;
            this._left = b;
            this._top = a;
            this._right = b + +d;
            this._bottom = a + +c
        }
        copy(b) {
            this._left = +b._left;
            this._top = +b._top;
            this._right = +b._right;
            this._bottom = +b._bottom
        }
        clone() {
            return new f.Rect(this._left, this._top, this._right, this._bottom)
        }
        static Merge(b,
            a) {
            const d = new f.Rect;
            d.setLeft(Math.min(b._left, a._left));
            d.setTop(Math.min(b._top, a._top));
            d.setRight(Math.max(b._right, a._right));
            d.setBottom(Math.max(b._bottom, a._bottom));
            return d
        }
        static FromObject(b) {
            return new f.Rect(b.left, b.top, b.right, b.bottom)
        }
        equals(b) {
            return this._left === b._left && this._top === b._top && this._right === b._right && this._bottom === b._bottom
        }
        equalsWH(b, a, d, c) {
            return this._left === b && this._top === a && this.width() === d && this.height() === c
        }
        setLeft(b) {
            this._left = +b
        }
        getLeft() {
            return this._left
        }
        setTop(b) {
            this._top = +b
        }
        getTop() {
            return this._top
        }
        setRight(b) {
            this._right = +b
        }
        getRight() {
            return this._right
        }
        setBottom(b) {
            this._bottom = +b
        }
        getBottom() {
            return this._bottom
        }
        toArray() {
            return [this._left, this._top, this._right, this._bottom]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        toDOMRect() {
            return new DOMRect(this._left, this._top, this.width(), this.height())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = this._left;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray3D(b, a, d) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = d;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = d;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = d;
            b[a++] = this._left;
            b[a++] = this._bottom;
            b[a] = d
        }
        width() {
            return this._right - this._left
        }
        height() {
            return this._bottom - this._top
        }
        midX() {
            return (this._left + this._right) / 2
        }
        midY() {
            return (this._top + this._bottom) / 2
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right += b;
            this._bottom += a
        }
        offsetLeft(b) {
            this._left += +b
        }
        offsetTop(b) {
            this._top += +b
        }
        offsetRight(b) {
            this._right += +b
        }
        offsetBottom(b) {
            this._bottom += +b
        }
        toSquare(b) {
            if ("x" !== b) throw Error("invalid axis, only 'x' supported");
            this._bottom = this._top < this._bottom ? this._left < this._right ? this._top + this.width() : this._top - this.width() : this._left < this._right ? this._top - this.width() : this._top + this.width()
        }
        inflate(b, a) {
            b = +b;
            a = +a;
            this._left -= b;
            this._top -= a;
            this._right += b;
            this._bottom +=
                a
        }
        deflate(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right -= b;
            this._bottom -= a
        }
        multiply(b, a) {
            this._left *= b;
            this._top *= a;
            this._right *= b;
            this._bottom *= a
        }
        divide(b, a) {
            this._left /= b;
            this._top /= a;
            this._right /= b;
            this._bottom /= a
        }
        mirrorAround(b) {
            this._left = +b - this._left;
            this._right = +b - this._right
        }
        flipAround(b) {
            this._top = +b - this._top;
            this._bottom = +b - this._bottom
        }
        swapLeftRight() {
            const b = this._left;
            this._left = this._right;
            this._right = b
        }
        swapTopBottom() {
            const b = this._top;
            this._top = this._bottom;
            this._bottom =
                b
        }
        shuntY(b) {
            const a = this._top;
            this._top = +b - this._bottom;
            this._bottom = +b - a
        }
        round() {
            this._left = Math.round(this._left);
            this._top = Math.round(this._top);
            this._right = Math.round(this._right);
            this._bottom = Math.round(this._bottom)
        }
        roundInner() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        roundOuter() {
            this._left = Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        floor() {
            this._left =
                Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        ceil() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        clamp(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top < a && (this._top = +a);
            this._right > d && (this._right = +d);
            this._bottom > c && (this._bottom = +c)
        }
        clampFlipped(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top > a && (this._top = +a);
            this._right >
                d && (this._right = +d);
            this._bottom < c && (this._bottom = +c)
        }
        normalize() {
            this._left > this._right && this.swapLeftRight();
            this._top > this._bottom && this.swapTopBottom()
        }
        intersectsRect(b) {
            return !(b._right < this._left || b._bottom < this._top || b._left > this._right || b._top > this._bottom)
        }
        intersectsRectOffset(b, a, d) {
            return !(b._right + a < this._left || b._bottom + d < this._top || b._left + a > this._right || b._top + d > this._bottom)
        }
        containsPoint(b, a) {
            return b >= this._left && b <= this._right && a >= this._top && a <= this._bottom
        }
        containsRect(b) {
            return b._left >=
                this._left && b._top >= this._top && b._right <= this._right && b._bottom <= this._bottom
        }
        expandToContain(b) {
            b._left < this._left && (this._left = +b._left);
            b._top < this._top && (this._top = +b._top);
            b._right > this._right && (this._right = +b._right);
            b._bottom > this._bottom && (this._bottom = +b._bottom)
        }
        lerpInto(b) {
            this._left = f.lerp(b._left, b._right, this._left);
            this._top = f.lerp(b._top, b._bottom, this._top);
            this._right = f.lerp(b._left, b._right, this._right);
            this._bottom = f.lerp(b._top, b._bottom, this._bottom)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Quad = class {
        constructor(b, a, d, c, e, g, h, l) {
            this._bly = this._blx = this._bry = this._brx = this._try = this._trx = this._tly = this._tlx = 0;
            b instanceof f.Quad ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0, e || 0, g || 0, h || 0, l || 0)
        }
        set(b, a, d, c, e, g, h, l) {
            this._tlx = +b;
            this._tly = +a;
            this._trx = +d;
            this._try = +c;
            this._brx = +e;
            this._bry = +g;
            this._blx = +h;
            this._bly = +l
        }
        setRect(b, a, d, c) {
            this.set(b, a, d, a, d, c, b, c)
        }
        copy(b) {
            this._tlx = b._tlx;
            this._tly = b._tly;
            this._trx = b._trx;
            this._try = b._try;
            this._brx = b._brx;
            this._bry =
                b._bry;
            this._blx = b._blx;
            this._bly = b._bly
        }
        equals(b) {
            return this._tlx === b._tlx && this._tly === b._tly && this._trx === b._trx && this._try === b._try && this._brx === b._brx && this._bry === b._bry && this._blx === b._blx && this._bly === b._bly
        }
        setTlx(b) {
            this._tlx = +b
        }
        getTlx() {
            return this._tlx
        }
        setTly(b) {
            this._tly = +b
        }
        getTly() {
            return this._tly
        }
        setTrx(b) {
            this._trx = +b
        }
        getTrx() {
            return this._trx
        }
        setTry(b) {
            this._try = +b
        }
        getTry() {
            return this._try
        }
        setBrx(b) {
            this._brx = +b
        }
        getBrx() {
            return this._brx
        }
        setBry(b) {
            this._bry = +b
        }
        getBry() {
            return this._bry
        }
        setBlx(b) {
            this._blx = +b
        }
        getBlx() {
            return this._blx
        }
        setBly(b) {
            this._bly = +b
        }
        getBly() {
            return this._bly
        }
        toDOMQuad() {
            return new DOMQuad(new DOMPoint(this._tlx, this._tly), new DOMPoint(this._trx, this._try), new DOMPoint(this._brx, this._bry), new DOMPoint(this._blx, this._bly))
        }
        toArray() {
            return [this._tlx, this._tly, this._trx, this._try, this._brx, this._bry, this._blx, this._bly]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = this._blx;
            b[a] = this._bly
        }
        writeToTypedArray3D(b, a, d) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = d;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = d;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = d;
            b[a++] = this._blx;
            b[a++] = this._bly;
            b[a] = d
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._tlx += b;
            this._tly += a;
            this._trx += b;
            this._try += a;
            this._brx += b;
            this._bry += a;
            this._blx += b;
            this._bly += a
        }
        round() {
            this._tlx = Math.round(this._tlx);
            this._tly = Math.round(this._tly);
            this._trx = Math.round(this._trx);
            this._try = Math.round(this._try);
            this._brx = Math.round(this._brx);
            this._bry = Math.round(this._bry);
            this._blx = Math.round(this._blx);
            this._bly = Math.round(this._bly)
        }
        floor() {
            this._tlx = Math.floor(this._tlx);
            this._tly = Math.floor(this._tly);
            this._trx = Math.floor(this._trx);
            this._try = Math.floor(this._try);
            this._brx = Math.floor(this._brx);
            this._bry = Math.floor(this._bry);
            this._blx = Math.floor(this._blx);
            this._bly = Math.floor(this._bly)
        }
        ceil() {
            this._tlx = Math.ceil(this._tlx);
            this._tly = Math.ceil(this._tly);
            this._trx = Math.ceil(this._trx);
            this._try =
                Math.ceil(this._try);
            this._brx = Math.ceil(this._brx);
            this._bry = Math.ceil(this._bry);
            this._blx = Math.ceil(this._blx);
            this._bly = Math.ceil(this._bly)
        }
        setFromRect(b) {
            this._tlx = b._left;
            this._tly = b._top;
            this._trx = b._right;
            this._try = b._top;
            this._brx = b._right;
            this._bry = b._bottom;
            this._blx = b._left;
            this._bly = b._bottom
        }
        setFromRotatedRect(b, a) {
            0 === a ? this.setFromRect(b) : this.setFromRotatedRectPrecalc(b, Math.sin(a), Math.cos(a))
        }
        setFromRotatedRectPrecalc(b, a, d) {
            const c = b._left * a,
                e = b._top * a,
                g = b._right * a;
            a *= b._bottom;
            const h = b._left * d,
                l = b._top * d,
                n = b._right * d;
            b = b._bottom * d;
            this._tlx = h - e;
            this._tly = l + c;
            this._trx = n - e;
            this._try = l + g;
            this._brx = n - a;
            this._bry = b + g;
            this._blx = h - a;
            this._bly = b + c
        }
        getBoundingBox(b) {
            b.set(Math.min(this._tlx, this._trx, this._brx, this._blx), Math.min(this._tly, this._try, this._bry, this._bly), Math.max(this._tlx, this._trx, this._brx, this._blx), Math.max(this._tly, this._try, this._bry, this._bly))
        }
        containsPoint(b, a) {
            var d = this._trx - this._tlx,
                c = this._try - this._tly;
            const e = this._brx - this._tlx,
                g = this._bry - this._tly;
            b -= this._tlx;
            a -= this._tly;
            var h = d * d + c * c;
            let l = d * e + c * g;
            c = d * b + c * a;
            const n = e * e + g * g,
                q = e * b + g * a;
            let y = 1 / (h * n - l * l);
            d = (n * c - l * q) * y;
            h = (h * q - l * c) * y;
            if (0 <= d && 0 < h && 1 > d + h) return !0;
            d = this._blx - this._tlx;
            c = this._bly - this._tly;
            h = d * d + c * c;
            l = d * e + c * g;
            c = d * b + c * a;
            y = 1 / (h * n - l * l);
            d = (n * c - l * q) * y;
            h = (h * q - l * c) * y;
            return 0 <= d && 0 < h && 1 > d + h
        }
        midX() {
            return (this._tlx + this._trx + this._brx + this._blx) / 4
        }
        midY() {
            return (this._tly + this._try + this._bry + this._bly) / 4
        }
        intersectsSegment(b, a, d, c) {
            return this.containsPoint(b, a) || this.containsPoint(d, c) ?
                !0 : f.segmentIntersectsQuad(b, a, d, c, this)
        }
        intersectsQuad(b) {
            var a = b.midX(),
                d = b.midY();
            if (this.containsPoint(a, d)) return !0;
            a = this.midX();
            d = this.midY();
            if (b.containsPoint(a, d)) return !0;
            a = this._tlx;
            d = this._tly;
            const c = this._trx,
                e = this._try,
                g = this._brx,
                h = this._bry,
                l = this._blx,
                n = this._bly;
            return f.segmentIntersectsQuad(a, d, c, e, b) || f.segmentIntersectsQuad(c, e, g, h, b) || f.segmentIntersectsQuad(g, h, l, n, b) || f.segmentIntersectsQuad(l, n, a, d, b)
        }
        mirror() {
            this._swap(0, 2);
            this._swap(1, 3);
            this._swap(6, 4);
            this._swap(7,
                5)
        }
        flip() {
            this._swap(0, 6);
            this._swap(1, 7);
            this._swap(2, 4);
            this._swap(3, 5)
        }
        diag() {
            this._swap(2, 6);
            this._swap(3, 7)
        }
        _swap(b, a) {
            const d = this._getAtIndex(b);
            this._setAtIndex(b, this._getAtIndex(a));
            this._setAtIndex(a, d)
        }
        _getAtIndex(b) {
            switch (b) {
                case 0:
                    return this._tlx;
                case 1:
                    return this._tly;
                case 2:
                    return this._trx;
                case 3:
                    return this._try;
                case 4:
                    return this._brx;
                case 5:
                    return this._bry;
                case 6:
                    return this._blx;
                case 7:
                    return this._bly;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
        _setAtIndex(b,
            a) {
            a = +a;
            switch (b) {
                case 0:
                    this._tlx = a;
                    break;
                case 1:
                    this._tly = a;
                    break;
                case 2:
                    this._trx = a;
                    break;
                case 3:
                    this._try = a;
                    break;
                case 4:
                    this._brx = a;
                    break;
                case 5:
                    this._bry = a;
                    break;
                case 6:
                    this._blx = a;
                    break;
                case 7:
                    this._bly = a;
                    break;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [0, 0, 1, 0, 1, 1, 0, 1],
        a = f.New(f.Quad);
    f.CollisionPoly = class extends f.DefendedBase {
        constructor(d, c = !0) {
            super();
            d || (d = b);
            this._ptsArr = Float64Array.from(d);
            this._bbox = new f.Rect;
            this._isBboxChanged = !0;
            this._enabled = c
        }
        Release() {}
        pointsArr() {
            return this._ptsArr
        }
        pointCount() {
            return this._ptsArr.length / 2
        }
        setPoints(d) {
            this._ptsArr.length === d.length ? this._ptsArr.set(d) : this._ptsArr = Float64Array.from(d);
            this._isBboxChanged = !0
        }
        setDefaultPoints() {
            this.setPoints(b)
        }
        copy(d) {
            this.setPoints(d._ptsArr)
        }
        setBboxChanged() {
            this._isBboxChanged = !0
        }
        _updateBbox() {
            if (this._isBboxChanged) {
                var d = this._ptsArr,
                    c = d[0],
                    e = d[1],
                    g = c,
                    h = e;
                for (let l = 0, n = d.length; l < n; l += 2) {
                    const q = d[l],
                        y = d[l + 1];
                    q < c && (c = q);
                    q > g && (g = q);
                    y < e && (e = y);
                    y > h && (h = y)
                }
                this._bbox.set(c, e, g, h);
                this._isBboxChanged = !1
            }
        }
        setFromRect(d, c, e) {
            let g = this._ptsArr;
            8 !== g.length && (this._ptsArr = g = new Float64Array(8));
            g[0] = d.getLeft() - c;
            g[1] = d.getTop() - e;
            g[2] = d.getRight() - c;
            g[3] = d.getTop() - e;
            g[4] = d.getRight() - c;
            g[5] = d.getBottom() - e;
            g[6] = d.getLeft() - c;
            g[7] = d.getBottom() - e;
            this._bbox.copy(d);
            0 === c && 0 ===
                e || this._bbox.offset(-c, -e);
            this._isBboxChanged = !1
        }
        setFromQuad(d, c, e) {
            a.copy(d);
            a.offset(c, e);
            this.setPoints(a.toArray());
            this._isBboxChanged = !0
        }
        transform(d, c, e) {
            let g = 0,
                h = 1;
            0 !== e && (g = Math.sin(e), h = Math.cos(e));
            this.transformPrecalc(d, c, g, h)
        }
        transformPrecalc(d, c, e, g) {
            const h = this._ptsArr;
            for (let l = 0, n = h.length; l < n; l += 2) {
                const q = l + 1,
                    y = h[l] * d,
                    w = h[q] * c;
                h[l] = y * g - w * e;
                h[q] = w * g + y * e
            }
            this._isBboxChanged = !0
        }
        offset(d, c) {
            const e = this._ptsArr;
            for (let g = 0, h = e.length; g < h; g += 2) e[g] += d, e[g + 1] += c
        }
        containsPoint(d, c) {
            const e =
                this._ptsArr;
            if (d === e[0] && c === e[1]) return !0;
            this._updateBbox();
            var g = this._bbox;
            const h = g.getLeft() - 110,
                l = g.getTop() - 101,
                n = g.getRight() + 131;
            g = g.getBottom() + 120;
            let q, y, w, u, p, x, t, r;
            h < d ? (q = h, w = d) : (q = d, w = h);
            l < c ? (y = l, u = c) : (y = c, u = l);
            n < d ? (p = n, t = d) : (p = d, t = n);
            g < c ? (x = g, r = c) : (x = c, r = g);
            let B = 0,
                z = 0;
            for (let F = 0, J = e.length; F < J; F += 2) {
                var C = (F + 2) % J;
                const G = e[F],
                    I = e[F + 1],
                    L = e[C];
                C = e[C + 1];
                f.segmentsIntersectPreCalc(h, l, d, c, q, w, y, u, G, I, L, C) && ++B;
                f.segmentsIntersectPreCalc(n, g, d, c, p, t, x, r, G, I, L, C) && ++z
            }
            return 1 === B % 2 ||
                1 === z % 2
        }
        intersectsPoly(d, c, e) {
            const g = d._ptsArr,
                h = this._ptsArr;
            if (this.containsPoint(g[0] + c, g[1] + e) || d.containsPoint(h[0] - c, h[1] - e)) return !0;
            for (let n = 0, q = h.length; n < q; n += 2) {
                var l = (n + 2) % q;
                d = h[n];
                const y = h[n + 1],
                    w = h[l];
                l = h[l + 1];
                let u, p, x, t;
                d < w ? (u = d, x = w) : (u = w, x = d);
                y < l ? (p = y, t = l) : (p = l, t = y);
                for (let r = 0, B = g.length; r < B; r += 2) {
                    const z = (r + 2) % B;
                    if (f.segmentsIntersectPreCalc(d, y, w, l, u, x, p, t, g[r] + c, g[r + 1] + e, g[z] + c, g[z + 1] + e)) return !0
                }
            }
            return !1
        }
        intersectsSegment(d, c, e, g, h, l) {
            if (this.containsPoint(e - d, g - c) || this.containsPoint(h -
                    d, l - c)) return !0;
            let n, q, y, w;
            e < h ? (n = e, y = h) : (n = h, y = e);
            g < l ? (q = g, w = l) : (q = l, w = g);
            const u = this._ptsArr;
            for (let p = 0, x = u.length; p < x; p += 2) {
                const t = (p + 2) % x;
                if (f.segmentsIntersectPreCalc(e, g, h, l, n, y, q, w, u[p] + d, u[p + 1] + c, u[t] + d, u[t + 1] + c)) return !0
            }
            return !1
        }
        mirror(d) {
            const c = this._ptsArr;
            for (let e = 0, g = c.length; e < g; e += 2) c[e] = 2 * d - c[e];
            this._isBboxChanged = !0
        }
        flip(d) {
            const c = this._ptsArr;
            for (let e = 0, g = c.length; e < g; e += 2) {
                const h = e + 1;
                c[h] = 2 * d - c[h]
            }
            this._isBboxChanged = !0
        }
        diag() {
            const d = this._ptsArr;
            for (let c = 0, e = d.length; c <
                e; c += 2) {
                const g = c + 1,
                    h = d[c];
                d[c] = d[g];
                d[g] = h
            }
            this._isBboxChanged = !0
        }
        GetMidX() {
            const d = this._ptsArr;
            let c = 0;
            for (let e = 0, g = d.length; e < g; e += 2) c += d[e];
            return c / this.pointCount()
        }
        GetMidY() {
            const d = this._ptsArr;
            let c = 0;
            for (let e = 0, g = d.length; e < g; e += 2) c += d[e + 1];
            return c / this.pointCount()
        }
        GetPointsArray() {
            return this._ptsArr
        }
        GetPointCount() {
            return this.pointCount()
        }
        IsEnabled() {
            return this._enabled
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.PairMap = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._firstMap = new Map;
            if (b)
                for (const [a, d, c] of b) this.Set(a, d, c)
        }
        Release() {
            this.Clear();
            this._firstMap = null
        }
        Clear() {
            const b = this._firstMap;
            for (const a of b.values()) a.clear();
            b.clear()
        }
        Set(b, a, d) {
            const c = this._firstMap;
            let e = c.get(b);
            e || (e = new Map, c.set(b, e));
            e.set(a, d)
        }
        Get(b, a) {
            return (b = this._firstMap.get(b)) ? b.get(a) : b
        }
        Has(b, a) {
            return (b = this._firstMap.get(b)) ? b.has(a) : !1
        }
        Delete(b, a) {
            const d = this._firstMap,
                c = d.get(b);
            if (!c) return !1;
            (a = c.delete(a)) && 0 === c.size && d.delete(b);
            return a
        }
        DeleteEither(b) {
            const a = this._firstMap,
                d = a.get(b);
            d && (d.clear(), a.delete(b));
            for (const [c, e] of a.entries()) e.delete(b) && 0 === e.size && a.delete(c)
        }
        GetSize() {
            let b = 0;
            for (const a of this._firstMap.values()) b += a.size;
            return b
        }* values() {
            for (const b of this._firstMap.values()) yield* b.values()
        }* keyPairs() {
            for (const [b, a] of this._firstMap.entries())
                for (const d of a.keys()) yield [b, d]
        }* entries() {
            for (const [b, a] of this._firstMap.entries())
                for (const [d,
                        c
                    ] of a.entries()) yield [b, d, c]
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.ArraySet = class extends f.DefendedBase {
        constructor() {
            super();
            this._set = new Set;
            this._arr = [];
            this._needToRebuildArray = !1
        }
        Release() {
            this.Clear()
        }
        Clear() {
            this._set.clear();
            f.clearArray(this._arr);
            this._needToRebuildArray = !1
        }
        Add(b) {
            this._set.has(b) || (this._set.add(b), this._needToRebuildArray || this._arr.push(b))
        }
        Has(b) {
            return this._set.has(b)
        }
        Delete(b) {
            this._set.delete(b) && (this._needToRebuildArray = !0)
        }
        GetSize() {
            return this._set.size
        }
        IsEmpty() {
            return 0 === this._set.size
        }
        GetArray() {
            this._needToRebuildArray &&
                (this._RebuildArray(), this._needToRebuildArray = !1);
            return this._arr
        }
        _RebuildArray() {
            const b = this._arr;
            f.clearArray(b);
            for (const a of this._set) b.push(a)
        }
    }
} {
    "use strict";
    const f = new Map,
        b = new Map,
        a = new Map,
        d = new Map,
        c = new Map,
        e = new Map;
    e.set("linear", "noease");
    e.set("default", "noease");
    self.Ease = class w {
        constructor() {}
        static InheritEase() {
            return "default"
        }
        static DefaultEase() {
            return "noease"
        }
        static GetEditorEaseNames(u, ...p) {
            this._CreateEaseMap();
            a.has(u) || a.set(u, new Map);
            u = [...a.get(u).keys()];
            u.sort();
            return [...b.keys()].concat(u).filter(x => !p.includes(x))
        }
        static GetRuntimeEaseNames() {
            this._CreateEaseMap();
            const u = [...d.keys()];
            u.sort();
            return [...b.keys()].concat(u)
        }
        static IsNamePredefined(u) {
            this._CreateEaseMap();
            return [...b.keys()].includes(u)
        }
        static _GetEase(u) {
            const p = e.get(u);
            if (p) return f.get(p);
            if (w.IsNamePredefined(u)) return f.get(u);
            if (c.has(u)) return c.get(u)
        }
        static GetEditorEase(u, p) {
            this._CreateEaseMap();
            const x = w._GetEase(u);
            return x ? x : a.get(p).get(u)
        }
        static GetRuntimeEase(u) {
            this._CreateEaseMap();
            const p = w._GetEase(u);
            return p ? p : d.get(u)
        }
        static GetEaseFromIndex(u) {
            this._CreateEaseMap();
            return this.GetRuntimeEaseNames()[u]
        }
        static GetIndexForEase(u, p) {
            this._CreateEaseMap();
            return this.GetEditorEaseNames(p).indexOf(u)
        }
        static _CreateEaseMap() {
            0 ===
                f.size && (this._AddPredifinedEase("default", () => {}), this._AddPredifinedEase("noease", this.NoEase), this._AddPredifinedEase("easeinsine", this.EaseInSine), this._AddPredifinedEase("easeoutsine", this.EaseOutSine), this._AddPredifinedEase("easeinoutsine", this.EaseInOutSine), this._AddPredifinedEase("easeinelastic", this.EaseInElastic), this._AddPredifinedEase("easeoutelastic", this.EaseOutElastic), this._AddPredifinedEase("easeinoutelastic", this.EaseInOutElastic), this._AddPredifinedEase("easeinback", this.EaseInBack),
                    this._AddPredifinedEase("easeoutback", this.EaseOutBack), this._AddPredifinedEase("easeinoutback", this.EaseInOutBack), this._AddPredifinedEase("easeinbounce", this.EaseInBounce), this._AddPredifinedEase("easeoutbounce", this.EaseOutBounce), this._AddPredifinedEase("easeinoutbounce", this.EaseInOutBounce), this._AddPredifinedEase("easeincubic", this.EaseInCubic), this._AddPredifinedEase("easeoutcubic", this.EaseOutCubic), this._AddPredifinedEase("easeinoutcubic", this.EaseInOutCubic), this._AddPredifinedEase("easeinquad",
                        this.EaseInQuad), this._AddPredifinedEase("easeoutquad", this.EaseOutQuad), this._AddPredifinedEase("easeinoutquad", this.EaseInOutQuad), this._AddPredifinedEase("easeinquart", this.EaseInQuart), this._AddPredifinedEase("easeoutquart", this.EaseOutQuart), this._AddPredifinedEase("easeinoutquart", this.EaseInOutQuart), this._AddPredifinedEase("easeinquint", this.EaseInQuint), this._AddPredifinedEase("easeoutquint", this.EaseOutQuint), this._AddPredifinedEase("easeinoutquint", this.EaseInOutQuint), this._AddPredifinedEase("easeincirc",
                        this.EaseInCirc), this._AddPredifinedEase("easeoutcirc", this.EaseOutCirc), this._AddPredifinedEase("easeinoutcirc", this.EaseInOutCirc), this._AddPredifinedEase("easeinexpo", this.EaseInExpo), this._AddPredifinedEase("easeoutexpo", this.EaseOutExpo), this._AddPredifinedEase("easeinoutexpo", this.EaseInOutExpo), this._AddPrivateCustomEase("cubicbezier", this.EaseCubicBezier), this._AddPrivateCustomEase("spline", this.EaseSpline))
        }
        static _AddPredifinedEase(u, p) {
            w._AddEase(u, p, "predefined")
        }
        static _AddPrivateCustomEase(u,
            p) {
            w._AddEase(u, p, "private")
        }
        static AddCustomEase(u, p, x) {
            this._CreateEaseMap();
            w._AddEase(u, p, "custom", x)
        }
        static RemoveCustomEase(u, p) {
            this.IsNamePredefined(u) || [...c.keys()].includes(u) || (p = a.get(p)) && p.delete(u)
        }
        static _AddEase(u, p, x, t) {
            switch (x) {
                case "predefined":
                    f.set(u, p);
                    b.set(u, p);
                    break;
                case "custom":
                    t ? (a.has(t) || a.set(t, new Map), a.get(t).set(u, p)) : d.set(u, p);
                    break;
                case "private":
                    f.set(u, p);
                    c.set(u, p);
                    break;
                default:
                    throw Error("unexpected ease mode");
            }
        }
        static NoEase(u, p, x, t) {
            return x * u / t + p
        }
        static EaseInQuad(u,
            p, x, t) {
            return x * (u /= t) * u + p
        }
        static EaseOutQuad(u, p, x, t) {
            return -x * (u /= t) * (u - 2) + p
        }
        static EaseInOutQuad(u, p, x, t) {
            return 1 > (u /= t / 2) ? x / 2 * u * u + p : -x / 2 * (--u * (u - 2) - 1) + p
        }
        static EaseInCubic(u, p, x, t) {
            return x * (u /= t) * u * u + p
        }
        static EaseOutCubic(u, p, x, t) {
            return x * ((u = u / t - 1) * u * u + 1) + p
        }
        static EaseInOutCubic(u, p, x, t) {
            return 1 > (u /= t / 2) ? x / 2 * u * u * u + p : x / 2 * ((u -= 2) * u * u + 2) + p
        }
        static EaseInQuart(u, p, x, t) {
            return x * (u /= t) * u * u * u + p
        }
        static EaseOutQuart(u, p, x, t) {
            return -x * ((u = u / t - 1) * u * u * u - 1) + p
        }
        static EaseInOutQuart(u, p, x, t) {
            return 1 > (u /=
                t / 2) ? x / 2 * u * u * u * u + p : -x / 2 * ((u -= 2) * u * u * u - 2) + p
        }
        static EaseInQuint(u, p, x, t) {
            return x * (u /= t) * u * u * u * u + p
        }
        static EaseOutQuint(u, p, x, t) {
            return x * ((u = u / t - 1) * u * u * u * u + 1) + p
        }
        static EaseInOutQuint(u, p, x, t) {
            return 1 > (u /= t / 2) ? x / 2 * u * u * u * u * u + p : x / 2 * ((u -= 2) * u * u * u * u + 2) + p
        }
        static EaseInSine(u, p, x, t) {
            return -x * Math.cos(u / t * (Math.PI / 2)) + x + p
        }
        static EaseOutSine(u, p, x, t) {
            return x * Math.sin(u / t * (Math.PI / 2)) + p
        }
        static EaseInOutSine(u, p, x, t) {
            return -x / 2 * (Math.cos(Math.PI * u / t) - 1) + p
        }
        static EaseInExpo(u, p, x, t) {
            return 0 === u ? p : x * Math.pow(2,
                10 * (u / t - 1)) + p
        }
        static EaseOutExpo(u, p, x, t) {
            return u === t ? p + x : x * (-Math.pow(2, -10 * u / t) + 1) + p
        }
        static EaseInOutExpo(u, p, x, t) {
            return 0 === u ? p : u === t ? p + x : 1 > (u /= t / 2) ? x / 2 * Math.pow(2, 10 * (u - 1)) + p : x / 2 * (-Math.pow(2, -10 * --u) + 2) + p
        }
        static EaseInCirc(u, p, x, t) {
            return -x * (Math.sqrt(1 - (u /= t) * u) - 1) + p
        }
        static EaseOutCirc(u, p, x, t) {
            return x * Math.sqrt(1 - (u = u / t - 1) * u) + p
        }
        static EaseInOutCirc(u, p, x, t) {
            return 1 > (u /= t / 2) ? -x / 2 * (Math.sqrt(1 - u * u) - 1) + p : x / 2 * (Math.sqrt(1 - (u -= 2) * u) + 1) + p
        }
        static EaseInElastic(u, p, x, t) {
            let r = 0,
                B = x;
            if (0 === u) return p;
            if (1 === (u /= t)) return p + x;
            r || (r = .3 * t);
            B < Math.abs(x) ? (B = x, x = r / 4) : x = r / (2 * Math.PI) * Math.asin(x / B);
            return -(B * Math.pow(2, 10 * --u) * Math.sin(2 * (u * t - x) * Math.PI / r)) + p
        }
        static EaseOutElastic(u, p, x, t) {
            let r, B = 0,
                z = x;
            if (0 === u) return p;
            if (1 === (u /= t)) return p + x;
            B || (B = .3 * t);
            z < Math.abs(x) ? (z = x, r = B / 4) : r = B / (2 * Math.PI) * Math.asin(x / z);
            return z * Math.pow(2, -10 * u) * Math.sin(2 * (u * t - r) * Math.PI / B) + x + p
        }
        static EaseInOutElastic(u, p, x, t) {
            let r, B = 0,
                z = x;
            if (0 === u) return p;
            if (2 === (u /= t / 2)) return p + x;
            B || (B = .3 * t * 1.5);
            z < Math.abs(x) ? (z = x,
                r = B / 4) : r = B / (2 * Math.PI) * Math.asin(x / z);
            return 1 > u ? -.5 * z * Math.pow(2, 10 * --u) * Math.sin(2 * (u * t - r) * Math.PI / B) + p : z * Math.pow(2, -10 * --u) * Math.sin(2 * (u * t - r) * Math.PI / B) * .5 + x + p
        }
        static EaseInBack(u, p, x, t, r) {
            void 0 === r && (r = 1.70158);
            return x * (u /= t) * u * ((r + 1) * u - r) + p
        }
        static EaseOutBack(u, p, x, t, r) {
            void 0 === r && (r = 1.70158);
            return x * ((u = u / t - 1) * u * ((r + 1) * u + r) + 1) + p
        }
        static EaseInOutBack(u, p, x, t, r) {
            void 0 === r && (r = 1.70158);
            return 1 > (u /= t / 2) ? x / 2 * u * u * (((r *= 1.525) + 1) * u - r) + p : x / 2 * ((u -= 2) * u * (((r *= 1.525) + 1) * u + r) + 2) + p
        }
        static EaseInBounce(u,
            p, x, t) {
            return x - w.EaseOutBounce(t - u, 0, x, t) + p
        }
        static EaseOutBounce(u, p, x, t) {
            return (u /= t) < 1 / 2.75 ? 7.5625 * x * u * u + p : u < 2 / 2.75 ? x * (7.5625 * (u -= 1.5 / 2.75) * u + .75) + p : u < 2.5 / 2.75 ? x * (7.5625 * (u -= 2.25 / 2.75) * u + .9375) + p : x * (7.5625 * (u -= 2.625 / 2.75) * u + .984375) + p
        }
        static EaseInOutBounce(u, p, x, t) {
            return u < t / 2 ? .5 * w.EaseInBounce(2 * u, 0, x, t) + p : .5 * w.EaseOutBounce(2 * u - t, 0, x, t) + .5 * x + p
        }
        static EaseCubicBezier(u, p, x, t, r) {
            return p + 3 * u * (x - p) + 3 * u ** 2 * (p + t - 2 * x) + u ** 3 * (r - p + 3 * x - 3 * t)
        }
        static EaseSpline(u, p, x, t, r, B, z, C, F, J) {
            if (t === r && B === z) return u;
            u = y(u, p, t, B, C, J);
            p = g(x, r, z, F);
            t = h(x, r, z, F);
            x = l(x, r, z, F);
            return n(u, p, t, x)
        }
        static GetBezierSamples(u, p, x, t) {
            const r = [],
                B = g(u, p, x, t),
                z = h(u, p, x, t);
            u = l(u, p, x, t);
            for (p = 0; 11 > p; ++p) x = n(.1 * p, B, z, u), r.push(x);
            return r
        }
    };
    const g = (w, u, p, x) => x - 3 * p + 3 * u - w,
        h = (w, u, p, x) => 3 * p - 6 * u + 3 * w,
        l = (w, u, p, x) => 3 * (u - w),
        n = (w, u, p, x) => ((u * w + p) * w + x) * w,
        q = (w, u, p, x) => 3 * u * w * w + 2 * p * w + x,
        y = (w, u, p, x, t, r) => {
            if (1 == w) return 1;
            for (var B = 0, z = 1, C = r[z]; 10 != z && C <= w;) z++, C = r[z], B += .1;
            z--;
            C = r[z];
            r = B + (w - C) / (r[z + 1] - C) * .1;
            z = g(u, p, x, t);
            C = h(u, p, x, t);
            u = l(u,
                p, x, t);
            p = q(r, z, C, u);
            if (0 !== p)
                if (.02 <= p)
                    for (B = 0; 4 > B; ++B) p = n(r, z, C, u) - w, x = q(r, z, C, u), r -= p / x;
                else {
                    p = B;
                    B += .1;
                    x = 0;
                    let F;
                    do r = p + (B - p) / 2, t = n(r, z, C, u) - w, 0 < t ? B = r : p = r, t = 1E-7 < Math.abs(t), F = 10 > ++x; while (t && F)
                }
            return r
        }
} {
    "use strict";
    const f = self.C3;

    function b(a) {
        f.IsString(a)
    }
    f.ProbabilityTable = class {
        constructor() {
            this._items = [];
            this._totalWeight = 0
        }
        Release() {
            this.Clear();
            this._items = null
        }
        Clear() {
            f.clear2DArray(this._items);
            this._totalWeight = 0
        }
        GetTotalWeight() {
            return this._totalWeight
        }
        Sample(a = Math.random() * this.GetTotalWeight()) {
            let d = 0;
            for (const [c, e] of this._items)
                if (d += c, a < d) return e;
            return 0
        }
        AddItem(a, d) {
            b(d);
            this._totalWeight += a;
            this._items.push([a, d])
        }
        RemoveItem(a, d) {
            b(d);
            const c = 0 === a;
            for (let e = 0; e < this._items.length; e++) {
                const g =
                    this._items[e],
                    h = g[1] === d;
                if ((c || g[0] === a) && h) {
                    this._items.splice(e, 1);
                    this._totalWeight -= g[0];
                    break
                }
            }
        }
        asJSON() {
            return JSON.stringify(this._items)
        }
        static fromJSON(a) {
            const d = new f.ProbabilityTable;
            a = JSON.parse(a);
            for (const c of a) d.AddItem(c[0], c[1]);
            return d
        }
    }
}
"use strict";
self.C3.Event = class {
    constructor(f, b) {
        this.type = f;
        this.cancelable = !!b;
        this.isAsync = this.propagationStopped = this.defaultPrevented = !1
    }
    preventDefault() {
        if (!this.cancelable) throw Error(`event '${this.type}' is not cancelable`);
        this.defaultPrevented = !0
    }
    stopPropagation() {
        if (!this.cancelable) throw Error(`event '${this.type}' cannot be stopped`);
        if (this.isAsync) throw Error(`cannot stop async event '${this.type}' propagation`);
        this.propagationStopped = !0
    }
}; {
    "use strict";
    const f = self.C3;
    f.Event.Handler = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._type = b;
            this._captureListeners = [];
            this._captureListenersSet = new Set;
            this._listeners = [];
            this._listenersSet = new Set;
            this._fireDepth = 0;
            this._queueAddListeners = [];
            this._queueRemoveCaptureListeners = [];
            this._queueRemoveListeners = []
        }
        Release() {
            0 < this._fireDepth || (f.clearArray(this._captureListeners), this._captureListenersSet.clear(), f.clearArray(this._listeners), this._listenersSet.clear(), f.clearArray(this._queueAddListeners),
                f.clearArray(this._queueRemoveCaptureListeners), f.clearArray(this._queueRemoveListeners), f.Release(this))
        }
        _AddListener(b, a) {
            this._IsFiring() ? this._queueAddListeners.push([b, a]) : a ? this._captureListenersSet.has(b) || (this._captureListeners.push(b), this._captureListenersSet.add(b)) : this._listenersSet.has(b) || (this._listeners.push(b), this._listenersSet.add(b))
        }
        _RemoveListener(b, a) {
            this._IsFiring() ? a ? this._queueRemoveCaptureListeners.push(b) : this._queueRemoveListeners.push(b) : a ? this._captureListenersSet.has(b) &&
                (this._captureListenersSet.delete(b), f.arrayFindRemove(this._captureListeners, b)) : this._listenersSet.has(b) && (this._listenersSet.delete(b), f.arrayFindRemove(this._listeners, b))
        }
        _IsEmpty() {
            return !this._captureListeners.length && !this._listeners.length
        }
        _IsFiring() {
            return 0 < this._fireDepth
        }
        _ProcessQueuedListeners() {
            for (var b of this._queueAddListeners) this._AddListener(...b);
            f.clearArray(this._queueAddListeners);
            for (var a of this._queueRemoveListeners) this._listenersSet.delete(a);
            for (const d of this._queueRemoveCaptureListeners) this._captureListenersSet.delete(d);
            b = new Set(this._queueRemoveListeners);
            a = new Set(this._queueRemoveCaptureListeners);
            f.arrayRemoveAllInSet(this._listeners, b);
            f.arrayRemoveAllInSet(this._captureListeners, a);
            f.clearArray(this._queueRemoveCaptureListeners);
            f.clearArray(this._queueRemoveListeners)
        }
        _FireCancellable(b) {
            this._IncreaseFireDepth();
            let a = !1;
            for (let d = 0, c = this._captureListeners.length; d < c; ++d)
                if (this._captureListeners[d](b), b.propagationStopped) {
                    a = !0;
                    break
                }
            if (!a)
                for (let d = 0, c = this._listeners.length; d < c && (this._listeners[d](b), !b.propagationStopped); ++d);
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }
        _FireNonCancellable(b) {
            this._IncreaseFireDepth();
            for (let a = 0, d = this._captureListeners.length; a < d; ++a) this._captureListeners[a](b);
            for (let a = 0, d = this._listeners.length; a < d; ++a) this._listeners[a](b);
            this._DecreaseFireDepth();
            return !0
        }
        _IncreaseFireDepth() {
            this._fireDepth++
        }
        _DecreaseFireDepth() {
            this._fireDepth--;
            0 === this._fireDepth && (this._queueAddListeners.length || this._queueRemoveCaptureListeners.length || this._queueRemoveListeners.length) &&
                this._ProcessQueuedListeners()
        }
        SetDelayRemoveEventsEnabled(b) {
            b ? this._IncreaseFireDepth() : this._DecreaseFireDepth()
        }
        _FireAsync(b) {
            let a = [];
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                let e = this._captureListeners[d];
                a.push(f.Asyncify(() => e(b)))
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) {
                let e = this._listeners[d];
                a.push(f.Asyncify(() => e(b)))
            }
            return Promise.all(a).then(() => !b.defaultPrevented)
        }
        _FireAndWait_AsyncOptional(b) {
            const a = [];
            this._IncreaseFireDepth();
            for (let c = 0, e = this._captureListeners.length; c <
                e; ++c) {
                var d = this._captureListeners[c](b);
                d instanceof Promise && a.push(d)
            }
            for (let c = 0, e = this._listeners.length; c < e; ++c) d = this._listeners[c](b), d instanceof Promise && a.push(d);
            this._DecreaseFireDepth();
            return a.length ? Promise.all(a).then(() => !b.defaultPrevented) : !b.defaultPrevented
        }
        async _FireAndWaitAsync(b) {
            return await this._FireAndWait_AsyncOptional(b)
        }
        async _FireAndWaitAsyncSequential(b) {
            this._IncreaseFireDepth();
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                a instanceof Promise && await a
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), a instanceof Promise && await a;
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }* _FireAsGenerator(b) {
            this._IncreaseFireDepth();
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                f.IsIterator(a) && (yield* a)
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), f.IsIterator(a) && (yield* a);
            this._DecreaseFireDepth()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Event.Dispatcher = class extends f.DefendedBase {
        constructor() {
            super();
            this._eventHandlers = new Map;
            this._dispatcherWasReleased = !1
        }
        Release() {
            if (this._dispatcherWasReleased) throw Error("already released");
            this.ClearEvents();
            this._dispatcherWasReleased = !0;
            f.Release(this)
        }
        WasReleased() {
            return this._dispatcherWasReleased
        }
        ClearEvents() {
            for (let b of this._eventHandlers.values()) b.Release();
            this._eventHandlers.clear()
        }
        _GetHandlerByType(b, a) {
            let d = this._eventHandlers.get(b);
            return d ?
                d : a ? (d = f.New(f.Event.Handler, b), this._eventHandlers.set(b, d), d) : null
        }
        HasAnyHandlerFor(b) {
            return this._eventHandlers.has(b)
        }
        addEventListener(b, a, d) {
            this._GetHandlerByType(b, !0)._AddListener(a, !!d)
        }
        removeEventListener(b, a, d) {
            let c = this._GetHandlerByType(b, !1);
            c && (c._RemoveListener(a, !!d), c._IsEmpty() && this._eventHandlers.delete(b))
        }
        dispatchEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? b.cancelable ? a._FireCancellable(b) : a._FireNonCancellable(b) : !0
        }
        dispatchEventAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return Promise.resolve(!0);
            b.isAsync = !0;
            return a._FireAsync(b)
        }
        async dispatchEventAndClearAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return !0;
            this._eventHandlers.delete(b.type);
            b.isAsync = !0;
            b = await a._FireAsync(b);
            a.Release();
            return b
        }
        async dispatchEventAndWaitAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsync(b) : !0
        }
        dispatchEventAndWait_AsyncOptional(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? a._FireAndWait_AsyncOptional(b) : !0
        }
        async dispatchEventAndWaitAsyncSequential(b) {
            const a =
                this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsyncSequential(b) : !0
        }
        dispatchGeneratorEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return null;
            if (b.cancelable) throw Error("not supported");
            return a._FireAsGenerator(b)
        }
        SetDelayRemoveEventsEnabled(b) {
            for (const a of this._eventHandlers.values()) a.SetDelayRemoveEventsEnabled(b)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = "undefined" !== typeof requestIdleCallback;
    let a = [],
        d = -1,
        c = 0;

    function e(n) {
        d = b && 0 === c ? requestIdleCallback(g, {
            timeout: 35
        }) : setTimeout(g, 0 < c ? 1 : n)
    }

    function g(n) {
        d = -1;
        if (a.length) {
            var q = performance.now(),
                y = 0;
            do {
                h(a.shift());
                var w = performance.now();
                ++y;
                var u = (w - q) / y * 1.1
            } while (a.length && (b && 0 === c && "undefined" !== typeof n ? u < n.timeRemaining() : 12 > w - q + u)); - 1 === d && a.length && e(Math.max(16 - (w - q), 4))
        }
    }

    function h(n) {
        let q;
        try {
            q = n.func()
        } catch (y) {
            n.reject(y);
            return
        }
        n.resolve(q)
    }
    let l =
        f.QueryString.Has("disable-asyncify");
    l && console.warn("[Asyncify] Asyncify has been disabled due to disable-asyncify in the query string. Some work will now be done synchronously.");
    f.Asyncify = function(n) {
        let q = null;
        f.isDebug && (q = f.GetCallStack());
        return new Promise((y, w) => {
            a.push({
                func: n,
                resolve: y,
                reject: w,
                stack: q
            });
            l ? h(a.pop()) : -1 === d && e(16)
        })
    };
    f.Asyncify.SetHighThroughputMode = function(n) {
        if (n) ++c;
        else if (--c, 0 > c) throw Error("already turned off high throughput mode");
    }
} {
    "use strict";
    const f = self.C3;
    let b = -1;

    function a() {
        b = -1
    }
    f.FastGetDateNow = function() {
        -1 === b && (b = Date.now(), self.setTimeout(a, 16));
        return b
    };
    let d = -1,
        c = -1,
        e = new Set;

    function g() {
        c = d = -1;
        let h = Date.now();
        for (let l of e)
            if (l._CheckTimeout(h)) {
                let n = l._GetDeadline();
                if (-1 === c || n < c) c = n
            } else e.delete(l); - 1 !== c && (d = self.setTimeout(g, Math.max(c - h + 100, 1E3)))
    }
    f.IdleTimeout = class {
        constructor(h, l) {
            this._callback = h;
            this._timeout = 1E3 * l;
            this._deadline = 0;
            this._isActive = !1
        }
        Reset() {
            let h = f.FastGetDateNow();
            this._deadline =
                h + this._timeout;
            this._isActive || (e.add(this), this._isActive = !0); - 1 === d ? (c = this._deadline, d = self.setTimeout(g, this._timeout + 100)) : this._deadline < c && c > h + 1E3 && (self.clearTimeout(d), c = this._deadline, d = self.setTimeout(g, this._timeout + 100))
        }
        _CheckTimeout(h) {
            return h >= this._deadline ? this._callback() ? (this._deadline = h + this._timeout, !0) : this._isActive = !1 : !0
        }
        _GetDeadline() {
            return this._deadline
        }
        Cancel() {
            this._isActive && (e.delete(this), this._isActive = !1, 0 === e.size && -1 !== d && (self.clearTimeout(d), c = d = -1))
        }
        Release() {
            this.Cancel();
            this._callback = null
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Disposable = class b {
        constructor(a) {
            this._disposed = !1;
            this._disposeAction = a
        }
        Dispose() {
            this._disposed || (this._disposed = !0, this._disposeAction && (this._disposeAction(), this._disposeAction = null))
        }
        IsDisposed() {
            return this._disposed
        }
        Release() {
            this.Dispose()
        }
        static Release(a) {
            return new b(() => a.Release())
        }
        static From(a, d, c, e, g) {
            if ("undefined" === typeof e || null === e) e = !1;
            else if ("boolean" !== typeof e && "object" !== typeof e) throw new TypeError("invalid event listener options");
            g &&
                (c = c.bind(g));
            if (d.includes(" ")) {
                d = d.split(" ");
                g = new f.CompositeDisposable;
                for (let h of d) a.addEventListener(h, c, e), g.Add(f.New(f.Disposable, () => a.removeEventListener(h, c, e)));
                return g
            }
            a.addEventListener(d, c, e);
            return f.New(f.Disposable, () => a.removeEventListener(d, c, e))
        }
    };
    f.StubDisposable = class extends f.Disposable {
        SetAction(b) {
            this._disposeAction = b
        }
    };
    f.CompositeDisposable = class extends f.Disposable {
        constructor(...b) {
            super();
            this._disposables = new Set;
            for (let a of b) this.Add(a)
        }
        Add(...b) {
            if (this._disposed) throw Error("already disposed");
            for (let a of b) this._disposables.add(a)
        }
        Remove(b) {
            if (this._disposed) throw Error("already disposed");
            this._disposables.delete(b)
        }
        RemoveAll() {
            if (this._disposed) throw Error("already disposed");
            if (this._disposables) {
                for (let b of this._disposables) b.Dispose();
                this._disposables.clear()
            }
        }
        IsDisposed() {
            return this._disposed
        }
        Dispose() {
            if (this._disposed) throw Error("already disposed");
            this._disposed = !0;
            for (let b of this._disposables) b.Dispose();
            this._disposables.clear();
            this._disposables = null
        }
        Release() {
            this.Dispose()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.KahanSum = class extends f.DefendedBase {
        constructor() {
            super();
            this._sum = this._t = this._y = this._c = 0
        }
        Add(b) {
            this._y = +b - this._c;
            this._t = this._sum + this._y;
            this._c = this._t - this._sum - this._y;
            this._sum = this._t
        }
        Subtract(b) {
            this._sum -= +b
        }
        Get() {
            return this._sum
        }
        Reset() {
            this._sum = this._t = this._y = this._c = 0
        }
        Set(b) {
            this._t = this._y = this._c = 0;
            this._sum = +b
        }
        Release() {}
    }
} {
    "use strict";
    const f = self.C3,
        b = {
            RBnode: function(a) {
                this.tree = a;
                this.left = this.right = this.tree.sentinel;
                this.parent = null;
                this.color = !1;
                this.key = null
            },
            RedBlackSet: function(a) {
                this.size = 0;
                this.sentinel = new b.RBnode(this);
                this.sentinel.color = !1;
                this.root = this.sentinel;
                this.root.parent = this.sentinel;
                this.compare = a || this.default_compare
            }
        };
    b.RedBlackSet.prototype.default_compare = function(a, d) {
        return a < d ? -1 : d < a ? 1 : 0
    };
    b.RedBlackSet.prototype.clone = function() {
        var a = new b.RedBlackSet(this.compare);
        a.insertAll(this);
        return a
    };
    b.RedBlackSet.prototype.clear = function() {
        this.size = 0;
        this.sentinel = new b.RBnode(this);
        this.sentinel.color = !1;
        this.root = this.sentinel;
        this.root.parent = this.sentinel
    };
    b.RedBlackSet.prototype.leftRotate = function(a) {
        var d = a.right;
        a.right = d.left;
        d.left != this.sentinel && (d.left.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.left ? a.parent.left = d : a.parent.right = d;
        d.left = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.rightRotate = function(a) {
        var d = a.left;
        a.left = d.right;
        d.right !=
            this.sentinel && (d.right.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.right ? a.parent.right = d : a.parent.left = d;
        d.right = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.insert = function(a) {
        if (this.contains(a)) this.get_(a).key = a;
        else {
            var d = new b.RBnode(this);
            d.key = a;
            a = this.sentinel;
            for (var c = this.root; c != this.sentinel;) a = c, c = 0 > this.compare(d.key, c.key) ? c.left : c.right;
            d.parent = a;
            a == this.sentinel ? this.root = d : 0 > this.compare(d.key, a.key) ? a.left = d : a.right = d;
            d.left = this.sentinel;
            d.right = this.sentinel;
            d.color = !0;
            this.insertFixup(d);
            this.size++
        }
    };
    b.RedBlackSet.prototype.insertFixup = function(a) {
        for (; a != this.sentinel && a != this.root && 1 == a.parent.color;)
            if (a.parent == a.parent.parent.left) {
                var d = a.parent.parent.right;
                1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.right && (a = a.parent, this.leftRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.rightRotate(a.parent.parent))
            } else d = a.parent.parent.left, 1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.left && (a = a.parent, this.rightRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.leftRotate(a.parent.parent));
        this.root.color = !1
    };
    b.RedBlackSet.prototype.delete_ = function(a) {
        var d = a.left == this.sentinel || a.right == this.sentinel ? a : this.successor_(a);
        var c = d.left != this.sentinel ? d.left : d.right;
        c.parent = d.parent;
        d.parent == this.sentinel ? this.root = c : d == d.parent.left ? d.parent.left = c : d.parent.right =
            c;
        d != a && (a.key = d.key);
        0 == d.color && this.deleteFixup(c);
        this.size--
    };
    b.RedBlackSet.prototype.deleteFixup = function(a) {
        for (; a != this.root && 0 == a.color;)
            if (a == a.parent.left) {
                var d = a.parent.right;
                1 == d.color && (d.color = !1, a.parent.color = !0, this.leftRotate(a.parent), d = a.parent.right);
                0 == d.left.color && 0 == d.right.color ? (d.color = !0, a = a.parent) : (0 == d.right.color && (d.left.color = !1, d.color = !0, this.rightRotate(d), d = a.parent.right), d.color = a.parent.color, a.parent.color = !1, d.right.color = !1, this.leftRotate(a.parent),
                    a = this.root)
            } else d = a.parent.left, 1 == d.color && (d.color = !1, a.parent.color = !0, this.rightRotate(a.parent), d = a.parent.left), 0 == d.right.color && 0 == d.left.color ? (d.color = !0, a = a.parent) : (0 == d.left.color && (d.right.color = !1, d.color = !0, this.leftRotate(d), d = a.parent.left), d.color = a.parent.color, a.parent.color = !1, d.left.color = !1, this.rightRotate(a.parent), a = this.root);
        a.color = !1
    };
    b.RedBlackSet.prototype.remove = function(a) {
        a = this.get_(a);
        if (a != this.sentinel) {
            var d = a.key;
            this.delete_(a);
            return d
        }
        return null
    };
    b.RedBlackSet.prototype.removeSwapped =
        function(a, d) {
            this.remove(d)
        };
    b.RedBlackSet.prototype.min = function(a) {
        for (; a.left != this.sentinel;) a = a.left;
        return a
    };
    b.RedBlackSet.prototype.max = function(a) {
        for (; a.right != this.sentinel;) a = a.right;
        return a
    };
    b.RedBlackSet.prototype.successor_ = function(a) {
        if (a.right != this.sentinel) return this.min(a.right);
        for (var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.predeccessor_ = function(a) {
        if (a.left != this.sentinel) return this.max(a.left);
        for (var d = a.parent; d != this.sentinel &&
            a == d.left;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.successor = function(a) {
        if (0 < this.size) {
            a = this.get_(a);
            if (a == this.sentinel) return null;
            if (a.right != this.sentinel) return this.min(a.right).key;
            for (var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.predecessor = function(a) {
        if (0 < this.size) {
            a = this.get_(a);
            if (a == this.sentinel) return null;
            if (a.left != this.sentinel) return this.max(a.left).key;
            for (var d = a.parent; d != this.sentinel &&
                a == d.left;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.getMin = function() {
        return this.min(this.root).key
    };
    b.RedBlackSet.prototype.getMax = function() {
        return this.max(this.root).key
    };
    b.RedBlackSet.prototype.get_ = function(a) {
        for (var d = this.root; d != this.sentinel && 0 != this.compare(d.key, a);) d = 0 > this.compare(a, d.key) ? d.left : d.right;
        return d
    };
    b.RedBlackSet.prototype.contains = function(a) {
        return null != this.get_(a).key
    };
    b.RedBlackSet.prototype.getValues = function() {
        var a = [];
        this.forEach(function(d) {
            a.push(d)
        });
        return a
    };
    b.RedBlackSet.prototype.insertAll = function(a) {
        if ("array" == b.typeOf(a))
            for (var d = 0; d < a.length; d++) this.insert(a[d]);
        else if ("function" == b.typeOf(a.forEach)) a.forEach(this.insert, this);
        else if ("function" == b.typeOf(a.getValues))
            for (a = a.getValues(), d = 0; d < a.length; d++) this.insert(a[d]);
        else if ("object" == b.typeOf(a))
            for (d in a) this.insert(a[d])
    };
    b.RedBlackSet.prototype.removeAll = function(a) {
        if ("array" == b.typeOf(a))
            for (var d = 0; d < a.length; d++) this.remove(a[d]);
        else if ("function" == b.typeOf(a.forEach)) a.forEach(this.removeSwapped, this);
        else if ("function" == b.typeOf(a.getValues))
            for (a = a.getValues(), d = 0; d < a.length; d++) this.remove(a[d]);
        else if ("object" == b.typeOf(a))
            for (d in a) this.remove(a[d])
    };
    b.RedBlackSet.prototype.containsAll = function(a) {
        if ("array" == b.typeOf(a)) {
            for (var d = 0; d < a.length; d++)
                if (!this.contains(a[d])) return !1;
            return !0
        }
        if ("function" == b.typeOf(a.forEach)) return a.every(this.contains, this);
        if ("function" == b.typeOf(a.getValues)) {
            a = a.getValues();
            for (d =
                0; d < a.length; d++)
                if (!this.contains(a[d])) return !1;
            return !0
        }
        if ("object" == b.typeOf(a)) {
            for (d in a)
                if (!this.contains(a[d])) return !1;
            return !0
        }
    };
    b.RedBlackSet.prototype.range = function(a, d) {
        var c = [];
        this.traverseFromTo(function(e) {
            c.push(e)
        }, a, d);
        return c
    };
    b.RedBlackSet.prototype.traverse = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.min(this.root); c != this.sentinel && !a.call(d, c.key, this);) c = this.successor_(c)
    };
    b.RedBlackSet.prototype.traverseFrom = function(a, d, c) {
        if (!this.isEmpty())
            for (d = this.get_(d); d !=
                this.sentinel && !a.call(c, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseTo = function(a, d, c) {
        if (!this.isEmpty()) {
            var e = this.min(this.root);
            for (d = this.get_(d); e != d && !a.call(c, e.key, this);) e = this.successor_(e)
        }
    };
    b.RedBlackSet.prototype.traverseFromTo = function(a, d, c, e) {
        if (!this.isEmpty())
            for (d = this.get_(d), c = this.get_(c); d != c && !a.call(e, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseBackwards = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.max(this.root); c != this.sentinel &&
                !a.call(d, c.key, this);) c = this.predeccessor_(c)
    };
    b.RedBlackSet.prototype.forEach = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.call(d, c.key, c.key, this)
    };
    b.RedBlackSet.prototype.some = function(a, d) {
        if (this.isEmpty()) return !1;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c))
            if (a.call(d, c.key, c.key, this)) return !0;
        return !1
    };
    b.RedBlackSet.prototype.every = function(a, d) {
        if (this.isEmpty()) return !1;
        for (var c = this.min(this.root); c != this.sentinel; c =
            this.successor_(c))
            if (!a.call(d, c.key, c.key, this)) return !1;
        return !0
    };
    b.RedBlackSet.prototype.map = function(a, d) {
        var c = [];
        if (this.isEmpty()) return c;
        for (var e = this.min(this.root); e != this.sentinel; e = this.successor_(e)) c.push(a.call(d, e.key, e.key, this));
        return c
    };
    b.RedBlackSet.prototype.filter = function(a, d) {
        var c = [];
        if (this.isEmpty()) return c;
        for (var e = this.min(this.root); e != this.sentinel; e = this.successor_(e)) a.call(d, e.key, e.key, this) && c.push(e.key);
        return c
    };
    b.RedBlackSet.prototype.getCount = function() {
        return this.size
    };
    b.RedBlackSet.prototype.isEmpty = function() {
        return 0 == this.size
    };
    b.RedBlackSet.prototype.isSubsetOf = function(a) {
        var d = b.getCount(a);
        if (this.getCount() > d) return !1;
        d = 0;
        if (this.isEmpty()) return !0;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) b.contains.call(a, a, c.key) && d++;
        return d == this.getCount()
    };
    b.RedBlackSet.prototype.intersection = function(a) {
        var d = new b.RedBlackSet(this.compare);
        if (this.isEmpty()) return d;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.contains.call(a,
            c.key, c.key, this) && d.insert(c.key);
        return d
    };
    f.RedBlackSet = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._rbSet = new b.RedBlackSet(a);
            this._enableQueue = !1;
            this._queueInsert = new Set;
            this._queueRemove = new Set
        }
        Add(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.delete(a) : this._queueInsert.add(a) : this._rbSet.insert(a)
        }
        Remove(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.add(a) : this._queueInsert.delete(a) : this._rbSet.remove(a)
        }
        Has(a) {
            return this._enableQueue ? this._queueInsert.has(a) ?
                !0 : !this._queueRemove.has(a) && this._rbSet.contains(a) : this._rbSet.contains(a)
        }
        Clear() {
            this._rbSet.clear();
            this._queueInsert.clear();
            this._queueRemove.clear()
        }
        toArray() {
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            return this._rbSet.getValues()
        }
        GetSize() {
            return this._rbSet.getCount() + this._queueInsert.size - this._queueRemove.size
        }
        IsEmpty() {
            return 0 === this.GetSize()
        }
        Front() {
            if (this.IsEmpty()) throw Error("empty set");
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this._rbSet;
            return a.min(a.root).key
        }
        Shift() {
            if (this.IsEmpty()) throw Error("empty set");
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this.Front();
            this.Remove(a);
            return a
        }
        SetQueueingEnabled(a) {
            a = !!a;
            if (this._enableQueue !== a && (this._enableQueue = a, !a)) {
                for (const d of this._queueRemove) this._rbSet.remove(d);
                this._queueRemove.clear();
                for (const d of this._queueInsert) this._rbSet.insert(d);
                this._queueInsert.clear()
            }
        }
        ForEach(a) {
            this._rbSet.forEach(a)
        }* values() {
            if (!this.IsEmpty()) {
                var a =
                    this._rbSet;
                for (let d = a.min(a.root); d != a.sentinel; d = a.successor_(d)) yield d.key
            }
        }[Symbol.iterator]() {
            return this.values()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.PromiseThrottle = class {
        constructor(b = f.hardwareConcurrency) {
            this._maxParallel = b;
            this._queue = [];
            this._activeCount = 0
        }
        Add(b) {
            return new Promise((a, d) => {
                this._queue.push({
                    func: b,
                    resolve: a,
                    reject: d
                });
                this._MaybeStartNext()
            })
        }
        _FindInQueue(b) {
            for (let a = 0, d = this._queue.length; a < d; ++a)
                if (this._queue[a].func === b) return a;
            return -1
        }
        RemoveAndResolve(b, a) {
            b = this._FindInQueue(b);
            if (-1 === b) throw Error("cannot find promise to resolve");
            this._queue[b].resolve(a);
            this._queue.splice(b,
                1)
        }
        RemoveAndReject(b, a) {
            b = this._FindInQueue(b);
            if (-1 === b) throw Error("cannot find promise to reject");
            this._queue[b].reject(a);
            this._queue.splice(b, 1)
        }
        async _MaybeStartNext() {
            if (this._queue.length && !(this._activeCount >= this._maxParallel)) {
                this._activeCount++;
                var b = this._queue.shift();
                try {
                    const a = await b.func();
                    b.resolve(a)
                } catch (a) {
                    b.reject(a)
                }
                this._activeCount--;
                this._MaybeStartNext()
            }
        }
        static async Batch(b, a) {
            const d = [];
            let c = !1;
            const e = async h => {
                    for (;
                        (h = a.pop()) && !c;) try {
                        d.push(await h())
                    } catch (l) {
                        throw c = !0, l;
                    }
                },
                g = [];
            for (; b--;) g.push(e());
            await Promise.all(g);
            return d
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.RateLimiter = class {
        constructor(b, a, d) {
            this._callback = b;
            this._interval = a;
            this._intervalOnBattery = d || 2 * a;
            this._timerId = -1;
            this._lastCallTime = -Infinity;
            this._timerCallFunc = () => this._OnTimer();
            this._canRunImmediate = this._ignoreReset = !1;
            this._callbackArguments = null
        }
        SetCanRunImmediate(b) {
            this._canRunImmediate = !!b
        }
        _GetInterval() {
            return "undefined" !== typeof f.Battery && f.Battery.IsOnBatteryPower() ? this._intervalOnBattery : this._interval
        }
        Call(...b) {
            if (-1 === this._timerId) {
                this._callbackArguments =
                    b;
                b = f.FastGetDateNow();
                var a = b - this._lastCallTime,
                    d = this._GetInterval();
                a >= d && this._canRunImmediate ? (this._lastCallTime = b, this._RunCallback()) : this._timerId = self.setTimeout(this._timerCallFunc, Math.max(d - a, 4))
            }
        }
        _RunCallback() {
            this._ignoreReset = !0;
            const b = this._callbackArguments;
            this._callbackArguments = null;
            b ? this._callback(...b) : this._callback();
            this._ignoreReset = !1
        }
        Reset() {
            this._ignoreReset || (this._CancelTimer(), this._callbackArguments = null, this._lastCallTime = f.FastGetDateNow())
        }
        _OnTimer() {
            this._timerId = -1;
            this._lastCallTime = f.FastGetDateNow();
            this._RunCallback()
        }
        _CancelTimer() {
            -1 !== this._timerId && (self.clearTimeout(this._timerId), this._timerId = -1)
        }
        Release() {
            this._CancelTimer();
            this._timerCallFunc = this._callbackArguments = this._callback = null
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SVGRasterManager = class {
        constructor() {
            this._images = new Map;
            this._allowNpotSurfaces = !1;
            this._redrawCallback = this._releaseResultCallback = this._rasterAtSizeCallback = this._getBaseSizeCallback = null
        }
        SetNpotSurfaceAllowed(b) {
            this._allowNpotSurfaces = !!b
        }
        IsNpotSurfaceAllowed() {
            return this._allowNpotSurfaces
        }
        SetGetBaseSizeCallback(b) {
            this._getBaseSizeCallback = b
        }
        GetBaseSize(b) {
            if (!this._getBaseSizeCallback) throw Error("no get base size callback set");
            return this._getBaseSizeCallback(b)
        }
        SetRasterAtSizeCallback(b) {
            this._rasterAtSizeCallback =
                b
        }
        RasterAtSize(b, a, d, c, e, g) {
            if (!this._rasterAtSizeCallback) throw Error("no raster at size callback set");
            return this._rasterAtSizeCallback(b, a, d, c, e, g)
        }
        SetReleaseResultCallback(b) {
            this._releaseResultCallback = b
        }
        ReleaseResult(b) {
            if (!this._releaseResultCallback) throw Error("no release result callback set");
            this._releaseResultCallback(b)
        }
        SetRedrawCallback(b) {
            this._redrawCallback = b
        }
        Redraw() {
            if (!this._redrawCallback) throw Error("no redraw callback set");
            this._redrawCallback()
        }
        AddImage(b) {
            let a = this._images.get(b);
            a || (a = f.New(f.SVGRasterImage, this, b), this._images.set(b, a));
            a.IncReference();
            return a
        }
        _RemoveImage(b) {
            this._images.delete(b.GetDataSource())
        }
        OnTexturesChanged() {
            for (const b of this._images.values()) b.ReleaseRasterizedResult(), b.ForceRasterAgain()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SVGRasterImage = class {
        constructor(b, a) {
            this._manager = b;
            this._dataSource = a;
            this._baseHeight = this._baseWidth = this._refCount = 0;
            this._getBaseSizePromise = this._manager.GetBaseSize(a).then(d => {
                this._baseWidth = d[0];
                this._baseHeight = d[1];
                this._manager.Redraw()
            }).catch(d => {
                console.error("[SVG] Error loading SVG: ", d);
                this._hadError = !0;
                this._manager.Redraw()
            });
            this._rasterImageHeight = this._rasterImageWidth = this._rasterSurfaceHeight = this._rasterSurfaceWidth = 0;
            this._isRasterizing = !1;
            this._rasterizedResult = null;
            this._hadError = this._forceRaster = !1
        }
        Release() {
            if (0 >= this._refCount) throw Error("already released");
            this._refCount--;
            0 === this._refCount && this._Release()
        }
        ReleaseRasterizedResult() {
            this._rasterizedResult && (this._manager.ReleaseResult(this._rasterizedResult), this._rasterizedResult = null)
        }
        _Release() {
            this.ReleaseRasterizedResult();
            this._manager._RemoveImage(this);
            this._manager = null
        }
        GetDataSource() {
            return this._dataSource
        }
        IncReference() {
            this._refCount++
        }
        HasReferences() {
            return 0 <
                this._refCount
        }
        GetRasterizedResult() {
            return this._rasterizedResult
        }
        ForceRasterAgain() {
            this._forceRaster = !0
        }
        async StartRasterForSize(b, a, d) {
            if (0 !== a && 0 !== d && !this._hadError && !this._isRasterizing) {
                var c = f.nextHighestPowerOfTwo(Math.ceil(a)),
                    e = f.nextHighestPowerOfTwo(Math.ceil(d)),
                    g = Math.max(c, e);
                2048 < g && (g = 2048 / g, a *= g, d *= g, c = Math.min(Math.ceil(c * g), 2048), e = Math.min(Math.ceil(e * g), 2048));
                a < c && d < e && (d = a / d, c / e > d ? (a = e * d, d = e) : (a = c, d = c / d));
                this._manager.IsNpotSurfaceAllowed() && (c = Math.ceil(a), e = Math.ceil(d));
                c <= this._rasterSurfaceWidth && e <= this._rasterSurfaceHeight && !this._forceRaster || (this._isRasterizing = !0, this._rasterSurfaceWidth = c, this._rasterSurfaceHeight = e, b = await this._manager.RasterAtSize(this._dataSource, b, this._rasterSurfaceWidth, this._rasterSurfaceHeight, a, d), this._manager && (this.ReleaseRasterizedResult(), this._rasterizedResult = b, this._rasterImageWidth = a, this._rasterImageHeight = d, this._forceRaster = this._isRasterizing = !1, this._manager.Redraw()))
            }
        }
        WhenBaseSizeReady() {
            return this._getBaseSizePromise
        }
        GetBaseWidth() {
            return this._baseWidth
        }
        GetBaseHeight() {
            return this._baseHeight
        }
        GetRasterWidth() {
            return this._rasterImageWidth
        }
        GetRasterHeight() {
            return this._rasterImageHeight
        }
        HadError() {
            return this._hadError
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.UTF8_BOM = "\ufeff";
    const b = new Set([..."0123456789"]);
    f.IsNumericChar = function(n) {
        return b.has(n)
    };
    const a = new Set([..." \t\n\r\u00a0\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000"]);
    f.IsWhitespaceChar = function(n) {
        return a.has(n)
    };
    f.FilterWhitespace = function(n) {
        return [...n].filter(q => !f.IsWhitespaceChar(q)).join("")
    };
    f.IsStringAllWhitespace = function(n) {
        for (const q of n)
            if (!f.IsWhitespaceChar(q)) return !1;
        return !0
    };
    f.IsUnprintableChar = function(n) {
        return 1 === n.length && 32 > n.charCodeAt(0)
    };
    f.FilterUnprintableChars = function(n) {
        return [...n].filter(q => !f.IsUnprintableChar(q)).join("")
    };
    const d = new Set([..."0123456789.+-e"]);
    f.IsStringNumber = function(n) {
        n = n.trim();
        if (!n.length) return !1;
        let q = n.charAt(0);
        if ("-" !== q && !b.has(q)) return !1;
        for (let y of n)
            if (!d.has(y)) return !1;
        return !0
    };
    f.RemoveTrailingDigits = function(n) {
        let q = n.length;
        for (; 0 < q;) {
            let y = n.charAt(q - 1);
            if (!f.IsNumericChar(y)) break;
            --q
        }
        return n.substr(0, q)
    };
    f.IncrementNumberAtEndOf = function(n) {
        let q = f.RemoveTrailingDigits(n);
        n = (n = n.substr(q.length)) ? (parseInt(n, 10) + 1).toString() : "2";
        return q + n
    };
    const c = new Map([
        ["&", "&amp;"],
        ["<", "&lt;"],
        [">", "&gt;"],
        ['"', "&quot;"],
        ["'", "&#39;"]
    ]);

    function e(n) {
        return c.get(n)
    }
    const g = /[&<>"']/g;
    f.EscapeHTML = function(n) {
        return n.replace(g, e)
    };
    f.EscapeJS = function(n) {
        n = f.ReplaceAll(n, "\\", "\\\\");
        n = f.ReplaceAll(n, '"', '\\"');
        n = f.ReplaceAll(n, "\t", "\\t");
        n = f.ReplaceAll(n, "\r", "");
        return f.ReplaceAll(n, "\n", "\\n")
    };
    f.EscapeXML =
        function(n) {
            n = f.ReplaceAll(n, "&", "&amp;");
            n = f.ReplaceAll(n, "<", "&lt;");
            n = f.ReplaceAll(n, ">", "&gt;");
            return f.ReplaceAll(n, '"', "&quot;")
        };
    const h = /[-[\]{}()*+?.,\\^$|#\s]/g;
    f.EscapeRegex = function(n) {
        return n.replace(h, "\\$&")
    };
    f.FindAll = function(n, q, y = !1) {
        if (!q) return [];
        y || (n = n.toLowerCase(), q = q.toLowerCase());
        y = q.length;
        var w = 0;
        let u = [];
        for (; - 1 < (w = n.indexOf(q, w));) u.push(w), w += y;
        return u
    };
    f.ReplaceAll = function(n, q, y) {
        return n.replaceAll(q, () => y)
    };
    f.ReplaceAllCaseInsensitive = function(n, q, y) {
        return n.replace(new RegExp(f.EscapeRegex(q),
            "gi"), () => y)
    };
    f.SetElementContent = function(n, q) {
        "string" === typeof q ? n.textContent = q : q.isPlainText() ? n.textContent = q.toString() : (n.innerHTML = q.toHTML(), q instanceof f.BBString && q.attachLinkHandlers(n))
    };
    f.StringLikeEquals = function(n, q) {
        return n instanceof f.HtmlString || n instanceof f.BBString ? n.equals(q) : q instanceof f.HtmlString || q instanceof f.BBString ? q.equals(n) : n === q
    };
    f.StringSubstitute = function(n, ...q) {
        let y = n;
        for (let w = 0, u = q.length; w < u; ++w) {
            const p = `{${w}}`;
            if (!n.includes(p)) throw Error(`missing placeholder '${p}' in string substitution`);
            y = y.replace(p, q[w].toString())
        }
        return y
    };
    f.StringSubstituteAllowMissing = function(n, ...q) {
        let y = n,
            w = -1,
            u = -1;
        for (let p = 0, x = q.length; p < x; ++p) {
            const t = `{${p}}`;
            n.includes(t) ? (u = p, y = y.replace(t, q[p].toString())) : -1 === w && (w = p)
        }
        if (0 <= w && 0 <= u && w < u) throw Error(`missing placeholder '${w}' in string substitution`);
        return y
    };
    f.StringSubstituteMap = function(n, q) {
        for (let [y, w] of Object.entries(q)) n = n.replaceAll(y, w.toString());
        return n
    };
    f.SortAZCaseInsensitive = function(n, q) {
        n = n.toLowerCase();
        q = q.toLowerCase();
        return n >
            q ? 1 : n < q ? -1 : 0
    };
    f.FormatDataSize = function(n, q) {
        q = "common." + (q ? "dataRates" : "dataSizes") + ".";
        const y = self.langSub;
        if (1024 > n) return y(q + "bytes", n);
        if (1048576 > n) return n /= 1024, n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n), y(q + "kilobytes", n);
        if (1073741824 > n) return n /= 1048576, n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n), y(q + "megabytes", n);
        if (1099511627776 > n) return n /= 1073741824, n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n), y(q + "gigabytes", n);
        n /= 1099511627776;
        n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n);
        return y(q + "terabytes",
            n)
    };
    const l = {
        approximate: !1,
        days: !0,
        hours: !0,
        minutes: !0,
        seconds: !0
    };
    f.FormatTime = function(n, q) {
        q = Object.assign({}, l, q);
        f.Lang.PushContext("common.time");
        const y = [],
            w = self.lang,
            u = self.langPluralSub;
        if (q.days) {
            var p = Math.floor(n / 86400);
            0 < p && (n -= 86400 * p, y.push(u(".days", null, p)))
        }
        q.hours && (p = Math.floor(n / 3600), 0 < p || y.length) && (n -= 3600 * p, y.push(u(".hours", null, p)));
        q.minutes && (p = Math.floor(n / 60), 0 < p || y.length || !q.seconds) && (n -= 60 * p, y.push(u(".minutes", null, p)));
        q.seconds && y.push(u(".seconds", null, Math.floor(n %
            60)));
        n = (q.approximate ? w(".approx-prefix") : "") + y.join(w(".separator"));
        f.Lang.PopContext();
        return n
    };
    f.ZeroPad = function(n, q) {
        let y = 0 > n ? "-" : "";
        n = Math.abs(n);
        n = n.toString();
        q -= n.length;
        for (let w = 0; w < q; ++w) y += "0";
        return y + n
    };
    f.StringToTitleCase = function(n) {
        return n.toLowerCase().replace(/\b\w/g, q => q.toUpperCase())
    };
    f.CompareVersionStrings = function(n, q) {
        n = n.split(".").map(y => y.trim());
        q = q.split(".").map(y => y.trim());
        f.resizeArray(n, 4, "0");
        f.resizeArray(q, 4, "0");
        n = n.map(y => parseInt(y, 10));
        q = q.map(y => parseInt(y,
            10));
        for (let y = 0; 4 > y; ++y) {
            const w = n[y] - q[y];
            if (0 !== w) return 0 > w ? -1 : 1
        }
        return 0
    };
    f.CreateGUID = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, n => {
            const q = Math.floor(16 * Math.random());
            return ("x" === n ? q : q & 3 | 8).toString(16)
        })
    };
    f.StringHammingDistance = function(n, q) {
        if (n.length !== q.length) throw Error("strings must be same length");
        let y = 0;
        for (let w = 0, u = n.length; w < u; ++w) n.charAt(w) !== q.charAt(w) && ++y;
        return y
    };
    f.StringLevenshteinDistance = function(n, q) {
        if (0 === n.length) return q.length;
        if (0 === q.length) return n.length;
        let y, w, u, p;
        if (n.length > q.length) {
            var x = n;
            n = q;
            q = x
        }
        p = Array(n.length + 1);
        for (x = 0; x <= n.length; x++) p[x] = x;
        for (x = 1; x <= q.length; x++) {
            w = x;
            for (y = 1; y <= n.length; y++) u = q[x - 1] === n[y - 1] ? p[y - 1] : Math.min(p[y - 1] + 1, Math.min(w + 1, p[y] + 1)), p[y - 1] = w, w = u;
            p[n.length] = w
        }
        return p[n.length]
    }
} {
    "use strict";
    const f = self.C3,
        b = new Map([
            ["b", "strong"],
            ["i", "em"],
            ["s", "s"],
            ["u", "u"],
            ["sub", "sub"],
            ["sup", "sup"],
            ["small", "small"],
            ["mark", "mark"],
            ["a1", "a"],
            ["a2", "a"],
            ["a3", "a"],
            ["a4", "a"],
            ["a5", "a"],
            ["a6", "a"],
            ["a7", "a"],
            ["a8", "a"],
            ["a9", "a"],
            ["bad", ["span", "bbCodeBad"]],
            ["good", ["span", "bbCodeGood"]],
            ["info", ["span", "bbCodeInfo"]],
            ["h1", ["span", "bbCodeH1"]],
            ["h2", ["span", "bbCodeH2"]],
            ["h3", ["span", "bbCodeH3"]],
            ["h4", ["span", "bbCodeH4"]],
            ["item", ["span", "bbCodeItem"]]
        ]),
        a = /\[(\/?)([a-zA-Z0-9]+)\]/g,
        d = /\[(\/?)([^\[]*?)\]/g;
    let c = null,
        e = 0;

    function g(l, n, q) {
        var y = b.get(q);
        if (y) {
            if ("string" === typeof y) {
                if ("a" !== y || n) return "<" + n + y + ">";
                n = parseInt(q.substring(1), 10) - 1;
                if (0 > n || n >= c.length) throw Error("invalid bbcode link substitution");
                y = c[n];
                if ("string" === typeof y) return `<a href="${c[n]}">`;
                if ("function" === typeof y) return `<a class="bblink${n}">`;
                throw new TypeError("invalid bbcode link action");
            }
            if (Array.isArray(y)) return l = y[0], y = y[1], n ? "</" + l + ">" : `<${l} class="${y}">`
        } else return "class" === q ? n ? "</span>" :
            `<span class="bbclass${e++}">` : l
    }
    const h = /\n/g;
    f.BBString = class {
        constructor(l, n) {
            this._bbstr = n && n.noEscape ? l : f.EscapeHTML(l);
            this._htmlstr = "";
            this._convertLineBreaks = !1;
            this._linkActions = [];
            if (n && (this._convertLineBreaks = !!n.convertLineBreaks, n.links)) {
                if (9 < n.links.length) throw Error("too many links");
                this._linkActions = n.links
            }
            this._hasAnyBBtags = this._bbstr.includes("[");
            this._needsLineBreakConversion = this._convertLineBreaks && this._bbstr.includes("\n");
            this._isPlain = !this._hasAnyBBtags && !this._needsLineBreakConversion &&
                !this._bbstr.includes("&");
            this._hasParsedFragments = !1;
            this._fragments = []
        }
        toString() {
            return this._bbstr
        }
        valueOf() {
            return this._bbstr
        }
        isPlainText() {
            return this._isPlain
        }
        toPlainText() {
            return this._hasAnyBBtags ? this._bbstr.replace(a, "") : this._bbstr
        }
        toHTML() {
            if (this._isPlain) return this._bbstr;
            if (!this._htmlstr && this._bbstr) {
                let l = this._bbstr;
                this._hasAnyBBtags && (e = 0, c = this._linkActions, l = l.replace(a, g), c = null);
                this._needsLineBreakConversion && (l = l.replace(h, "<br>"));
                this._htmlstr = l
            }
            return this._htmlstr
        }
        attachLinkHandlers(l) {
            if (this._linkActions.length)
                for (let n =
                        0, q = this._linkActions.length; n < q; ++n) {
                    const y = this._linkActions[n];
                    if ("function" !== typeof y) continue;
                    const w = l.querySelector(".bblink" + n);
                    if (!w) throw Error("unable to attach BBString link handler");
                    w.onclick = y
                }
        }
        equals(l) {
            return l instanceof f.HtmlString ? this.toHTML() === l.toHTML() : l instanceof f.BBString ? this._bbstr === l._bbstr : this._bbstr === l
        }
        toFragmentList() {
            if (this._hasParsedFragments) return this._fragments;
            const l = this._bbstr,
                n = [];
            let q = d.lastIndex = 0;
            for (var y; null !== (y = d.exec(l));) {
                var w = y.index;
                if (0 < w && "\\" === l.charAt(w - 1)) continue;
                var u = y[0],
                    p = y[1];
                y = y[2];
                const x = l.substring(q, w);
                q = w + u.length;
                x && this._fragments.push({
                    text: x,
                    styles: n.slice(0)
                });
                if (y)
                    if (p)
                        for (y = y.toLowerCase(), w = n.length - 1; 0 <= w; --w) {
                            if (n[w].tag === y) {
                                n.splice(w, 1);
                                break
                            }
                        } else w = y, u = null, p = y.indexOf("="), -1 !== p ? (w = y.substring(0, p).toLowerCase(), u = y.substring(p + 1)) : w = w.toLowerCase(), n.push({
                            tag: w,
                            param: u
                        })
            }
            q < l.length && this._fragments.push({
                text: l.substring(q),
                styles: n.slice(0)
            });
            for (const x of this._fragments) x.text = this._ProcessBBCodeEscapeSequences(x.text);
            this._hasParsedFragments = !0;
            return this._fragments
        }
        _ProcessBBCodeEscapeSequences(l) {
            l = f.ReplaceAll(l, "\\[", "[");
            return f.ReplaceAll(l, "\\\\", "\\")
        }
        static StripTags(l) {
            return f.New(f.BBString, l, {
                noEscape: !0
            }).toPlainText()
        }
        static StripAnyTags(l) {
            return l.replace(d, "")
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.WordWrap = class {
        constructor() {
            this._lines = []
        }
        GetLines() {
            return this._lines
        }
        GetLineCount() {
            return this._lines.length
        }
        _MeasureLine(b, a) {
            let d = 0,
                c = 0,
                e = 0,
                g = 0,
                h = 0;
            for (const l of b) - 1 === l.width && (b = a(l.text, l.styles), l.width = b.width, l.height = b.height, l.fontBoundingBoxAscent = b.fontBoundingBoxAscent || 0, l.fontBoundingBoxDescent = b.fontBoundingBoxDescent || 0, l.topToAlphabeticDistance = b.topToAlphabeticDistance || 0), d += l.width, c = Math.max(c, l.height), e = Math.max(e, l.fontBoundingBoxAscent),
                g = Math.max(g, l.fontBoundingBoxDescent), h = Math.max(h, l.topToAlphabeticDistance);
            return {
                width: d,
                height: c,
                fontBoundingBoxAscent: e,
                fontBoundingBoxDescent: g,
                topToAlphabeticDistance: h
            }
        }
        _AddLine(b, a, d, c, e, g) {
            this._lines.push({
                fragments: b,
                width: a,
                height: d,
                fontBoundingBoxAscent: c,
                fontBoundingBoxDescent: e,
                topToAlphabeticDistance: g
            })
        }
        WordWrap(b, a, d, c, e) {
            "string" === typeof b && (b = [{
                text: b,
                styles: []
            }]);
            f.clearArray(this._lines);
            if (!(!b.length || 1 === b.length && !b[0].text.length || 2 > d)) {
                if (1 === b.length) {
                    var g = b[0];
                    const h =
                        g.text;
                    g = g.styles;
                    if (100 >= h.length && !h.includes("\n")) {
                        let {
                            width: l,
                            height: n,
                            fontBoundingBoxAscent: q,
                            fontBoundingBoxDescent: y,
                            topToAlphabeticDistance: w
                        } = a(h, g);
                        l += e;
                        q = q || 0;
                        y = y || 0;
                        w = w || 0;
                        if (l <= d) {
                            this._AddLine([{
                                text: h,
                                styles: g,
                                width: l,
                                height: n,
                                fontBoundingBoxAscent: q,
                                fontBoundingBoxDescent: y,
                                topToAlphabeticDistance: w
                            }], l, n, q, y, w);
                            return
                        }
                    }
                }
                if ("word" === c) c = this._TokeniseWords(b);
                else {
                    c = [];
                    for (const h of b) f.appendArray(c, [...h.text].map(l => [{
                        text: l,
                        styles: h.styles
                    }]))
                }
                this._WrapText(c, a, d, e)
            }
        }
        _TokeniseWords(b) {
            const a = [];
            let d = [],
                c = !1;
            for (const g of b) {
                var e = g.text;
                b = g.styles;
                for (const h of e) "\n" === h ? (0 < d.length && a.push(d), a.push([{
                    text: "\n",
                    styles: b
                }]), d = []) : 0 === d.length ? (d.push({
                    text: h,
                    styles: b
                }), c = f.IsWhitespaceChar(h)) : (e = f.IsWhitespaceChar(h), e === c ? (e = d[d.length - 1], e.styles === b ? e.text += h : d.push({
                    text: h,
                    styles: b
                })) : (a.push(d), d = [], d.push({
                    text: h,
                    styles: b
                }), c = e))
            }
            0 < d.length && a.push(d);
            return a
        }
        _CopyLine(b) {
            return b.map(a => ({
                text: a.text,
                styles: a.styles,
                width: a.width,
                height: a.height,
                fontBoundingBoxAscent: a.fontBoundingBoxAscent,
                fontBoundingBoxDescent: a.fontBoundingBoxDescent,
                topToAlphabeticDistance: a.topToAlphabeticDistance
            }))
        }
        _AddWordToLine(b, a) {
            var d = b.length ? b[b.length - 1] : null;
            let c = 0;
            d && a[0].styles === d.styles && (d.text += a[0].text, d.width = -1, d.height = -1, d.fontBoundingBoxAscent = -1, d.fontBoundingBoxDescent = -1, d.topToAlphabeticDistance = -1, c = 1);
            for (d = a.length; c < d; ++c) {
                const e = a[c];
                b.push({
                    text: e.text,
                    styles: e.styles,
                    width: -1,
                    height: -1,
                    fontBoundingBoxAscent: -1,
                    fontBoundingBoxDescent: -1,
                    topToAlphabeticDistance: -1
                })
            }
        }
        _WrapText(b,
            a, d, c) {
            let e = [],
                g = 0,
                h = 0,
                l = 0,
                n = 0;
            var q = 0;
            for (const y of b) {
                if (1 === y.length && "\n" === y[0].text) {
                    0 === h && (q = a(" ", y[0].styles), h = q.height, l = q.fontBoundingBoxAscent || 0, n = q.fontBoundingBoxDescent || 0, q = q.topToAlphabeticDistance || 0);
                    this._AddLine(e, g, h, l, n, q);
                    e = [];
                    q = n = l = h = g = 0;
                    continue
                }
                b = this._CopyLine(e);
                this._AddWordToLine(b, y);
                const w = this._MeasureLine(b, a),
                    u = w.width;
                u >= d ? (0 < e.length && this._AddLine(e, g, h, l, n, q), e = [], f.IsStringAllWhitespace(y[0].text) ? q = n = l = h = g = 0 : (this._AddWordToLine(e, y), q = this._MeasureLine(e,
                    a), g = q.width, h = q.height, l = q.fontBoundingBoxAscent, n = q.fontBoundingBoxDescent, q = q.topToAlphabeticDistance)) : (e = b, g = u, h = w.height, l = w.fontBoundingBoxAscent, n = w.fontBoundingBoxDescent, q = w.topToAlphabeticDistance)
            }
            0 < e.length && this._AddLine(e, g, h, l, n, q);
            this._TrimLinesTrailingWhitespace(a, c)
        }
        _TrimLinesTrailingWhitespace(b, a) {
            for (const c of this._lines) {
                const e = c.fragments;
                if (!e.length) continue;
                let g = e[e.length - 1];
                var d = g.text;
                const h = d.trimEnd();
                if (!h) c.width -= g.width, e.pop();
                else if (h.length < d.length) {
                    d =
                        b(h, g.styles).width;
                    const l = g.width - d;
                    g.width = d;
                    g.text = h;
                    c.width -= l
                }
                0 !== a && 0 < e.length && (g = e[e.length - 1], g.width += a, c.width += a)
            }
        }
        Clear() {
            f.clearArray(this._lines)
        }
        GetMaxLineWidth() {
            return this._lines.reduce((b, a) => Math.max(b, a.width), 0)
        }
        GetTotalLineHeight() {
            return this._lines.reduce((b, a) => b + a.height, 0)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        e = a.create(),
        g = a.create(),
        h = a.create(),
        l = d.create(),
        n = c.create(),
        q = a.create(),
        y = a.create(),
        w = a.create(),
        u = a.create(),
        p = a.create(),
        x = a.create(),
        t = a.create(),
        r = a.create(),
        B = d.fromValues(0, 0, 1, 1);
    f.Gfx = {
        Project(F, J, G, I, L, N, S) {
            const X = I[0] * F + I[4] * J + I[8] * G + I[12],
                U = I[1] * F + I[5] * J + I[9] * G + I[13];
            var W = I[2] * F + I[6] * J + I[10] * G + I[14];
            G = I[3] * F + I[7] * J + I[11] * G + I[15];
            F = L[0] * X + L[4] * U + L[8] * W + L[12] * G;
            J = L[1] * X + L[5] * U + L[9] * W + L[13] * G;
            L = L[2] * X + L[6] * U +
                L[10] * W + L[14] * G;
            W = -W;
            if (0 === W) return !1;
            W = 1 / W;
            S[0] = (F * W * .5 + .5) * N[2] + N[0];
            S[1] = (J * W * .5 + .5) * N[3] + N[1];
            S[2] = .5 * (1 + L * W);
            return !0
        },
        Unproject(F, J, G, I, L, N, S) {
            c.multiply(n, L, I);
            if (null === c.invert(n, n)) return !1;
            l[0] = (F - N[0]) / N[2] * 2 - 1;
            l[1] = (J - N[1]) / N[3] * 2 - 1;
            l[2] = 2 * G - 1;
            l[3] = 1;
            d.transformMat4(l, l, n);
            if (0 === l[3]) return !1;
            l[3] = 1 / l[3];
            S[0] = l[0] * l[3];
            S[1] = l[1] * l[3];
            S[2] = l[2] * l[3];
            return !0
        },
        UnprojectScreenToWorldZ(F, J, G, I, L, N, S) {
            if (!f.Gfx.Unproject(F, J, 0, I, L, N, e) || !f.Gfx.Unproject(F, J, 1, I, L, N, g)) return !1;
            a.subtract(g,
                g, e);
            a.set(h, 0, 0, 1);
            F = -G;
            J = a.dot(h, g);
            G = 0;
            if (0 === J) {
                if (0 !== a.dot(h, e) + F) return !1
            } else if (G = -(a.dot(e, h) + F) / J, 0 > G) return !1;
            a.scaleAndAdd(S, e, g, G);
            return !0
        }
    };

    function z(F, J, G, I) {
        a.subtract(e, G, J);
        a.subtract(g, F, J);
        a.cross(h, e, g);
        a.normalize(h, h);
        I[0] = h[0];
        I[1] = h[1];
        I[2] = h[2];
        I[3] = a.dot(F, h)
    }

    function C(F, J, G, I, L, N, S) {
        const X = S[0],
            U = S[1],
            W = S[2];
        S = S[3];
        let ia;
        0 < X ? (ia = X * F, F = X * I) : (ia = X * I, F *= X);
        0 < U ? (ia += U * J, F += U * L) : (ia += U * L, F += U * J);
        0 < W ? (ia += W * G, F += W * N) : (ia += W * N, F += W * G);
        return ia >= S || F > S
    }
    f.Gfx.ViewFrustum =
        class {
            constructor() {
                this._leftP = d.create();
                this._topP = d.create();
                this._rightP = d.create();
                this._bottomP = d.create();
                this._nearP = d.create();
                this._farP = d.create()
            }
            CalculatePlanes(F, J) {
                f.Gfx.Unproject(0, 1, 0, F, J, B, q);
                f.Gfx.Unproject(1, 1, 0, F, J, B, y);
                f.Gfx.Unproject(0, 0, 0, F, J, B, w);
                f.Gfx.Unproject(1, 0, 0, F, J, B, u);
                f.Gfx.Unproject(0, 1, 1, F, J, B, p);
                f.Gfx.Unproject(1, 1, 1, F, J, B, x);
                f.Gfx.Unproject(0, 0, 1, F, J, B, t);
                f.Gfx.Unproject(1, 0, 1, F, J, B, r);
                z(w, q, p, this._leftP);
                z(q, y, x, this._topP);
                z(y, u, r, this._rightP);
                z(u, w, t, this._bottomP);
                z(t, p, x, this._farP);
                z(u, y, q, this._nearP)
            }
            ContainsAABB(F, J, G, I, L, N) {
                return C(F, J, G, I, L, N, this._leftP) && C(F, J, G, I, L, N, this._topP) && C(F, J, G, I, L, N, this._rightP) && C(F, J, G, I, L, N, this._bottomP) && C(F, J, G, I, L, N, this._nearP) && C(F, J, G, I, L, N, this._farP)
            }
        }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        e = c.create(),
        g = a.fromValues(0, 0, 0),
        h = a.fromValues(0, 0, 0),
        l = a.fromValues(0, 0, 0),
        n = a.fromValues(0, 1, 0);
    d.fromValues(0, 0, 0, 0);
    const q = new f.Quad,
        y = new f.Rect,
        w = new f.Quad(0, 0, 1, 0, 1, 1, 0, 1);
    f.Gfx.RendererBase = class {
        constructor() {
            this._height = this._width = 0;
            this._fovY = f.toRadians(45);
            this._tan_fovY_2 = Math.tan(this._fovY / 2);
            this._matP = c.create();
            this._matMV = c.create();
            this._allShaderPrograms = [];
            this._shaderProgramsByName = new Map;
            this._spSmoothLineFill =
                this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._stateGroups = new Map;
            this._currentStateGroup = null;
            this._blendModeTable = [];
            this._namedBlendModeMap = new Map;
            this._currentZ = this._baseZ = 0;
            this._lineWidth = 1;
            this._lineWidthStack = [this._lineWidth];
            this._lineCap = 1;
            this._lineCapStack = [this._lineCap];
            this._lineOffset = .5;
            this._lineOffsetStack = [this._lineOffset];
            this._frameNumber = 0;
            this._enableMipmaps = !0
        }
        FillIndexBufferData(u) {
            let p = 0,
                x = u.length,
                t = 0;
            for (; p < x;) u[p++] = t, u[p++] = t + 1, u[p++] = t + 2, u[p++] = t, u[p++] = t + 2, u[p++] = t + 3, t += 4
        }
        _ClearState() {
            this._currentZ = this._baseZ = 0;
            this._spSmoothLineFill = this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._ClearAllShaderPrograms()
        }
        InitState() {
            this._ClearState();
            this._currentStateGroup = null
        }
        OnDeviceOrContextLost() {
            for (const u of this._allShaderPrograms) u.Release();
            this._ClearState()
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetDefaultCameraZ() {
            return 100
        }
        GetNearZ() {
            return 1
        }
        GetFarZ() {
            return 1E4
        }
        GetFovY() {
            return this._fovY
        }
        _GetTanFovYDiv2() {
            return this._tan_fovY_2
        }
        CalculatePerspectiveMatrix(u, p, x = .5, t = .5) {
            const r = this.GetNearZ(),
                B = this.GetFarZ();
            x = 1 - x;
            const z = 2 * x - 2;
            x *= 2;
            const C = 2 * t - 2;
            t *= 2;
            const F = this._GetTanFovYDiv2() * r;
            p *= F;
            c.frustum(u,
                z * p, x * p, C * F, t * F, r, B)
        }
        CalculateLookAtModelView(u, p, x, t, r = this.GetScissoredViewportHeight()) {
            r = 2 * this.GetDefaultCameraZ() * self.devicePixelRatio * this._GetTanFovYDiv2() / r;
            a.set(l, r, -r, 1);
            a.multiply(g, p, l);
            a.multiply(h, x, l);
            c.lookAt(u, g, h, t || n);
            c.scale(u, u, l)
        }
        CalculateLookAtModelView2(u, p, x, t, r, B, z) {
            a.set(g, u, p, x);
            a.set(h, t, r, B);
            this.CalculateLookAtModelView(e, g, h, n, z);
            return e
        }
        _AddShaderProgram(u) {
            this._allShaderPrograms.push(u);
            this._shaderProgramsByName.set(u.GetName(), u)
        }
        _RemoveShaderProgram(u) {
            const p =
                this._allShaderPrograms.indexOf(u); - 1 !== p && this._allShaderPrograms.splice(p, 1);
            this._shaderProgramsByName.delete(u.GetName())
        }
        _ClearAllShaderPrograms() {
            f.clearArray(this._allShaderPrograms);
            this._shaderProgramsByName.clear()
        }
        GetShaderProgramByName(u) {
            return this._shaderProgramsByName.get(u) || null
        }
        GetTextureFillShaderProgram() {
            return this._spTextureFill
        }
        SetTextureFillMode() {
            this.SetProgram(this._spTextureFill)
        }
        GetPointsRenderingProgram() {
            return this._spPoints
        }
        SetPointsRenderingProgram() {
            this.SetProgram(this._spPoints)
        }
        SetTilemapFillMode() {
            this.SetProgram(this._spTilemapFill)
        }
        SetColorFillMode() {
            this.SetProgram(this._spColorFill)
        }
        SetLinearGradientFillMode() {
            this.SetProgram(this._spLinearGradientFill)
        }
        SetHardEllipseFillMode() {
            this.SetProgram(this._spHardEllipseFill)
        }
        SetHardEllipseOutlineMode() {
            this.SetProgram(this._spHardEllipseOutline)
        }
        SetSmoothEllipseFillMode() {
            this.SetProgram(this._spSmoothEllipseFill)
        }
        SetSmoothEllipseOutlineMode() {
            this.SetProgram(this._spSmoothEllipseOutline)
        }
        SetSmoothLineFillMode() {
            this.SetProgram(this._spSmoothLineFill)
        }
        _SetCurrentStateGroup(u) {
            this._currentStateGroup =
                u
        }
        GetCurrentStateGroup() {
            return this._currentStateGroup
        }
        AcquireStateGroup(u, p, x, t) {
            const r = f.Gfx.StateGroup.MakeKey(u, p, x, t);
            let B = this._stateGroups.get(r);
            B || (B = f.New(f.Gfx.StateGroup, this, u, p, x, t), this._stateGroups.set(r, B));
            B.AddRef();
            return B
        }
        ReleaseStateGroup(u) {
            u.DecRef();
            0 === u._GetRefCount() && (this._currentStateGroup === u && (this._currentStateGroup = null), this._stateGroups.delete(u.GetKey()), u.Release())
        }
        _InitBlendModeData(u) {
            f.clearArray(this._blendModeTable);
            this._namedBlendModeMap.clear();
            for (const p of u) {
                u = p[0];
                const x = p[1],
                    t = p[2];
                this._blendModeTable.push([x, t]);
                this._namedBlendModeMap.set(u, {
                    srcBlend: x,
                    destBlend: t
                })
            }
        }
        _GetBlendByIndex(u) {
            return this._blendModeTable[u]
        }
        GetSrcBlendByIndex(u) {
            return this._GetBlendByIndex(u)[0]
        }
        GetDestBlendByIndex(u) {
            return this._GetBlendByIndex(u)[1]
        }
        GetNamedBlend(u) {
            u = this._namedBlendModeMap.get(u);
            if ("undefined" === typeof u) throw Error("invalid blend name");
            return u
        }
        SetBaseZ(u) {
            this._baseZ = u
        }
        GetBaseZ() {
            return this._baseZ
        }
        SetCurrentZ(u) {
            this._currentZ =
                u;
            this._currentStateGroup = null
        }
        GetCurrentZ() {
            return this._currentZ
        }
        Line(u, p, x, t) {
            var r = f.angleTo(u, p, x, t),
                B = .5 * this._lineWidth;
            const z = Math.sin(r) * B;
            r = Math.cos(r) * B;
            B = this._lineCap;
            2 === B ? this.LinePreCalc_LineCap2(u, p, 0, x, t, 0, z, r) : 1 === B ? this.LinePreCalc_LineCap1(u, p, 0, x, t, 0, z, r) : this.LinePreCalc_LineCap0(u, p, 0, x, t, 0, z, r)
        }
        Line3D(u, p, x, t, r, B) {
            var z = f.angleTo(u, p, t, r),
                C = .5 * this._lineWidth;
            const F = Math.sin(z) * C;
            z = Math.cos(z) * C;
            C = this._lineCap;
            2 === C ? this.LinePreCalc_LineCap2(u, p, x, t, r, B, F, z) : 1 === C ? this.LinePreCalc_LineCap1(u,
                p, x, t, r, B, F, z) : this.LinePreCalc_LineCap0(u, p, x, t, r, B, F, z)
        }
        LinePreCalc_LineCap2(u, p, x, t, r, B, z, C) {
            var F = this._lineOffset;
            u = u + F - C;
            p = p + F - z;
            t = t + F + C;
            r = r + F + z;
            F = 2 * C;
            const J = 2 * z;
            this.Quad3D2(u + z, p - C, x, t + z, r - C, B, t - z - F, r + C - J, B, u - z + F, p + C + J, x, w)
        }
        LinePreCalc_LineCap1(u, p, x, t, r, B, z, C) {
            const F = this._lineOffset;
            u = u + F - C;
            p = p + F - z;
            t = t + F + C;
            r = r + F + z;
            this.Quad3D2(u + z, p - C, x, t + z, r - C, B, t - z, r + C, B, u - z, p + C, x, w)
        }
        LinePreCalc_LineCap0(u, p, x, t, r, B, z, C) {
            const F = this._lineOffset;
            u += F;
            p += F;
            t += F;
            r += F;
            this.Quad3D2(u + z, p - C, x, t + z, r - C, B, t -
                z, r + C, B, u - z, p + C, x, w)
        }
        TexturedLine(u, p, x, t, r, B) {
            var z = f.angleTo(u, p, x, t),
                C = .5 * this._lineWidth;
            const F = Math.sin(z) * C;
            z = Math.cos(z) * C;
            C = this._lineCap;
            2 === C ? this.TexturedLinePreCalc_LineCap2(u, p, x, t, F, z, r, B) : 1 === C ? this.TexturedLinePreCalc_LineCap1(u, p, x, t, F, z, r, B) : this.TexturedLinePreCalc_LineCap0(u, p, x, t, F, z, r, B)
        }
        TexturedLinePreCalc_LineCap2(u, p, x, t, r, B, z, C) {
            var F = this._lineOffset;
            u = u + F - B;
            p = p + F - r;
            x = x + F + B;
            t = t + F + r;
            F = 2 * B;
            const J = 2 * r;
            q.set(u + r, p - B, x + r, t - B, x - r - F, t + B - J, u - r + F, p + B + J);
            y.set(z, 0, C, 0);
            this.Quad3(q,
                y)
        }
        TexturedLinePreCalc_LineCap1(u, p, x, t, r, B, z, C) {
            const F = this._lineOffset;
            u = u + F - B;
            p = p + F - r;
            x = x + F + B;
            t = t + F + r;
            q.set(u + r, p - B, x + r, t - B, x - r, t + B, u - r, p + B);
            y.set(z, 0, C, 0);
            this.Quad3(q, y)
        }
        TexturedLinePreCalc_LineCap0(u, p, x, t, r, B, z, C) {
            const F = this._lineOffset;
            u += F;
            p += F;
            x += F;
            t += F;
            q.set(u + r, p - B, x + r, t - B, x - r, t + B, u - r, p + B);
            y.set(z, 0, C, 0);
            this.Quad3(q, y)
        }
        LineRect(u, p, x, t) {
            const r = .5 * this._lineWidth,
                B = this._lineCap;
            2 === B ? this._LineRectPreCalc_LineCap2(u, p, x, t, r) : 1 === B ? this._LineRectPreCalc_LineCap1(u, p, x, t, r) : this._LineRectPreCalc_LineCap0(u,
                p, x, t, r)
        }
        _LineRectPreCalc_LineCap2(u, p, x, t, r) {
            this.LinePreCalc_LineCap2(u, p, 0, x, p, 0, 0, r);
            this.LinePreCalc_LineCap2(x, p, 0, x, t, 0, r, 0);
            this.LinePreCalc_LineCap2(x, t, 0, u, t, 0, 0, -r);
            this.LinePreCalc_LineCap2(u, t, 0, u, p, 0, -r, 0)
        }
        _LineRectPreCalc_LineCap1(u, p, x, t, r) {
            this.LinePreCalc_LineCap1(u, p, 0, x, p, 0, 0, r);
            this.LinePreCalc_LineCap1(x, p, 0, x, t, 0, r, 0);
            this.LinePreCalc_LineCap1(x, t, 0, u, t, 0, 0, -r);
            this.LinePreCalc_LineCap1(u, t, 0, u, p, 0, -r, 0)
        }
        _LineRectPreCalc_LineCap0(u, p, x, t, r) {
            this.LinePreCalc_LineCap0(u, p, 0, x,
                p, 0, 0, r);
            this.LinePreCalc_LineCap0(x, p, 0, x, t, 0, r, 0);
            this.LinePreCalc_LineCap0(x, t, 0, u, t, 0, 0, -r);
            this.LinePreCalc_LineCap0(u, t, 0, u, p, 0, -r, 0)
        }
        LineRect2(u) {
            this.LineRect(u.getLeft(), u.getTop(), u.getRight(), u.getBottom())
        }
        LineQuad(u) {
            var p = f.angleTo(u.getTlx(), u.getTly(), u.getTrx(), u.getTry()),
                x = .5 * this._lineWidth;
            const t = Math.sin(p) * x;
            p = Math.cos(p) * x;
            x = this._lineCap;
            2 === x ? this._LineQuadPreCalc_LineCap2(u, t, p) : 1 === x ? this._LineQuadPreCalc_LineCap1(u, t, p) : this._LineQuadPreCalc_LineCap0(u, t, p)
        }
        _LineQuadPreCalc_LineCap2(u,
            p, x) {
            this.LinePreCalc_LineCap2(u.getTlx(), u.getTly(), 0, u.getTrx(), u.getTry(), 0, p, x);
            this.LinePreCalc_LineCap2(u.getTrx(), u.getTry(), 0, u.getBrx(), u.getBry(), 0, x, -p);
            this.LinePreCalc_LineCap2(u.getBrx(), u.getBry(), 0, u.getBlx(), u.getBly(), 0, -p, -x);
            this.LinePreCalc_LineCap2(u.getBlx(), u.getBly(), 0, u.getTlx(), u.getTly(), 0, -x, p)
        }
        _LineQuadPreCalc_LineCap1(u, p, x) {
            this.LinePreCalc_LineCap1(u.getTlx(), u.getTly(), 0, u.getTrx(), u.getTry(), 0, p, x);
            this.LinePreCalc_LineCap1(u.getTrx(), u.getTry(), 0, u.getBrx(), u.getBry(),
                0, x, -p);
            this.LinePreCalc_LineCap1(u.getBrx(), u.getBry(), 0, u.getBlx(), u.getBly(), 0, -p, -x);
            this.LinePreCalc_LineCap1(u.getBlx(), u.getBly(), 0, u.getTlx(), u.getTly(), 0, -x, p)
        }
        _LineQuadPreCalc_LineCap0(u, p, x) {
            this.LinePreCalc_LineCap0(u.getTlx(), u.getTly(), 0, u.getTrx(), u.getTry(), 0, p, x);
            this.LinePreCalc_LineCap0(u.getTrx(), u.getTry(), 0, u.getBrx(), u.getBry(), 0, x, -p);
            this.LinePreCalc_LineCap0(u.getBrx(), u.getBry(), 0, u.getBlx(), u.getBly(), 0, -p, -x);
            this.LinePreCalc_LineCap0(u.getBlx(), u.getBly(), 0, u.getTlx(),
                u.getTly(), 0, -x, p)
        }
        SetLineWidth(u) {
            this._lineWidth = u;
            this._lineWidthStack[this._lineWidthStack.length - 1] = u
        }
        GetLineWidth() {
            return this._lineWidth
        }
        PushLineWidth(u) {
            if (100 <= this._lineWidthStack.length) throw Error("pushed too many line widths - check push/pop pairs");
            this._lineWidthStack.push(u);
            this._lineWidth = u
        }
        PopLineWidth() {
            if (1 >= this._lineWidthStack.length) throw Error("cannot pop last line width - check push/pop pairs");
            this._lineWidthStack.pop();
            this._lineWidth = this._lineWidthStack[this._lineWidthStack.length -
                1]
        }
        SetLineCapButt() {
            this._lineCap = 0;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapSquare() {
            this._lineCap = 1;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapZag() {
            this._lineCap = 2;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        PushLineCap(u) {
            if ("butt" === u) this.PushLineCapButt();
            else if ("square" === u) this.PushLineCapSquare();
            else if ("zag" === u) this.PushLineCapZag();
            else throw Error("invalid line cap");
        }
        PushLineCapButt() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(0);
            this._lineCap = 0
        }
        PushLineCapSquare() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(1);
            this._lineCap = 1
        }
        PushLineCapZag() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(2);
            this._lineCap = 2
        }
        PopLineCap() {
            if (1 >= this._lineCapStack.length) throw Error("cannot pop last line cap - check push/pop pairs");
            this._lineCapStack.pop();
            this._lineCap =
                this._lineCapStack[this._lineCapStack.length - 1]
        }
        SetLineOffset(u) {
            this._lineOffset = u;
            this._lineOffsetStack[this._lineOffsetStack.length - 1] = u
        }
        GetLineOffset() {
            return this._lineOffset
        }
        PushLineOffset(u) {
            if (100 <= this._lineOffsetStack.length) throw Error("pushed too many line offsets - check push/pop pairs");
            this._lineOffsetStack.push(u);
            this._lineOffset = u
        }
        PopLineOffset() {
            if (1 >= this._lineOffsetStack.length) throw Error("cannot pop last line offset - check push/pop pairs");
            this._lineOffsetStack.pop();
            this._lineOffset =
                this._lineOffsetStack[this._lineOffsetStack.length - 1]
        }
        ConvexPoly(u) {
            var p = u.length / 2;
            if (3 > p) throw Error("need at least 3 points");
            p -= 2;
            const x = p - 1,
                t = u[0],
                r = u[1];
            for (let B = 0; B < p; B += 2) {
                const z = 2 * B,
                    C = u[z + 2],
                    F = u[z + 3],
                    J = u[z + 4],
                    G = u[z + 5];
                B === x ? this.Quad2(t, r, C, F, J, G, J, G) : this.Quad2(t, r, C, F, J, G, u[z + 6], u[z + 7])
            }
        }
        GetNumVertexComponents() {
            return 3
        }
        Finish() {
            this.EndBatch(!0);
            this._frameNumber++
        }
        GetFrameNumber() {
            return this._frameNumber
        }
        IncrementFrameNumber() {
            this._frameNumber++
        }
        SetMipmapsEnabled(u) {
            this._enableMipmaps = !!u
        }
        AreMipmapsEnabled() {
            return this._enableMipmaps
        }
        IsWebGL() {
            return !1
        }
        IsWebGPU() {
            return !1
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Gfx.StateGroup = class {
        constructor(b, a, d, c, e) {
            this._renderer = b;
            this._refCount = 0;
            this._shaderProgram = null;
            this._shaderProgramName = "";
            this._blendMode = d;
            this._color = f.New(f.Color);
            this._color.set(c);
            this._zElevation = e;
            "string" === typeof a ? this._shaderProgramName = a : (this._shaderProgram = a, this._shaderProgramName = this._shaderProgram.GetName())
        }
        Release() {
            if (0 < this._refCount) throw Error("releasing state group still in use");
            this._shaderProgram = this._renderer = null;
            this._shaderProgramName =
                ""
        }
        Apply() {
            const b = this._renderer;
            b.SetProgram(this._shaderProgram);
            b.SetBlendMode(this._blendMode);
            b.SetColor(this._color);
            b.SetCurrentZ(this._zElevation);
            b._SetCurrentStateGroup(this)
        }
        GetKey() {
            return f.Gfx.StateGroup.MakeKey(this._shaderProgramName, this._blendMode, this._color, this._zElevation)
        }
        AddRef() {
            ++this._refCount
        }
        DecRef() {
            --this._refCount
        }
        _GetRefCount() {
            return this._refCount
        }
        OnContextLost() {
            this._shaderProgram = null
        }
        OnContextRestored(b) {
            this._shaderProgram = b.GetShaderProgramByName(this._shaderProgramName);
            if (!this._shaderProgram) throw Error("failed to restore shader program");
        }
        static MakeKey(b, a, d, c) {
            return ("string" === typeof b ? b : b.GetName()) + "," + a + "," + d.getR() + "," + d.getG() + "," + d.getB() + "," + d.getA() + "," + c
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = f.New(f.Quad);

    function a(d, c, e) {
        const g = e.getTlx(),
            h = e.getTly(),
            l = e.getTrx() - g,
            n = e.getTry() - h,
            q = e.getBlx() - g;
        e = e.getBly() - h;
        return [g + l * d + q * c, h + n * d + e * c]
    }
    f.Gfx.MeshPoint = class {
        constructor(d, c, e) {
            this._mesh = d;
            this._col = c;
            this._row = e;
            this._v = this._u = this._zElevation = this._y = this._x = 0
        }
        _Init(d, c, e, g) {
            this._x = d;
            this._y = c;
            this._u = e;
            this._v = g
        }
        GetX() {
            return this._x
        }
        SetX(d) {
            this._x !== d && (this._x = d, this._mesh._SetPointsChanged())
        }
        GetY() {
            return this._y
        }
        SetY(d) {
            this._y !== d && (this._y =
                d, this._mesh._SetPointsChanged())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetZElevation(d) {
            this._zElevation !== d && (this._zElevation = Math.max(d, 0), this._mesh._SetPointsChanged())
        }
        GetU() {
            return this._u
        }
        SetU(d) {
            this._u = d
        }
        GetV() {
            return this._v
        }
        SetV(d) {
            this._v = d
        }
        _Interpolate_TexRect(d, c, e) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            this._u = f.lerp(e.getLeft(), e.getRight(), d._u);
            this._v = f.lerp(e.getTop(), e.getBottom(), d._v)
        }
        _Interpolate_TexQuad(d, c, e) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            [this._u, this._v] = a(d._u, d._v, e)
        }
        SaveToJson() {
            return {
                x: this.GetX(),
                y: this.GetY(),
                z: this.GetZElevation(),
                u: this.GetU(),
                v: this.GetV()
            }
        }
        LoadFromJson(d) {
            this.SetX(d.x);
            this.SetY(d.y);
            d.hasOwnProperty("z") && this.SetZElevation(d.z);
            this.SetU(d.u);
            this.SetV(d.v)
        }
        GetMesh() {
            return this._mesh
        }
        GetColumn() {
            return this._col
        }
        GetRow() {
            return this._row
        }
    };
    f.Gfx.Mesh = class {
        constructor(d, c, e) {
            if (2 > d || 2 > c) throw Error("invalid mesh size");
            this._hsize = d;
            this._vsize = c;
            this._owner = e || null;
            this._pts = [];
            this._minY = this._minX = 0;
            this._maxY = this._maxX = 1;
            this._pointsChanged = this._hasAnyZElevation = !1;
            e = d - 1;
            const g = c - 1;
            for (let h = 0; h < c; ++h) {
                const l = [];
                for (let n = 0; n < d; ++n) {
                    const q = f.New(f.Gfx.MeshPoint, this, n, h),
                        y = n / e,
                        w = h / g;
                    q._Init(y, w, y, w);
                    l.push(q)
                }
                this._pts.push(l)
            }
        }
        Release() {
            f.clearArray(this._pts)
        }
        GetHSize() {
            return this._hsize
        }
        GetVSize() {
            return this._vsize
        }
        GetOwner() {
            return this._owner
        }
        _GetPoints() {
            return this._pts
        }
        _SetPointsChanged() {
            this._pointsChanged = !0
        }
        _MaybeComputeBounds() {
            if (this._pointsChanged) {
                var d =
                    Infinity,
                    c = Infinity,
                    e = -Infinity,
                    g = -Infinity;
                this._hasAnyZElevation = !1;
                for (const h of this._pts)
                    for (const l of h) {
                        const n = l.GetX(),
                            q = l.GetY();
                        d = Math.min(d, n);
                        c = Math.min(c, q);
                        e = Math.max(e, n);
                        g = Math.max(g, q);
                        0 < l.GetZElevation() && (this._hasAnyZElevation = !0)
                    }
                this._minX = d;
                this._minY = c;
                this._maxX = e;
                this._maxY = g;
                this._pointsChanged = !1
            }
        }
        GetMinX() {
            this._MaybeComputeBounds();
            return this._minX
        }
        GetMinY() {
            this._MaybeComputeBounds();
            return this._minY
        }
        GetMaxX() {
            this._MaybeComputeBounds();
            return this._maxX
        }
        GetMaxY() {
            this._MaybeComputeBounds();
            return this._maxY
        }
        HasAnyZElevation() {
            this._MaybeComputeBounds();
            return this._hasAnyZElevation
        }
        GetMeshPointAt(d, c) {
            d = Math.floor(d);
            c = Math.floor(c);
            return 0 > d || d >= this._hsize || 0 > c || c >= this._vsize ? null : this._pts[c][d]
        }
        CalculateTransformedMesh(d, c, e) {
            const g = e instanceof f.Rect;
            if (d.GetHSize() !== this.GetHSize() || d.GetVSize() !== this.GetVSize()) throw Error("source mesh wrong size");
            d = d._pts;
            const h = this._pts;
            for (let l = 0, n = h.length; l < n; ++l) {
                const q = d[l],
                    y = h[l];
                for (let w = 0, u = y.length; w < u; ++w) {
                    const p = q[w],
                        x = y[w];
                    g ? x._Interpolate_TexRect(p, c, e) : x._Interpolate_TexQuad(p, c, e)
                }
            }
        }
        Draw(d) {
            const c = this._pts;
            let e = c[0];
            for (let g = 1, h = c.length; g < h; ++g) {
                const l = c[g];
                let n = e[0],
                    q = l[0];
                for (let y = 1, w = l.length; y < w; ++y) {
                    const u = e[y],
                        p = l[y];
                    b.set(n.GetU(), n.GetV(), u.GetU(), u.GetV(), p.GetU(), p.GetV(), q.GetU(), q.GetV());
                    d.Quad3D2(n.GetX(), n.GetY(), n.GetZElevation(), u.GetX(), u.GetY(), u.GetZElevation(), p.GetX(), p.GetY(), p.GetZElevation(), q.GetX(), q.GetY(), q.GetZElevation(), b);
                    n = u;
                    q = p
                }
                e = l
            }
        }
        Outline(d, c) {
            c || (c = (h, l, n) => [h,
                l, n
            ]);
            const e = this._pts;
            let g = e[0];
            for (let h = 1, l = e.length; h < l; ++h) {
                const n = e[h];
                let q = g[0],
                    y = n[0];
                for (let w = 1, u = n.length; w < u; ++w) {
                    const p = g[w],
                        x = n[w],
                        [t, r, B] = c(q.GetX(), q.GetY(), q.GetZElevation()),
                        [z, C, F] = c(p.GetX(), p.GetY(), p.GetZElevation()),
                        [J, G, I] = c(x.GetX(), x.GetY(), x.GetZElevation()),
                        [L, N, S] = c(y.GetX(), y.GetY(), y.GetZElevation());
                    d.Line3D(t, r, B, z, C, F);
                    d.Line3D(t, r, B, J, G, I);
                    d.Line3D(t, r, B, L, N, S);
                    w === u - 1 && d.Line3D(z, C, F, J, G, I);
                    h === l - 1 && d.Line3D(L, N, S, J, G, I);
                    q = p;
                    y = x
                }
                g = n
            }
        }
        InsertPolyMeshVertices(d) {
            d =
                d.pointsArr();
            const c = [],
                e = this.GetHSize() - 1,
                g = this.GetVSize() - 1,
                h = 1 / e,
                l = 1 / g,
                n = e - 1,
                q = g - 1;
            let y = d[0],
                w = d[1],
                u = f.clamp(Math.floor(y * e), 0, n),
                p = f.clamp(Math.floor(w * g), 0, q),
                x = 0,
                t = 0,
                r = 0;
            var B = -1;
            const z = () => {
                y = f.clamp(f.lerp(y, x, r), 0, 1);
                w = f.clamp(f.lerp(w, t, r), 0, 1);
                c.push(y, w)
            };
            for (let C = 0, F = d.length; C < F; C += 2)
                for (y = d[C], w = d[C + 1], c.push(y, w), u = f.clamp(Math.floor(y * e), 0, n), p = f.clamp(Math.floor(w * g), 0, q), B = (C + 2) % F, x = d[B], t = d[B + 1], B = -1;;) {
                    if (1E6 < c.length) throw Error("Too many mesh poly points");
                    const J = u *
                        h,
                        G = p * l,
                        I = (u + 1) * h,
                        L = (p + 1) * l;
                    f.isPointInTriangleInclusive(y, w, J, G, I, G, I, L);
                    if (0 !== B && (r = f.rayIntersectExtended(y, w, x, t, J, G, I, L, -.001), 0 <= r && .99999999 >= r)) {
                        z();
                        B = 0;
                        continue
                    }
                    if (0 < p && 2 !== B && (r = f.rayIntersectExtended(y, w, x, t, J, G, I, G, .001), 0 <= r && .99999999 >= r)) {
                        z();
                        p--;
                        B = 4;
                        continue
                    }
                    if (u < n && 3 !== B && (r = f.rayIntersectExtended(y, w, x, t, I, G, I, L, .001), 0 <= r && .99999999 >= r)) {
                        z();
                        u++;
                        B = 1;
                        continue
                    }
                    if (0 < u && 1 !== B && (r = f.rayIntersectExtended(y, w, x, t, J, G, J, L, .001), 0 <= r && .99999999 >= r)) {
                        z();
                        u--;
                        B = 3;
                        continue
                    }
                    if (p < q && 4 !== B &&
                        (r = f.rayIntersectExtended(y, w, x, t, J, L, I, L, .001), 0 <= r && .99999999 >= r)) {
                        z();
                        p++;
                        B = 2;
                        continue
                    }
                    break
                }
            return f.New(f.CollisionPoly, c)
        }
        TransformCollisionPoly(d, c) {
            d = this._TransformPolyPoints(d);
            this._SimplifyPoly(d);
            c.setPoints(d)
        }
        _TransformPolyPoints(d) {
            const c = [];
            d = d.pointsArr();
            for (let e = 0, g = d.length; e < g; e += 2) {
                const [h, l] = this.TransformPoint(d[e], d[e + 1]);
                c.push(h, l)
            }
            return c
        }
        TransformPoint(d, c) {
            var e = this.GetHSize() - 1,
                g = this.GetVSize() - 1,
                h = 1 / e,
                l = 1 / g;
            e = f.clamp(Math.floor(d * e), 0, e - 1);
            const n = f.clamp(Math.floor(c *
                g), 0, g - 1);
            g = e * h;
            const q = n * l,
                y = (e + 1) * h,
                w = (n + 1) * l,
                u = this.GetMeshPointAt(e, n),
                p = this.GetMeshPointAt(e + 1, n + 1),
                x = f.isPointInTriangleInclusive(d, c, g, q, y, q, y, w);
            h = x ? g + h : g;
            l = x ? q : q + l;
            e = this.GetMeshPointAt(e + (x ? 1 : 0), n + (x ? 0 : 1));
            const [t, r, B] = f.triangleCartesianToBarycentric(d, c, g, q, h, l, y, w);
            return f.triangleBarycentricToCartesian(t, r, B, u.GetX(), u.GetY(), e.GetX(), e.GetY(), p.GetX(), p.GetY())
        }
        _SimplifyPoly(d) {
            const c = [];
            let e = d[0],
                g = d[1],
                h = e - d[d.length - 2],
                l = g - d[d.length - 1];
            for (let q = 0, y = d.length; q < y; q += 2) {
                var n =
                    (q + 2) % y;
                const w = d[n];
                n = d[n + 1];
                const u = w - e,
                    p = n - g,
                    x = 1E-7 > Math.abs(p) && 1E-7 > Math.abs(l) && Math.sign(u) === Math.sign(h);
                (!(1E-7 > Math.abs(u) && 1E-7 > Math.abs(h) && Math.sign(p) === Math.sign(l) || x) && 1E-7 < Math.abs(u / h - p / l) || 0 == u && 0 === p) && c.push(e, g);
                e = w;
                g = n;
                h = u;
                l = p
            }
            6 <= c.length && c.length < d.length && f.shallowAssignArray(d, c)
        }
        SaveToJson() {
            return {
                cols: this.GetHSize(),
                rows: this.GetVSize(),
                points: this._pts.map(d => d.map(c => c.SaveToJson()))
            }
        }
        LoadFromJson(d) {
            const c = this.GetHSize(),
                e = this.GetVSize();
            if (d.cols !== c || d.rows !==
                e) throw Error("mesh data wrong size");
            d = d.points;
            for (let g = 0; g < e; ++g) {
                const h = d[g];
                for (let l = 0; l < c; ++l) this.GetMeshPointAt(l, g).LoadFromJson(h[l])
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new Set(["rgba8", "rgb8", "rgba4", "rgb5_a1", "rgb565"]),
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = new Set(["default", "low", "high"]),
        c = new Set(["clamp-to-edge", "repeat", "mirror-repeat"]);

    function e(n, q) {
        let y, w;
        switch (n) {
            case "rgba8":
                n = q.RGBA8;
                w = y = q.RGBA;
                q = q.UNSIGNED_BYTE;
                break;
            case "rgb8":
                n = q.RGB8;
                w = y = q.RGB;
                q = q.UNSIGNED_BYTE;
                break;
            case "rgba4":
                n = q.RGBA4;
                w = y = q.RGBA;
                q = q.UNSIGNED_SHORT_4_4_4_4;
                break;
            case "rgb5_a1":
                n = q.RGB5_A1;
                w = y = q.RGBA;
                q = q.UNSIGNED_SHORT_5_5_5_1;
                break;
            case "rgb565":
                n = q.RGB565;
                w = y = q.RGB;
                q = q.UNSIGNED_SHORT_5_6_5;
                break;
            default:
                throw Error("invalid pixel format");
        }
        return {
            sizedinternalformat: n,
            internalformat: y,
            format: w,
            type: q
        }
    }
    const g = {
            wrapX: "clamp-to-edge",
            wrapY: "clamp-to-edge",
            sampling: "trilinear",
            anisotropy: 0,
            pixelFormat: "rgba8",
            mipMap: !0,
            mipMapQuality: "default",
            premultiplyAlpha: !0,
            isSvg: !1,
            width: -1,
            height: -1
        },
        h = {
            premultiplyAlpha: !0,
            flipY: !1
        },
        l = new Set;
    f.Gfx.WebGLRendererTexture = class {
        constructor(n) {
            this._renderer = n;
            this._texture = null;
            this._height =
                this._width = 0;
            this._isStatic = !0;
            this._wrapY = this._wrapX = "clamp-to-edge";
            this._sampling = "trilinear";
            this._anisotropy = 0;
            this._pixelFormat = "rgba8";
            this._isMipMapped = !1;
            this._mipMapQuality = "default";
            this._refCount = 0
        }
        _CreateStatic(n, q) {
            if (!("undefined" !== typeof HTMLImageElement && n instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && n instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && n instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && n instanceof OffscreenCanvas ||
                    n instanceof ImageData || n instanceof ArrayBuffer) && null !== n) throw Error("invalid texture source");
            q = Object.assign({}, g, q);
            if (this._texture) throw Error("already created texture");
            this._wrapX = q.wrapX;
            this._wrapY = q.wrapY;
            this._sampling = q.sampling;
            this._anisotropy = q.anisotropy;
            this._pixelFormat = q.pixelFormat;
            this._isMipMapped = !!q.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = q.mipMapQuality;
            if (!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if (!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !0;
            if (n instanceof ArrayBuffer || null === n || q.isSvg) {
                if (this._width = q.width, this._height = q.height, n instanceof ArrayBuffer && n.byteLength !== this._width * this._height * 4) throw Error("ArrayBuffer wrong size");
            } else this._width = n.width, this._height = n.height;
            if (0 >= this._width || 0 >= this._height) throw Error("invalid texture data size");
            if (q.isSvg) {
                var y = f.CreateCanvas(this._width,
                    this._height);
                y.getContext("2d").drawImage(n, 0, 0, this._width, this._height);
                n = y
            }
            var w = f.isPOT(this._width) && f.isPOT(this._height);
            y = this._renderer.GetMaxTextureSize();
            if (this._width > y || this._height > y) throw Error("texture data exceeds maximum texture size");
            y = this._renderer.GetContext();
            var u = this._renderer.GetWebGLVersionNumber();
            this._texture = y.createTexture();
            y.bindTexture(y.TEXTURE_2D, this._texture);
            y.pixelStorei(y.UNPACK_PREMULTIPLY_ALPHA_WEBGL, q.premultiplyAlpha);
            y.pixelStorei(y.UNPACK_FLIP_Y_WEBGL, !1);
            q = e(this._pixelFormat, y);
            if (this._renderer.SupportsNPOTTextures() || w || !this._IsTiled()) 2 <= u ? (y.texStorage2D(y.TEXTURE_2D, this._isMipMapped ? Math.floor(Math.log2(Math.max(this._width, this._height)) + 1) : 1, q.sizedinternalformat, this._width, this._height), n instanceof ArrayBuffer ? y.texSubImage2D(y.TEXTURE_2D, 0, 0, 0, this._width, this._height, q.format, q.type, new Uint8Array(n)) : null !== n && y.texSubImage2D(y.TEXTURE_2D, 0, 0, 0, q.format, q.type, n)) : n instanceof ArrayBuffer ? y.texImage2D(y.TEXTURE_2D, 0, q.internalformat,
                this._width, this._height, 0, q.format, q.type, new Uint8Array(n)) : null === n ? y.texImage2D(y.TEXTURE_2D, 0, q.internalformat, this._width, this._height, 0, q.format, q.type, null) : y.texImage2D(y.TEXTURE_2D, 0, q.internalformat, q.format, q.type, n);
            else {
                if (null === n) throw Error("cannot pass null data when creating a NPOT tiled texture without NPOT support");
                n instanceof ArrayBuffer && (n = new ImageData(new Uint8ClampedArray(n), this._width, this._height));
                n instanceof ImageData && (w = f.CreateCanvas(this._width, this._height),
                    w.getContext("2d").putImageData(n, 0, 0), n = w);
                w = f.CreateCanvas(f.nextHighestPowerOfTwo(this._width), f.nextHighestPowerOfTwo(this._height));
                u = w.getContext("2d");
                u.imageSmoothingEnabled = "nearest" !== this._sampling;
                u.drawImage(n, 0, 0, this._width, this._height, 0, 0, w.width, w.height);
                y.texImage2D(y.TEXTURE_2D, 0, q.internalformat, q.format, q.type, w)
            }
            null !== n && this._SetTextureParameters(y);
            y.bindTexture(y.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            l.add(this)
        }
        _CreateDynamic(n, q, y) {
            y = Object.assign({},
                g, y);
            if (this._texture) throw Error("already created texture");
            this._wrapX = y.wrapX;
            this._wrapY = y.wrapY;
            this._sampling = y.sampling;
            this._pixelFormat = y.pixelFormat;
            this._isMipMapped = !!y.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = y.mipMapQuality;
            if (!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if (!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !1;
            this._width = Math.floor(n);
            this._height = Math.floor(q);
            n = f.isPOT(this._width) && f.isPOT(this._height);
            q = this._renderer.GetMaxTextureSize();
            if (0 >= this._width || 0 >= this._height) throw Error("invalid texture size");
            if (this._width > q || this._height > q) throw Error("texture exceeds maximum texture size");
            if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !n) throw Error("non-power-of-two tiled textures not supported");
            n = this._renderer.GetContext();
            q = this._renderer.GetWebGLVersionNumber();
            this._texture = n.createTexture();
            n.bindTexture(n.TEXTURE_2D, this._texture);
            n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, y.premultiplyAlpha);
            n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, !1);
            y = e(this._pixelFormat, n);
            n.texImage2D(n.TEXTURE_2D, 0, 2 <= q ? y.sizedinternalformat : y.internalformat, this._width, this._height, 0, y.format, y.type, null);
            this._SetTextureParameters(n);
            n.bindTexture(n.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            l.add(this)
        }
        _GetMipMapHint(n) {
            if ("default" === this._mipMapQuality) return this._isStatic ?
                n.NICEST : n.FASTEST;
            if ("low" === this._mipMapQuality) return n.FASTEST;
            if ("high" === this._mipMapQuality) return n.NICEST;
            throw Error("invalid mipmap quality");
        }
        _IsTiled() {
            return "clamp-to-edge" !== this._wrapX || "clamp-to-edge" !== this._wrapY
        }
        _GetTextureWrapMode(n, q) {
            if ("clamp-to-edge" === q) return n.CLAMP_TO_EDGE;
            if ("repeat" === q) return n.REPEAT;
            if ("mirror-repeat" === q) return n.MIRRORED_REPEAT;
            throw Error("invalid wrap mode");
        }
        _SetTextureParameters(n) {
            var q = f.isPOT(this._width) && f.isPOT(this._height);
            n.texParameteri(n.TEXTURE_2D,
                n.TEXTURE_WRAP_S, this._GetTextureWrapMode(n, this._wrapX));
            n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, this._GetTextureWrapMode(n, this._wrapY));
            "nearest" === this._sampling ? (n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST), this._isMipMapped = !1) : (n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.LINEAR), (q || this._renderer.SupportsNPOTTextures()) && this._isMipMapped ? (n.hint(n.GENERATE_MIPMAP_HINT, this._GetMipMapHint(n)), n.generateMipmap(n.TEXTURE_2D),
                q = "trilinear" === this._sampling && !this._renderer.HasMajorPerformanceCaveat(), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, q ? n.LINEAR_MIPMAP_LINEAR : n.LINEAR_MIPMAP_NEAREST)) : (n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.LINEAR), this._isMipMapped = !1));
            (q = this._renderer._GetAnisotropicExtension()) && 0 < this._anisotropy && "nearest" !== this._sampling && n.texParameterf(n.TEXTURE_2D, q.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this._anisotropy, this._renderer._GetMaxAnisotropy()))
        }
        _Update(n, q) {
            if (!("undefined" !==
                    typeof HTMLImageElement && n instanceof HTMLImageElement || "undefined" !== typeof HTMLVideoElement && n instanceof HTMLVideoElement || "undefined" !== typeof HTMLCanvasElement && n instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && n instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && n instanceof OffscreenCanvas || n instanceof ImageData)) throw Error("invalid texture source");
            if (!this._texture || 0 >= this._refCount) throw Error("texture not created");
            if (this._isStatic) throw Error("cannot update static texture");
            q = Object.assign({}, h, q);
            const y = n.width || n.videoWidth,
                w = n.height || n.videoHeight;
            var u = this._renderer.GetWebGLVersionNumber();
            const p = this._renderer.GetContext();
            p.bindTexture(p.TEXTURE_2D, this._texture);
            p.pixelStorei(p.UNPACK_PREMULTIPLY_ALPHA_WEBGL, q.premultiplyAlpha);
            p.pixelStorei(p.UNPACK_FLIP_Y_WEBGL, !!q.flipY);
            q = e(this._pixelFormat, p);
            u = 2 <= u ? q.sizedinternalformat : q.internalformat;
            try {
                if (this._width === y && this._height === w) {
                    const x = f.isPOT(this._width) && f.isPOT(this._height);
                    p.texSubImage2D(p.TEXTURE_2D,
                        0, 0, 0, q.format, q.type, n);
                    (x || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (p.hint(p.GENERATE_MIPMAP_HINT, this._GetMipMapHint(p)), p.generateMipmap(p.TEXTURE_2D))
                } else {
                    this._width = y;
                    this._height = w;
                    const x = f.isPOT(this._width) && f.isPOT(this._height);
                    if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !x) throw Error("non-power-of-two tiled textures not supported");
                    p.texImage2D(p.TEXTURE_2D, 0, u, q.format, q.type, n);
                    (x || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (p.hint(p.GENERATE_MIPMAP_HINT,
                        this._GetMipMapHint(p)), p.generateMipmap(p.TEXTURE_2D))
                }
            } catch (x) {
                console.error("Error updating WebGL texture: ", x)
            }
            p.bindTexture(p.TEXTURE_2D, null);
            this._renderer._ResetLastTexture()
        }
        _Delete() {
            if (0 < this._refCount) throw Error("texture still has references");
            if (!this._texture) throw Error("already deleted texture");
            l.delete(this);
            this._renderer.GetContext().deleteTexture(this._texture);
            this._texture = null
        }
        IsValid() {
            return !!this._texture
        }
        _GetTexture() {
            return this._texture
        }
        GetRenderer() {
            return this._renderer
        }
        AddReference() {
            this._refCount++
        }
        SubtractReference() {
            if (0 >=
                this._refCount) throw Error("no more references");
            this._refCount--
        }
        GetReferenceCount() {
            return this._refCount
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsStatic() {
            return this._isStatic
        }
        GetEstimatedMemoryUsage() {
            let n = this._width * this._height;
            switch (this._pixelFormat) {
                case "rgba8":
                    n *= 4;
                    break;
                case "rgb8":
                    n *= 3;
                    break;
                case "rgba4":
                case "rgb5_a1":
                case "rgb565":
                    n *= 2
            }
            this._isMipMapped && (n += Math.floor(n / 3));
            return n
        }
        static OnContextLost() {
            l.clear()
        }
        static allTextures() {
            return l.values()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix.mat4,
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = {
            sampling: "trilinear",
            alpha: !0,
            depth: !1,
            isSampled: !0,
            isDefaultSize: !0,
            multisampling: 0
        },
        c = new Set;
    f.Gfx.WebGLRenderTarget = class {
        constructor(e) {
            this._renderer = e;
            this._renderBuffer = this._texture = this._frameBuffer = null;
            this._height = this._width = 0;
            this._isDefaultSize = !0;
            this._sampling = "trilinear";
            this._alpha = !0;
            this._depth = !1;
            this._isSampled = !0;
            this._multisampling = 0;
            this._projectionMatrix = b.create()
        }
        _Create(e,
            g, h) {
            h = Object.assign({}, d, h);
            const l = this._renderer.GetWebGLVersionNumber();
            if (this._texture || this._renderBuffer) throw Error("already created render target");
            this._sampling = h.sampling;
            this._alpha = !!h.alpha;
            this._depth = !!h.depth;
            this._isSampled = !!h.isSampled;
            this._isDefaultSize = !!h.isDefaultSize;
            this._multisampling = h.multisampling;
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (0 < this._multisampling && (2 > l || this._isSampled)) throw Error("invalid use of multisampling");
            2 > l && (this._isSampled = !0);
            this._width = e;
            this._height = g;
            if (0 >= this._width || 0 >= this._height) throw Error("invalid render target size");
            this._CalculateProjection();
            e = this._renderer.GetContext();
            this._frameBuffer = e.createFramebuffer();
            e.bindFramebuffer(e.FRAMEBUFFER, this._frameBuffer);
            this._isSampled ? (this._texture = this._renderer.CreateDynamicTexture(this._width, this._height, {
                sampling: this._sampling,
                pixelFormat: this._alpha ? "rgba8" : "rgb8",
                mipMap: !1
            }), g = this._texture._GetTexture(), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0,
                e.TEXTURE_2D, g, 0)) : (this._renderBuffer = e.createRenderbuffer(), e.bindRenderbuffer(e.RENDERBUFFER, this._renderBuffer), g = this._alpha ? e.RGBA8 : e.RGB8, 0 < this._multisampling && ((h = e.getInternalformatParameter(e.RENDERBUFFER, g, e.SAMPLES)) && h[0] ? (h = h[0], this._multisampling > h && (this._multisampling = h)) : this._multisampling = 0), 0 === this._multisampling ? e.renderbufferStorage(e.RENDERBUFFER, g, this._width, this._height) : e.renderbufferStorageMultisample(e.RENDERBUFFER, this._multisampling, g, this._width, this._height), e.framebufferRenderbuffer(e.FRAMEBUFFER,
                e.COLOR_ATTACHMENT0, e.RENDERBUFFER, this._renderBuffer), e.bindRenderbuffer(e.RENDERBUFFER, null));
            g = this._renderer._GetDepthBuffer();
            this._depth && g && e.framebufferRenderbuffer(e.FRAMEBUFFER, e.DEPTH_ATTACHMENT, e.RENDERBUFFER, g);
            e.bindFramebuffer(e.FRAMEBUFFER, null);
            c.add(this)
        }
        _Resize(e, g) {
            if (this._width !== e || this._height !== g) this._width = e, this._height = g, this._CalculateProjection(), e = this._renderer.GetContext(), e.bindFramebuffer(e.FRAMEBUFFER, this._frameBuffer), this._texture ? this._texture._Update(new ImageData(this._width,
                this._height)) : (e.bindRenderbuffer(e.RENDERBUFFER, this._renderBuffer), e.renderbufferStorage(e.RENDERBUFFER, this._alpha ? e.RGBA8 : e.RGB8, this._width, this._height), e.bindRenderbuffer(e.RENDERBUFFER, null)), g = this._renderer._GetDepthBuffer(), this._depth && g && e.framebufferRenderbuffer(e.FRAMEBUFFER, e.DEPTH_ATTACHMENT, e.RENDERBUFFER, g), e.bindFramebuffer(e.FRAMEBUFFER, null)
        }
        _Delete() {
            if (!this._texture && !this._renderBuffer) throw Error("already deleted render target");
            c.delete(this);
            const e = this._renderer.GetContext();
            e.bindFramebuffer(e.FRAMEBUFFER, this._frameBuffer);
            this._texture ? (e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0), this._renderer.DeleteTexture(this._texture), this._texture = null) : this._renderBuffer && (e.framebufferRenderbuffer(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.RENDERBUFFER, null), e.deleteRenderbuffer(this._renderBuffer), this._renderBuffer = null);
            e.bindFramebuffer(e.FRAMEBUFFER, null);
            2 <= this._renderer.GetWebGLVersionNumber() && (e.bindFramebuffer(e.READ_FRAMEBUFFER, null),
                e.bindFramebuffer(e.DRAW_FRAMEBUFFER, null));
            e.deleteFramebuffer(this._frameBuffer);
            this._frameBuffer = this._renderer.GetBatchState().currentFramebuffer = null
        }
        _CalculateProjection() {
            this._renderer.CalculatePerspectiveMatrix(this._projectionMatrix, this._width / this._height)
        }
        _GetFramebuffer() {
            return this._frameBuffer
        }
        GetRenderer() {
            return this._renderer
        }
        GetTexture() {
            return this._texture
        }
        GetProjectionMatrix() {
            return this._projectionMatrix
        }
        IsLinearSampling() {
            return "nearest" !== this._sampling
        }
        HasAlpha() {
            return this._alpha
        }
        IsSampled() {
            return this._isSampled
        }
        HasDepthBuffer() {
            return this._depth
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsDefaultSize() {
            return this._isDefaultSize
        }
        GetMultisampling() {
            return this._multisampling
        }
        GetOptions() {
            const e = {
                sampling: this._sampling,
                alpha: this._alpha,
                isSampled: this._isSampled
            };
            this._isDefaultSize || (e.width = this._width, e.height = this._height);
            return e
        }
        IsCompatibleWithOptions(e) {
            e = Object.assign({}, d, e);
            return "nearest" !== e.sampling !== this.IsLinearSampling() || !!e.alpha !== this.HasAlpha() || !!e.depth !== this.HasDepthBuffer() || 2 <= this._renderer.GetWebGLVersionNumber() && !!e.isSampled !== this.IsSampled() ? !1 : "number" === typeof e.width || "number" === typeof e.height ? !this.IsDefaultSize() && this.GetWidth() === e.width && this.GetHeight() ===
                e.height : this.IsDefaultSize()
        }
        _GetWebGLTexture() {
            return this._texture ? this._texture._GetTexture() : null
        }
        GetEstimatedMemoryUsage() {
            return this._texture ? this._texture.GetEstimatedMemoryUsage() : this._width * this._height * (this._alpha ? 4 : 3)
        }
        static async DebugReadPixelsToBlob(e, g) {
            e = await e.ReadBackRenderTargetToImageData(g, !0);
            return await f.ImageDataToBlob(e)
        }
        static OnContextLost() {
            c.clear()
        }
        static allRenderTargets() {
            return c.values()
        }
        static ResizeAll(e, g) {
            for (const h of c) h.IsDefaultSize() && h._Resize(e,
                g)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new Set("aPos aTex aPoints matP matMV samplerFront samplerBack destStart destEnd srcStart srcEnd srcOriginStart srcOriginEnd pixelSize seconds layerScale layerAngle layoutStart layoutEnd color color2_ pointTexStart pointTexEnd zElevation tileSize tileSpacing outlineThickness".split(" "));
    f.Gfx.WebGLShaderProgram = class {
        static async Compile(a, d, c, e) {
            const g = a.GetContext(),
                h = g.createShader(g.FRAGMENT_SHADER);
            g.shaderSource(h, d);
            g.compileShader(h);
            d = g.createShader(g.VERTEX_SHADER);
            g.shaderSource(d,
                c);
            g.compileShader(d);
            const l = g.createProgram();
            g.attachShader(l, h);
            g.attachShader(l, d);
            g.bindAttribLocation(l, 0, "aPos");
            g.bindAttribLocation(l, 1, "aTex");
            g.bindAttribLocation(l, 2, "aPoints");
            g.linkProgram(l);
            const n = a._GetParallelShaderCompileExtension();
            n ? await a._WaitForObjectReady(() => g.getProgramParameter(l, n.COMPLETION_STATUS_KHR)) : await f.Wait(5);
            if (!g.getShaderParameter(h, g.COMPILE_STATUS)) throw e = g.getShaderInfoLog(h), g.deleteShader(h), g.deleteShader(d), g.deleteProgram(l), Error("Error compiling fragment shader: " +
                e);
            if (!g.getShaderParameter(d, g.COMPILE_STATUS)) throw e = g.getShaderInfoLog(d), g.deleteShader(h), g.deleteShader(d), g.deleteProgram(l), Error("Error compiling vertex shader: " + e);
            if (!g.getProgramParameter(l, g.LINK_STATUS)) throw e = g.getProgramInfoLog(l), g.deleteShader(h), g.deleteShader(d), g.deleteProgram(l), Error("Error linking shader program: " + e);
            (a = f.FilterUnprintableChars(g.getProgramInfoLog(l) || "").trim()) && !f.IsStringAllWhitespace(a) && console.info(`[WebGL] Shader program '${e}' compilation log: `,
                a);
            g.deleteShader(h);
            g.deleteShader(d);
            return l
        }
        static async Create(a, d, c, e) {
            c = await f.Gfx.WebGLShaderProgram.Compile(a, d.src, c, e);
            return new f.Gfx.WebGLShaderProgram(a, c, d, e)
        }
        constructor(a, d, c, e) {
            const g = a.GetContext();
            var h = a.GetBatchState();
            a.EndBatch();
            g.useProgram(d);
            this._gl = g;
            this._renderer = a;
            this._name = e;
            this._shaderProgram = d;
            this._isDeviceTransform = "<default-device-transform>" === e;
            e = g.getAttribLocation(d, "aPos");
            const l = g.getAttribLocation(d, "aTex");
            d = g.getAttribLocation(d, "aPoints"); - 1 !==
                e && (g.bindBuffer(g.ARRAY_BUFFER, a._vertexBuffer), g.vertexAttribPointer(e, a.GetNumVertexComponents(), g.FLOAT, !1, 0, 0), g.enableVertexAttribArray(e)); - 1 !== l && (g.bindBuffer(g.ARRAY_BUFFER, a._texcoordBuffer), g.vertexAttribPointer(l, 2, g.FLOAT, !1, 0, 0), g.enableVertexAttribArray(l)); - 1 !== d && (g.bindBuffer(g.ARRAY_BUFFER, a._pointBuffer), g.vertexAttribPointer(d, 4, g.FLOAT, !1, 0, 0), g.enableVertexAttribArray(d));
            g.bindBuffer(g.ARRAY_BUFFER, null);
            this._uMatP = new f.Gfx.WebGLShaderUniform(this, "matP", "mat4");
            this._uMatMV =
                new f.Gfx.WebGLShaderUniform(this, "matMV", "mat4");
            this._uColor = new f.Gfx.WebGLShaderUniform(this, "color", "vec4");
            this._uSamplerFront = new f.Gfx.WebGLShaderUniform(this, "samplerFront", "sampler");
            this._uPointTexStart = new f.Gfx.WebGLShaderUniform(this, "pointTexStart", "vec2");
            this._uPointTexEnd = new f.Gfx.WebGLShaderUniform(this, "pointTexEnd", "vec2");
            this._uZElevation = new f.Gfx.WebGLShaderUniform(this, "zElevation", "float");
            this._uTileSize = new f.Gfx.WebGLShaderUniform(this, "tileSize", "vec2");
            this._uTileSpacing =
                new f.Gfx.WebGLShaderUniform(this, "tileSpacing", "vec2");
            this._uColor2 = new f.Gfx.WebGLShaderUniform(this, "color2_", "vec4");
            this._uOutlineThickness = new f.Gfx.WebGLShaderUniform(this, "outlineThickness", "float");
            this._uSamplerBack = new f.Gfx.WebGLShaderUniform(this, "samplerBack", "sampler");
            this._uDestStart = new f.Gfx.WebGLShaderUniform(this, "destStart", "vec2");
            this._uDestEnd = new f.Gfx.WebGLShaderUniform(this, "destEnd", "vec2");
            this._uSrcStart = new f.Gfx.WebGLShaderUniform(this, "srcStart", "vec2");
            this._uSrcEnd =
                new f.Gfx.WebGLShaderUniform(this, "srcEnd", "vec2");
            this._uSrcOriginStart = new f.Gfx.WebGLShaderUniform(this, "srcOriginStart", "vec2");
            this._uSrcOriginEnd = new f.Gfx.WebGLShaderUniform(this, "srcOriginEnd", "vec2");
            this._uPixelSize = new f.Gfx.WebGLShaderUniform(this, "pixelSize", "vec2");
            this._uSeconds = new f.Gfx.WebGLShaderUniform(this, "seconds", "float");
            this._uLayerScale = new f.Gfx.WebGLShaderUniform(this, "layerScale", "float");
            this._uLayerAngle = new f.Gfx.WebGLShaderUniform(this, "layerAngle", "float");
            this._uLayoutStart =
                new f.Gfx.WebGLShaderUniform(this, "layoutStart", "vec2");
            this._uLayoutEnd = new f.Gfx.WebGLShaderUniform(this, "layoutEnd", "vec2");
            this._hasAnyOptionalUniforms = !!(this._uPixelSize.IsUsed() || this._uSeconds.IsUsed() || this._uSamplerBack.IsUsed() || this._uDestStart.IsUsed() || this._uDestEnd.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed() || this._uLayerScale.IsUsed() || this._uLayerAngle.IsUsed() || this._uLayoutStart.IsUsed() || this._uLayoutEnd.IsUsed());
            this._extendBoxHorizontal = c.extendBoxHorizontal || 0;
            this._extendBoxVertical = c.extendBoxVertical || 0;
            this._crossSampling = !!c.crossSampling;
            this._mustPreDraw = !!c.mustPreDraw;
            this._preservesOpaqueness = !!c.preservesOpaqueness;
            this._animated = !!c.animated;
            a = c.parameters || [];
            this._uCustomParameters = [];
            this._usesDest = this._uDestStart.IsUsed() || this._uDestEnd.IsUsed();
            this._usesAnySrcRectOrPixelSize = this._uPixelSize.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() ||
                this._uSrcOriginEnd.IsUsed();
            this._needsPostDrawOrExtendBox = this._crossSampling || this._usesDest || 0 !== this._extendBoxHorizontal || 0 !== this._extendBoxVertical;
            this._hasCurrentMatMV = this._hasCurrentMatP = !1;
            this._uColor.Init4f(1, 1, 1, 1);
            this._uColor2.Init4f(1, 1, 1, 1);
            this._uSamplerFront.Init1i(0);
            this._uSamplerBack.Init1i(1);
            this._uPointTexStart.Init2f(0, 0);
            this._uPointTexEnd.Init2f(1, 1);
            this._uZElevation.Init1f(0);
            this._uTileSize.Init2f(0, 0);
            this._uTileSpacing.Init2f(0, 0);
            this._uDestStart.Init2f(0, 0);
            this._uDestEnd.Init2f(1,
                1);
            this._uSrcStart.Init2f(0, 0);
            this._uSrcEnd.Init2f(0, 0);
            this._uSrcOriginStart.Init2f(0, 0);
            this._uSrcOriginEnd.Init2f(0, 0);
            this._uPixelSize.Init2f(0, 0);
            this._uLayerScale.Init1f(1);
            this._uLayerAngle.Init1f(0);
            this._uSeconds.Init1f(0);
            this._uLayoutStart.Init2f(0, 0);
            this._uLayoutEnd.Init2f(0, 0);
            this._uOutlineThickness.Init1f(1);
            for (const n of a) a = n[2], c = new f.Gfx.WebGLShaderUniform(this, n[0], a), "color" === a ? c.Init3f(0, 0, 0) : c.Init1f(0), this._uCustomParameters.push(c);
            this._isDeviceTransform ? this._UpdateDeviceTransformUniforms(h.currentMatP) :
                (this.UpdateMatP(h.currentMatP, !0), this.UpdateMatMV(h.currentMV, !0));
            h = h.currentShader;
            g.useProgram(h ? h._shaderProgram : null)
        }
        Release() {
            this._gl.deleteProgram(this._shaderProgram);
            this._shaderProgram = null;
            this._renderer._RemoveShaderProgram(this);
            this._renderer = this._gl = null
        }
        GetName() {
            return this._name
        }
        GetWebGLContext() {
            return this._gl
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        UsesDest() {
            return this._usesDest
        }
        UsesCrossSampling() {
            return this._crossSampling
        }
        MustPreDraw() {
            return this._mustPreDraw
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        ExtendsBox() {
            return 0 !==
                this._extendBoxHorizontal || 0 !== this._extendBoxVertical
        }
        GetBoxExtendHorizontal() {
            return this._extendBoxHorizontal
        }
        GetBoxExtendVertical() {
            return this._extendBoxVertical
        }
        UsesAnySrcRectOrPixelSize() {
            return this._usesAnySrcRectOrPixelSize
        }
        NeedsPostDrawOrExtendsBox() {
            return this._needsPostDrawOrExtendBox
        }
        GetParameterCount() {
            return this._uCustomParameters.length
        }
        GetParameterType(a) {
            return this._uCustomParameters[a].GetType()
        }
        AreCustomParametersAlreadySetInBatch(a) {
            for (let d = 0, c = a.length; d < c; ++d)
                if (!this._uCustomParameters[d].IsSetToCustomInBatch(a[d])) return !1;
            return !0
        }
        SetCustomParametersInBatch(a) {
            for (let d = 0, c = a.length; d < c; ++d) this._uCustomParameters[d].SetBatchValueCustom(a[d])
        }
        AreOptionalUniformsAlreadySetInBatch(a, d, c, e, g, h, l, n, q) {
            return this._uSamplerBack.IsUsed() || this._uPixelSize.IsUsed() && !this._uPixelSize.IsSetTo2InBatch(g, h) || this._uDestStart.IsUsed() && !this._uDestStart.IsSetTo2InBatch(a.getLeft(), a.getTop()) || this._uDestEnd.IsUsed() && !this._uDestEnd.IsSetTo2InBatch(a.getRight(), a.getBottom()) || this._uLayerScale.IsUsed() && !this._uLayerScale.IsSetTo1InBatch(l) ||
                this._uLayerAngle.IsUsed() && !this._uLayerAngle.IsSetTo1InBatch(n) || this._uSrcStart.IsUsed() && !this._uSrcStart.IsSetTo2InBatch(d.getLeft(), d.getTop()) || this._uSrcEnd.IsUsed() && !this._uSrcEnd.IsSetTo2InBatch(d.getRight(), d.getBottom()) || this._uSrcOriginStart.IsUsed() && !this._uSrcOriginStart.IsSetTo2InBatch(c.getLeft(), c.getTop()) || this._uSrcOriginEnd.IsUsed() && !this._uSrcOriginEnd.IsSetTo2InBatch(c.getRight(), c.getBottom()) || this._uLayoutStart.IsUsed() && !this._uLayoutStart.IsSetTo2InBatch(e.getLeft(),
                    e.getTop()) || this._uLayoutEnd.IsUsed() && !this._uLayoutEnd.IsSetTo2InBatch(e.getTop(), e.getBottom()) || this._uSeconds.IsUsed() && !this._uSeconds.IsSetTo1InBatch(q) ? !1 : !0
        }
        SetOptionalUniformsInBatch(a, d, c, e, g, h, l, n, q) {
            this._uSamplerBack.IsUsed() || (this._uPixelSize.IsUsed() && this._uPixelSize.SetBatch2(g, h), this._uDestStart.IsUsed() && this._uDestStart.SetBatch2(a.getLeft(), a.getTop()), this._uDestEnd.IsUsed() && this._uDestEnd.SetBatch2(a.getRight(), a.getBottom()), this._uLayerScale.IsUsed() && this._uLayerScale.SetBatch1(l),
                this._uLayerAngle.IsUsed() && this._uLayerAngle.SetBatch1(n), this._uSrcStart.IsUsed() && this._uSrcStart.SetBatch2(d.getLeft(), d.getTop()), this._uSrcEnd.IsUsed() && this._uSrcEnd.SetBatch2(d.getRight(), d.getBottom()), this._uSrcOriginStart.IsUsed() && this._uSrcOriginStart.SetBatch2(c.getLeft(), c.getTop()), this._uSrcOriginEnd.IsUsed() && this._uSrcOriginEnd.SetBatch2(c.getRight(), c.getBottom()), this._uLayoutStart.IsUsed() && this._uLayoutStart.SetBatch2(e.getLeft(), e.getTop()), this._uLayoutEnd.IsUsed() && this._uLayoutEnd.SetBatch2(e.getTop(),
                    e.getBottom()), this._uSeconds.IsUsed() && this._uSeconds.SetBatch1(q))
        }
        IsAnimated() {
            return this._animated
        }
        UpdateMatP(a, d) {
            this._hasCurrentMatP && !d || this._isDeviceTransform || (this._uMatP.IsUsed() && this._uMatP.UpdateMatrix4fv(a), this._hasCurrentMatP = !0)
        }
        SetMatPStale() {
            this._hasCurrentMatP = !1
        }
        UpdateMatMV(a, d) {
            this._hasCurrentMatMV && !d || this._isDeviceTransform || (this._uMatMV.IsUsed() && this._uMatMV.UpdateMatrix4fv(a), this._hasCurrentMatMV = !0)
        }
        SetMatMVStale() {
            this._hasCurrentMatMV = !1
        }
        _UpdateDeviceTransformUniforms(a) {
            if (!this._isDeviceTransform) throw Error("not device transform shader");
            this._uMatP.UpdateMatrix4fv(a);
            a = this._renderer;
            const d = a.GetWidth() / 2,
                c = a.GetHeight() / 2;
            a = a.CalculateLookAtModelView2(d, c, a.GetDefaultCameraZ() * self.devicePixelRatio, d, c, 0);
            this._uMatMV.UpdateMatrix4fv(a)
        }
        UpdateColor(a) {
            this._uColor.IsUsed() && this._uColor.Update4f(a[0], a[1], a[2], a[3])
        }
        static GetReservedUniformNames() {
            return b
        }
        static GetDefaultVertexShaderSource(a) {
            a = a ? "highmedp" : "mediump";
            return ["#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nattribute highp vec3 aPos;",
                `attribute ${a} vec2 aTex;`, `varying ${a} vec2 vTex;`, "uniform highp mat4 matP;\nuniform highp mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPos, 1.0);\n\tvTex = aTex;\n}"
            ].join("\n")
        }
        static GetTextureFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, vTex) * color;\n}"
        }
        static GetTilemapFragmentShaderSource() {
            return "#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nvarying highmedp vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nuniform highmedp vec2 srcStart;\nuniform highmedp vec2 pixelSize;\nuniform highmedp vec2 tileSize;\nuniform highmedp vec2 tileSpacing;\nvoid main(void) {\n\thighmedp vec2 tile = floor(vTex);\n\thighmedp vec2 tex = fract(vTex);\n\thighmedp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);\n\thighmedp vec2 lowerBound = tileOrigin + pixelSize / 2.0;\n\thighmedp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;\n\tgl_FragColor = texture2D(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;\n}"
        }
        static GetPointVertexShaderSource() {
            return "attribute vec4 aPoints;\nvarying float pointOpacity;\nuniform float zElevation;\nuniform mat4 matP;\nuniform mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPoints.xy, zElevation, 1.0);\n\tgl_PointSize = aPoints.z;\n\tpointOpacity = aPoints.w;\n}"
        }
        static GetPointFragmentShaderSource() {
            return "uniform lowp sampler2D samplerFront;\nvarying lowp float pointOpacity;\nuniform mediump vec2 pointTexStart;\nuniform mediump vec2 pointTexEnd;\nuniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, mix(pointTexStart, pointTexEnd, gl_PointCoord)) * color * pointOpacity;\n}"
        }
        static GetColorFillFragmentShaderSource() {
            return "uniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = color;\n}"
        }
        static GetLinearGradientFillFragmentShaderSource() {
            return "precision lowp float;\nvarying mediump vec2 vTex;\nuniform vec4 color;\nuniform vec4 color2_;\nvec3 fromLinear(vec3 linearRGB)\n{\n\tbvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n\tvec3 higher = vec3(1.055) * pow(abs(linearRGB), vec3(1.0/2.4)) - vec3(0.055);\n\tvec3 lower = linearRGB * vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvec3 toLinear(vec3 sRGB)\n{\n\tbvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n\tvec3 higher = pow(abs((sRGB + vec3(0.055))/vec3(1.055)), vec3(2.4));\n\tvec3 lower = sRGB/vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvoid main(void) {\n\tvec3 linearGrad = mix(toLinear(color.rgb), toLinear(color2_.rgb), vTex.x);\n\tfloat a = mix(color.a, color2_.a, vTex.x);\n\tgl_FragColor = vec4(fromLinear(linearGrad) * a, a);\n}"
        }
        static GetSmoothLineFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tlowp float f = 1.0 - abs(vTex.y - 0.5) * 2.0;\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float f = step(diffSq.x + diffSq.y, 0.25);\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump float innerF = step(distSq, 0.25);\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm * outlineThickness;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float outerF = step(innerEdgeSq.x + innerEdgeSq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
        static GetSmoothEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float f = smoothstep(halfNormSq.x + halfNormSq.y, innerEdgeSq.x + innerEdgeSq.y, diffSq.x + diffSq.y);\n\tgl_FragColor = color * f;\n}"
        }
        static GetSmoothEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 pxNorm = pixelSize * norm;\n\tmediump vec2 innerEdge1 = halfNorm - pxNorm;\n\tmediump vec2 innerEdge1Sq = innerEdge1 * innerEdge1;\n\tmediump float innerF = smoothstep(halfNormSq.x + halfNormSq.y, innerEdge1Sq.x + innerEdge1Sq.y, distSq);\n\tmediump vec2 innerEdge2 = halfNorm - pxNorm * outlineThickness;\n\tmediump vec2 innerEdge2Sq = innerEdge2 * innerEdge2;\n\tmediump vec2 innerEdge3 = halfNorm - pxNorm * (outlineThickness + 1.0);\n\tmediump vec2 innerEdge3Sq = innerEdge3 * innerEdge3;\n\tmediump float outerF = smoothstep(innerEdge3Sq.x + innerEdge3Sq.y, innerEdge2Sq.x + innerEdge2Sq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix.mat4,
        a = new Map([
            ["float", 1],
            ["percent", 1],
            ["sampler", 1],
            ["vec2", 2],
            ["vec3", 3],
            ["color", 3],
            ["vec4", 4],
            ["mat4", 16]
        ]);
    f.Gfx.WebGLShaderUniform = class {
        constructor(d, c, e) {
            if (!a.has(e)) throw Error("invalid uniform type");
            this._owner = d;
            this._gl = this._owner.GetWebGLContext();
            this._name = c;
            this._type = e;
            this._isColorType = "color" === this._type;
            this._location = this._gl.getUniformLocation(this._owner.GetShaderProgram(), c);
            this._isUsed = !!this._location;
            d = a.get(e);
            this._lastValue =
                new Float32Array(d);
            this._lastBatchValue = new Float32Array(d)
        }
        Release() {
            this._location = this._gl = this._owner = null
        }
        IsUsed() {
            return this._isUsed
        }
        GetType() {
            return this._type
        }
        IsColorType() {
            return this._isColorType
        }
        Init1f(d) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastBatchValue.set(this._lastValue), this._gl.uniform1f(this._location, d))
        }
        Init1i(d) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastBatchValue.set(this._lastValue), this._gl.uniform1i(this._location, d))
        }
        Init2f(d, c) {
            this.IsUsed() && (this._lastValue[0] =
                d, this._lastValue[1] = c, this._lastBatchValue.set(this._lastValue), this._gl.uniform2f(this._location, d, c))
        }
        Init3f(d, c, e) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastValue[1] = c, this._lastValue[2] = e, this._lastBatchValue.set(this._lastValue), this._gl.uniform3f(this._location, d, c, e))
        }
        Init4f(d, c, e, g) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastValue[1] = c, this._lastValue[2] = e, this._lastValue[3] = g, this._lastBatchValue.set(this._lastValue), this._gl.uniform4f(this._location, d, c, e, g))
        }
        Update1f(d) {
            d = Math.fround(d);
            const c = this._lastValue;
            c[0] !== d && (c[0] = d, this._gl.uniform1f(this._location, d))
        }
        Update1i(d) {
            const c = this._lastValue;
            c[0] !== d && (c[0] = d, this._gl.uniform1i(this._location, d))
        }
        Update2f(d, c) {
            d = Math.fround(d);
            c = Math.fround(c);
            const e = this._lastValue;
            if (e[0] !== d || e[1] !== c) e[0] = d, e[1] = c, this._gl.uniform2f(this._location, d, c)
        }
        Update3f(d, c, e) {
            d = Math.fround(d);
            c = Math.fround(c);
            e = Math.fround(e);
            const g = this._lastValue;
            if (g[0] !== d || g[1] !== c || g[2] !== e) g[0] = d, g[1] = c, g[2] = e, this._gl.uniform3f(this._location, d, c,
                e)
        }
        Update4f(d, c, e, g) {
            d = Math.fround(d);
            c = Math.fround(c);
            e = Math.fround(e);
            g = Math.fround(g);
            const h = this._lastValue;
            if (h[0] !== d || h[1] !== c || h[2] !== e || h[3] !== g) h[0] = d, h[1] = c, h[2] = e, h[3] = g, this._gl.uniform4f(this._location, d, c, e, g)
        }
        UpdateMatrix4fv(d) {
            const c = this._lastValue;
            b.exactEquals(c, d) || (f.typedArraySet16(c, d, 0), this._gl.uniformMatrix4fv(this._location, !1, d))
        }
        IsSetToCustomInBatch(d) {
            const c = this._lastBatchValue;
            return this.IsColorType() ? c[0] === Math.fround(d.getR()) && c[1] === Math.fround(d.getG()) &&
                c[2] === Math.fround(d.getB()) : c[0] === Math.fround(d)
        }
        SetBatchValueCustom(d) {
            const c = this._lastBatchValue;
            this.IsColorType() ? (c[0] = d.getR(), c[1] = d.getG(), c[2] = d.getB()) : c[0] = d
        }
        IsSetTo1InBatch(d) {
            return this._lastBatchValue[0] === Math.fround(d)
        }
        IsSetTo2InBatch(d, c) {
            const e = this._lastBatchValue;
            return e[0] === Math.fround(d) && e[1] === Math.fround(c)
        }
        SetBatch1(d) {
            this._lastBatchValue[0] = d
        }
        SetBatch2(d, c) {
            const e = this._lastBatchValue;
            e[0] = d;
            e[1] = c
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4;
    f.Gfx.BatchState = class {
        constructor(c) {
            this.renderer = c;
            this.currentMV = d.create();
            this.currentMatP = d.create();
            this.currentFramebuffer = null;
            this.currentColor = a.fromValues(1, 1, 1, 1);
            this.currentShader = null;
            this.pointTexCoords = new f.Rect;
            this.clearColor = f.New(f.Color, 0, 0, 0, 0)
        }
    };
    f.Gfx.WebGLBatchJob = class {
        constructor(c) {
            const e = new ArrayBuffer(96);
            this._type = 0;
            this._batchState = c;
            this._gl = c.renderer.GetContext();
            this._indexCount = this._startIndex =
                0;
            this._texParam = null;
            this._mat4param = new Float32Array(e, 0, 16);
            this._colorParam = new Float32Array(e, 64, 4);
            this._srcOriginRect = new Float32Array(e, 80, 4);
            this._shaderParams = []
        }
        InitQuad(c, e) {
            this._type = 1;
            this._startIndex = c;
            this._indexCount = e
        }
        DoQuad() {
            const c = this._gl;
            c.drawElements(c.TRIANGLES, this._indexCount, c.UNSIGNED_SHORT, this._startIndex)
        }
        InitSetTexture(c) {
            this._type = 2;
            this._texParam = c
        }
        DoSetTexture() {
            const c = this._gl,
                e = this._texParam;
            c.bindTexture(c.TEXTURE_2D, e ? e._GetTexture() : null)
        }
        InitSetColor(c) {
            this._type =
                3;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetColor() {
            const c = this._colorParam,
                e = this._batchState;
            a.copy(e.currentColor, c);
            e.currentShader.UpdateColor(c)
        }
        InitSetGradientColor(c) {
            this._type = 21;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetGradientColor() {
            const c = this._colorParam,
                e = this._batchState.currentShader;
            e._uColor2.IsUsed() && e._uColor2.Update4f(c[0], c[1], c[2], c[3])
        }
        InitSetBlend(c, e) {
            this._type = 4;
            this._startIndex = c;
            this._indexCount = e
        }
        DoSetBlend() {
            this._gl.blendFunc(this._startIndex, this._indexCount)
        }
        InitSetViewport(c,
            e, g, h) {
            this._type = 5;
            const l = this._colorParam;
            l[0] = c;
            l[1] = e;
            l[2] = g;
            l[3] = h
        }
        DoSetViewport() {
            const c = this._colorParam;
            this._gl.viewport(c[0], c[1], c[2], c[3])
        }
        InitSetProjection(c) {
            this._type = 6;
            d.copy(this._mat4param, c)
        }
        DoSetProjection() {
            const c = this._batchState,
                e = c.renderer._allShaderPrograms,
                g = c.currentShader,
                h = this._mat4param;
            for (let l = 0, n = e.length; l < n; ++l) {
                const q = e[l];
                q === g ? q.UpdateMatP(h, !0) : q.SetMatPStale()
            }
            d.copy(c.currentMatP, h)
        }
        InitSetModelView(c) {
            this._type = 7;
            d.copy(this._mat4param, c)
        }
        DoSetModelView() {
            const c =
                this._batchState,
                e = c.renderer._allShaderPrograms,
                g = c.currentShader,
                h = this._mat4param;
            for (let l = 0, n = e.length; l < n; ++l) {
                const q = e[l];
                q === g ? q.UpdateMatMV(h, !0) : q.SetMatMVStale()
            }
            d.copy(c.currentMV, h)
        }
        InitSetRenderTarget(c) {
            this._type = 8;
            this._texParam = c
        }
        DoSetRenderTarget() {
            const c = this._gl;
            var e = this._texParam;
            const g = this._batchState;
            e ? (e = e._GetFramebuffer(), g.currentFramebuffer = e, c.bindFramebuffer(c.FRAMEBUFFER, e)) : (g.currentFramebuffer = null, c.bindFramebuffer(c.FRAMEBUFFER, null))
        }
        InitClearSurface(c) {
            this._type =
                9;
            c.writeToTypedArray(this._mat4param, 0)
        }
        InitClearSurface2(c, e, g, h) {
            this._type = 9;
            const l = this._mat4param;
            l[0] = c;
            l[1] = e;
            l[2] = g;
            l[3] = h
        }
        DoClearSurface() {
            const c = this._gl;
            var e = this._mat4param,
                g = this._batchState;
            const h = g.clearColor;
            (g = g.renderer._isScissorViewport && f.isDebug) && c.disable(c.SCISSOR_TEST);
            const l = e[0],
                n = e[1],
                q = e[2];
            e = e[3];
            h.equalsRgba(l, n, q, e) || (c.clearColor(l, n, q, e), h.setRgba(l, n, q, e));
            c.clear(c.COLOR_BUFFER_BIT);
            g && c.enable(c.SCISSOR_TEST)
        }
        InitClearRect(c, e, g, h, l, n, q, y) {
            this._type = 10;
            const w = this._mat4param;
            w[0] = c;
            w[1] = e;
            w[2] = g;
            w[3] = h;
            w[4] = l;
            w[5] = n;
            w[6] = q;
            w[7] = y
        }
        DoClearRectangle() {
            const c = this._gl;
            var e = this._mat4param,
                g = this._batchState;
            const h = g.renderer;
            g = g.clearColor;
            h._isScissorViewport || c.enable(c.SCISSOR_TEST);
            c.scissor(e[0], e[1], e[2], e[3]);
            const l = e[4],
                n = e[5],
                q = e[6];
            e = e[7];
            g.equalsRgba(l, n, q, e) || (c.clearColor(l, n, q, e), g.setRgba(l, n, q, e));
            c.clear(c.COLOR_BUFFER_BIT);
            h._isScissorViewport ? c.scissor(0, 0, h._viewportScissorWidth, h._viewportScissorHeight) : c.disable(c.SCISSOR_TEST)
        }
        InitSetPointTexCoords(c) {
            this._type =
                15;
            c.writeToTypedArray(this._mat4param, 0)
        }
        DoSetPointTextureCoords() {
            const c = this._mat4param;
            this._batchState.pointTexCoords.set(c[0], c[1], c[2], c[3])
        }
        InitPoints(c, e) {
            this._type = 11;
            this._startIndex = c;
            this._indexCount = 1;
            this._mat4param[0] = e
        }
        DoPoints() {
            const c = this._gl,
                e = this._batchState,
                g = e.renderer._spPoints;
            c.useProgram(g._shaderProgram);
            g.UpdateMatP(e.currentMatP, !1);
            g.UpdateMatMV(e.currentMV, !1);
            var h = e.pointTexCoords;
            g._uPointTexStart.IsUsed() && g._uPointTexStart.Update2f(h.getLeft(), h.getTop());
            g._uPointTexEnd.IsUsed() && g._uPointTexEnd.Update2f(h.getRight(), h.getBottom());
            h = this._mat4param[0];
            g._uZElevation.IsUsed() && g._uZElevation.Update1f(h);
            g._uColor.IsUsed() && (h = e.currentColor, g._uColor.Update4f(h[0], h[1], h[2], h[3]));
            c.drawArrays(c.POINTS, this._startIndex / 4, this._indexCount);
            c.useProgram(e.currentShader._shaderProgram)
        }
        InitSetProgram(c) {
            this._type = 12;
            this._texParam = c
        }
        DoSetProgram() {
            var c = this._gl;
            const e = this._batchState,
                g = this._texParam;
            e.currentShader = g;
            c.useProgram(g._shaderProgram);
            g.UpdateMatP(e.currentMatP, !1);
            g.UpdateMatMV(e.currentMV, !1);
            g._uColor.IsUsed() && (c = e.currentColor, g._uColor.Update4f(c[0], c[1], c[2], c[3]))
        }
        InitSetProgramParameters() {
            this._type = 13
        }
        DoSetProgramParameters() {
            const c = this._batchState.currentShader;
            c._hasAnyOptionalUniforms && this._DoSetOptionalUniformProgramParameters(c);
            c._uCustomParameters.length && this._DoUpdateCustomProgramParameters(c)
        }
        _DoSetOptionalUniformProgramParameters(c) {
            const e = this._gl,
                g = this._mat4param,
                h = this._colorParam,
                l = this._srcOriginRect;
            if (c._uSamplerBack.IsUsed()) {
                const n = this._batchState.renderer,
                    q = this._texParam;
                n._lastTexture1 !== q && (e.activeTexture(e.TEXTURE1), e.bindTexture(e.TEXTURE_2D, q ? q._GetTexture() : null), n._lastTexture1 = q, e.activeTexture(e.TEXTURE0))
            }
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(g[0], g[1]);
            c._uDestStart.IsUsed() && c._uDestStart.Update2f(g[2], g[3]);
            c._uDestEnd.IsUsed() && c._uDestEnd.Update2f(g[4], g[5]);
            c._uLayerScale.IsUsed() && c._uLayerScale.Update1f(g[6]);
            c._uLayerAngle.IsUsed() && c._uLayerAngle.Update1f(g[7]);
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(g[12], g[13]);
            c._uSrcEnd.IsUsed() && c._uSrcEnd.Update2f(g[14], g[15]);
            c._uSrcOriginStart.IsUsed() && c._uSrcOriginStart.Update2f(l[0], l[1]);
            c._uSrcOriginEnd.IsUsed() && c._uSrcOriginEnd.Update2f(l[2], l[3]);
            c._uLayoutStart.IsUsed() && c._uLayoutStart.Update2f(h[0], h[1]);
            c._uLayoutEnd.IsUsed() && c._uLayoutEnd.Update2f(h[2], h[3]);
            c._uSeconds.IsUsed() && c._uSeconds.Update1f(this._startIndex)
        }
        _DoUpdateCustomProgramParameters(c) {
            c = c._uCustomParameters;
            const e = this._shaderParams;
            for (let g = 0, h = c.length; g < h; ++g) {
                const l = c[g],
                    n = e[g];
                l.IsColorType() ? l.Update3f(n.getR(), n.getG(), n.getB()) : l.Update1f(n)
            }
        }
        InitInvalidateFramebuffer(c) {
            this._type = 14;
            this._texParam = c
        }
        DoInvalidateFramebuffer() {
            const c = this._gl,
                e = this._texParam,
                g = this._batchState.currentFramebuffer;
            e !== g && c.bindFramebuffer(c.FRAMEBUFFER, e);
            c.invalidateFramebuffer(c.FRAMEBUFFER, [c.COLOR_ATTACHMENT0]);
            e !== g && c.bindFramebuffer(c.FRAMEBUFFER, g)
        }
        InitBlitFramebuffer(c, e, g) {
            this._type = 17;
            const h = this._mat4param,
                l = this._batchState.renderer;
            h[0] = c.GetWidth();
            h[1] = c.GetHeight();
            h[2] = e ? e.GetWidth() : l.GetWidth();
            h[3] = e ? e.GetHeight() : l.GetHeight();
            h[4] = c.IsLinearSampling() ? 1 : 0;
            h[5] = "stretch" === g;
            g = this._shaderParams;
            f.clearArray(g);
            g.push(c._GetFramebuffer());
            g.push(e ? e._GetFramebuffer() : null)
        }
        DoBlitFramebuffer() {
            var c = this._mat4param,
                e = this._shaderParams;
            const g = this._gl;
            var h = c[0],
                l = c[1],
                n = c[2];
            const q = c[3],
                y = 0 !== c[4];
            c = 0 !== c[5];
            const w = e[1];
            g.bindFramebuffer(g.READ_FRAMEBUFFER, e[0]);
            g.bindFramebuffer(g.DRAW_FRAMEBUFFER, w);
            c ? g.blitFramebuffer(0,
                0, h, l, 0, 0, n, q, g.COLOR_BUFFER_BIT, y ? g.LINEAR : g.NEAREST) : (e = Math.min(h, n), h = Math.min(l, q), n = Math.max(l - q, 0), l = Math.max(q - l, 0), g.blitFramebuffer(0, n, e, h + n, 0, l, e, h + l, g.COLOR_BUFFER_BIT, g.NEAREST))
        }
        InitStartQuery(c) {
            this._type = 18;
            this._texParam = c
        }
        DoStartQuery() {
            this._texParam.BeginTimeElapsed();
            this._texParam = null
        }
        InitEndQuery(c) {
            this._type = 19;
            this._texParam = c
        }
        DoEndQuery() {
            this._texParam.EndTimeElapsed();
            this._texParam = null
        }
        InitSetEllipseParams(c, e, g) {
            this._type = 20;
            const h = this._mat4param;
            h[0] = c;
            h[1] =
                e;
            h[2] = g
        }
        DoSetEllipseParams() {
            const c = this._batchState.currentShader,
                e = this._mat4param;
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(e[0], e[1]);
            c._uOutlineThickness.IsUsed() && c._uOutlineThickness.Update1f(e[2])
        }
        InitSetTilemapInfo(c, e, g, h, l, n, q) {
            this._type = 16;
            const y = this._mat4param;
            c.writeToTypedArray(y, 0);
            y[4] = 1 / e;
            y[5] = 1 / g;
            y[6] = h / e;
            y[7] = l / g;
            y[8] = n / e;
            y[9] = q / g
        }
        DoSetTilemapInfo() {
            const c = this._batchState.currentShader,
                e = this._mat4param;
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(e[0], e[1]);
            c._uPixelSize.IsUsed() &&
                c._uPixelSize.Update2f(e[4], e[5]);
            c._uTileSize.IsUsed() && c._uTileSize.Update2f(e[6], e[7]);
            c._uTileSpacing.IsUsed() && c._uTileSpacing.Update2f(e[8], e[9])
        }
        InitClearDepth() {
            this._type = 22
        }
        DoClearDepth() {
            const c = this._gl;
            c.clear(c.DEPTH_BUFFER_BIT)
        }
        InitSetDepthEnabled(c) {
            this._type = 23;
            this._startIndex = c ? 1 : 0
        }
        DoSetDepthEnabled() {
            const c = this._gl;
            0 === this._startIndex ? (c.disable(c.DEPTH_TEST), c.depthMask(!1)) : (c.enable(c.DEPTH_TEST), c.depthMask(!0))
        }
        Run() {
            switch (this._type) {
                case 1:
                    this.DoQuad();
                    break;
                case 2:
                    this.DoSetTexture();
                    break;
                case 3:
                    this.DoSetColor();
                    break;
                case 4:
                    this.DoSetBlend();
                    break;
                case 5:
                    this.DoSetViewport();
                    break;
                case 6:
                    this.DoSetProjection();
                    break;
                case 7:
                    this.DoSetModelView();
                    break;
                case 8:
                    this.DoSetRenderTarget();
                    break;
                case 9:
                    this.DoClearSurface();
                    break;
                case 10:
                    this.DoClearRectangle();
                    break;
                case 11:
                    this.DoPoints();
                    break;
                case 12:
                    this.DoSetProgram();
                    break;
                case 13:
                    this.DoSetProgramParameters();
                    break;
                case 14:
                    this.DoInvalidateFramebuffer();
                    break;
                case 15:
                    this.DoSetPointTextureCoords();
                    break;
                case 16:
                    this.DoSetTilemapInfo();
                    break;
                case 17:
                    this.DoBlitFramebuffer();
                    break;
                case 18:
                    this.DoStartQuery();
                    break;
                case 19:
                    this.DoEndQuery();
                    break;
                case 20:
                    this.DoSetEllipseParams();
                    break;
                case 21:
                    this.DoSetGradientColor();
                    break;
                case 22:
                    this.DoClearDepth();
                    break;
                case 23:
                    this.DoSetDepthEnabled()
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = {
            timeout: 60
        },
        a = new f.Color(0, 0, 0, 1),
        d = new Set(["left", "center", "right"]),
        c = new Set(["top", "center", "bottom"]),
        e = new Set(["word", "character"]),
        g = new Set;
    f.FontManager && f.FontManager.addEventListener("fontload", w => {
        w = w.font.GetName();
        for (const u of g)(u.IsBBCodeEnabled() || f.equalsNoCase(u.GetFontName(), w)) && u._SetTextChanged()
    });

    function h(w, u, p, x, t, r) {
        u ? "Gecko" === f.Platform.BrowserEngine ? w.strokeText(p, x, t, r) : w.strokeText(p, x, t) : "Gecko" === f.Platform.BrowserEngine ? w.fillText(p,
            x, t, r) : w.fillText(p, x, t)
    }

    function l(w, u, p, x, t, r) {
        u ? w.strokeRect(p, x, t, r) : w.fillRect(p, x, t, r)
    }

    function n(w) {
        return 4 / 3 * w
    }
    let q = !1,
        y = !1;
    f.Gfx.RendererText = class {
        constructor(w, u) {
            u = Object.assign({}, b, u);
            this._renderer = w;
            this._fontName = "Arial";
            this._fontSize = 16;
            this._fontSizeScale = 1;
            this._lineHeight = 0;
            this._isItalic = this._isBold = !1;
            this._colorStr = "black";
            this._isBBcodeEnabled = !1;
            this.onloadfont = null;
            this._alreadyLoadedFonts = new Set;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._text = "";
            this._bbString = null;
            this._wrappedText = f.New(f.WordWrap);
            this._wrapMode = "word";
            this._isUpdating = this._textChanged = !1;
            this._isAsync = !0;
            this._drawMaxCharCount = -1;
            this._height = this._width = this._cssHeight = this._cssWidth = this._drawCharCount = 0;
            this._zoom = 1;
            this._changed = !1;
            this._measureContextTop = this._measureContext = this._textContext = this._textCanvas = null;
            this._lastCanvasHeight = this._lastCanvasWidth = -1;
            this._lastTextCanvasFillStyle = this._lastMeasureCanvasFont = this._lastTextCanvasFont = "";
            this._lastTextCanvasLineWidth =
                this._lastTextCanvasOpacity = 1;
            this._measureTextCallback = (p, x) => this._MeasureText(p, x);
            this._texture = null;
            this._textureHeight = this._textureWidth = 0;
            this._rcTex = new f.Rect;
            this._scaleFactor = 1;
            this._needToRecreateTexture = !1;
            this._textureTimeout = new f.IdleTimeout(() => {
                this.ReleaseTexture();
                this._SetTextCanvasSize(8, 8)
            }, u.timeout);
            this.ontextureupdate = null;
            this._wasReleased = !1;
            g.add(this)
        }
        Release() {
            this.onloadfont = null;
            this._alreadyLoadedFonts.clear();
            this._measureTextCallback = this._measureContextTop = this._measureContext =
                this._textContext = this._textCanvas = this._bbString = null;
            this._textureTimeout.Release();
            this.ontextureupdate = null;
            this.ReleaseTexture();
            this._wrappedText.Clear();
            this._renderer = this._wrappedText = null;
            this._wasReleased = !0;
            g.delete(this)
        }
        _SetChanged() {
            this._changed = !0
        }
        _SetTextChanged() {
            this._SetChanged();
            this._wrappedText.Clear();
            this._textChanged = !0
        }
        SetIsAsync(w) {
            this._isAsync = !!w
        }
        IsAsync() {
            return this._isAsync
        }
        SetBBCodeEnabled(w) {
            w = !!w;
            this._isBBcodeEnabled !== w && (w = (this._isBBcodeEnabled = w) ? "alphabetic" :
                "top", this._textContext && (this._textContext.textBaseline = w), this._measureContext && (this._measureContext.textBaseline = w), this._SetTextChanged())
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetFontName(w) {
            w || (w = "serif");
            this._fontName !== w && (this._fontName = w, this._SetTextChanged())
        }
        GetFontName() {
            return this._fontName
        }
        SetFontSize(w) {
            .1 > w && (w = .1);
            this._fontSize !== w && (this._fontSize = w, this._SetTextChanged())
        }
        SetFontSizeScale(w) {
            this._fontSizeScale !== w && (this._fontSizeScale = w, this._SetTextChanged())
        }
        SetLineHeight(w) {
            this._lineHeight !==
                w && (this._lineHeight = w, this._SetChanged())
        }
        SetBold(w) {
            w = !!w;
            this._isBold !== w && (this._isBold = w, this._SetTextChanged())
        }
        SetItalic(w) {
            w = !!w;
            this._isItalic !== w && (this._isItalic = w, this._SetTextChanged())
        }
        SetDrawMaxCharacterCount(w) {
            w = Math.floor(w);
            this._drawMaxCharCount !== w && (this._drawMaxCharCount = w, this._SetChanged())
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(w, u) {
            for (let p = w.length - 1; 0 <= p; --p) {
                const x = w[p];
                if (x.tag === u) return x
            }
            return null
        }
        _HasStyleTag(w, u) {
            return !!this._GetStyleTag(w,
                u)
        }
        _GetFontString(w, u) {
            let p = [];
            (this._isBold || this._HasStyleTag(u, "b")) && p.push("bold");
            (this._isItalic || this._HasStyleTag(u, "i")) && p.push("italic");
            var x = this._GetStyleTag(u, "size");
            x = (x ? parseFloat(x.param) : this._fontSize) * this._fontSizeScale;
            w ? p.push(x + "pt") : p.push(x * this._scaleFactor * this._zoom * self.devicePixelRatio + "pt");
            w = this._fontName;
            (u = this._GetStyleTag(u, "font")) && u.param && (w = u.param, this.onloadfont && !this._alreadyLoadedFonts.has(w) && (this.onloadfont(w), this._alreadyLoadedFonts.add(w)));
            w && p.push('"' + w + '"');
            return p.join(" ")
        }
        SetColor(w) {
            w instanceof f.Color && (w = w.getCssRgb());
            this._colorStr !== w && (this._colorStr = w, this._SetChanged())
        }
        SetColorRgb(w, u, p) {
            a.setRgb(w, u, p);
            this.SetColor(a)
        }
        SetHorizontalAlignment(w) {
            if (!d.has(w)) throw Error("invalid horizontal alignment");
            this._horizontalAlign !== w && (this._horizontalAlign = w, this._SetChanged())
        }
        SetVerticalAlignment(w) {
            if (!c.has(w)) throw Error("invalid vertical alignment");
            this._verticalAlign !== w && (this._verticalAlign = w, this._SetChanged())
        }
        SetWordWrapMode(w) {
            if (!e.has(w)) throw Error("invalid word wrap mode");
            this._wrapMode !== w && (this._wrapMode = w, this._SetTextChanged())
        }
        SetText(w) {
            this._text !== w && (this._text = w, this._SetTextChanged())
        }
        SetSize(w, u, p) {
            "undefined" === typeof p && (p = 1);
            if (!(0 >= w || 0 >= w || this._cssWidth === w && this._cssHeight === u && this._zoom === p)) {
                1 === this._zoom !== (1 === p) && (this._needToRecreateTexture = !0);
                var x = this._cssWidth,
                    t = this._zoom;
                this._cssWidth = w;
                this._cssHeight = u;
                this._zoom = p;
                w = self.devicePixelRatio;
                this._width = this._cssWidth * this._zoom * w;
                this._height = this._cssHeight * this._zoom * w;
                w = Math.max(this._width,
                    this._height);
                u = Math.min(this._renderer.GetMaxTextureSize(), 2048);
                p = 1;
                w > u && (p = u / w, this._width = Math.min(this._width * p, u), this._height = Math.min(this._height * p, u));
                this._scaleFactor = p;
                0 < this._textureWidth && 0 < this._textureHeight && this._zoom === t && this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight);
                this._cssWidth !== x ? this._SetTextChanged() : this._SetChanged()
            }
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            return this._wrappedText.GetTotalLineHeight() + this._wrappedText.GetLineCount() * (this._lineHeight + 4) - this._lineHeight
        }
        GetTexture() {
            this._textureTimeout.Reset();
            this._MaybeUpdate();
            return this._texture
        }
        _MaybeUpdate() {
            this._texture && !this._changed && !this._textChanged || this._isUpdating || 0 >= this._width || 0 >= this._height || (this._changed = !1, this._isUpdating = !0, this._isAsync ? f.Asyncify(() => this._DoUpdate()) : this._DoUpdate())
        }
        _DoUpdate() {
            this._wasReleased || (this._SetTextCanvasSize(Math.ceil(this._width), Math.ceil(this._height)),
                this._MaybeWrapText(), this._DrawTextToCanvas(), this._UpdateTexture(), this._textureTimeout.Reset(), this._isUpdating = !1)
        }
        _SetTextCanvasSize(w, u) {
            this._textCanvas || (this._textCanvas = f.CreateCanvas(16, 16));
            let p = !1;
            if (this._lastCanvasWidth !== w || this._lastCanvasHeight !== u) this._lastCanvasWidth = w, this._lastCanvasHeight = u, this._textCanvas.width = w, this._textCanvas.height = u, p = !0;
            this._textContext || (this._textContext = this._textCanvas.getContext("2d"), p = !0);
            p ? (this._textContext.textBaseline = this._isBBcodeEnabled ?
                "alphabetic" : "top", this._textContext.font = this._lastTextCanvasFont, this._textContext.fillStyle = this._lastTextCanvasFillStyle, this._textContext.strokeStyle = this._lastTextCanvasFillStyle, this._textContext.globalAlpha = this._lastTextCanvasOpacity, this._textContext.lineWidth = this._lastTextCanvasLineWidth) : this._textContext.clearRect(0, 0, w, u)
        }
        _MaybeCreateMeasureContext() {
            this._measureContext || (this._measureContext = f.CreateCanvas(16, 16).getContext("2d"), this._measureContextTop = f.CreateCanvas(16, 16).getContext("2d"),
                this._measureContext.textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top", this._measureContextTop.textBaseline = "top")
        }
        _SetMeasureFontString(w) {
            this._lastMeasureCanvasFont !== w && (this._lastMeasureCanvasFont = w, this._measureContext.font = w, this._measureContextTop.font = w)
        }
        _SupportsFontBoundingBoxMeasurements() {
            if (!q) {
                q = !0;
                this._MaybeCreateMeasureContext();
                const w = this._measureContext.measureText("test");
                y = "number" === typeof w.fontBoundingBoxAscent && "number" === typeof w.fontBoundingBoxDescent
            }
            return y
        }
        _MaybeWrapText() {
            this._textChanged &&
                (this._MaybeCreateMeasureContext(), !this._isBBcodeEnabled || this._bbString && this._bbString.toString() === this._text || (this._bbString = new f.BBString(this._text, {
                    noEscape: !0
                })), this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, 0), this._textChanged = !1)
        }
        _MeasureText(w, u) {
            this._SetMeasureFontString(this._GetFontString(!0, u));
            u = this._GetStyleTag(u, "size");
            u = (u ? parseFloat(u.param) : this._fontSize) * this._fontSizeScale;
            const p = this._measureContext.measureText(w);
            let x = 0;
            this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements() && (w = this._measureContextTop.measureText(w), x = p.fontBoundingBoxAscent - w.fontBoundingBoxAscent);
            return {
                width: p.width,
                height: n(u),
                fontBoundingBoxAscent: p.fontBoundingBoxAscent || 0,
                fontBoundingBoxDescent: p.fontBoundingBoxDescent || 0,
                topToAlphabeticDistance: x
            }
        }
        _SetDrawFontString(w) {
            this._lastTextCanvasFont !== w && (this._lastTextCanvasFont = w, this._textContext.font = w)
        }
        _SetDrawCanvasColor(w) {
            this._lastTextCanvasFillStyle !==
                w && (this._lastTextCanvasFillStyle = w, this._textContext.fillStyle = w, this._textContext.strokeStyle = w)
        }
        _SetDrawCanvasOpacity(w) {
            this._lastTextCanvasOpacity !== w && (this._lastTextCanvasOpacity = w, this._textContext.globalAlpha = w)
        }
        _SetDrawCanvasLineWith(w) {
            this._lastTextCanvasLineWidth !== w && (this._lastTextCanvasLineWidth = w, this._textContext.lineWidth = w)
        }
        _DrawTextToCanvas() {
            this._drawCharCount = 0;
            const w = this._scaleFactor * this._zoom * self.devicePixelRatio,
                u = (4 + this._lineHeight) * w;
            var p = 0;
            const x = this._wrappedText.GetLines();
            if (0 !== x.length) {
                var t = this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements(),
                    r = x[0].height * w;
                "center" === this._verticalAlign ? (p = x.reduce((B, z) => B + z.height * w + u, 0) - u, p = Math.max(this._height / 2 - p / 2, 0), t && (r = x[0].topToAlphabeticDistance * w)) : "bottom" === this._verticalAlign && (p = x.reduce((B, z) => B + z.height * w + u, 0) - this._lineHeight * w, p = this._height - p - (t ? x[x.length - 1].fontBoundingBoxDescent * w : 0) - 2);
                for (let B = 0, z = x.length; B < z; ++B) {
                    t = x[B];
                    const C = t.height * w,
                        F = p;
                    if (this._isBBcodeEnabled) {
                        if (p += 0 === B ?
                            r : C, 0 < B && p > this._height - 4 * w) break
                    } else if (0 < B && p >= this._height - C) break;
                    0 <= F && this._DrawTextLine(t, p, w);
                    this._isBBcodeEnabled || (p += C);
                    p += u
                }
            }
        }
        _DrawTextLine(w, u, p) {
            let x = 0;
            "center" === this._horizontalAlign ? x = (this._width - w.width * p) / 2 : "right" === this._horizontalAlign && (x = this._width - w.width * p);
            for (const t of w.fragments) this._DrawTextFragment(t, x, u, p, w.height), x += t.width * p
        }
        _DrawTextFragment(w, u, p, x, t) {
            const r = this._textContext,
                B = t / 16;
            t = w.width * x;
            const z = w.height * x,
                C = w.height / 16;
            var F = (4 + this._lineHeight) *
                x;
            const J = w.styles;
            w = w.text;
            if (-1 !== this._drawMaxCharCount) {
                if (this._drawCharCount >= this._drawMaxCharCount) return;
                this._drawCharCount + w.length > this._drawMaxCharCount && (w = w.substr(0, this._drawMaxCharCount - this._drawCharCount), t = this._MeasureText(w, J).width * x);
                this._drawCharCount += w.length
            }
            const G = this._GetStyleTag(J, "background"),
                I = this._HasStyleTag(J, "u"),
                L = this._HasStyleTag(J, "s");
            if ((!f.IsStringAllWhitespace(w) || G || I || L) && !this._HasStyleTag(J, "hide")) {
                var N = this._GetStyleTag(J, "offsetx");
                u += N ? parseFloat(N.param) *
                    x : 0;
                N = this._GetStyleTag(J, "offsety");
                p += N ? parseFloat(N.param) * x : 0;
                G && (this._SetDrawCanvasColor(G.param), r.fillRect(u, p - z, t, z + F));
                F = this._GetStyleTag(J, "color");
                this._SetDrawCanvasColor(F ? F.param : this._colorStr);
                F = this._GetStyleTag(J, "opacity");
                this._SetDrawCanvasOpacity(F ? parseFloat(F.param) / 100 : 1);
                (F = this._HasStyleTag(J, "stroke")) && this._SetDrawCanvasLineWith(C * this._scaleFactor * this._zoom);
                I && l(r, F, u, p + x * B, t, x * B);
                L && l(r, F, u, p - z / 4, t, x * C);
                this._SetDrawFontString(this._GetFontString(!1, J));
                h(r, F, w,
                    u, p, t);
                !F && (this._SetDrawCanvasLineWith(C * this._scaleFactor * this._zoom), x = this._GetStyleTag(J, "outline")) && (this._SetDrawCanvasColor(x.param), h(r, !0, w, u, p, t))
            }
        }
        _UpdateTexture() {
            if (!this._renderer.IsContextLost() && (this._textureWidth = Math.ceil(this._width), this._textureHeight = Math.ceil(this._height), this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight), this._needToRecreateTexture && (this.ReleaseTexture(), this._needToRecreateTexture = !1), this._texture || (this._texture = this._renderer.CreateDynamicTexture(this._textureWidth,
                    this._textureHeight, {
                        mipMap: 1 === this._zoom,
                        mipMapQuality: "high"
                    })), this._renderer.UpdateTexture(this._textCanvas, this._texture), this.ontextureupdate)) this.ontextureupdate()
        }
        GetTexRect() {
            return this._rcTex
        }
        ReleaseTexture() {
            this._texture && (this._renderer.IsContextLost() || this._renderer.DeleteTexture(this._texture), this._texture = null)
        }
        static OnContextLost() {
            for (const w of g) w.ReleaseTexture()
        }
        static GetAll() {
            return g.values()
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor(a) {
            this._gl = a.GetContext();
            this._version = a.GetWebGLVersionNumber();
            this._timerExt = a._GetDisjointTimerQueryExtension();
            this._query = null;
            this._hasResult = this._isActive = !1;
            this._result = 0;
            this._query = 1 === this._version ? this._timerExt.createQueryEXT() : this._gl.createQuery()
        }
        Release() {
            this._DeleteQueryObject();
            this._timerExt = this._gl = null;
            this._hasResult = !1
        }
        _DeleteQueryObject() {
            this._query && (1 === this._version ? this._timerExt.deleteQueryEXT(this._query) : this._gl.deleteQuery(this._query),
                this._query = null)
        }
        BeginTimeElapsed() {
            if (this._isActive) throw Error("query already active");
            1 === this._version ? this._timerExt.beginQueryEXT(this._timerExt.TIME_ELAPSED_EXT, this._query) : this._gl.beginQuery(this._timerExt.TIME_ELAPSED_EXT, this._query);
            this._isActive = !0
        }
        EndTimeElapsed() {
            if (!this._isActive) throw Error("query not active");
            1 === this._version ? this._timerExt.endQueryEXT(this._timerExt.TIME_ELAPSED_EXT) : this._gl.endQuery(this._timerExt.TIME_ELAPSED_EXT);
            this._isActive = !1
        }
        CheckForResult() {
            if (this._query &&
                !this._hasResult && !this._isActive) {
                var a = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_AVAILABLE_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT_AVAILABLE);
                var d = this._gl.getParameter(this._timerExt.GPU_DISJOINT_EXT);
                a && !d && (this._result = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT), this._result /= 1E9, this._hasResult = !0);
                (a ||
                    d) && this._DeleteQueryObject()
            }
        }
        HasResult() {
            return this._hasResult
        }
        GetResult() {
            if (!this._hasResult) throw Error("no result available");
            return this._result
        }
    }
    f.Gfx.WebGLTimeElapsedQuery = class {
        constructor(a) {
            this._renderer = a;
            this._frameNumber = a.GetFrameNumber();
            this._isActive = !1;
            this._parentQuery = null;
            this._isNested = !1;
            this._realQuery = null;
            this._queries = []
        }
        Release() {
            for (const a of this._queries) a instanceof b && a.Release();
            f.clearArray(this._queries);
            this._renderer = this._realQuery = this._parentQuery = null
        }
        BeginTimeElapsed() {
            if (this._isActive) throw Error("query already active");
            const a = this._renderer._GetTimeQueryStack();
            0 < a.length ? (this._isNested = !0, this._parentQuery = a[a.length - 1], this._parentQuery._EndReal(), this._parentQuery._queries.push(this)) : (this._isNested = !1, this._parentQuery = null);
            this._isActive = !0;
            a.push(this);
            this._StartReal()
        }
        EndTimeElapsed() {
            if (!this._isActive) throw Error("query not active");
            if (this._renderer._GetTimeQueryStack().pop() !== this) throw Error("can only end most nested query");
            this._isActive = !1;
            this._EndReal();
            this._parentQuery && (this._parentQuery._StartReal(),
                this._parentQuery = null)
        }
        _StartReal() {
            this._realQuery = f.New(b, this._renderer);
            this._queries.push(this._realQuery);
            this._realQuery.BeginTimeElapsed()
        }
        _EndReal() {
            this._realQuery.EndTimeElapsed();
            this._realQuery = null
        }
        CheckForResult() {
            for (const a of this._queries) a.CheckForResult()
        }
        IsNested() {
            return this._isNested
        }
        HasResult() {
            return this._queries.every(a => a.HasResult())
        }
        GetResult() {
            return this._queries.reduce((a, d) => a + d.GetResult(), 0)
        }
        GetFrameNumber() {
            return this._frameNumber
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Gfx.WebGLQueryResultBuffer = class {
        constructor(b, a = 1E3) {
            this._renderer = b;
            this._maxQueries = a;
            this._buffer = [];
            this._renderer._AddQueryResultBuffer(this)
        }
        Release() {
            this.Clear();
            this._renderer._RemoveQueryResultBuffer(this);
            this._renderer = null
        }
        Clear() {
            for (const b of this._buffer) b.Release();
            f.clearArray(this._buffer)
        }
        AddTimeElapsedQuery() {
            const b = new f.Gfx.WebGLTimeElapsedQuery(this._renderer);
            this._buffer.push(b);
            this._buffer.length > this._maxQueries && this._buffer.shift().Release();
            return b
        }
        CheckForResults(b) {
            for (const a of this._buffer) {
                if (a.GetFrameNumber() >= b) break;
                if (a.IsNested()) break;
                a.CheckForResult()
            }
        }
        GetFrameRangeResultSum(b, a) {
            if (a <= b) return NaN;
            let d = 0;
            for (const c of this._buffer) {
                if (c.GetFrameNumber() >= a) break;
                if (!(c.GetFrameNumber() < b))
                    if (c.HasResult()) d += c.GetResult();
                    else return NaN
            }
            return d
        }
        DeleteAllBeforeFrameNumber(b) {
            for (let a = 0, d = this._buffer.length; a < d; ++a) {
                const c = this._buffer[a];
                if (c.GetFrameNumber() < b) c.Release();
                else {
                    0 < a && this._buffer.splice(0, a);
                    break
                }
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4,
        c = {
            powerPreference: "default",
            enableGpuProfiling: !0,
            alpha: !1,
            lowLatency: !1,
            depth: !1,
            maxWebGLVersion: 2
        },
        e = new Set(["default", "low-power", "high-performance"]),
        g = new f.Quad(0, 0, 1, 0, 1, 1, 0, 1),
        h = d.create(),
        l = d.create(),
        n = new f.Quad,
        q = new f.Rect;
    let y = null;
    f.isDebug && (self.debug_lose_context = function() {
        y ? y.loseContext() : console.warn("WEBGL_lose_context not supported")
    }, self.debug_restore_context = function() {
        y ? y.restoreContext() : console.warn("WEBGL_lose_context not supported")
    });
    const w = new Set;
    let u = -1;

    function p() {
        u = -1;
        for (const t of w) t.checkFunc() && (t.resolve(), w.delete(t));
        0 < w.size && (u = self.requestAnimationFrame(p))
    }

    function x(t, r, B) {
        if (2 <= B && (B = t.getContext("webgl2", r))) return {
            gl: B,
            version: 2
        };
        B = t.getContext("webgl", r);
        return {
            gl: B,
            version: 1
        }
    }
    f.Gfx.WebGLRenderer = class extends f.Gfx.RendererBase {
        constructor(t, r) {
            super();
            r = Object.assign({}, c, r);
            if (!e.has(r.powerPreference)) throw Error("invalid power preference");
            let B = !1;
            const z = {
                alpha: !!r.alpha,
                depth: !1,
                antialias: !1,
                powerPreference: r.powerPreference,
                failIfMajorPerformanceCaveat: !0
            };
            r.lowLatency && (z.desynchronized = !0, z.preserveDrawingBuffer = !0);
            let C = x(t, z, r.maxWebGLVersion);
            C.gl || (B = !0, z.failIfMajorPerformanceCaveat = !1, C = x(t, z, r.maxWebGLVersion));
            if (!C.gl) throw Error("failed to initialise WebGL context");
            this._gl = t = C.gl;
            this._attribs = t.getContextAttributes();
            r.lowLatency && !this._attribs.desynchronized && console.info("[WebGLRenderer] Low-latency mode specified but is not supported here");
            this._versionString = t.getParameter(t.VERSION);
            this._version =
                C.version;
            this._viewport = a.create();
            this._bbProjectionMatrix = d.create();
            this._isDepthEnabled = this._usesDepthBuffer = !!r.depth;
            this._depthBuffer = null;
            this._isAutoSizeDepthBuffer = !0;
            this._depthBufferHeight = this._depthBufferWidth = 0;
            this._pointBuffer = this._indexBuffer = this._texcoordBuffer = this._vertexBuffer = null;
            this._vertexData = new Float32Array(8E3 * this.GetNumVertexComponents());
            this._indexData = new Uint16Array(12E3);
            this._texcoordData = new Float32Array(16E3);
            this._pointData = new Float32Array(32E3);
            this._lastVertexPtr =
                this._pointPtr = this._texPtr = this._vertexPtr = 0;
            this._spDeviceTransformTextureFill = this._lastProgram = null;
            this._batch = [];
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = null;
            this._lastPointZ = 0;
            this._batchState = f.New(f.Gfx.BatchState, this);
            this._lastColor = f.New(f.Color, 1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 = null;
            this._lastDestBlend = this._lastSrcBlend = 0;
            this._isScissorViewport = !1;
            this._viewportScissorHeight = this._viewportScissorWidth = -1;
            this._lastPointTexCoords = new f.Rect;
            this._maxTextureSize = -1;
            this._highpPrecision = this._maxPointSize = this._minPointSize = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._extensions = [];
            this._hasMajorPerformanceCaveat = B;
            this._isInitialisingAfterContextRestored = !1;
            this._anisotropicExt = this._parallelShaderCompileExt = null;
            this._maxAnisotropy = 0;
            this._isGpuProfilingEnabled = !!r.enableGpuProfiling;
            this._timerExt = null;
            this._allQueryResultBuffers = new Set;
            this._timeQueryStack = [];
            this.FillIndexBufferData(this._indexData)
        }
        IsWebGL() {
            return !0
        }
        async InitState() {
            super.InitState();
            var t = this._gl,
                r = this.GetNumVertexComponents();
            this._lastColor.setRgba(1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 = null;
            this._pointPtr = this._vertexPtr = 0;
            this._lastVertexPtr = 8E3 * r - 4 * r;
            f.clearArray(this._batch);
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = this._lastProgram = null;
            this._lastPointTexCoords.set(0, 0, 1, 1);
            this._lastPointZ = 0;
            r = this._batchState;
            r.currentShader = null;
            r.currentFramebuffer = null;
            a.set(r.currentColor, 1, 1, 1, 1);
            r.clearColor.setRgba(0, 0, 0, 0);
            r.pointTexCoords.set(0,
                0, 1, 1);
            t.clearColor(0, 0, 0, 0);
            t.clear(t.COLOR_BUFFER_BIT);
            t.enable(t.BLEND);
            t.blendFunc(t.ONE, t.ONE_MINUS_SRC_ALPHA);
            this._lastSrcBlend = t.ONE;
            this._lastDestBlend = t.ONE_MINUS_SRC_ALPHA;
            this._InitBlendModes(t);
            t.disable(t.CULL_FACE);
            t.disable(t.STENCIL_TEST);
            t.disable(t.DITHER);
            this._usesDepthBuffer ? (t.enable(t.DEPTH_TEST), t.depthMask(!0), t.depthFunc(t.LEQUAL)) : (t.disable(t.DEPTH_TEST), t.depthMask(!1));
            this._isDepthEnabled = this._usesDepthBuffer;
            this._pointBuffer = t.createBuffer();
            t.bindBuffer(t.ARRAY_BUFFER,
                this._pointBuffer);
            t.bufferData(t.ARRAY_BUFFER, this._pointData.byteLength, t.DYNAMIC_DRAW);
            this._vertexBuffer = t.createBuffer();
            t.bindBuffer(t.ARRAY_BUFFER, this._vertexBuffer);
            t.bufferData(t.ARRAY_BUFFER, this._vertexData.byteLength, t.DYNAMIC_DRAW);
            this._texcoordBuffer = t.createBuffer();
            t.bindBuffer(t.ARRAY_BUFFER, this._texcoordBuffer);
            t.bufferData(t.ARRAY_BUFFER, this._texcoordData.byteLength, t.DYNAMIC_DRAW);
            this._indexBuffer = t.createBuffer();
            t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            t.bufferData(t.ELEMENT_ARRAY_BUFFER,
                this._indexData, t.STATIC_DRAW);
            t.activeTexture(t.TEXTURE0);
            t.bindTexture(t.TEXTURE_2D, null);
            this._maxTextureSize = t.getParameter(t.MAX_TEXTURE_SIZE);
            r = t.getParameter(t.ALIASED_POINT_SIZE_RANGE);
            this._minPointSize = r[0];
            this._maxPointSize = r[1];
            r = t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT);
            const B = t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT);
            this._highpPrecision = r && B ? Math.min(r.precision, B.precision) : 0;
            2048 < this._maxPointSize && (this._maxPointSize = 2048);
            this._extensions = t.getSupportedExtensions();
            if (r = t.getExtension("WEBGL_debug_renderer_info")) this._unmaskedVendor = t.getParameter(r.UNMASKED_VENDOR_WEBGL), this._unmaskedRenderer = t.getParameter(r.UNMASKED_RENDERER_WEBGL);
            this._parallelShaderCompileExt = t.getExtension("KHR_parallel_shader_compile");
            f.isDebug && (y = t.getExtension("WEBGL_lose_context"));
            if (this._isGpuProfilingEnabled)
                if (1 === this.GetWebGLVersionNumber()) {
                    if ("Chromium" !== f.Platform.BrowserEngine || 81 <= f.Platform.BrowserVersionNumber || "undefined" !== typeof document) this._timerExt = t.getExtension("EXT_disjoint_timer_query")
                } else this._timerExt =
                    t.getExtension("EXT_disjoint_timer_query_webgl2") || t.getExtension("EXT_disjoint_timer_query");
            this._maxAnisotropy = (this._anisotropicExt = t.getExtension("EXT_texture_filter_anisotropic")) ? t.getParameter(this._anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            t = f.Gfx.WebGLShaderProgram;
            r = t.GetDefaultVertexShaderSource(!1);
            t = [
                [t.GetTextureFillFragmentShaderSource(), r, "<default>"],
                [t.GetTextureFillFragmentShaderSource(), r, "<default-device-transform>"],
                [t.GetPointFragmentShaderSource(), t.GetPointVertexShaderSource(),
                    "<point>"
                ],
                [t.GetColorFillFragmentShaderSource(), r, "<fill>"],
                [t.GetLinearGradientFillFragmentShaderSource(), r, "<lineargradient>"],
                [t.GetHardEllipseFillFragmentShaderSource(), r, "<hardellipse>"],
                [t.GetHardEllipseOutlineFragmentShaderSource(), r, "<hardellipseoutline>"],
                [t.GetSmoothEllipseFillFragmentShaderSource(), r, "<smoothellipse>"],
                [t.GetSmoothEllipseOutlineFragmentShaderSource(), r, "<smoothellipseoutline>"],
                [t.GetSmoothLineFillFragmentShaderSource(), r, "<smoothline>"],
                [t.GetTilemapFragmentShaderSource(),
                    t.GetDefaultVertexShaderSource(!0), "<tilemap>"
                ]
            ];
            t = await Promise.all(t.map(z => this.CreateShaderProgram({
                src: z[0]
            }, z[1], z[2])));
            this._spTextureFill = t[0];
            this._spDeviceTransformTextureFill = t[1];
            this._spPoints = t[2];
            this._spColorFill = t[3];
            this._spLinearGradientFill = t[4];
            this._spHardEllipseFill = t[5];
            this._spHardEllipseOutline = t[6];
            this._spSmoothEllipseFill = t[7];
            this._spSmoothEllipseOutline = t[8];
            this._spSmoothLineFill = t[9];
            this._spTilemapFill = t[10];
            this.SetTextureFillMode()
        }
        async CreateShaderProgram(t,
            r, B) {
            t = await f.Gfx.WebGLShaderProgram.Create(this, t, r, B);
            this._AddShaderProgram(t);
            return t
        }
        ResetLastProgram() {
            this._lastProgram = null
        }
        SetSize(t, r, B) {
            if (this._width !== t || this._height !== r || B) {
                this.EndBatch();
                B = this._gl;
                var z = this._batchState;
                this._width = t;
                this._height = r;
                t = this.GetScissoredViewportWidth();
                r = this.GetScissoredViewportHeight();
                this._SetViewport(0, 0, t, r);
                this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, t / r);
                this.SetProjectionMatrix(this._bbProjectionMatrix);
                this._spDeviceTransformTextureFill &&
                    (B.useProgram(this._spDeviceTransformTextureFill.GetShaderProgram()), this._spDeviceTransformTextureFill._UpdateDeviceTransformUniforms(this._matP), this._lastProgram = this._spDeviceTransformTextureFill, this._batchState.currentShader = this._spDeviceTransformTextureFill);
                B.bindTexture(B.TEXTURE_2D, null);
                B.activeTexture(B.TEXTURE1);
                B.bindTexture(B.TEXTURE_2D, null);
                B.activeTexture(B.TEXTURE0);
                this._lastTexture1 = this._lastTexture0 = null;
                this._usesDepthBuffer && this._isAutoSizeDepthBuffer && this._SetDepthBufferSize(this._width,
                    this._height);
                this._currentRenderTarget && this._currentRenderTarget._Resize(this._width, this._height);
                B.bindFramebuffer(B.FRAMEBUFFER, null);
                this._currentRenderTarget = null;
                z.currentFramebuffer = null
            }
        }
        _SetDepthBufferSize(t, r) {
            const B = this._gl;
            if (this._depthBuffer) {
                if (this._depthBufferWidth === t && this._depthBufferHeight === r) return;
                B.deleteRenderbuffer(this._depthBuffer)
            }
            this._depthBuffer = B.createRenderbuffer();
            B.bindRenderbuffer(B.RENDERBUFFER, this._depthBuffer);
            B.renderbufferStorage(B.RENDERBUFFER, 2 <=
                this._version ? B.DEPTH_COMPONENT24 : B.DEPTH_COMPONENT16, t, r);
            B.bindRenderbuffer(B.RENDERBUFFER, null);
            this._depthBufferWidth = t;
            this._depthBufferHeight = r
        }
        SetFixedSizeDepthBuffer(t, r) {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !1, this._SetDepthBufferSize(t, r))
        }
        SetAutoSizeDepthBuffer() {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !0, this._SetDepthBufferSize(this._width, this._height))
        }
        SetViewportScissor(t, r) {
            const B = this._gl;
            if (this._width === t && this._height === r) this._isScissorViewport && (this.EndBatch(),
                B.disable(B.SCISSOR_TEST), this._isScissorViewport = !1, this._viewportScissorHeight = this._viewportScissorWidth = -1, this.SetSize(this._width, this._height, !0));
            else if (this._isScissorViewport || (this.EndBatch(), B.enable(B.SCISSOR_TEST), this._isScissorViewport = !0), this._viewportScissorWidth !== t || this._viewportScissorHeight !== r) this.EndBatch(), B.scissor(0, 0, t, r), this._viewportScissorWidth = t, this._viewportScissorHeight = r, this.SetSize(this._width, this._height, !0)
        }
        RemoveViewportScissor() {
            const t = this._gl;
            this._isScissorViewport &&
                (this.EndBatch(), t.disable(t.SCISSOR_TEST), this._isScissorViewport = !1);
            this._viewportScissorHeight = this._viewportScissorWidth = -1
        }
        GetScissoredViewportWidth() {
            return this._isScissorViewport ? this._viewportScissorWidth : this.GetWidth()
        }
        GetScissoredViewportHeight() {
            return this._isScissorViewport ? this._viewportScissorHeight : this.GetHeight()
        }
        _SetViewport(t, r, B, z) {
            const C = this._viewport;
            if (C[0] !== t || C[1] !== r || C[2] !== B || C[3] !== z) this.PushBatch().InitSetViewport(t, r, B, z), a.set(C, t, r, B, z), this._topOfBatch = 0
        }
        SetProjectionMatrix(t) {
            d.exactEquals(this._matP,
                t) || (this.PushBatch().InitSetProjection(t), d.copy(this._matP, t), this._topOfBatch = 0)
        }
        SetDefaultRenderTargetProjectionState() {
            let t, r;
            var B = this._currentRenderTarget;
            null === B || B.IsDefaultSize() && this._isScissorViewport ? (t = this._bbProjectionMatrix, r = this.GetScissoredViewportWidth(), B = this.GetScissoredViewportHeight()) : (t = B.GetProjectionMatrix(), r = B.GetWidth(), B = B.GetHeight());
            this.SetProjectionMatrix(t);
            this._SetViewport(0, 0, r, B)
        }
        SetModelViewMatrix(t) {
            d.exactEquals(this._matMV, t) || (this.PushBatch().InitSetModelView(t),
                d.copy(this._matMV, t), this._topOfBatch = 0)
        }
        GetBatchState() {
            return this._batchState
        }
        PushBatch() {
            const t = this._batch;
            this._batchPtr === t.length && t.push(new f.Gfx.WebGLBatchJob(this._batchState));
            return t[this._batchPtr++]
        }
        EndBatch() {
            0 === this._batchPtr || this.IsContextLost() || (this._WriteBuffers(), this._ExecuteBatch(), this._topOfBatch = this._pointPtr = this._texPtr = this._vertexPtr = this._batchPtr = 0)
        }
        _WriteBuffers() {
            const t = this._gl;
            0 < this._pointPtr && (t.bindBuffer(t.ARRAY_BUFFER, this._pointBuffer), t.bufferSubData(t.ARRAY_BUFFER,
                0, this._pointData.subarray(0, this._pointPtr)));
            0 < this._vertexPtr && (t.bindBuffer(t.ARRAY_BUFFER, this._vertexBuffer), t.bufferSubData(t.ARRAY_BUFFER, 0, this._vertexData.subarray(0, this._vertexPtr)), t.bindBuffer(t.ARRAY_BUFFER, this._texcoordBuffer), t.bufferSubData(t.ARRAY_BUFFER, 0, this._texcoordData.subarray(0, this._texPtr)))
        }
        _ExecuteBatch() {
            const t = this._batch;
            for (let r = 0, B = this._batchPtr; r < B; ++r) t[r].Run()
        }
        GetOpacity() {
            return this._lastColor.getA()
        }
        SetColorRgba(t, r, B, z) {
            const C = this._lastColor;
            C.equalsRgba(t,
                r, B, z) || (C.setRgba(t, r, B, z), this.PushBatch().InitSetColor(C), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetOpacity(t) {
            const r = this._lastColor;
            r.getA() !== t && (r.setA(t), this.PushBatch().InitSetColor(r), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetColor(t) {
            const r = this._lastColor;
            r.equals(t) || (r.set(t), this.PushBatch().InitSetColor(r), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        ResetColor() {
            this.SetColorRgba(1, 1, 1, 1)
        }
        GetColor() {
            return this._lastColor
        }
        SetTexture(t) {
            t !== this._lastTexture0 &&
                (this.PushBatch().InitSetTexture(t), this._lastTexture0 = t, this._topOfBatch = 0)
        }
        _ResetLastTexture() {
            this._lastTexture0 = null
        }
        SetBlendMode(t) {
            t = this._GetBlendByIndex(t);
            this._SetBlend(t[0], t[1])
        }
        SetNamedBlendMode(t) {
            t = this.GetNamedBlend(t);
            this._SetBlend(t.srcBlend, t.destBlend)
        }
        _SetBlend(t, r) {
            if (t !== this._lastSrcBlend || r !== this._lastDestBlend) this.PushBatch().InitSetBlend(t, r), this._lastSrcBlend = t, this._lastDestBlend = r, this._topOfBatch = 0, this._currentStateGroup = null
        }
        IsPremultipliedAlphaBlend() {
            return this._lastSrcBlend ===
                this._gl.ONE && this._lastDestBlend === this._gl.ONE_MINUS_SRC_ALPHA
        }
        SetAlphaBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetNoPremultiplyAlphaBlend() {
            this._SetBlend(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetCopyBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ZERO)
        }
        Rect(t) {
            this.Rect2(t.getLeft(), t.getTop(), t.getRight(), t.getBottom())
        }
        Rect2(t, r, B, z) {
            this.Quad2(t, r, B, r, B, z, t, z)
        }
        _ExtendQuadBatch() {
            let t = this._vertexPtr;
            t >= this._lastVertexPtr && (this.EndBatch(), t = 0);
            1 === this._topOfBatch ?
                this._batch[this._batchPtr - 1]._indexCount += 6 : (this.PushBatch().InitQuad(t, 6), this._topOfBatch = 1)
        }
        _WriteQuadToVertexBuffer(t) {
            t.writeToTypedArray3D(this._vertexData, this._vertexPtr, this._baseZ + this._currentZ);
            this._vertexPtr += 12
        }
        Quad(t) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(t);
            g.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad2(t, r, B, z, C, F, J, G) {
            this._ExtendQuadBatch();
            const I = this._vertexData;
            let L = this._vertexPtr;
            const N = this._baseZ + this._currentZ;
            I[L++] = t;
            I[L++] =
                r;
            I[L++] = N;
            I[L++] = B;
            I[L++] = z;
            I[L++] = N;
            I[L++] = C;
            I[L++] = F;
            I[L++] = N;
            I[L++] = J;
            I[L++] = G;
            I[L++] = N;
            this._vertexPtr = L;
            g.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3(t, r) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(t);
            r.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad4(t, r) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(t);
            r.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D(t, r, B, z, C, F, J, G, I, L, N, S, X) {
            this._ExtendQuadBatch();
            const U = this._vertexData;
            let W = this._vertexPtr;
            const ia = this._baseZ + this._currentZ;
            U[W++] = t;
            U[W++] = r;
            U[W++] = ia + B;
            U[W++] = z;
            U[W++] = C;
            U[W++] = ia + F;
            U[W++] = J;
            U[W++] = G;
            U[W++] = ia + I;
            U[W++] = L;
            U[W++] = N;
            U[W++] = ia + S;
            this._vertexPtr = W;
            X.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D2(t, r, B, z, C, F, J, G, I, L, N, S, X) {
            this._ExtendQuadBatch();
            const U = this._vertexData;
            let W = this._vertexPtr;
            const ia = this._baseZ + this._currentZ;
            U[W++] = t;
            U[W++] = r;
            U[W++] = ia + B;
            U[W++] = z;
            U[W++] = C;
            U[W++] = ia + F;
            U[W++] =
                J;
            U[W++] = G;
            U[W++] = ia + I;
            U[W++] = L;
            U[W++] = N;
            U[W++] = ia + S;
            this._vertexPtr = W;
            X.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        FullscreenQuad(t, r) {
            d.copy(h, this._matP);
            d.copy(l, this._matMV);
            this.SetDefaultRenderTargetProjectionState();
            if (this._isScissorViewport) {
                t = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ() * self.devicePixelRatio, 0, 0, 0);
                this.SetModelViewMatrix(t);
                t = this._viewportScissorWidth / 2;
                var B = this._viewportScissorHeight / 2;
                q.set(-t, B, -t + this._viewportScissorWidth,
                    B - this._viewportScissorHeight);
                n.setFromRect(q);
                q.set(0, 0, this._viewportScissorWidth / this._width, this._viewportScissorHeight / this._height);
                this.Quad3(n, q)
            } else {
                const [F, J] = this.GetRenderTargetSize(this._currentRenderTarget);
                B = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ() * self.devicePixelRatio, 0, 0, 0, J);
                this.SetModelViewMatrix(B);
                if ("crop" === t && this._currentRenderTarget && r) {
                    t = this._width / 2;
                    B = this._height / 2;
                    const G = r.GetWidth();
                    r = r.GetHeight();
                    var z = this._currentRenderTarget.GetWidth(),
                        C = this._currentRenderTarget.GetHeight();
                    z = Math.min(z, G);
                    const I = Math.min(C, r),
                        L = Math.max(r - C, 0);
                    C = Math.max(C - r, 0);
                    q.set(-t, B - C, -t + z, B - I - C);
                    n.setFromRect(q);
                    q.set(0, L, z, I + L);
                    q.divide(G, r);
                    this.Quad3(n, q)
                } else t = F / 2, B = J / 2, this.Rect2(-t, B, t, -B)
            }
            this.SetProjectionMatrix(h);
            this.SetModelViewMatrix(l)
        }
        StartRenderingPoints(t) {
            this._lastPointTexCoords.equals(t) || (this._lastPointTexCoords.copy(t), this.PushBatch().InitSetPointTexCoords(t), this._topOfBatch = 0)
        }
        FinishRenderingPoints() {}
        Point(t, r, B, z) {
            7996 <= this._pointPtr &&
                this.EndBatch();
            let C = this._pointPtr;
            var F = this._baseZ + this._currentZ;
            2 === this._topOfBatch && this._lastPointZ === F ? this._batch[this._batchPtr - 1]._indexCount++ : (this.PushBatch().InitPoints(C, F), this._topOfBatch = 2, this._lastPointZ = F);
            F = this._pointData;
            F[C++] = t;
            F[C++] = r;
            F[C++] = B;
            F[C++] = z;
            this._pointPtr = C
        }
        SetProgram(t) {
            this._lastProgram !== t && (this.PushBatch().InitSetProgram(t), this._lastProgram = t, this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetDeviceTransformTextureFillMode() {
            this.SetProgram(this._spDeviceTransformTextureFill)
        }
        SetGradientColor(t) {
            this.PushBatch().InitSetGradientColor(t);
            this._topOfBatch = 0
        }
        SetEllipseParams(t, r, B = 1) {
            this.PushBatch().InitSetEllipseParams(t, r, B);
            this._topOfBatch = 0
        }
        SetTilemapInfo(t, r, B, z, C, F, J) {
            if (this._lastProgram !== this._spTilemapFill) throw Error("must set tilemap fill mode first");
            this.PushBatch().InitSetTilemapInfo(t, r, B, z, C, F, J);
            this._topOfBatch = 0
        }
        SetProgramParameters(t, r, B, z, C, F, J, G, I, L, N) {
            const S = this._lastProgram;
            var X = S._hasAnyOptionalUniforms;
            const U = !!N.length;
            if (X && !S.AreOptionalUniformsAlreadySetInBatch(r, B, z, C, F, J, G, I, L) || U && !S.AreCustomParametersAlreadySetInBatch(N)) {
                var W =
                    this.PushBatch();
                W.InitSetProgramParameters();
                X && (S.SetOptionalUniformsInBatch(r, B, z, C, F, J, G, I, L), X = W._mat4param, X[0] = F, X[1] = J, r.writeToTypedArray(X, 2), X[6] = G, X[7] = I, B.writeToTypedArray(X, 12), r = W._colorParam, C.writeToTypedArray(r, 0), C = r[1], r[1] = r[3], r[3] = C, z.writeToTypedArray(W._srcOriginRect, 0), W._startIndex = L, S._uSamplerBack.IsUsed() ? W._texParam = t ? t.GetTexture() : null : W._texParam = null);
                U && (S.SetCustomParametersInBatch(N), f.shallowAssignArray(W._shaderParams, N));
                this._topOfBatch = 0
            }
        }
        ClearRgba(t, r,
            B, z) {
            this.PushBatch().InitClearSurface2(t, r, B, z);
            this._topOfBatch = 0
        }
        Clear(t) {
            this.PushBatch().InitClearSurface(t);
            this._topOfBatch = 0
        }
        ClearRect(t, r, B, z) {
            this.ClearRect4(t, r, B, z, 0, 0, 0, 0)
        }
        ClearRect2(t) {
            this.ClearRect4(t.getLeft(), t.getTop(), t.width(), t.height(), 0, 0, 0, 0)
        }
        ClearRect3(t, r) {
            this.ClearRect4(t.getLeft(), t.getTop(), t.width(), t.height(), r.getR(), r.getG(), r.getB(), r.getA())
        }
        ClearRect4(t, r, B, z, C, F, J, G) {
            0 > B || 0 > z || (this.PushBatch().InitClearRect(t, r, B, z, C, F, J, G), this._topOfBatch = 0)
        }
        Start() {}
        Finish() {
            super.Finish();
            this._gl.flush()
        }
        ClearDepth() {
            this._usesDepthBuffer && this._currentRenderTarget && this._currentRenderTarget.HasDepthBuffer() && (this.PushBatch().InitClearDepth(), this._topOfBatch = 0)
        }
        SetDepthEnabled(t) {
            t = !!t;
            this._isDepthEnabled !== t && this._usesDepthBuffer && (this._isDepthEnabled = t, this.PushBatch().InitSetDepthEnabled(t), this._topOfBatch = 0)
        }
        _GetDepthBuffer() {
            return this._depthBuffer
        }
        CheckForQueryResults() {
            for (const t of this._allQueryResultBuffers) t.CheckForResults(this._frameNumber)
        }
        IsContextLost() {
            return !this._gl ||
                this._gl.isContextLost() || this._isInitialisingAfterContextRestored
        }
        OnContextLost() {
            super.OnDeviceOrContextLost();
            f.Gfx.WebGLRendererTexture.OnContextLost();
            f.Gfx.WebGLRenderTarget.OnContextLost();
            f.Gfx.RendererText.OnContextLost();
            for (const t of this._allQueryResultBuffers) t.Clear();
            this._extensions = [];
            this._anisotropicExt = this._parallelShaderCompileExt = this._timerExt = null;
            this._maxAnisotropy = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._depthBuffer = this._spDeviceTransformTextureFill =
                this._lastProgram = null;
            for (const t of this._stateGroups.values()) t.OnContextLost()
        }
        async OnContextRestored() {
            this._isInitialisingAfterContextRestored = !0;
            await this.InitState();
            this._isInitialisingAfterContextRestored = !1;
            for (const t of this._stateGroups.values()) t.OnContextRestored(this);
            this.SetSize(this._width, this._height, !0)
        }
        CreateStaticTexture(t, r) {
            if (this.IsContextLost()) throw Error("context lost");
            this.EndBatch();
            const B = f.New(f.Gfx.WebGLRendererTexture, this);
            B._CreateStatic(t, r);
            return B
        }
        CreateStaticTextureAsync(t,
            r) {
            if (this.IsContextLost()) return Promise.reject("context lost");
            r = Object.assign({}, r);
            const B = r.wrapX && "clamp-to-edge" !== r.wrapX || r.wrapY && "clamp-to-edge" !== r.wrapY;
            if (!f.Supports.ImageBitmapOptions || !this.SupportsNPOTTextures() && B) return f.Supports.ImageBitmap ? createImageBitmap(t).then(z => f.Asyncify(() => this.CreateStaticTexture(z, r))) : t instanceof Blob ? f.BlobToImage(t, !0).then(z => this.CreateStaticTextureAsync(z, r)) : "undefined" !== typeof HTMLImageElement && t instanceof HTMLImageElement && "function" ===
                typeof t.decode ? t.decode().then(() => f.Asyncify(() => this.CreateStaticTexture(t, r))) : f.Asyncify(() => this.CreateStaticTexture(t, r));
            r.premultiplyAlpha = !1;
            return createImageBitmap(t, {
                premultiplyAlpha: "premultiply"
            }).then(z => f.Asyncify(() => this.CreateStaticTexture(z, r)))
        }
        CreateDynamicTexture(t, r, B) {
            this.EndBatch();
            const z = f.New(f.Gfx.WebGLRendererTexture, this);
            z._CreateDynamic(t, r, B);
            return z
        }
        UpdateTexture(t, r, B) {
            this.EndBatch();
            r._Update(t, B)
        }
        DeleteTexture(t) {
            t && (t.SubtractReference(), 0 < t.GetReferenceCount() ||
                (this.EndBatch(), t === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null), t === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null), t._Delete()))
        }
        CreateRenderTarget(t) {
            let r = this._width,
                B = this._height,
                z = !0;
            t && ("number" === typeof t.width && (r = t.width, z = !1), "number" === typeof t.height && (B = t.height, z = !1));
            if (0 >= r || 0 >= B) throw Error("invalid size");
            this.EndBatch();
            const C = f.New(f.Gfx.WebGLRenderTarget, this);
            C._Create(r, B, Object.assign({
                isDefaultSize: z
            }, t));
            this._currentRenderTarget = null;
            this._batchState.currentFramebuffer = null;
            return C
        }
        SetRenderTarget(t) {
            t !== this._currentRenderTarget && (t && t.IsDefaultSize() && t._Resize(this._width, this._height), this.PushBatch().InitSetRenderTarget(t), this._currentRenderTarget = t, this._topOfBatch = 0, this.SetDefaultRenderTargetProjectionState())
        }
        GetRenderTarget() {
            return this._currentRenderTarget
        }
        GetRenderTargetSize(t) {
            return t ? [t.GetWidth(), t.GetHeight()] : [this._width, this._height]
        }
        CopyRenderTarget(t, r = "stretch") {
            2 > this._version || this._currentRenderTarget && 0 < this._currentRenderTarget.GetMultisampling() ? (this.SetCopyBlend(), this.ResetColor(), this.DrawRenderTarget(t, r)) : (this.PushBatch().InitBlitFramebuffer(t, this._currentRenderTarget, r), this._topOfBatch = 0)
        }
        DrawRenderTarget(t, r = "stretch") {
            t = t.GetTexture();
            if (!t) throw Error("not a texture-backed render target");
            this.SetTexture(t);
            this.FullscreenQuad(r, t)
        }
        InvalidateRenderTarget(t) {
            2 >
                this._version || (this.PushBatch().InitInvalidateFramebuffer(t._GetFramebuffer()), this._topOfBatch = 0)
        }
        DeleteRenderTarget(t) {
            this.SetRenderTarget(null);
            this.EndBatch();
            const r = t.GetTexture();
            r === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null);
            r === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null);
            t._Delete()
        }
        async ReadBackRenderTargetToImageData(t,
            r, B) {
            this.EndBatch();
            const z = this._currentRenderTarget;
            if (t) {
                var C = t.GetWidth();
                var F = t.GetHeight();
                var J = t._GetFramebuffer()
            } else C = this.GetWidth(), F = this.GetHeight(), J = null;
            let G = t = 0;
            var I = C,
                L = F;
            B && (t = f.clamp(Math.floor(B.getLeft()), 0, C - 1), G = f.clamp(Math.floor(B.getTop()), 0, F - 1), I = B.width(), I = 0 === I ? C - t : f.clamp(Math.floor(I), 0, C - t), L = B.height(), L = 0 === L ? F - G : f.clamp(Math.floor(L), 0, F - G), G = F - (G + L));
            const N = this._gl;
            N.bindFramebuffer(N.FRAMEBUFFER, J);
            F = () => {
                N.bindFramebuffer(N.FRAMEBUFFER, null);
                this._currentRenderTarget =
                    null;
                this._batchState.currentFramebuffer = null;
                this.SetRenderTarget(z)
            };
            if (!r && 2 <= this.GetWebGLVersionNumber()) {
                N.bindFramebuffer(N.READ_FRAMEBUFFER, J);
                J = N.createBuffer();
                B = I * L * 4;
                C = N.PIXEL_PACK_BUFFER;
                N.bindBuffer(C, J);
                N.bufferData(C, B, N.STREAM_READ);
                N.readPixels(t, G, I, L, N.RGBA, N.UNSIGNED_BYTE, 0);
                N.bindFramebuffer(N.READ_FRAMEBUFFER, null);
                N.bindBuffer(C, null);
                F();
                const S = N.fenceSync(N.SYNC_GPU_COMMANDS_COMPLETE, 0);
                await this._WaitForObjectReady(() => N.getSyncParameter(S, N.SYNC_STATUS) === N.SIGNALED);
                N.deleteSync(S);
                r = new ImageData(I, L);
                N.bindBuffer(C, J);
                N.getBufferSubData(C, 0, new Uint8Array(r.data.buffer), 0, B);
                N.bindBuffer(C, null);
                N.deleteBuffer(J)
            } else r = new ImageData(I, L), N.readPixels(t, G, I, L, N.RGBA, N.UNSIGNED_BYTE, new Uint8Array(r.data.buffer)), F();
            return r
        }
        StartQuery(t) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitStartQuery(t), this._topOfBatch = 0)
        }
        EndQuery(t) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitEndQuery(t), this._topOfBatch = 0)
        }
        _WaitForObjectReady(t) {
            const r = new Promise(B =>
                w.add({
                    resolve: B,
                    checkFunc: t
                })); - 1 === u && (u = self.requestAnimationFrame(p));
            return r
        }
        IsDesynchronized() {
            return !!this._attribs.desynchronized
        }
        GetEstimatedBackBufferMemoryUsage() {
            return this._width * this._height * (this._attribs.alpha ? 4 : 3)
        }
        GetEstimatedRenderBufferMemoryUsage() {
            let t = 0;
            for (const r of f.Gfx.WebGLRenderTarget.allRenderTargets()) r.GetTexture() || (t += r.GetEstimatedMemoryUsage());
            return t
        }
        GetEstimatedTextureMemoryUsage() {
            let t = 0;
            for (const r of f.Gfx.WebGLRendererTexture.allTextures()) t += r.GetEstimatedMemoryUsage();
            return t
        }
        GetEstimatedTotalMemoryUsage() {
            return this.GetEstimatedBackBufferMemoryUsage() + this.GetEstimatedRenderBufferMemoryUsage() + this.GetEstimatedTextureMemoryUsage()
        }
        GetWebGLVersionString() {
            return this._versionString
        }
        GetWebGLVersionNumber() {
            return this._version
        }
        GetDisplayName() {
            return "webgl" + this.GetWebGLVersionNumber()
        }
        SupportsNPOTTextures() {
            return 2 <= this.GetWebGLVersionNumber()
        }
        GetMaxTextureSize() {
            return this._maxTextureSize
        }
        GetMinPointSize() {
            return this._minPointSize
        }
        GetMaxPointSize() {
            return this._maxPointSize
        }
        SupportsHighP() {
            return 0 !==
                this._highpPrecision
        }
        GetHighPPrecision() {
            return this._highpPrecision
        }
        GetUnmaskedVendor() {
            return this._unmaskedVendor
        }
        GetUnmaskedRenderer() {
            return this._unmaskedRenderer
        }
        GetExtensions() {
            return this._extensions
        }
        HasMajorPerformanceCaveat() {
            return this._hasMajorPerformanceCaveat
        }
        SupportsGPUProfiling() {
            return !!this._timerExt
        }
        _GetDisjointTimerQueryExtension() {
            return this._timerExt
        }
        _GetParallelShaderCompileExtension() {
            return this._parallelShaderCompileExt
        }
        _GetAnisotropicExtension() {
            return this._anisotropicExt
        }
        _GetMaxAnisotropy() {
            return this._maxAnisotropy
        }
        _AddQueryResultBuffer(t) {
            this._allQueryResultBuffers.add(t)
        }
        _RemoveQueryResultBuffer(t) {
            this._allQueryResultBuffers.delete(t)
        }
        _GetTimeQueryStack() {
            return this._timeQueryStack
        }
        GetContext() {
            return this._gl
        }
        _InitBlendModes(t) {
            this._InitBlendModeData([
                ["normal",
                    t.ONE, t.ONE_MINUS_SRC_ALPHA
                ],
                ["additive", t.ONE, t.ONE],
                ["xor", t.ONE, t.ONE_MINUS_SRC_ALPHA],
                ["copy", t.ONE, t.ZERO],
                ["destination-over", t.ONE_MINUS_DST_ALPHA, t.ONE],
                ["source-in", t.DST_ALPHA, t.ZERO],
                ["destination-in", t.ZERO, t.SRC_ALPHA],
                ["source-out", t.ONE_MINUS_DST_ALPHA, t.ZERO],
                ["destination-out", t.ZERO, t.ONE_MINUS_SRC_ALPHA],
                ["source-atop", t.DST_ALPHA, t.ONE_MINUS_SRC_ALPHA],
                ["destination-atop", t.ONE_MINUS_DST_ALPHA, t.SRC_ALPHA]
            ])
        }
        CreateRendererText() {
            return f.New(f.Gfx.RendererText, this)
        }
        CreateWebGLText() {
            return this.CreateRendererText()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X;
    let a = null;
    const d = new Set;

    function c(l, n) {
        const q = l[0] - n[0];
        return 0 !== q ? q : l[1] - n[1]
    }
    const e = [],
        g = [];
    let h = !1;
    self.IRuntime = class {
        constructor(l, n) {
            a = l;
            Object.defineProperties(this, {
                assets: {
                    value: a.GetAssetManager().GetIAssetManager(),
                    writable: !1
                },
                objects: {
                    value: n,
                    writable: !1
                },
                globalVars: {
                    value: {},
                    writable: !1
                },
                projectName: {
                    value: a.GetProjectName(),
                    writable: !1
                },
                projectVersion: {
                    value: a.GetProjectVersion(),
                    writable: !1
                },
                storage: {
                    value: new self.IStorage(a),
                    writable: !1
                },
                isInWorker: {
                    value: a.IsInWorker(),
                    writable: !1
                }
            });
            a.UserScriptDispatcher().addEventListener("keydown", q => {
                d.has(q.key) ? q.stopPropagation() : d.add(q.key)
            });
            a.UserScriptDispatcher().addEventListener("keyup", q => d.delete(q.key));
            a.Dispatcher().addEventListener("window-blur", () => d.clear());
            a.IsInWorker() && (self.alert = q => {
                h || (h = !0, console.warn("[Construct 3] alert() was called from a Web Worker, because the project 'Use worker' setting is enabled. This method is not normally available in a Web Worker. Construct has implemented the alert for you, but note that other features may be missing in worker mode. You may wish to disable 'Use worker', or use a more convenient function like console.log(). For more information please refer to the scripting section of the manual."));
                return this.alert(q)
            })
        }
        _InitGlobalVars(l) {
            Object.defineProperties(this.globalVars, l)
        }
        addEventListener(l, n) {
            a.UserScriptDispatcher().addEventListener(l, n)
        }
        removeEventListener(l, n) {
            a.UserScriptDispatcher().removeEventListener(l, n)
        }
        callFunction(l, ...n) {
            b.RequireString(l);
            const q = a.GetEventSheetManager(),
                y = q.GetFunctionBlockByName(l);
            if (!y) throw Error(`cannot find function name '${l}'`);
            if (!y.IsEnabled()) return y.GetDefaultReturnValue();
            if (n.length < y.GetFunctionParameterCount()) throw Error(`not enough function parameters passed for '${l}' (${n.length} passed, ${y.GetFunctionParameterCount()} expected)`);
            const w = y.GetEventBlock();
            l = null;
            var u = q.GetCurrentEvent();
            u && (u = u.GetSolModifiersIncludingParents(), 0 < u.length && (l = u, q.PushCleanSol(u)));
            n = w.RunAsExpressionFunctionCall(w.GetSolModifiersIncludingParents(), y.GetReturnType(), y.GetDefaultReturnValue(), ...n);
            l && q.PopSol(l);
            return n
        }
        setReturnValue(l) {
            const n = a.GetEventStack().GetCurrentExpFuncStackFrame();
            if (!n) throw Error("not in a function which returns a value");
            switch (n.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof l && n.SetFunctionReturnValue(l);
                    break;
                case 2:
                    "string" === typeof l && n.SetFunctionReturnValue(l);
                    break;
                case 3:
                    "number" !== typeof l && "string" !== typeof l || n.SetFunctionReturnValue(l)
            }
        }
        get dt() {
            return a.GetDt()
        }
        get gameTime() {
            return a.GetGameTime()
        }
        get wallTime() {
            return a.GetWallTime()
        }
        random() {
            return a.Random()
        }
        get layout() {
            return a.GetMainRunningLayout().GetILayout()
        }
        getLayout(l) {
            const n = a.GetLayoutManager();
            if ("number" === typeof l || "string" === typeof l) l = n.GetLayout(l);
            else throw new TypeError("expected string or number");
            if (!l) throw Error("invalid layout");
            return l.GetILayout()
        }
        getAllLayouts() {
            return a.GetLayoutManager().GetAllLayouts().map(l => l.GetILayout())
        }
        goToLayout(l) {
            const n = a.GetLayoutManager();
            if ("number" === typeof l || "string" === typeof l) l = n.GetLayout(l);
            else throw new TypeError("expected string or number");
            if (!l) throw Error("invalid layout");
            n.IsPendingChangeMainLayout() || n.ChangeMainLayout(l)
        }
        get keyboard() {
            const l = a._GetCommonScriptInterfaces().keyboard;
            if (!l) throw Error("runtime.keyboard used but Keyboard object missing - add it to your project first");
            return l
        }
        get mouse() {
            const l = a._GetCommonScriptInterfaces().mouse;
            if (!l) throw Error("runtime.mouse used but Mouse object missing - add it to your project first");
            return l
        }
        get touch() {
            const l = a._GetCommonScriptInterfaces().touch;
            if (!l) throw Error("runtime.touch used but Touch object missing - add it to your project first");
            return l
        }
        invokeDownload(l, n) {
            b.RequireString(l);
            b.RequireString(n);
            a.InvokeDownload(l, n)
        }
        getInstanceByUid(l) {
            b.RequireFiniteNumber(l);
            return (l = a.GetInstanceByUID(l)) ? l.GetInterfaceClass() :
                null
        }
        sortZOrder(l, n) {
            b.RequireFunction(n);
            const q = a.GetCurrentLayout();
            for (var y of l) {
                l = a._UnwrapIWorldInstance(y);
                var w = l.GetWorldInfo();
                e.push([w.GetLayer().GetIndex(), w.GetZIndex()]);
                g.push(l)
            }
            if (0 !== e.length) {
                e.sort(c);
                g.sort((u, p) => n(u.GetInterfaceClass(), p.GetInterfaceClass()));
                y = !1;
                for (let u = 0, p = e.length; u < p; ++u) {
                    l = g[u];
                    w = q.GetLayerByIndex(e[u][0]);
                    const x = e[u][1],
                        t = w._GetInstances();
                    t[x] !== l && (t[x] = l, l.GetWorldInfo()._SetLayer(w), w.SetZIndicesChanged(), y = !0)
                }
                y && a.UpdateRender();
                f.clearArray(e);
                f.clearArray(g)
            }
        }
        alert(l) {
            return a.PostComponentMessageToDOMAsync("runtime", "alert", {
                message: l + (a.IsInWorker() ? " [via Web Worker]" : "")
            })
        }
    }
} {
    "use strict";
    const f = self.C3;
    let b = null;
    self.IAssetManager = class {
        constructor(a) {
            b = a;
            Object.defineProperties(this, {
                isWebMOpusSupported: {
                    value: b.IsAudioFormatSupported("audio/webm; codecs=opus"),
                    writable: !1
                }
            })
        }
        fetchText(a) {
            return b.FetchText(a)
        }
        fetchJson(a) {
            return b.FetchJson(a)
        }
        fetchBlob(a) {
            return b.FetchBlob(a)
        }
        fetchArrayBuffer(a) {
            return b.FetchArrayBuffer(a)
        }
        getProjectFileUrl(a) {
            return b.GetProjectFileUrl(a)
        }
        getMediaFileUrl(a) {
            f.IsRelativeURL(a) && (a = a.toLowerCase());
            return b.GetMediaFileUrl(a, b.GetMediaSubfolder())
        }
        get mediaFolder() {
            return b.GetMediaSubfolder()
        }
        async decodeWebMOpus(a,
            d) {
            if (this.isWebMOpusSupported) throw Error("decodeWebMOpus(): not supported because WebM Opus is supported by the platform");
            d = await b.GetRuntime()._WasmDecodeWebMOpus(d);
            d = new Float32Array(d);
            a = a.createBuffer(1, d.length, 48E3);
            a.getChannelData(0).set(d);
            return a
        }
        loadScripts(...a) {
            return b.LoadScripts(...a)
        }
        compileWebAssembly(a) {
            return b.CompileWebAssembly(a)
        }
        loadStyleSheet(a) {
            return b.LoadStyleSheet(a)
        }
    }
} {
    "use strict";
    const f = self.C3X;
    self.IStorage = class {
        constructor(b) {
            this._storage = b._GetProjectStorage()
        }
        getItem(b) {
            f.RequireString(b);
            return this._storage.getItem(b)
        }
        setItem(b, a) {
            f.RequireString(b);
            return this._storage.setItem(b, a)
        }
        removeItem(b) {
            f.RequireString(b);
            return this._storage.removeItem(b)
        }
        clear() {
            return this._storage.clear()
        }
        keys() {
            return this._storage.keys()
        }
    }
} {
    "use strict";
    const f = self.C3X,
        b = new WeakMap;
    self.IObjectClass = class {
        constructor(a) {
            b.set(this, a);
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                }
            });
            a.GetRuntime()._MapScriptInterface(this, a)
        }
        addEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        getAllInstances() {
            return b.get(this).GetInstances().map(a =>
                a.GetInterfaceClass())
        }
        getFirstInstance() {
            const a = b.get(this).GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }
        getPickedInstances() {
            return b.get(this).GetCurrentSol().GetInstances().map(a => a.GetInterfaceClass())
        }
        getFirstPickedInstance() {
            const a = b.get(this).GetCurrentSol().GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }* instances() {
            for (const a of b.get(this).GetInstances()) yield a.GetInterfaceClass()
        }* pickedInstances() {
            for (const a of b.get(this).GetCurrentSol().GetInstances()) yield a.GetInterfaceClass()
        }
        setInstanceClass(a) {
            f.RequireFunction(a);
            if (0 < b.get(this).GetInstanceCount()) throw Error("setInstanceClass() called too late, because instances have already been created - call in runOnStartup");
            b.get(this)._SetUserScriptInstanceClass(a)
        }
        createInstance(a, d, c, e) {
            f.RequireNumber(d);
            f.RequireNumber(c);
            if ("number" !== typeof a && "string" !== typeof a) throw new TypeError("invalid layer parameter");
            const g = b.get(this),
                h = g.GetRuntime();
            a = h.GetMainRunningLayout().GetLayer(a);
            if (!a) throw Error("invalid layer");
            d = h.CreateInstance(g, a, d, c, e);
            e && a.SortAndAddSceneGraphInstancesByZIndex(d);
            e = h.GetEventSheetManager();
            e.BlockFlushingInstances(!0);
            d._TriggerOnCreatedOnSelfAndRelated();
            e.BlockFlushingInstances(!1);
            return d.GetInterfaceClass()
        }
    }
} {
    "use strict";
    const f = self.C3X,
        b = new WeakMap;
    self.ILayout = class {
        constructor(a) {
            b.set(this, a);
            const d = [],
                c = a.GetEffectList(),
                e = c.GetAllEffectTypes().length;
            for (let g = 0; g < e; ++g) d.push(new self.IEffectInstance(c, g));
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                },
                index: {
                    value: a.GetIndex(),
                    writable: !1
                },
                effects: {
                    value: d,
                    writable: !1
                }
            })
        }
        addEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        get width() {
            return b.get(this).GetWidth()
        }
        set width(a) {
            b.get(this).SetWidth(a)
        }
        get height() {
            return b.get(this).GetHeight()
        }
        set height(a) {
            b.get(this).SetHeight(a)
        }
        set scale(a) {
            f.RequireFiniteNumber(a);
            b.get(this).SetScale(a)
        }
        get scale() {
            return b.get(this).GetScale()
        }
        set angle(a) {
            f.RequireFiniteNumber(a);
            b.get(this).SetAngle(a)
        }
        get angle() {
            return b.get(this).GetAngle()
        }
        set scrollX(a) {
            f.RequireNumber(a);
            b.get(this).SetScrollX(a)
        }
        get scrollX() {
            return b.get(this).GetScrollX()
        }
        set scrollY(a) {
            f.RequireNumber(a);
            b.get(this).SetScrollY(a)
        }
        get scrollY() {
            return b.get(this).GetScrollY()
        }
        scrollTo(a, d) {
            f.RequireNumber(a);
            f.RequireNumber(d);
            const c = b.get(this);
            c.SetScrollX(a);
            c.SetScrollY(d)
        }
        getLayer(a) {
            const d = b.get(this);
            if ("number" === typeof a || "string" === typeof a) a = d.GetLayer(a);
            else throw new TypeError("expected string or number");
            return a ? a.GetILayer() : null
        }
        getAllLayers() {
            return b.get(this).GetLayers().map(a => a.GetILayer())
        }
        setVanishingPoint(a, d) {
            f.RequireFiniteNumber(a);
            f.RequireFiniteNumber(d);
            b.get(this).SetVanishingPointXY(a,
                d)
        }
        getVanishingPoint() {
            const a = b.get(this);
            return [a.GetVanishingPointX(), a.GetVanishingPointY()]
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        c = new Map([...d.entries()].map(g => [g[1], g[0]])),
        e = f.New(f.Color);
    self.ILayer = class {
        constructor(g) {
            a.set(this, g);
            const h = [],
                l = g.GetEffectList(),
                n = l.GetAllEffectTypes().length;
            for (let q = 0; q < n; ++q) h.push(new self.IEffectInstance(l, q));
            Object.defineProperties(this, {
                name: {
                    value: g.GetName(),
                    writable: !1
                },
                index: {
                    value: g.GetIndex(),
                    writable: !1
                },
                layout: {
                    value: g.GetLayout().GetILayout(),
                    writable: !1
                },
                effects: {
                    value: h,
                    writable: !1
                }
            })
        }
        static _Unwrap(g) {
            return a.get(g)
        }
        get isVisible() {
            return a.get(this).IsVisible()
        }
        set isVisible(g) {
            a.get(this).SetVisible(g)
        }
        get opacity() {
            return a.get(this).GetOpacity()
        }
        set opacity(g) {
            g = f.clamp(+g, 0, 1);
            isNaN(g) || a.get(this).SetOpacity(g)
        }
        set scale(g) {
            b.RequireFiniteNumber(g);
            a.get(this).SetOwnScale(g)
        }
        get scale() {
            return a.get(this).GetOwnScale()
        }
        set scaleRate(g) {
            b.RequireFiniteNumber(g);
            a.get(this).SetScaleRate(g)
        }
        get scaleRate() {
            return a.get(this).GetScaleRate()
        }
        set angle(g) {
            b.RequireFiniteNumber(g);
            a.get(this).SetAngle(g)
        }
        get angle() {
            return a.get(this).GetOwnAngle()
        }
        set parallaxX(g) {
            b.RequireFiniteNumber(g);
            a.get(this).SetParallaxX(g)
        }
        get parallaxX() {
            return a.get(this).GetParallaxX()
        }
        set parallaxY(g) {
            b.RequireFiniteNumber(g);
            a.get(this).SetParallaxY(g)
        }
        get parallaxY() {
            return a.get(this).GetParallaxY()
        }
        set zElevation(g) {
            b.RequireFiniteNumber(g);
            a.get(this).SetZElevation(g)
        }
        get zElevation() {
            return a.get(this).GetZElevation()
        }
        set isTransparent(g) {
            a.get(this).SetTransparent(g)
        }
        get isTransparent() {
            return a.get(this).IsTransparent()
        }
        set isForceOwnTexture(g) {
            a.get(this).SetForceOwnTexture(g)
        }
        get isForceOwnTexture() {
            return a.get(this).IsForceOwnTexture()
        }
        set blendMode(g) {
            b.RequireString(g);
            g = d.get(g);
            if ("number" !== typeof g) throw Error("invalid blend mode");
            a.get(this).SetBlendMode(g)
        }
        get blendMode() {
            return c.get(a.get(this).GetBlendMode())
        }
        set backgroundColor(g) {
            b.RequireArray(g);
            if (3 > g.length) throw Error("expected 3 elements");
            e.setRgb(g[0], g[1], g[2]);
            g = a.get(this);
            const h = g.GetBackgroundColor();
            h.equalsIgnoringAlpha(e) || (h.copyRgb(e), g.GetRuntime().UpdateRender())
        }
        get backgroundColor() {
            const g = a.get(this).GetBackgroundColor();
            return [g.getR(), g.getG(), g.getB()]
        }
        set scrollX(g) {
            b.RequireNumber(g);
            const h = a.get(this);
            h.SetOwnScrollPositionEnabled(!0);
            h.SetScrollX(g)
        }
        get scrollX() {
            return a.get(this).GetScrollX()
        }
        set scrollY(g) {
            b.RequireNumber(g);
            const h = a.get(this);
            h.SetOwnScrollPositionEnabled(!0);
            h.SetScrollY(g)
        }
        get scrollY() {
            return a.get(this).GetScrollY()
        }
        scrollTo(g, h) {
            b.RequireNumber(g);
            b.RequireNumber(h);
            const l = a.get(this);
            l.SetOwnScrollPositionEnabled(!0);
            l.SetScrollX(g);
            l.SetScrollY(h)
        }
        restoreScrollPosition() {
            a.get(this).SetOwnScrollPositionEnabled(!1)
        }
        getViewport() {
            return a.get(this).GetViewport().toDOMRect()
        }
        cssPxToLayer(g,
            h, l = 0) {
            b.RequireNumber(g);
            b.RequireNumber(h);
            b.RequireNumber(l);
            const n = a.get(this),
                q = n.GetRuntime();
            return n.CanvasCssToLayer(g - q.GetCanvasClientX(), h - q.GetCanvasClientY(), l)
        }
        layerToCssPx(g, h, l = 0) {
            b.RequireNumber(g);
            b.RequireNumber(h);
            b.RequireNumber(l);
            const n = a.get(this),
                q = n.GetRuntime(),
                [y, w] = n.LayerToCanvasCss(g, h, l);
            return [y + q.GetCanvasClientX(), w + q.GetCanvasClientY()]
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(g) {
        let h = d.get(g);
        if (h) return h;
        h = f.New(f.Event.Dispatcher);
        d.set(g, h);
        return h
    }
    let e = null;
    self.IInstance = class {
        constructor() {
            a.set(this, e);
            const g = {
                runtime: {
                    value: e.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                objectType: {
                    value: e.GetObjectClass().GetIObjectClass(),
                    writable: !1
                },
                uid: {
                    value: e.GetUID(),
                    writable: !1
                }
            };
            e._GetInstVarsScriptDescriptor(g);
            e._GetBehaviorsScriptDescriptor(g);
            Object.defineProperties(this, g);
            e.GetRuntime()._MapScriptInterface(this,
                e)
        }
        static _Init(g) {
            e = g
        }
        static _GetInitInst() {
            return e
        }
        _Release() {
            const g = d.get(this);
            g && (g.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(g, h, l) {
            b.RequireString(g);
            b.RequireFunction(h);
            c(this).addEventListener(g, h, l)
        }
        removeEventListener(g, h, l) {
            b.RequireString(g);
            b.RequireFunction(h);
            c(this).removeEventListener(g, h, l)
        }
        dispatchEvent(g) {
            c(this).dispatchEvent(g)
        }
        destroy() {
            const g = a.get(this);
            g.GetRuntime().DestroyInstance(g)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = self.IInstance,
        d = self.ILayer,
        c = new WeakMap,
        e = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        g = new Map([...e.entries()].map(l => [l[1], l[0]])),
        h = f.New(f.Color);
    self.IWorldInstance = class l extends a {
        constructor() {
            super();
            var n = a._GetInitInst();
            c.set(this, n);
            const q = [];
            var y = n.GetWorldInfo();
            if (n = y.GetInstanceEffectList()) {
                y =
                    y.GetObjectClass().GetEffectList().GetAllEffectTypes().length;
                for (let w = 0; w < y; ++w) q.push(new self.IEffectInstance(n, w))
            }
            Object.defineProperties(this, {
                effects: {
                    value: q,
                    writable: !1
                }
            })
        }
        get layout() {
            return c.get(this).GetWorldInfo().GetLayout().GetILayout()
        }
        get layer() {
            return c.get(this).GetWorldInfo().GetLayer().GetILayer()
        }
        get x() {
            return c.get(this).GetWorldInfo().GetX()
        }
        set x(n) {
            n = +n;
            const q = c.get(this).GetWorldInfo();
            isNaN(n) || q.GetX() === n || (q.SetX(n), q.SetBboxChanged())
        }
        get y() {
            return c.get(this).GetWorldInfo().GetY()
        }
        set y(n) {
            n = +n;
            const q = c.get(this).GetWorldInfo();
            isNaN(n) || q.GetY() === n || (q.SetY(n), q.SetBboxChanged())
        }
        get zElevation() {
            return c.get(this).GetWorldInfo().GetZElevation()
        }
        set zElevation(n) {
            n = +n;
            const q = c.get(this),
                y = q.GetWorldInfo();
            isNaN(n) || y.GetZElevation() === n || (y.SetZElevation(n), q.GetRuntime().UpdateRender())
        }
        get totalZElevation() {
            return c.get(this).GetWorldInfo().GetTotalZElevation()
        }
        get width() {
            return c.get(this).GetWorldInfo().GetWidth()
        }
        set width(n) {
            n = +n;
            const q = c.get(this).GetWorldInfo();
            isNaN(n) ||
                q.GetWidth() === n || (q.SetWidth(n), q.SetBboxChanged())
        }
        get height() {
            return c.get(this).GetWorldInfo().GetHeight()
        }
        set height(n) {
            n = +n;
            const q = c.get(this).GetWorldInfo();
            isNaN(n) || q.GetHeight() === n || (q.SetHeight(n), q.SetBboxChanged())
        }
        get angle() {
            return c.get(this).GetWorldInfo().GetAngle()
        }
        set angle(n) {
            n = f.clampAngle(+n);
            const q = c.get(this).GetWorldInfo();
            isNaN(n) || q.GetAngle() === n || (q.SetAngle(n), q.SetBboxChanged())
        }
        get angleDegrees() {
            return f.toDegrees(this.angle)
        }
        set angleDegrees(n) {
            this.angle = f.toRadians(n)
        }
        getBoundingBox() {
            return c.get(this).GetWorldInfo().GetBoundingBox().toDOMRect()
        }
        getBoundingQuad() {
            return c.get(this).GetWorldInfo().GetBoundingQuad().toDOMQuad()
        }
        get isVisible() {
            return c.get(this).GetWorldInfo().IsVisible()
        }
        set isVisible(n) {
            n = !!n;
            const q = c.get(this),
                y = q.GetWorldInfo();
            y.IsVisible() !== n && (y.SetVisible(n), q.GetRuntime().UpdateRender())
        }
        get opacity() {
            return c.get(this).GetWorldInfo().GetOpacity()
        }
        set opacity(n) {
            n = f.clamp(+n, 0, 1);
            const q = c.get(this),
                y = q.GetWorldInfo();
            isNaN(n) || y.GetOpacity() === n || (y.SetOpacity(n), q.GetRuntime().UpdateRender())
        }
        set colorRgb(n) {
            b.RequireArray(n);
            if (3 > n.length) throw Error("expected 3 elements");
            h.setRgb(n[0], n[1], n[2]);
            n = c.get(this);
            const q = n.GetWorldInfo();
            q.GetUnpremultipliedColor().equalsIgnoringAlpha(h) ||
                (q.SetUnpremultipliedColor(h), n.GetRuntime().UpdateRender())
        }
        get colorRgb() {
            const n = c.get(this).GetWorldInfo().GetUnpremultipliedColor();
            return [n.getR(), n.getG(), n.getB()]
        }
        set blendMode(n) {
            b.RequireString(n);
            n = e.get(n);
            if ("number" !== typeof n) throw Error("invalid blend mode");
            const q = c.get(this);
            q.GetWorldInfo().SetBlendMode(n);
            q.GetRuntime().UpdateRender()
        }
        get blendMode() {
            return g.get(c.get(this).GetWorldInfo().GetBlendMode())
        }
        moveToTop() {
            c.get(this).GetWorldInfo().ZOrderMoveToTop()
        }
        moveToBottom() {
            c.get(this).GetWorldInfo().ZOrderMoveToBottom()
        }
        moveToLayer(n) {
            b.RequireInstanceOf(n,
                d);
            n = d._Unwrap(n);
            if (!n) throw Error("invalid layer");
            c.get(this).GetWorldInfo().ZOrderMoveToLayer(n)
        }
        moveAdjacentToInstance(n, q) {
            b.RequireInstanceOf(n, l);
            c.get(this).GetWorldInfo().ZOrderMoveAdjacentToInstance(c.get(n), q)
        }
        get zIndex() {
            return c.get(this).GetWorldInfo().GetZIndex()
        }
        containsPoint(n, q) {
            b.RequireNumber(n);
            b.RequireNumber(q);
            return c.get(this).GetWorldInfo().ContainsPoint(+n, +q)
        }
        testOverlap(n) {
            b.RequireInstanceOf(n, l);
            const q = c.get(this);
            n = c.get(n);
            return q.GetRuntime().GetCollisionEngine().TestOverlap(q,
                n)
        }
        testOverlapSolid() {
            var n = c.get(this);
            return (n = n.GetRuntime().GetCollisionEngine().TestOverlapSolid(n)) ? n.GetInterfaceClass() : null
        }
        getParent() {
            const n = c.get(this).GetParent();
            return n ? n.GetInterfaceClass() : null
        }
        getTopParent() {
            const n = c.get(this).GetTopParent();
            return n ? n.GetInterfaceClass() : null
        }* parents() {
            for (const n of c.get(this).parents()) yield n.GetInterfaceClass()
        }
        getChildCount() {
            return c.get(this).GetChildCount()
        }
        getChildAt(n) {
            return (n = c.get(this).GetChildAt(n)) ? n.GetInterfaceClass() : null
        }* children() {
            for (const n of c.get(this).children()) yield n.GetInterfaceClass()
        }* allChildren() {
            for (const n of c.get(this).allChildren()) yield n.GetInterfaceClass()
        }
        addChild(n,
            q) {
            b.RequireInstanceOf(n, l);
            b.RequireOptionalObject(q);
            q || (q = {});
            const y = c.get(this);
            n = c.get(n);
            y.AddChild(n, q)
        }
        removeChild(n) {
            b.RequireInstanceOf(n, l);
            const q = c.get(this);
            n = c.get(n);
            q.RemoveChild(n)
        }
        removeFromParent() {
            const n = c.get(this);
            n.HasParent() && n.GetParent().RemoveChild(n)
        }
        createMesh(n, q) {
            b.RequireFiniteNumber(n);
            b.RequireFiniteNumber(q);
            c.get(this).GetWorldInfo().CreateMesh(n, q)
        }
        releaseMesh() {
            const n = c.get(this).GetWorldInfo();
            n.ReleaseMesh();
            n.SetBboxChanged()
        }
        setMeshPoint(n, q, y) {
            b.RequireFiniteNumber(n);
            b.RequireFiniteNumber(q);
            b.RequireObject(y);
            const w = c.get(this).GetWorldInfo();
            w.SetMeshPoint(n, q, y) && w.SetBboxChanged()
        }
        getMeshSize() {
            var n = c.get(this).GetWorldInfo();
            if (!n.HasMesh()) return [0, 0];
            n = n.GetSourceMesh();
            return [n.GetHSize(), n.GetVSize()]
        }
    }
} {
    "use strict";
    const f = self.C3X,
        b = new WeakMap;
    self.IDOMInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            b.set(this, self.IInstance._GetInitInst())
        }
        getElement() {
            return b.get(this).GetSdkInstance()._GetElementInDOMMode()
        }
        focus() {
            b.get(this).GetSdkInstance().FocusElement()
        }
        blur() {
            b.get(this).GetSdkInstance().BlurElement()
        }
        setCssStyle(a, d) {
            f.RequireString(a);
            b.get(this).GetSdkInstance().SetElementCSSStyle(a, d)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(g) {
        let h = d.get(g);
        if (h) return h;
        h = f.New(f.Event.Dispatcher);
        d.set(g, h);
        return h
    }
    let e = null;
    self.IBehaviorInstance = class {
        constructor() {
            a.set(this, e);
            const g = {
                runtime: {
                    value: e.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                behavior: {
                    value: e.GetBehavior().GetIBehavior(),
                    writable: !1
                }
            };
            Object.defineProperties(this, g)
        }
        static _Init(g) {
            e = g
        }
        static _GetInitInst() {
            return e
        }
        get instance() {
            return a.get(this).GetObjectInstance().GetInterfaceClass()
        }
        _Release() {
            const g =
                d.get(this);
            g && (g.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(g, h, l) {
            b.RequireString(g);
            b.RequireFunction(h);
            c(this).addEventListener(g, h, l)
        }
        removeEventListener(g, h, l) {
            b.RequireString(g);
            b.RequireFunction(h);
            c(this).removeEventListener(g, h, l)
        }
        dispatchEvent(g) {
            c(this).dispatchEvent(g)
        }
    }
} {
    "use strict";
    const f = new WeakMap;
    self.IBehavior = class {
        constructor(b) {
            f.set(this, b);
            b = {
                runtime: {
                    value: b.GetRuntime().GetIRuntime(),
                    writable: !1
                }
            };
            Object.defineProperties(this, b)
        }
        getAllInstances() {
            return f.get(this).GetInstances().map(b => b.GetInterfaceClass())
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap;
    self.IEffectInstance = class {
        constructor(d, c) {
            a.set(this, d);
            Object.defineProperties(this, {
                index: {
                    value: c,
                    writable: !1
                }
            })
        }
        get name() {
            return a.get(this).GetAllEffectTypes()[this.index].GetName()
        }
        get isActive() {
            return a.get(this).IsEffectIndexActive(this.index)
        }
        set isActive(d) {
            d = !!d;
            const c = a.get(this);
            c.IsEffectIndexActive(this.index) !== d && (c.SetEffectIndexActive(this.index, d), c.UpdateActiveEffects(), c.GetRuntime().UpdateRender())
        }
        setParameter(d, c) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const e = a.get(this);
            var g = e.GetEffectParametersForIndex(this.index);
            if (0 > d || d >= g.length) throw new RangeError("invalid effect parameter index");
            const h = g[d];
            if (h instanceof f.Color) {
                if (!Array.isArray(c) || 3 > c.length) throw new TypeError("expected array with 3 elements");
                d = c[0];
                g = c[1];
                c = c[2];
                if (h.equalsRgb(d, g, c)) return;
                h.setRgb(d, g, c)
            } else {
                if ("number" !== typeof c) throw new TypeError("expected number");
                if (h === c) return;
                g[d] = c
            }
            e.IsEffectIndexActive(this.index) && e.GetRuntime().UpdateRender()
        }
        getParameter(d) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const c = a.get(this).GetEffectParametersForIndex(this.index);
            if (0 > d || d >= c.length) throw new RangeError("invalid effect parameter index");
            d = c[d];
            return d instanceof f.Color ? [d.getR(), d.getG(), d.getB()] : d
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new Set(["local", "remote"]),
        a = new Map([
            ["mp4", "video/mp4"],
            ["webm", "video/webm"],
            ["m4a", "audio/mp4"],
            ["mp3", "audio/mpeg"],
            ["js", "application/javascript"],
            ["wasm", "application/wasm"],
            ["svg", "image/svg+xml"],
            ["html", "text/html"]
        ]);

    function d(e) {
        if (!e) return "";
        e = e.split(".");
        if (2 > e.length) return "";
        e = e[e.length - 1].toLowerCase();
        return a.get(e) || ""
    }

    function c(e) {
        return new Promise((g, h) => {
            const l = document.createElement("script");
            l.onload = g;
            l.onerror = h;
            l.async = !1;
            l.type =
                "module";
            l.src = e;
            document.head.appendChild(l)
        })
    }
    f.AssetManager = class extends f.DefendedBase {
        constructor(e, g) {
            super();
            var h = g.exportType;
            this._runtime = e;
            this._localUrlBlobs = new Map;
            this._localBlobUrlCache = new Map;
            this._localBlobSWUrls = new Map;
            this._isCordova = "cordova" === h;
            this._isiOSCordova = !!g.isiOSCordova;
            this._isFileProtocol = !!g.isFileProtocol;
            this._swClientId = g.swClientId;
            this._supportedAudioFormats = g.supportedAudioFormats || {};
            this._audioFiles = new Map;
            this._preloadSounds = !1;
            this._iconsSubfolder =
                this._fontsSubfolder = this._mediaSubfolder = "";
            this._defaultLoadPolicy = "html5" === h || "scirra-arcade" === h || "instant-games" === h ? "remote" : "local";
            this._allAssets = [];
            this._assetsByUrl = new Map;
            this._webFonts = [];
            this._loadPromises = [];
            this._hasFinishedInitialLoad = !1;
            this._lastLoadProgress = this._assetSizeLoaded = this._totalAssetSizeToLoad = 0;
            this._hasHadErrorLoading = !1;
            this._loadingRateLimiter = f.New(f.RateLimiter, () => this._FireLoadingProgressEvent(), 50);
            this._promiseThrottle = new f.PromiseThrottle(Math.max(f.hardwareConcurrency,
                8));
            if (e = g.previewImageBlobs) {
                (h = g.previewProjectFileBlobs) && Object.assign(e, h);
                (h = g.projectData) && (e["data.json"] = h);
                for (const [l, n] of Object.entries(e)) this._localUrlBlobs.set(l.toLowerCase(), n)
            }
            if (g = g.previewProjectFileSWUrls)
                for (const [l, n] of Object.entries(g)) this._localBlobSWUrls.set(l, n);
            this._iAssetManager = new self.IAssetManager(this)
        }
        Release() {
            this._localUrlBlobs.clear();
            for (const e of this._localBlobUrlCache.values()) e.startsWith("blob:") && URL.revokeObjectURL(e);
            this._localBlobUrlCache.clear();
            for (const e of this._allAssets) e.Release();
            f.clearArray(this._allAssets);
            this._assetsByUrl.clear();
            f.clearArray(this._loadPromises);
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        _SetMediaSubfolder(e) {
            this._mediaSubfolder = e
        }
        GetMediaSubfolder() {
            return this._mediaSubfolder
        }
        _SetFontsSubfolder(e) {
            this._fontsSubfolder = e
        }
        GetFontsSubfolder() {
            return this._fontsSubfolder
        }
        _SetIconsSubfolder(e) {
            this._iconsSubfolder = e
        }
        GetIconsSubfolder() {
            return this._iconsSubfolder
        }
        IsFileProtocol() {
            return this._isFileProtocol
        }
        _HasLocalUrlBlob(e) {
            return this._localUrlBlobs.has(e.toLowerCase())
        }
        _GetLocalUrlBlob(e) {
            return this._localUrlBlobs.get(e.toLowerCase()) ||
                null
        }
        GetLocalUrlAsBlobUrl(e) {
            if (!this._HasLocalUrlBlob(e)) return e;
            e = e.toLowerCase();
            var g = this._localBlobUrlCache.get(e);
            g || (g = this._GetLocalUrlBlob(e), g = URL.createObjectURL(g), this._localBlobUrlCache.set(e, g));
            return g
        }
        FetchBlob(e, g) {
            g = g || this._defaultLoadPolicy;
            const h = this._GetLocalUrlBlob(e);
            if (h) return Promise.resolve(h);
            if (f.IsRelativeURL(e)) {
                const l = e.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlob(l) : "local" === g ? this._promiseThrottle.Add(() => f.FetchBlob(l)) :
                    f.FetchBlob(l)
            }
            return f.FetchBlob(e)
        }
        FetchArrayBuffer(e) {
            const g = this._GetLocalUrlBlob(e);
            if (g) return f.BlobToArrayBuffer(g);
            if (f.IsRelativeURL(e)) {
                const h = e.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsArrayBuffer(h) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => f.FetchArrayBuffer(h)) : f.FetchArrayBuffer(h)
            }
            return f.FetchArrayBuffer(e)
        }
        FetchText(e) {
            const g = this._GetLocalUrlBlob(e);
            if (g) return f.BlobToString(g);
            if (f.IsRelativeURL(e)) {
                const h =
                    e.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsText(h) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => f.FetchText(h)) : f.FetchText(h)
            }
            return f.FetchText(e)
        }
        async FetchJson(e) {
            e = await this.FetchText(e);
            return JSON.parse(e)
        }
        _CordovaFetchLocalFileAs(e, g) {
            return this._runtime.PostComponentMessageToDOMAsync("runtime", "cordova-fetch-local-file", {
                filename: e,
                as: g
            })
        }
        CordovaFetchLocalFileAsText(e) {
            return this._CordovaFetchLocalFileAs(e, "text")
        }
        async CordovaFetchLocalFileAsBlob(e) {
            const g =
                await this._CordovaFetchLocalFileAs(e, "buffer");
            e = d(e);
            return new Blob([g], {
                type: e
            })
        }
        async CordovaFetchLocalFileAsBlobURL(e) {
            e = e.toLowerCase();
            var g = this._localBlobUrlCache.get(e);
            if (g) return g;
            g = await this.CordovaFetchLocalFileAsBlob(e);
            g = URL.createObjectURL(g);
            this._localBlobUrlCache.set(e, g);
            return g
        }
        CordovaFetchLocalFileAsArrayBuffer(e) {
            return this._CordovaFetchLocalFileAs(e, "buffer")
        }
        GetMediaFileUrl(e) {
            return this._HasLocalUrlBlob(e) ? this.GetLocalUrlAsBlobUrl(e) : this._mediaSubfolder + e.toLowerCase()
        }
        GetProjectFileUrl(e,
            g = "") {
            if (f.IsAbsoluteURL(e)) {
                if (g) throw Error("cannot specify subfolder with remote URL");
                return Promise.resolve(e)
            }
            return this._HasLocalUrlBlob(e) ? Promise.resolve(this.GetLocalUrlAsBlobUrl(e)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(g + e) : Promise.resolve(g + e.toLowerCase())
        }
        GetProjectFileIframeUrl(e) {
            if (f.IsAbsoluteURL(e)) return Promise.resolve(e);
            var g = e.indexOf("?"),
                h = -1 === g ? "" : e.substr(g);
            g = -1 === g ? e : e.substr(0, g);
            return this._HasLocalUrlBlob(g) ? (e = this._localBlobSWUrls.get(g) ||
                this.GetLocalUrlAsBlobUrl(g), !e.startsWith("blob:") && this._swClientId && (e = new URL(e), h = new URLSearchParams(h), h.set("__c3_client_id", this._swClientId), e.search = h.toString(), e = e.toString()), Promise.resolve(e)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(g) : Promise.resolve(e.toLowerCase())
        }
        LoadProjectFileUrl(e) {
            return this.GetProjectFileUrl(e)
        }
        LoadImage(e) {
            if (e.loadPolicy && !b.has(e.loadPolicy)) throw Error("invalid load policy");
            let g = this._assetsByUrl.get(e.url);
            if (g) return g;
            g = f.New(f.ImageAsset, this, {
                url: e.url,
                size: e.size || 0,
                loadPolicy: e.loadPolicy || this._defaultLoadPolicy
            });
            this._allAssets.push(g);
            this._assetsByUrl.set(g.GetURL(), g);
            this._hasFinishedInitialLoad || (this._totalAssetSizeToLoad += g.GetSize(), this._loadPromises.push(g.Load().then(() => this._AddLoadedSize(g.GetSize()))));
            return g
        }
        async WaitForAllToLoad() {
            try {
                await Promise.all(this._loadPromises), this._lastLoadProgress = 1
            } catch (e) {
                console.error("Error loading: ", e), this._hasHadErrorLoading = !0, this._FireLoadingProgressEvent()
            }
        }
        SetInitialLoadFinished() {
            this._hasFinishedInitialLoad = !0
        }
        HasHadErrorLoading() {
            return this._hasHadErrorLoading
        }
        _AddLoadedSize(e) {
            this._assetSizeLoaded += e;
            this._loadingRateLimiter.Call()
        }
        _FireLoadingProgressEvent() {
            const e = f.New(f.Event, "loadingprogress");
            this._lastLoadProgress = f.clamp(this._assetSizeLoaded / this._totalAssetSizeToLoad, 0, 1);
            e.progress = this._lastLoadProgress;
            this._runtime.Dispatcher().dispatchEvent(e)
        }
        GetLoadProgress() {
            return this._lastLoadProgress
        }
        _SetWebFonts(e) {
            f.shallowAssignArray(this._webFonts, e);
            this._webFonts.length && this._loadPromises.push(this._LoadWebFonts())
        }
        _LoadWebFonts() {
            if ("undefined" ===
                typeof FontFace) return Promise.resolve();
            const e = [];
            for (const [g, h, l] of this._webFonts) this._totalAssetSizeToLoad += l, e.push(this._LoadWebFont(g, h).then(() => this._AddLoadedSize(l)));
            return Promise.all(e)
        }
        async _LoadWebFont(e, g) {
            try {
                const h = await this.GetProjectFileUrl(g, this._fontsSubfolder),
                    l = new FontFace(e, `url('${h}')`);
                this._runtime.IsInWorker() ? self.fonts.add(l) : document.fonts.add(l);
                await l.load()
            } catch (h) {
                console.warn(`[C3 runtime] Failed to load web font '${e}': `, h)
            }
        }
        IsAudioFormatSupported(e) {
            return !!this._supportedAudioFormats[e]
        }
        _SetAudioFiles(e,
            g) {
            this._preloadSounds = !!g;
            for (const [h, l, n] of e) this._audioFiles.set(h, {
                fileName: h,
                formats: l.map(q => ({
                    type: q[0],
                    fileExtension: q[1],
                    fullName: h + q[1],
                    fileSize: q[2]
                })),
                isMusic: n
            })
        }
        GetPreferredAudioFile(e) {
            e = this._audioFiles.get(e.toLowerCase());
            if (!e) return null;
            let g = null;
            for (const h of e.formats)
                if (g || "audio/webm; codecs=opus" !== h.type || (g = h), this.IsAudioFormatSupported(h.type)) return h;
            return g
        }
        GetProjectAudioFileUrl(e) {
            return (e = this.GetPreferredAudioFile(e)) ? {
                url: this.GetMediaFileUrl(e.fullName),
                type: e.type
            } : null
        }
        GetAudioToPreload() {
            if (this._preloadSounds) {
                const e = [];
                for (const g of this._audioFiles.values()) {
                    if (g.isMusic) continue;
                    const h = this.GetPreferredAudioFile(g.fileName);
                    h && e.push({
                        originalUrl: g.fileName,
                        url: this.GetMediaFileUrl(h.fullName),
                        type: h.type,
                        fileSize: h.fileSize
                    })
                }
                return e
            }
            return []
        }
        GetIAssetManager() {
            return this._iAssetManager
        }
        async LoadScripts(...e) {
            const g = await Promise.all(e.map(h => this.GetProjectFileUrl(h)));
            this._runtime.IsInWorker() ? 1 === e.length ? (e = e[0], await self.c3_import((f.IsRelativeURL(e) ?
                "./" : "") + e)) : (e = e.map(h => `import "${f.IsRelativeURL(h)?"./":""}${h}";`).join("\n"), e = URL.createObjectURL(new Blob([e], {
                type: "application/javascript"
            })), await self.c3_import(e)) : await Promise.all(g.map(h => c(h)))
        }
        async CompileWebAssembly(e) {
            if (WebAssembly.compileStreaming) return e = await this.GetProjectFileUrl(e), await WebAssembly.compileStreaming(fetch(e));
            e = await f.FetchArrayBuffer(e);
            return await WebAssembly.compile(e)
        }
        async LoadStyleSheet(e) {
            e = await this.GetProjectFileUrl(e);
            return await this._runtime.PostComponentMessageToDOMAsync("runtime",
                "add-stylesheet", {
                    url: e
                })
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Asset = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._assetManager = b;
            this._runtime = b.GetRuntime();
            this._url = a.url;
            this._size = a.size;
            this._loadPolicy = a.loadPolicy;
            this._blob = null;
            this._isLoaded = !1;
            this._loadPromise = null
        }
        Release() {
            this._blob = this._runtime = this._assetManager = this._loadPromise = null
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        Load() {
            return "local" === this._loadPolicy || this._blob ? (this._isLoaded = !0, Promise.resolve()) : this._loadPromise ?
                this._loadPromise : this._loadPromise = this._assetManager.FetchBlob(this._url, this._loadPolicy).then(b => {
                    this._isLoaded = !0;
                    this._loadPromise = null;
                    return this._blob = b
                }).catch(b => console.error("Error loading resource: ", b))
        }
        IsLoaded() {
            return this._isLoaded
        }
        GetBlob() {
            return this._blob ? Promise.resolve(this._blob) : this._loadPromise ? this._loadPromise : this._assetManager.FetchBlob(this._url, this._loadPolicy)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new f.PromiseThrottle,
        a = new Set;
    f.ImageAsset = class extends f.Asset {
        constructor(d, c) {
            super(d, c);
            this._webglTexture = this._texturePromise = null;
            this._refCount = 0;
            this._imageHeight = this._imageWidth = -1;
            a.add(this)
        }
        Release() {
            this.ReleaseTexture();
            if (0 !== this._refCount) throw Error("released image asset which still has texture references");
            this._texturePromise = null;
            a.delete(this);
            super.Release()
        }
        static OnWebGLContextLost() {
            for (const d of a) d._texturePromise = null, d._webglTexture =
                null, d._refCount = 0
        }
        LoadStaticTexture(d, c) {
            c = c || {};
            this._refCount++;
            if (this._webglTexture) return Promise.resolve(this._webglTexture);
            if (this._texturePromise) return this._texturePromise;
            c.anisotropy = this._runtime.GetCanvasManager().GetTextureAnisotropy();
            return this._texturePromise = this.GetBlob().then(e => b.Add(() => d.CreateStaticTextureAsync(e, c).then(g => {
                this._texturePromise = null;
                if (0 === this._refCount) return d.DeleteTexture(g), null;
                this._webglTexture = g;
                this._imageWidth = g.GetWidth();
                this._imageHeight =
                    g.GetHeight();
                return this._webglTexture
            }))).catch(e => {
                console.error("Failed to load texture: ", e);
                throw e;
            })
        }
        ReleaseTexture() {
            if (0 >= this._refCount) throw Error("texture released too many times");
            this._refCount--;
            0 === this._refCount && this._webglTexture && (this._webglTexture.GetRenderer().DeleteTexture(this._webglTexture), this._webglTexture = null)
        }
        GetTexture() {
            return this._webglTexture
        }
        GetWidth() {
            return this._imageWidth
        }
        GetHeight() {
            return this._imageHeight
        }
        async LoadToDrawable() {
            const d = await this.GetBlob();
            return f.Supports.ImageBitmapOptions ? await createImageBitmap(d, {
                premultiplyAlpha: "none"
            }) : f.Supports.ImageBitmap ? await createImageBitmap(d) : await f.BlobToImage(d)
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(a, d) {
        return a.GetWorldInfo()._GetLastCachedZIndex() - d.GetWorldInfo()._GetLastCachedZIndex()
    }
    f.RenderCell = class extends f.DefendedBase {
        constructor(a, d, c) {
            super();
            this._grid = a;
            this._x = d;
            this._y = c;
            this._instances = [];
            this._isSorted = !0;
            this._pendingRemoval = new Set;
            this._isAnyPendingRemoval = !1
        }
        Release() {
            f.clearArray(this._instances);
            this._pendingRemoval.clear();
            this._grid = null
        }
        Reset() {
            f.clearArray(this._instances);
            this._isSorted = !0;
            this._pendingRemoval.clear();
            this._isAnyPendingRemoval = !1
        }
        SetChanged() {
            this._isSorted = !1
        }
        IsEmpty() {
            if (!this._instances.length) return !0;
            if (this._instances.length > this._pendingRemoval.size) return !1;
            this._FlushPending();
            return !0
        }
        Insert(a) {
            this._pendingRemoval.has(a) ? (this._pendingRemoval.delete(a), 0 === this._pendingRemoval.size && (this._isAnyPendingRemoval = !1)) : (this._instances.push(a), this._isSorted = 1 === this._instances.length)
        }
        Remove(a) {
            this._pendingRemoval.add(a);
            this._isAnyPendingRemoval = !0;
            50 <= this._pendingRemoval.size && this._FlushPending()
        }
        _FlushPending() {
            this._isAnyPendingRemoval &&
                (this._instances.length === this._pendingRemoval.size ? this.Reset() : (f.arrayRemoveAllInSet(this._instances, this._pendingRemoval), this._pendingRemoval.clear(), this._isAnyPendingRemoval = !1))
        }
        _EnsureSorted() {
            this._isSorted || (this._instances.sort(b), this._isSorted = !0)
        }
        Dump(a) {
            this._FlushPending();
            this._EnsureSorted();
            this._instances.length && a.push(this._instances)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.RenderGrid = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = f.New(f.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = f.New(f.RenderCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            return Math.floor(b / this._cellWidth)
        }
        YToCell(b) {
            return Math.floor(b / this._cellHeight)
        }
        Update(b, a, d) {
            if (a)
                for (let c = a.getLeft(), e = a.getRight(); c <= e; ++c)
                    for (let g =
                            a.getTop(), h = a.getBottom(); g <= h; ++g) {
                        if (d && d.containsPoint(c, g)) continue;
                        const l = this.GetCell(c, g, !1);
                        l && (l.Remove(b), l.IsEmpty() && this._cells.Delete(c, g))
                    }
            if (d)
                for (let c = d.getLeft(), e = d.getRight(); c <= e; ++c)
                    for (let g = d.getTop(), h = d.getBottom(); g <= h; ++g) a && a.containsPoint(c, g) || this.GetCell(c, g, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                e = this.XToCell(b.getRight());
            for (b = this.YToCell(b.getBottom()); d <= e; ++d)
                for (let g = c; g <= b; ++g) {
                    const h = this.GetCell(d,
                        g, !1);
                    h && h.Dump(a)
                }
        }
        MarkRangeChanged(b) {
            let a = b.getLeft();
            const d = b.getTop(),
                c = b.getRight();
            for (b = b.getBottom(); a <= c; ++a)
                for (let e = d; e <= b; ++e) {
                    const g = this.GetCell(a, e, !1);
                    g && g.SetChanged()
                }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new f.Rect,
        a = new f.Quad,
        d = [],
        c = new f.Rect,
        e = new f.Rect,
        g = self.glMatrix,
        h = g.vec3,
        l = g.vec4,
        n = g.mat4,
        q = n.create(),
        y = h.create(),
        w = l.create(),
        u = h.create(),
        p = h.create(),
        x = h.create(),
        t = f.New(f.Vector2);

    function r(z, C) {
        return z.GetWorldInfo()._GetLastCachedZIndex() - C.GetWorldInfo()._GetLastCachedZIndex()
    }

    function B(z, C) {
        return z.GetWorldInfo().GetZElevation() - C.GetWorldInfo().GetZElevation()
    }
    f.Layer = class extends f.DefendedBase {
        constructor(z, C, F) {
            super();
            this._layout = z;
            this._runtime =
                z.GetRuntime();
            this._name = F[0];
            this._index = C;
            this._sid = F[2];
            this._isVisible = !!F[3];
            this._backgroundColor = f.New(f.Color);
            this._backgroundColor.setFromJSON(F[4].map(J => J / 255));
            this._isTransparent = !!F[5];
            this._parallaxX = F[6];
            this._parallaxY = F[7];
            this._color = f.New(f.Color, 1, 1, 1, F[8]);
            this._premultipliedColor = f.New(f.Color);
            this._isForceOwnTexture = F[9];
            this._renderAs3d = F[17];
            this._useRenderCells = F[10];
            this._scaleRate = F[11];
            this._blendMode = F[12];
            this._curRenderTarget = null;
            this._scale = 1;
            this._zElevation =
                F[16];
            this._scrollY = this._scrollX = this._angle = 0;
            this._hasOwnScrollPosition = !1;
            this._viewport = f.New(f.Rect);
            this._viewportZ0 = f.New(f.Rect);
            this._projectionMatrix = n.create();
            this._isProjectionMatrixChanged = !0;
            this._modelViewMatrix = n.create();
            this._isMVMatrixChanged = !0;
            this._viewFrustum = f.New(f.Gfx.ViewFrustum);
            this._isViewFrustumChanged = !0;
            this._startupInitialInstances = [];
            this._initialInstances = [];
            this._createdGlobalUids = [];
            this._initialUIDsToInstanceData = new Map;
            this._instances = [];
            this._anyInstanceZElevated =
                this._zIndicesUpToDate = !1;
            this._effectList = f.New(f.EffectList, this, F[15]);
            this._renderGrid = null;
            this._lastRenderList = [];
            this._isRenderListUpToDate = !1;
            this._lastRenderCells = f.New(f.Rect, 0, 0, -1, -1);
            this._curRenderCells = f.New(f.Rect, 0, 0, -1, -1);
            this._iLayer = new self.ILayer(this);
            this._UpdatePremultipliedColor();
            this._useRenderCells && (this._renderGrid = f.New(f.RenderGrid, this._runtime.GetOriginalViewportWidth(), this._runtime.GetOriginalViewportHeight()));
            for (const J of F[14]) z = this._runtime.GetObjectClassByIndex(J[1]),
                this._layout._AddInitialObjectClass(z), z.GetDefaultInstanceData() || (z.SetDefaultInstanceData(J), z._SetDefaultLayerIndex(this._index)), this._initialInstances.push(J), this._initialUIDsToInstanceData.set(J[2], J);
            f.shallowAssignArray(this._startupInitialInstances, this._initialInstances)
        }
        static Create(z, C, F) {
            return f.New(f.Layer, z, C, F)
        }
        Release() {
            this._runtime = this._layout = null
        }
        GetInitialInstanceData(z) {
            return this._initialUIDsToInstanceData.get(z)
        }
        CreateInitialInstances(z) {
            const C = this._layout.IsFirstVisit();
            let F = 0;
            const J = this._initialInstances;
            for (let I = 0, L = J.length; I < L; ++I) {
                var G = J[I];
                const N = this._runtime.GetObjectClassByIndex(G[1]);
                let S = !0;
                if (!N.HasPersistBehavior() || C) G = this._runtime.CreateInstanceFromData(G, this, !0), z.push(G), N.IsGlobal() && (S = !1, this._createdGlobalUids.push(G.GetUID()));
                S && (J[F] = J[I], ++F)
            }
            f.truncateArray(J, F);
            this._runtime.FlushPendingInstances();
            this.SetZIndicesChanged()
        }
        _AddInstance(z, C) {
            const F = z.GetWorldInfo();
            if (F.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.push(z);
            0 !== F.GetZElevation() && (this._anyInstanceZElevated = !0);
            C && this._useRenderCells && z.GetWorldInfo().SetBboxChanged();
            this.SetZIndicesChanged()
        }
        _MaybeAddInstance(z) {
            this._instances.includes(z) || (this._instances.push(z), 0 !== z.GetWorldInfo().GetZElevation() && (this._anyInstanceZElevated = !0), this.SetZIndicesChanged())
        }
        _PrependInstance(z, C) {
            const F = z.GetWorldInfo();
            if (F.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.unshift(z);
            0 !== F.GetZElevation() &&
                (this._anyInstanceZElevated = !0);
            this.SetZIndicesChanged();
            C && this._useRenderCells && z.GetWorldInfo().SetBboxChanged()
        }
        _RemoveInstance(z, C) {
            const F = this._instances.indexOf(z);
            0 > F || (C && this._useRenderCells && z.GetWorldInfo()._RemoveFromRenderCells(), this._instances.splice(F, 1), this.SetZIndicesChanged(), this._MaybeResetAnyInstanceZElevatedFlag())
        }
        _SetAnyInstanceZElevated() {
            this._anyInstanceZElevated = !0
        }
        _MaybeResetAnyInstanceZElevatedFlag() {
            0 === this._instances.length && (this._anyInstanceZElevated = !1)
        }
        _SortInstancesByLastCachedZIndex(z) {
            if (z) {
                z =
                    new Set;
                for (var C of this._instances) {
                    var F = C.GetWorldInfo()._GetLastCachedZIndex();
                    0 <= F && z.add(F)
                }
                C = -1;
                for (const J of this._instances)
                    if (F = J.GetWorldInfo(), !(0 <= F._GetLastCachedZIndex())) {
                        for (++C; z.has(C);) ++C;
                        F._SetZIndex(C)
                    }
            }
            this._instances.sort(r)
        }
        _Start() {}
        _End() {
            for (const z of this._instances) z.GetObjectClass().IsGlobal() || this._runtime.DestroyInstance(z);
            this._runtime.FlushPendingInstances();
            f.clearArray(this._instances);
            this._anyInstanceZElevated = !1;
            this.SetZIndicesChanged()
        }
        RecreateInitialObjects(z,
            C, F, J, G) {
            const I = this._runtime.GetEventSheetManager(),
                L = this._runtime.GetAllObjectClasses(),
                N = z.IsFamily(),
                S = [];
            for (const W of this._initialInstances) {
                var X = W[0];
                if (C.containsPoint(X[0], X[1])) {
                    X = L[W[1]];
                    if (X !== z)
                        if (N) {
                            if (!z.FamilyHasMember(X)) continue
                        } else continue;
                    X = this;
                    var U = this._runtime.GetCurrentLayout();
                    this.GetLayout() !== U && ((X = U.GetLayerByName(this.GetName())) || (X = U.GetLayerByIndex(this.GetIndex())));
                    U = this._runtime.CreateInstanceFromData(W, X, !1, void 0, void 0, !1, G);
                    X.SortAndAddSceneGraphInstancesByZIndex(U);
                    X = U.GetWorldInfo();
                    X.OffsetXY(F, J);
                    X.SetBboxChanged();
                    I.BlockFlushingInstances(!0);
                    U._TriggerOnCreatedOnSelfAndRelated();
                    I.BlockFlushingInstances(!1);
                    S.push(U)
                }
            }
            return S
        }
        GetInstanceCount() {
            return this._instances.length
        }
        GetLayout() {
            return this._layout
        }
        GetName() {
            return this._name
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        GetRuntime() {
            return this._runtime
        }
        GetDevicePixelRatio() {
            return this._runtime.GetDevicePixelRatio()
        }
        GetEffectList() {
            return this._effectList
        }
        UsesRenderCells() {
            return this._useRenderCells
        }
        GetRenderGrid() {
            return this._renderGrid
        }
        SetRenderListStale() {
            this._isRenderListUpToDate = !1
        }
        IsVisible() {
            return this._isVisible
        }
        SetVisible(z) {
            z = !!z;
            this._isVisible !== z && (this._isVisible = z, this._runtime.UpdateRender())
        }
        SetOwnScrollPositionEnabled(z) {
            z = !!z;
            if (this._hasOwnScrollPosition !== z) {
                if (this._hasOwnScrollPosition = z) z = this.GetLayout(), this._scrollX = z.GetScrollX(), this._scrollY = z.GetScrollY();
                this._SetMVMatrixChanged();
                this._runtime.UpdateRender()
            }
        }
        IsOwnScrollPositionEnabled() {
            return this._hasOwnScrollPosition
        }
        SetScrollX(z) {
            var C = this.GetLayout();
            const F = C.GetScrollLeftBound();
            C = C.GetScrollRightBound();
            z > C && (z = C);
            z < F && (z = F);
            this._scrollX !== z && (this._scrollX = z, this.IsOwnScrollPositionEnabled() && (this._SetMVMatrixChanged(), this._runtime.UpdateRender()))
        }
        SetScrollY(z) {
            var C = this.GetLayout();
            const F = C.GetScrollTopBound();
            C = C.GetScrollBottomBound();
            z > C && (z = C);
            z < F && (z = F);
            this._scrollY !== z && (this._scrollY = z, this.IsOwnScrollPositionEnabled() && (this._SetMVMatrixChanged(), this._runtime.UpdateRender()))
        }
        GetScrollX() {
            return this.IsOwnScrollPositionEnabled() ? this._scrollX : this.GetLayout().GetScrollX()
        }
        GetScrollY() {
            return this.IsOwnScrollPositionEnabled() ?
                this._scrollY : this.GetLayout().GetScrollY()
        }
        GetViewport() {
            return this._viewport
        }
        _GetVanishingPoint() {
            if (this._renderAs3d) {
                const z = this.GetLayout();
                return [z.GetVanishingPointX(), z.GetVanishingPointY()]
            }
            return [.5, .5]
        }
        GetViewportForZ(z, C) {
            var F = this._viewportZ0;
            if (0 === z) C.copy(F);
            else {
                let L = F.midX(),
                    N = F.midY();
                var J = this.Get2DScaleFactorToZ(z);
                const S = F.width() / J;
                F = F.height() / J;
                const [X, U] = this._GetVanishingPoint();
                if (.5 !== X || .5 !== U) {
                    const W = this.GetCameraZ();
                    var G = this._runtime,
                        I = 100 / W;
                    J = (X - .5) * G.GetViewportWidth() /
                        I;
                    G = (U - .5) * G.GetViewportHeight() / I;
                    I = this.GetAngle();
                    0 !== I && (t.set(J, G), t.rotate(I), J = t.getX(), G = t.getY());
                    z = f.unlerp(W, 0, z);
                    L += f.lerp(J, 0, z);
                    N += f.lerp(G, 0, z)
                }
                C.set(L - S / 2, N - F / 2, L + S / 2, N + F / 2)
            }
        }
        GetOpacity() {
            return this._color.getA()
        }
        SetOpacity(z) {
            z = f.clamp(z, 0, 1);
            this._color.getA() !== z && (this._color.setA(z), this._UpdatePremultipliedColor(), this._runtime.UpdateRender())
        }
        _UpdatePremultipliedColor() {
            this._premultipliedColor.copy(this._color);
            this._premultipliedColor.premultiply()
        }
        GetPremultipliedColor() {
            return this._premultipliedColor
        }
        HasDefaultColor() {
            return this._color.equalsRgba(1,
                1, 1, 1)
        }
        GetScaleRate() {
            return this._scaleRate
        }
        SetScaleRate(z) {
            this._scaleRate !== z && (this._scaleRate = z, this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetParallaxX() {
            return this._parallaxX
        }
        GetParallaxY() {
            return this._parallaxY
        }
        SetParallax(z, C) {
            if (this._parallaxX !== z || this._parallaxY !== C)
                if (this._parallaxX = z, this._parallaxY = C, this._SetMVMatrixChanged(), this._runtime.UpdateRender(), 1 !== this._parallaxX || 1 !== this._parallaxY)
                    for (const F of this._instances) F.GetObjectClass()._SetAnyInstanceParallaxed(!0)
        }
        SetParallaxX(z) {
            this.SetParallax(z,
                this.GetParallaxY())
        }
        SetParallaxY(z) {
            this.SetParallax(this.GetParallaxX(), z)
        }
        SetZElevation(z) {
            this._zElevation !== z && (this._zElevation = z, this._runtime.UpdateRender())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetAngle(z) {
            z = f.clampAngle(z);
            this._angle !== z && (this._angle = z, this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetAngle() {
            return f.clampAngle(this._layout.GetAngle() + this._angle)
        }
        GetOwnAngle() {
            return this._angle
        }
        HasInstances() {
            return 0 < this._instances.length
        }
        _GetInstances() {
            return this._instances
        }
        GetBackgroundColor() {
            return this._backgroundColor
        }
        IsTransparent() {
            return this._isTransparent
        }
        SetTransparent(z) {
            z = !!z;
            this._isTransparent !== z && (this._isTransparent = z, this._runtime.UpdateRender())
        }
        IsForceOwnTexture() {
            return this._isForceOwnTexture
        }
        SetForceOwnTexture(z) {
            z = !!z;
            this._isForceOwnTexture !== z && (this._isForceOwnTexture = z, this._runtime.UpdateRender())
        }
        RendersIn2DMode() {
            return !this.GetRuntime().Uses3DFeatures() || !this._renderAs3d
        }
        SetBlendMode(z) {
            this._blendMode !== z && (this._blendMode = z, this._runtime.UpdateRender())
        }
        GetBlendMode() {
            return this._blendMode
        }
        IsTransformCompatibleWith(z) {
            return this === z || this._parallaxX ===
                z._parallaxX && this._parallaxY === z._parallaxY && this._scale === z._scale && this._scaleRate === z._scaleRate && this._angle === z._angle && this.GetScrollX() === z.GetScrollX() && this.GetScrollY() === z.GetScrollY()
        }
        SaveTransform() {
            return {
                parallaxX: this.GetParallaxX(),
                parallaxY: this.GetParallaxY(),
                scale: this.GetOwnScale(),
                scaleRate: this.GetScaleRate(),
                angle: this.GetOwnAngle(),
                hasOwnScroll: this.IsOwnScrollPositionEnabled(),
                scrollX: this.GetScrollX(),
                scrollY: this.GetScrollY()
            }
        }
        RestoreTransform(z) {
            this.SetParallax(z.parallaxX,
                z.parallaxY);
            this.SetOwnScale(z.scale);
            this.SetScaleRate(z.scaleRate);
            this.SetAngle(z.angle);
            this.SetOwnScrollPositionEnabled(z.hasOwnScroll);
            this.SetScrollX(z.scrollX);
            this.SetScrollY(z.scrollY)
        }
        _RemoveAllInstancesInSet(z) {
            0 !== z.size && 0 < f.arrayRemoveAllInSet(this._instances, z) && (this._MaybeResetAnyInstanceZElevatedFlag(), this.SetZIndicesChanged())
        }
        SetZIndicesChanged() {
            this._isRenderListUpToDate = this._zIndicesUpToDate = !1
        }
        _UpdateZIndices() {
            if (!this._zIndicesUpToDate) {
                this._instances.sort(B);
                if (this._useRenderCells)
                    for (let z =
                            0, C = this._instances.length; z < C; ++z) {
                        const F = this._instances[z].GetWorldInfo();
                        F._SetZIndex(z);
                        this._renderGrid.MarkRangeChanged(F.GetRenderCellRange())
                    } else
                        for (let z = 0, C = this._instances.length; z < C; ++z) this._instances[z].GetWorldInfo()._SetZIndex(z);
                this._zIndicesUpToDate = !0
            }
        }
        MoveInstanceAdjacent(z, C, F) {
            var J = z.GetWorldInfo();
            C = C.GetWorldInfo();
            if (J.GetLayer() !== this || C.GetLayer() !== this) throw Error("can't arrange Z order unless both objects on this layer");
            J = J.GetZIndex();
            C = C.GetZIndex();
            if (J ===
                C + (F ? 1 : -1)) return !1;
            f.arrayRemove(this._instances, J);
            J < C && C--;
            F && C++;
            C === this._instances.length ? this._instances.push(z) : this._instances.splice(C, 0, z);
            this.SetZIndicesChanged();
            return !0
        }
        _MergeSortedZArrays(z, C) {
            const F = [];
            let J = 0,
                G = 0,
                I = z.length,
                L = C.length;
            for (; J < I && G < L;) {
                const N = z[J],
                    S = C[G];
                N.GetWorldInfo()._GetLastCachedZIndex() < S.GetWorldInfo()._GetLastCachedZIndex() ? (F.push(N), ++J) : (F.push(S), ++G)
            }
            for (; J < I; ++J) F.push(z[J]);
            for (; G < L; ++G) F.push(C[G]);
            return F
        }
        _MergeAllSortedZArrays_pass(z) {
            const C = [],
                F = z.length;
            for (let J = 0; J < F - 1; J += 2) C.push(this._MergeSortedZArrays(z[J], z[J + 1]));
            1 === F % 2 && C.push(z[F - 1]);
            return C
        }
        _MergeAllSortedZArrays(z) {
            for (; 1 < z.length;) z = this._MergeAllSortedZArrays_pass(z);
            return z[0]
        }
        _GetRenderCellInstancesToDraw() {
            this._UpdateZIndices();
            f.clearArray(d);
            this._renderGrid.QueryRange(this._viewport, d);
            return d.length ? 1 === d.length ? d[0] : this._MergeAllSortedZArrays(d) : []
        }
        _IsOpaque() {
            return !this.UsesOwnTexture() && !this.IsTransparent()
        }
        ShouldDraw() {
            return this.IsVisible() && 0 < this.GetOpacity() &&
                (this.HasInstances() || !this.IsTransparent())
        }
        UsesOwnTexture() {
            return this.IsForceOwnTexture() || !this.HasDefaultColor() || 0 !== this.GetBlendMode() || this._effectList.HasAnyActiveEffect()
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        _CanFastPathDrawLayer(z) {
            if (0 === z.length) return !0;
            if (2 <= z.length) return !1;
            z = z[0].GetShaderProgram();
            return !z.MustPreDraw() && !z.UsesDest() && !z.UsesCrossSampling() && this.HasDefaultColor()
        }
        Get2DScaleFactorToZ(z) {
            const C = this.GetCameraZ();
            return C / (C - z)
        }
        GetCameraZ() {
            return 100 /
                this.GetNormalScale()
        }
        _SetMVMatrixChanged() {
            this._isViewFrustumChanged = this._isMVMatrixChanged = !0
        }
        _GetModelViewMatrix(z) {
            this._isMVMatrixChanged && (this._CalculateModelViewMatrix(z, this._modelViewMatrix, 0, 0, null), this._isMVMatrixChanged = !1);
            return this._modelViewMatrix
        }
        _CalculateModelViewMatrix(z, C, F, J, G) {
            const I = this._runtime,
                L = I.GetRenderScale();
            var N = I.GetParallaxXOrigin(),
                S = I.GetParallaxYOrigin();
            N = (this.GetScrollX() - N) * this._parallaxX + N;
            S = (this.GetScrollY() - S) * this._parallaxY + S;
            this._runtime.IsPixelRoundingEnabled() &&
                (N = Math.round(N), S = Math.round(S));
            F = (N + F) * L;
            J = (S + J) * L;
            S = this.GetCameraZ();
            N = this.GetAngle();
            const [X, U] = this._GetVanishingPoint();
            if (.5 !== X || .5 !== U) {
                var W = 100 / S;
                let ia = (X - .5) * I.GetViewportWidth() * L / W;
                W = (U - .5) * I.GetViewportHeight() * L / W;
                0 !== N && (t.set(ia, W), t.rotate(N), ia = t.getX(), W = t.getY());
                F += ia;
                J += W
            }
            h.set(u, F, J, S);
            h.set(p, F, J, S - 100);
            0 === N ? h.set(x, 0, 1, 0) : h.set(x, Math.sin(N), Math.cos(N), 0);
            z.CalculateLookAtModelView(C, u, p, x, G || I.GetCanvasManager().GetDrawHeight());
            1 !== L && (h.set(y, L, L, 1), n.scale(C,
                C, y))
        }
        _SetProjectionMatrixChanged() {
            this._isViewFrustumChanged = this._isProjectionMatrixChanged = !0
        }
        _GetProjectionMatrix(z) {
            this._isProjectionMatrixChanged && (this._CalculateProjectionMatrix(z), this._isProjectionMatrixChanged = !1);
            return this._projectionMatrix
        }
        _CalculateProjectionMatrix(z) {
            var C = this._runtime.GetCanvasManager();
            const F = C.GetDrawWidth();
            C = C.GetDrawHeight();
            const [J, G] = this._GetVanishingPoint();
            z.CalculatePerspectiveMatrix(this._projectionMatrix, F / C, J, G)
        }
        _SetTransform(z, C = !0, F = 0, J = 0, G =
            0) {
            C && z.SetProjectionMatrix(this._GetProjectionMatrix(z));
            0 === F && 0 === J && 0 === G ? C = this._GetModelViewMatrix(z) : (this._CalculateModelViewMatrix(z, q, F, J, G), C = q);
            z.SetModelViewMatrix(C)
        }
        Draw(z, C, F) {
            const J = this._runtime.GetCanvasManager(),
                G = this.UsesOwnTexture();
            var I = null;
            let L = null;
            if (this._runtime.IsGPUProfiling())
                if (z.IsWebGL()) {
                    const N = J.GetLayerTimingsBuffer(this);
                    N && (L = N.AddTimeElapsedQuery(), z.StartQuery(L))
                } else z.IsWebGPU() && z.WriteTimestamp(2 * (this.GetIndex() + 1));
            G ? (I = {
                    sampling: this._runtime.GetSampling()
                },
                "low" === J.GetCurrentFullscreenScalingQuality() && (I.width = J.GetDrawWidth(), I.height = J.GetDrawHeight()), I = this._runtime.GetAdditionalRenderTarget(I), z.SetRenderTarget(I), this.IsTransparent() ? z.ClearRgba(0, 0, 0, 0) : z.Clear(this._backgroundColor)) : (z.SetRenderTarget(C), this.IsTransparent() || F || z.Clear(this._backgroundColor));
            this._curRenderTarget = I || C;
            this._SetTransform(z);
            z.SetBaseZ(this.GetZElevation());
            z.SetDepthEnabled(this.GetRuntime().Uses3DFeatures() && this._renderAs3d);
            this.GetNormalScale() > Number.EPSILON &&
                (this._UpdateZIndices(), this._useRenderCells && 0 === this.GetZElevation() && !this._anyInstanceZElevated ? this._DrawInstances_RenderCells(z) : this._DrawInstances(z, this._instances));
            z.SetBaseZ(0);
            z.SetCurrentZ(0);
            G && (z.SetDepthEnabled(!1), this._DrawLayerOwnTextureToRenderTarget(z, I, C, F));
            L && z.EndQuery(L);
            this._runtime.IsGPUProfiling() && z.IsWebGPU() && z.WriteTimestamp(2 * (this.GetIndex() + 1) + 1);
            this._curRenderTarget = null
        }
        _DrawInstances(z, C) {
            const F = this._viewport,
                J = this._curRenderTarget,
                G = this.GetLayout().HasVanishingPointOutsideViewport();
            let I = null;
            for (let L = 0, N = C.length; L < N; ++L) {
                const S = C[L];
                if (S === I) continue;
                I = S;
                const X = S.GetWorldInfo();
                X.IsVisible() && X.IsInViewport(F, G) && (X.HasAnyActiveEffect() ? this._DrawInstanceWithEffectsAndRestore(S, X, z, J) : this._DrawInstance(S, X, z))
            }
        }
        _DrawInstances_RenderCells(z) {
            var C = this._renderGrid;
            const F = this._curRenderCells,
                J = this._lastRenderCells,
                G = this._viewport;
            F.set(C.XToCell(G.getLeft()), C.YToCell(G.getTop()), C.XToCell(G.getRight()), C.YToCell(G.getBottom()));
            this._isRenderListUpToDate && F.equals(J) ?
                C = this._lastRenderList : (C = this._GetRenderCellInstancesToDraw(), this._isRenderListUpToDate = !0, J.copy(F));
            this._DrawInstances(z, C);
            C !== this._lastRenderList && f.shallowAssignArray(this._lastRenderList, C)
        }
        _DrawInstance(z, C, F) {
            C = C.GetRendererStateGroup();
            F.GetCurrentStateGroup() !== C && C.Apply();
            z.Draw(F)
        }
        _DrawInstanceWithEffectsAndRestore(z, C, F, J) {
            this._DrawInstanceWithEffects(z, C, F, J, null) && this._SetTransform(F)
        }
        _DrawInstanceWithEffects(z, C, F, J, G) {
            const I = C.GetInstanceEffectList().GetActiveEffectTypes();
            if (1 === I.length) {
                const L = I[0],
                    N = L.GetShaderProgram();
                if (!N.NeedsPostDrawOrExtendsBox() && C.HasDefaultColor() && !z.MustPreDraw()) return this._DrawInstanceWithEffects_FastPath(z, C, L, N, F), !1
            }
            z = f.RenderEffectChain(F, this._runtime, z, J, I, G);
            F.SetBaseZ(this.GetZElevation());
            return z
        }
        _DrawInstanceWithEffects_FastPath(z, C, F, J, G) {
            G.SetProgram(J);
            G.SetBlendMode(C.GetBlendMode());
            J.IsAnimated() && this._runtime.UpdateRender();
            let I = 0,
                L = 0;
            if (J.UsesAnySrcRectOrPixelSize()) {
                const [N, S] = z.GetCurrentSurfaceSize();
                I = 1 /
                    N;
                L = 1 / S;
                (J = z.GetCurrentTexRect()) ? e.copy(J): e.set(0, 0, 0, 0)
            }
            F = C.GetInstanceEffectList().GetEffectParametersForIndex(F.GetIndex());
            G.SetCurrentZ(C.GetZElevation());
            G.SetProgramParameters(null, c, e, e, C.GetBoundingBox(), I, L, this.GetOwnScale(), this.GetAngle(), this._runtime.GetGameTime(), F);
            z.Draw(G)
        }
        _DrawLayerOwnTextureToRenderTarget(z, C, F, J) {
            const G = this._effectList.GetActiveEffectTypes(),
                I = this._runtime;
            if (this._CanFastPathDrawLayer(G)) {
                z.SetRenderTarget(F);
                if (1 === G.length) {
                    var L = G[0];
                    F = L.GetShaderProgram();
                    z.SetProgram(F);
                    e.set(0, 0, 1, 1);
                    L = this._effectList.GetEffectParametersForIndex(L.GetIndex());
                    z.SetProgramParameters(null, c, e, e, this._viewport, 1 / I.GetDrawWidth(), 1 / I.GetDrawHeight(), this.GetNormalScale(), this.GetAngle(), I.GetGameTime(), L);
                    F.IsAnimated() && I.UpdateRender()
                } else z.SetTextureFillMode();
                J && 0 === this._blendMode && this.HasDefaultColor() && 0 === G.length ? z.CopyRenderTarget(C) : (z.SetBlendMode(this._blendMode), z.SetColor(this._premultipliedColor), z.DrawRenderTarget(C));
                z.InvalidateRenderTarget(C);
                I.ReleaseAdditionalRenderTarget(C)
            } else f.RenderEffectChain(z, I, this, F, G)
        }
        GetOwnScale() {
            return this._scale
        }
        SetOwnScale(z) {
            this._scale !== z && (this._scale = z, this._layout.BoundScrolling(), this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetRenderScale() {
            return this.GetNormalScale() * this._runtime.GetRenderScale()
        }
        GetDisplayScale() {
            return this.GetNormalScale() * this._runtime.GetDisplayScale()
        }
        GetNormalScale() {
            return (this._scale * this._layout.GetScale() - 1) * this._scaleRate + 1
        }
        UpdateViewport() {
            var z =
                this._runtime.GetParallaxXOrigin(),
                C = this._runtime.GetParallaxYOrigin(),
                F = (this.GetScrollX() - z) * this._parallaxX + z,
                J = (this.GetScrollY() - C) * this._parallaxY + C;
            z = this.GetNormalScale();
            C = this._runtime.GetViewportWidth() / z;
            z = this._runtime.GetViewportHeight() / z;
            F -= C / 2;
            let G = J - z / 2;
            this._runtime.IsPixelRoundingEnabled() && (F = Math.round(F), G = Math.round(G));
            J = this._viewportZ0;
            J.set(F, G, F + C, G + z);
            C = this.GetAngle();
            0 !== C && (b.copy(J), b.offset(-J.midX(), -J.midY()), a.setFromRotatedRect(b, C), a.getBoundingBox(b), b.offset(J.midX(),
                J.midY()), J.copy(b));
            this.GetViewportForZ(this._zElevation, this._viewport)
        }
        CanvasCssToLayer(z, C, F = 0) {
            return this._CanvasToLayer(z, C, F, this.GetDisplayScale())
        }
        DrawSurfaceToLayer(z, C, F = 0) {
            return this._CanvasToLayer(z, C, F, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _CanvasToLayer(z, C, F, J) {
            var G = this._runtime,
                I = G.GetRenderer();
            const L = this.GetNormalScale(),
                N = G.GetViewportWidth() / L;
            G = G.GetViewportHeight() / L;
            l.set(w, 0, 0, N, G);
            z /= J;
            C = w[3] - C / J;
            J = this._GetProjectionMatrix(I);
            I = this._GetModelViewMatrix(I);
            return f.Gfx.UnprojectScreenToWorldZ(z, C, F, I, J, w, y) ? [y[0], y[1]] : [NaN, NaN]
        }
        CanvasCssToLayer_DefaultTransform(z, C) {
            const F = this._scale,
                J = this._scaleRate,
                G = this._parallaxX,
                I = this._parallaxY,
                L = this._angle;
            this._parallaxY = this._parallaxX = this._scaleRate = this._scale = 1;
            this._angle = 0;
            this._SetMVMatrixChanged();
            z = this.CanvasCssToLayer(z, C);
            this._scale = F;
            this._scaleRate = J;
            this._parallaxX = G;
            this._parallaxY = I;
            this._angle = L;
            this._SetMVMatrixChanged();
            return z
        }
        LayerToCanvasCss(z, C, F = 0) {
            return this._LayerToCanvas(z,
                C, F, this.GetDisplayScale())
        }
        LayerToDrawSurface(z, C, F = 0) {
            return this._LayerToCanvas(z, C, F, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _LayerToCanvas(z, C, F, J) {
            var G = this._runtime,
                I = G.GetRenderer();
            const L = this.GetNormalScale();
            var N = G.GetViewportWidth() / L;
            G = G.GetViewportHeight() / L;
            l.set(w, 0, 0, N, G);
            N = this._GetProjectionMatrix(I);
            I = this._GetModelViewMatrix(I);
            return f.Gfx.Project(z, C, F, I, N, w, y) ? [y[0] * J, (w[3] - y[1]) * J] : [NaN, NaN]
        }
        _GetLayerToDrawSurfaceScale(z, C) {
            z *= this.GetRenderScale() * this.GetDevicePixelRatio();
            0 !== C && (z *= this.Get2DScaleFactorToZ(C));
            return z
        }
        _GetViewFrustum() {
            this._isViewFrustumChanged && (this._UpdateViewFrustum(), this._isViewFrustumChanged = !1);
            return this._viewFrustum
        }
        _UpdateViewFrustum() {
            var z = this._runtime.GetRenderer();
            const C = this._GetProjectionMatrix(z);
            z = this._GetModelViewMatrix(z);
            this._viewFrustum.CalculatePlanes(z, C)
        }
        _SaveToJson() {
            return {
                s: this.GetOwnScale(),
                a: this.GetOwnAngle(),
                vl: this._viewport.getLeft(),
                vt: this._viewport.getTop(),
                vr: this._viewport.getRight(),
                vb: this._viewport.getBottom(),
                v: this.IsVisible(),
                bc: this._backgroundColor.toJSON(),
                t: this.IsTransparent(),
                sx: this._scrollX,
                sy: this._scrollY,
                hosp: this._hasOwnScrollPosition,
                px: this.GetParallaxX(),
                py: this.GetParallaxY(),
                c: this._color.toJSON(),
                sr: this.GetScaleRate(),
                fx: this._effectList.SaveToJson(),
                cg: this._createdGlobalUids
            }
        }
        _LoadFromJson(z) {
            this._scale = z.s;
            this._angle = z.a;
            this._viewport.set(z.vl, z.vt, z.vr, z.vb);
            this._isVisible = !!z.v;
            this._backgroundColor.setFromJSON(z.bc);
            this._isTransparent = !!z.t;
            z.hasOwnProperty("sx") && (this._scrollX =
                z.sx);
            z.hasOwnProperty("sy") && (this._scrollY = z.sy);
            z.hasOwnProperty("hosp") && (this._hasOwnScrollPosition = !!z.hosp);
            this._parallaxX = z.px;
            this._parallaxY = z.py;
            this._color.setFromJSON(z.c);
            this._scaleRate = z.sr;
            f.shallowAssignArray(this._createdGlobalUids, z.cg);
            f.shallowAssignArray(this._initialInstances, this._startupInitialInstances);
            const C = new Set(this._createdGlobalUids);
            let F = 0;
            for (let J = 0, G = this._initialInstances.length; J < G; ++J) C.has(this._initialInstances[J][2]) || (this._initialInstances[F] = this._initialInstances[J],
                ++F);
            f.truncateArray(this._initialInstances, F);
            this._effectList.LoadFromJson(z.fx);
            this._SortInstancesByLastCachedZIndex(!1);
            this.SetZIndicesChanged()
        }
        GetILayer() {
            return this._iLayer
        }
        SortAndAddSceneGraphInstancesByZIndex(z) {
            z.GetWorldInfo();
            if (!this._instances.includes(z))
                if (z.HasChildren()) {
                    const C = [...z.allChildren()];
                    C.push(z);
                    C.sort((F, J) => {
                        F = F.GetWorldInfo().GetSceneGraphZIndex();
                        J = J.GetWorldInfo().GetSceneGraphZIndex();
                        return F - J
                    });
                    for (const F of C) this._AddInstance(F, !0)
                } else this._AddInstance(z, !0)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3Debugger,
        a = f.New(f.Rect),
        d = f.New(f.Rect),
        c = f.New(f.Rect),
        e = f.New(f.Color);
    f.Layout = class extends f.DefendedBase {
        constructor(g, h, l) {
            super();
            this._layoutManager = g;
            this._runtime = g.GetRuntime();
            this._name = l[0];
            this._originalWidth = l[1];
            this._originalHeight = l[2];
            this._width = l[1];
            this._height = l[2];
            this._isUnboundedScrolling = !!l[3];
            this._vanishingPointX = l[4];
            this._vanishingPointY = l[5];
            this._eventSheetName = l[6];
            this._eventSheet = null;
            this._sid = l[7];
            this._index = h;
            this._scrollY =
                this._scrollX = 0;
            this._scale = 1;
            this._angle = 0;
            this._initialObjectClasses = new Set;
            this._textureLoadedTypes = new Set;
            this._textureLoadPendingPromises = new Set;
            this._createdInstances = [];
            this._initialNonWorld = [];
            this._layers = [];
            this._layersByName = new Map;
            this._layersBySid = new Map;
            this._effectList = f.New(f.EffectList, this, l[10]);
            this._curRenderTarget = null;
            this._persistData = {};
            this._isFirstVisit = !0;
            this._iLayout = new self.ILayout(this);
            this._userScriptDispatcher = f.New(f.Event.Dispatcher);
            for (const n of l[8]) g =
                f.Layer.Create(this, this._layers.length, n), this._layers.push(g), this._layersByName.set(g.GetName().toLowerCase(), g), this._layersBySid.set(g.GetSID(), g);
            for (const n of l[9]) {
                l = this._runtime.GetObjectClassByIndex(n[1]);
                if (!l) throw Error("missing nonworld object class");
                l.GetDefaultInstanceData() || l.SetDefaultInstanceData(n);
                this._initialNonWorld.push(n);
                this._AddInitialObjectClass(l)
            }
        }
        Release() {
            for (const g of this._layers) g.Release();
            f.clearArray(this._layers);
            this._textureLoadPendingPromises.clear();
            this._runtime = this._layoutManager = this._eventSheet = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetIndex() {
            return this._index
        }
        GetEffectList() {
            return this._effectList
        }
        GetMinLayerScale() {
            let g = this._layers[0].GetNormalScale();
            for (let h = 1, l = this._layers.length; h < l; ++h) {
                const n = this._layers[h];
                if (0 !== n.GetParallaxX() || 0 !== n.GetParallaxY()) g = Math.min(g, n.GetNormalScale())
            }
            return g
        }
        _GetScrollBoundMarginHorizontal() {
            return .5 * this._runtime.GetViewportWidth() /
                this.GetMinLayerScale()
        }
        _GetScrollBoundMarginVertical() {
            return .5 * this._runtime.GetViewportHeight() / this.GetMinLayerScale()
        }
        GetScrollLeftBound() {
            return this.IsUnboundedScrolling() ? -Infinity : this._GetScrollBoundMarginHorizontal()
        }
        GetScrollRightBound() {
            return this.IsUnboundedScrolling() ? Infinity : this.GetWidth() - this._GetScrollBoundMarginHorizontal()
        }
        GetScrollTopBound() {
            return this.IsUnboundedScrolling() ? -Infinity : this._GetScrollBoundMarginVertical()
        }
        GetScrollBottomBound() {
            return this.IsUnboundedScrolling() ?
                Infinity : this.GetHeight() - this._GetScrollBoundMarginVertical()
        }
        SetScrollX(g) {
            const h = this.GetScrollLeftBound(),
                l = this.GetScrollRightBound();
            g > l && (g = l);
            g < h && (g = h);
            this._scrollX !== g && (this._scrollX = g, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetScrollX() {
            return this._scrollX
        }
        SetScrollY(g) {
            const h = this.GetScrollTopBound(),
                l = this.GetScrollBottomBound();
            g > l && (g = l);
            g < h && (g = h);
            this._scrollY !== g && (this._scrollY = g, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetScrollY() {
            return this._scrollY
        }
        IsUnboundedScrolling() {
            return this._isUnboundedScrolling
        }
        BoundScrolling() {
            this.SetScrollX(this.GetScrollX());
            this.SetScrollY(this.GetScrollY());
            for (const g of this._layers) g.IsOwnScrollPositionEnabled() && (g.SetScrollX(g.GetScrollX()), g.SetScrollY(g.GetScrollY()))
        }
        SetVanishingPointXY(g, h) {
            if (this._vanishingPointX !== g || this._vanishingPointY !== h) this._vanishingPointX = g, this._vanishingPointY = h, this._SetAllLayersProjectionChanged(), this._SetAllLayersMVChanged(), this._runtime.UpdateRender()
        }
        GetVanishingPointX() {
            return this._vanishingPointX
        }
        GetVanishingPointY() {
            return this._vanishingPointY
        }
        HasVanishingPointOutsideViewport() {
            const g =
                this.GetVanishingPointX(),
                h = this.GetVanishingPointY();
            return 0 > g || 1 < g || 0 > h || 1 < h
        }
        GetScale() {
            return this._scale
        }
        SetScale(g) {
            this._scale !== g && (this._scale = g, this._SetAllLayersMVChanged(), this.BoundScrolling(), this._runtime.UpdateRender())
        }
        SetAngle(g) {
            g = f.clampAngle(g);
            this._angle !== g && (this._angle = g, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetAngle() {
            return this._angle
        }
        GetWidth() {
            return this._width
        }
        SetWidth(g) {
            !isFinite(g) || 1 > g || (this._width = g)
        }
        GetHeight() {
            return this._height
        }
        SetHeight(g) {
            !isFinite(g) ||
                1 > g || (this._height = g)
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetLayers() {
            return this._layers
        }
        GetLayerCount() {
            return this._layers.length
        }
        GetLayer(g) {
            return "number" === typeof g ? this.GetLayerByIndex(g) : this.GetLayerByName(g.toString())
        }
        GetLayerByIndex(g) {
            g = f.clamp(Math.floor(g), 0, this._layers.length - 1);
            return this._layers[g]
        }
        GetLayerByName(g) {
            return this._layersByName.get(g.toLowerCase()) || null
        }
        GetLayerBySID(g) {
            return this._layersBySid.get(g) || null
        }
        _SetAllLayersProjectionChanged() {
            for (const g of this._layers) g._SetProjectionMatrixChanged()
        }
        _SetAllLayersMVChanged() {
            for (const g of this._layers) g._SetMVMatrixChanged()
        }
        SaveTransform() {
            return {
                scrollX: this.GetScrollX(),
                scrollY: this.GetScrollY(),
                scale: this.GetScale(),
                angle: this.GetAngle(),
                vpX: this.GetVanishingPointX(),
                vpY: this.GetVanishingPointY()
            }
        }
        RestoreTransform(g) {
            this.SetScrollX(g.scrollX);
            this.SetScrollY(g.scrollY);
            this.SetScale(g.scale);
            this.SetAngle(g.angle);
            this.SetVanishingPointXY(g.vpX, g.vpY)
        }
        HasOpaqueBottomLayer() {
            for (const g of this._layers)
                if (g.ShouldDraw()) return g._IsOpaque();
            return !1
        }
        GetLayoutBackgroundColor() {
            for (const g of this._layers)
                if (g.ShouldDraw() && g._IsOpaque()) return e.copyRgb(g.GetBackgroundColor()),
                    e.setA(1), e;
            e.setRgba(0, 0, 0, 0);
            return e
        }
        IsFirstVisit() {
            return this._isFirstVisit
        }
        _GetInitialObjectClasses() {
            return [...this._initialObjectClasses]
        }
        _AddInitialObjectClass(g) {
            if (g.IsInContainer())
                for (const h of g.GetContainer().GetObjectTypes()) this._initialObjectClasses.add(h);
            else this._initialObjectClasses.add(g)
        }
        _GetTextureLoadedObjectTypes() {
            return [...this._textureLoadedTypes]
        }
        _Load(g, h) {
            if (g === this || !h) return Promise.resolve();
            g && (f.CopySet(this._textureLoadedTypes, g._textureLoadedTypes), g._textureLoadedTypes.clear());
            g = [];
            for (const l of this._initialObjectClasses) this._textureLoadedTypes.has(l) || (g.push(l.LoadTextures(h)), this._textureLoadedTypes.add(l));
            return Promise.all(g)
        }
        async MaybeLoadTexturesFor(g) {
            if (g.IsFamily()) throw Error("cannot load textures for family");
            var h = this._runtime.GetRenderer();
            !h || h.IsContextLost() || this._textureLoadedTypes.has(g) || (this._textureLoadedTypes.add(g), h = g.LoadTextures(h), this._AddPendingTextureLoadPromise(h), await h, g.OnDynamicTextureLoadComplete(), this._runtime.UpdateRender())
        }
        _AddPendingTextureLoadPromise(g) {
            this._textureLoadPendingPromises.add(g);
            g.then(() => this._textureLoadPendingPromises.delete(g)).catch(() => this._textureLoadPendingPromises.delete(g))
        }
        WaitForPendingTextureLoadsToComplete() {
            return Promise.all([...this._textureLoadPendingPromises])
        }
        MaybeUnloadTexturesFor(g) {
            if (g.IsFamily() || 0 < g.GetInstanceCount()) throw Error("cannot unload textures");
            const h = this._runtime.GetRenderer();
            h && this._textureLoadedTypes.has(g) && (this._textureLoadedTypes.delete(g), g.ReleaseTextures(h))
        }
        _Unload(g, h) {
            if (g !== this && h)
                for (const l of this._textureLoadedTypes) l.IsGlobal() ||
                    g._initialObjectClasses.has(l) || (l.ReleaseTextures(), this._textureLoadedTypes.delete(l))
        }
        _OnWebGLContextLost() {
            this._textureLoadedTypes.clear()
        }
        async _StartRunning(g) {
            const h = this._runtime,
                l = this._layoutManager,
                n = h.GetEventSheetManager();
            this._eventSheetName && (this._eventSheet = n.GetEventSheetByName(this._eventSheetName), this._eventSheet._UpdateDeepIncludes());
            l._SetMainRunningLayout(this);
            this._width = this._originalWidth;
            this._height = this._originalHeight;
            this._scrollX = h.GetOriginalViewportWidth() /
                2;
            this._scrollY = h.GetOriginalViewportHeight() / 2;
            this.BoundScrolling();
            this._MoveGlobalObjectsToThisLayout(g);
            this._runtime.SetUsingCreatePromises(!0);
            this._CreateInitialInstances();
            this._isFirstVisit || this._CreatePersistedInstances();
            this._CreateAndLinkContainerInstances(this._createdInstances);
            this._CreateInitialNonWorldInstances();
            l.ClearPendingChangeLayout();
            h.FlushPendingInstances();
            this._runtime.SetUsingCreatePromises(!1);
            const q = this._runtime.GetCreatePromises();
            await Promise.all(q);
            f.clearArray(q);
            if (!h.IsLoadingState()) {
                for (const y of this._createdInstances) y.SetupInitialSceneGraphConnections();
                for (const y of this._createdInstances) y._TriggerOnCreated()
            }
            f.clearArray(this._createdInstances);
            await Promise.all([...this._initialObjectClasses].map(y => y.PreloadTexturesWithInstances(this._runtime.GetRenderer())));
            g && (h.Dispatcher().dispatchEvent(new f.Event("beforefirstlayoutstart")), await h.DispatchUserScriptEventAsyncWait(new f.Event("beforeprojectstart")));
            await this.DispatchUserScriptEventAsyncWait(new f.Event("beforelayoutstart"));
            h.IsLoadingState() || await h.TriggerAsync(f.Plugins.System.Cnds.OnLayoutStart, null, null);
            await this.DispatchUserScriptEventAsyncWait(new f.Event("afterlayoutstart"));
            g && (h.Dispatcher().dispatchEvent(new f.Event("afterfirstlayoutstart")), await h.DispatchUserScriptEventAsyncWait(new f.Event("afterprojectstart")));
            n._RunQueuedTriggers(l);
            await this.WaitForPendingTextureLoadsToComplete();
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged();
            this._isFirstVisit = !1
        }
        _MoveGlobalObjectsToThisLayout(g) {
            for (const l of this._runtime.GetAllObjectClasses())
                if (!l.IsFamily() &&
                    l.IsWorldType())
                    for (const n of l.GetInstances()) {
                        const q = n.GetWorldInfo();
                        var h = q.GetLayer();
                        h = f.clamp(h.GetIndex(), 0, this._layers.length - 1);
                        h = this._layers[h];
                        q._SetLayer(h);
                        h._MaybeAddInstance(n)
                    }
            if (!g)
                for (const l of this._layers) l._SortInstancesByLastCachedZIndex(!1)
        }
        _CreateInitialInstances() {
            for (const g of this._layers) g.CreateInitialInstances(this._createdInstances), g.UpdateViewport(), g._Start()
        }
        _CreatePersistedInstances() {
            let g = !1;
            for (const [l, n] of Object.entries(this._persistData)) {
                const q =
                    this._runtime.GetObjectClassBySID(parseInt(l, 10));
                if (q && !q.IsFamily() && q.HasPersistBehavior()) {
                    for (const y of n) {
                        var h = null;
                        if (q.IsWorldType() && (h = this.GetLayerBySID(y.w.l), !h)) continue;
                        h = this._runtime.CreateInstanceFromData(q, h, !1, 0, 0, !0);
                        h.LoadFromJson(y);
                        g = !0;
                        this._createdInstances.push(h)
                    }
                    f.clearArray(n)
                }
            }
            for (const l of this._layers) l._SortInstancesByLastCachedZIndex(!0), l.SetZIndicesChanged();
            g && (this._runtime.FlushPendingInstances(), this._runtime._RefreshUidMap())
        }
        _CreateAndLinkContainerInstances(g) {
            for (const l of g) {
                if (!l.IsInContainer()) continue;
                const n = l.GetWorldInfo(),
                    q = l.GetIID();
                for (const y of l.GetObjectClass().GetContainer().objectTypes())
                    if (y !== l.GetObjectClass()) {
                        var h = y.GetInstances();
                        h.length > q ? l._AddSibling(h[q]) : (h = n ? this._runtime.CreateInstanceFromData(y, n.GetLayer(), !0, n.GetX(), n.GetY(), !0) : this._runtime.CreateInstanceFromData(y, null, !0, 0, 0, !0), this._runtime.FlushPendingInstances(), y._UpdateIIDs(), l._AddSibling(h), g.push(h))
                    }
            }
        }
        _CreateInitialNonWorldInstances() {
            for (const g of this._initialNonWorld) this._runtime.GetObjectClassByIndex(g[1]).IsInContainer() ||
                this._runtime.CreateInstanceFromData(g, null, !0)
        }
        _CreateGlobalNonWorlds() {
            const g = [],
                h = this._initialNonWorld;
            let l = 0;
            for (let n = 0, q = h.length; n < q; ++n) {
                const y = h[n],
                    w = this._runtime.GetObjectClassByIndex(y[1]);
                w.IsGlobal() ? w.IsInContainer() && w.GetContainer().HasAnyWorldType() || g.push(this._runtime.CreateInstanceFromData(y, null, !0)) : (h[l] = y, ++l)
            }
            f.truncateArray(h, l);
            this._runtime.FlushPendingInstances();
            this._CreateAndLinkContainerInstances(g)
        }
        RecreateInitialObjects(g, h, l, n, q, y) {
            if (l) return l.RecreateInitialObjects(g,
                h, n, q, y);
            l = [];
            for (const w of this._layers) l.push(w.RecreateInitialObjects(g, h, n, q, y));
            return l.flat()
        }
        async _StopRunning() {
            const g = this._layoutManager;
            this._runtime.IsLoadingState() || await this._runtime.TriggerAsync(f.Plugins.System.Cnds.OnLayoutEnd, null, null);
            g.SetIsEndingLayout(!0);
            this._runtime.GetEventSheetManager().ClearAllScheduledWaits();
            this._isFirstVisit || this._SavePersistData();
            for (const h of this._layers) h._End();
            for (const h of this._runtime.GetAllObjectClasses())
                if (!(h.IsGlobal() || h.IsWorldType() ||
                        h.GetPlugin().IsSingleGlobal() || h.IsFamily())) {
                    for (const l of h.GetInstances()) this._runtime.DestroyInstance(l);
                    this._runtime.FlushPendingInstances()
                }
            g.SetIsEndingLayout(!1);
            g.GetMainRunningLayout() === this && g._SetMainRunningLayout(null)
        }
        _SaveInstanceToPersist(g) {
            const h = g.GetObjectClass().GetSID().toString();
            this._persistData.hasOwnProperty(h) || (this._persistData[h] = []);
            this._persistData[h].push(g.SaveToJson())
        }
        _SavePersistData() {
            for (const g of this._layers) {
                g._UpdateZIndices();
                for (const h of g._GetInstances()) {
                    const l =
                        h.GetObjectClass();
                    !l.IsGlobal() && l.HasPersistBehavior() && this._SaveInstanceToPersist(h)
                }
            }
        }
        ResetPersistData() {
            this._persistData = {};
            this._isFirstVisit = !0
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        UsesOwnTexture() {
            return "low" === this._runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality() || this._runtime.UsesAnyBackgroundBlending() || "low-latency" === this._runtime.GetCompositingMode() || this._effectList.HasAnyActiveEffect() || this._runtime.GetRenderer().IsWebGL() && this._runtime.Uses3DFeatures()
        }
        _CanFastPathDrawLayout(g) {
            return 0 ===
                g.length ? !0 : 2 <= g.length ? !1 : !g[0].GetShaderProgram().MustPreDraw()
        }
        Draw(g) {
            var h = this._runtime.GetCanvasManager();
            const l = this.UsesOwnTexture();
            var n = null;
            l ? ("low-latency" !== this._runtime.GetCompositingMode() && (g.SetRenderTarget(null), g.ClearRgba(0, 0, 0, 0)), n = {
                    sampling: this._runtime.GetSampling(),
                    isSampled: g.IsWebGPU() || this._runtime.UsesAnyBackgroundBlending() || this._effectList.HasAnyActiveEffect()
                }, "low" === h.GetCurrentFullscreenScalingQuality() && (n.width = h.GetDrawWidth(), n.height = h.GetDrawHeight()),
                n = this._runtime.GetAdditionalRenderTarget(n), g.SetRenderTarget(n)) : g.SetRenderTarget(null);
            g.Clear(this.GetLayoutBackgroundColor());
            this._runtime.Uses3DFeatures() && g.ClearDepth();
            this._curRenderTarget = n;
            h = !0;
            for (const q of this._layers) q.UpdateViewport(), q.ShouldDraw() && (q.Draw(g, n, h), h = !1);
            l && (g.SetDepthEnabled(!1), this._DrawLayoutOwnTextureToRenderTarget(g, n));
            this._curRenderTarget = null
        }
        _DrawLayoutOwnTextureToRenderTarget(g, h) {
            const l = this._effectList.GetActiveEffectTypes(),
                n = this._runtime;
            if (this._CanFastPathDrawLayout(l)) {
                g.SetRenderTarget(null);
                if (1 === l.length) {
                    var q = l[0];
                    const y = q.GetShaderProgram();
                    g.SetProgram(y);
                    d.set(0, 0, 1, 1);
                    c.set(0, 0, n.GetViewportWidth(), n.GetViewportHeight());
                    q = this._effectList.GetEffectParametersForIndex(q.GetIndex());
                    g.SetProgramParameters(null, a, d, d, c, 1 / n.GetDrawWidth(), 1 / n.GetDrawHeight(), this.GetScale(), this.GetAngle(), n.GetGameTime(), q);
                    y.IsAnimated() && n.UpdateRender()
                } else g.SetTextureFillMode();
                0 === l.length ? g.CopyRenderTarget(h) : (g.SetAlphaBlend(), g.ResetColor(), g.DrawRenderTarget(h));
                g.InvalidateRenderTarget(h);
                n.ReleaseAdditionalRenderTarget(h)
            } else f.RenderEffectChain(g, n, this, null, l)
        }
        _SaveToJson() {
            const g = {
                sx: this.GetScrollX(),
                sy: this.GetScrollY(),
                s: this.GetScale(),
                a: this.GetAngle(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                vpX: this.GetVanishingPointX(),
                vpY: this.GetVanishingPointY(),
                fv: this._isFirstVisit,
                persist: this._persistData,
                fx: this._effectList.SaveToJson(),
                layers: {}
            };
            for (const h of this._layers) g.layers[h.GetSID().toString()] = h._SaveToJson();
            return g
        }
        _LoadFromJson(g) {
            this._scrollX = g.sx;
            this._scrollY =
                g.sy;
            this._scale = g.s;
            this._angle = g.a;
            this._width = g.w;
            this._height = g.h;
            g.hasOwnProperty("vpX") && (this._vanishingPointX = g.vpX);
            g.hasOwnProperty("vpY") && (this._vanishingPointY = g.vpY);
            this._isFirstVisit = !!g.fv;
            this._persistData = g.persist;
            this._effectList.LoadFromJson(g.fx);
            for (const [h, l] of Object.entries(g.layers)) g = parseInt(h, 10), (g = this.GetLayerBySID(g)) && g._LoadFromJson(l);
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged()
        }
        GetILayout() {
            return this._iLayout
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(g) {
            g.layout =
                this.GetILayout();
            var h = this._runtime;
            (h = h.IsDebug() && !h.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(g);
            h && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(g) {
            g.layout = this.GetILayout();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(g)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.LayoutManager = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allLayouts = [];
            this._layoutsByName = new Map;
            this._layoutsBySid = new Map;
            this._mainRunningLayout = null;
            this._runningSubLayouts = [];
            this._firstLayout = null;
            this._isEndingLayout = 0;
            this._pendingChangeLayout = null
        }
        Release() {
            this._pendingChangeLayout = this._firstLayout = this._mainRunningLayout = this._runtime = null;
            f.clearArray(this._allLayouts);
            this._layoutsByName.clear();
            this._layoutsBySid.clear();
            f.clearArray(this._runningSubLayouts)
        }
        Create(b) {
            b = f.New(f.Layout, this, this._allLayouts.length, b);
            this._allLayouts.push(b);
            this._layoutsByName.set(b.GetName().toLowerCase(), b);
            this._layoutsBySid.set(b.GetSID(), b)
        }
        GetRuntime() {
            return this._runtime
        }
        SetFirstLayout(b) {
            this._firstLayout = b
        }
        GetFirstLayout() {
            if (this._firstLayout) return this._firstLayout;
            if (this._allLayouts.length) return this._allLayouts[0];
            throw Error("no first layout");
        }
        GetLayoutByName(b) {
            return this._layoutsByName.get(b.toLowerCase()) ||
                null
        }
        GetLayoutBySID(b) {
            return this._layoutsBySid.get(b) || null
        }
        GetLayoutByIndex(b) {
            b = f.clamp(Math.floor(b), 0, this._allLayouts.length - 1);
            return this._allLayouts[b]
        }
        GetLayout(b) {
            return "number" === typeof b ? this.GetLayoutByIndex(b) : this.GetLayoutByName(b.toString())
        }
        GetAllLayouts() {
            return this._allLayouts
        }
        _SetMainRunningLayout(b) {
            this._mainRunningLayout = b
        }
        GetMainRunningLayout() {
            return this._mainRunningLayout
        }
        _AddRunningSubLayout(b) {
            if (this._runningSubLayouts.includes(b)) throw Error("layout already running");
            this._runningSubLayouts.push(b)
        }
        _RemoveRunningSubLayout(b) {
            b = this._runningSubLayouts.indexOf(b);
            if (-1 === b) throw Error("layout not running");
            this._runningSubLayouts.splice(b, 1)
        }* runningLayouts() {
            this._mainRunningLayout && (yield this._mainRunningLayout);
            this._runningSubLayouts.length && (yield* this._runningSubLayouts)
        }
        IsLayoutRunning(b) {
            return this._mainRunningLayout === b || this._runningSubLayouts.includes(b)
        }
        SetIsEndingLayout(b) {
            if (b) this._isEndingLayout++;
            else {
                if (0 >= this._isEndingLayout) throw Error("already unset");
                this._isEndingLayout--
            }
        }
        IsEndingLayout() {
            return 0 < this._isEndingLayout
        }
        ChangeMainLayout(b) {
            this._pendingChangeLayout = b
        }
        ClearPendingChangeLayout() {
            this._pendingChangeLayout = null
        }
        IsPendingChangeMainLayout() {
            return !!this._pendingChangeLayout
        }
        GetPendingChangeMainLayout() {
            return this._pendingChangeLayout
        }
        SetAllLayerProjectionChanged() {
            const b = this.GetMainRunningLayout();
            b && b._SetAllLayersProjectionChanged()
        }
        SetAllLayerMVChanged() {
            const b = this.GetMainRunningLayout();
            b && b._SetAllLayersMVChanged()
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor() {
            this.runtime = this.renderer = null;
            this.surfaceHeight = this.surfaceWidth = this.drawHeight = this.drawWidth = 0;
            this.layoutRect = new f.Rect;
            this.rcTexBounce = new f.Rect;
            this.rcTexDest = new f.Rect;
            this.rcTexOrigin = new f.Rect;
            this.screenRect = new f.Rect;
            this.clearRect = new f.Rect;
            this.srcRect = new f.Rect;
            this.fxTex = [null, null];
            this.fxIndex = 0;
            this.otherFxIndex = 1;
            this.layerAngle = this.layerScale = this.boxExtendVertical = this.boxExtendHorizontal = 0;
            this.renderTarget = this.wi =
                this.inst = this.layer = this.layout = null;
            this.didChangeTransform = this.postDraw = this.preDraw = !1;
            this.opts = null
        }
        Clear() {
            this.opts = this.renderTarget = this.wi = this.inst = this.layer = this.layout = this.runtime = this.renderer = null
        }
        ShouldPreDraw(p) {
            p = p.GetShaderProgram();
            if (p.MustPreDraw()) return !0;
            if (this.inst) return p.UsesDest() && (0 !== this.wi.GetAngle() || 0 > this.wi.GetWidth() || 0 > this.wi.GetHeight()) || 0 !== this.boxExtendHorizontal || 0 !== this.boxExtendVertical || !this.wi.HasDefaultColor() || this.inst.MustPreDraw();
            if (this.layer) return !this.layer.HasDefaultColor()
        }
        ShouldPostDraw(p) {
            p =
                p.GetShaderProgram();
            return p.UsesDest() || p.UsesCrossSampling() || this.layout && "low" === this.runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality()
        }
        GetEffectRenderTarget(p) {
            if (0 !== p && 1 !== p) throw Error("invalid effect target");
            const x = this.fxTex;
            if (!x[p]) {
                var t = this.runtime;
                const r = t.GetCanvasManager();
                t = {
                    sampling: t.GetSampling()
                };
                "low" === r.GetCurrentFullscreenScalingQuality() && (t.width = r.GetDrawWidth(), t.height = r.GetDrawHeight());
                x[p] = r.GetAdditionalRenderTarget(t)
            }
            return x[p]
        }
        ReleaseEffectRenderTargets() {
            const p =
                this.fxTex,
                x = this.runtime.GetCanvasManager();
            p[0] && (x.ReleaseAdditionalRenderTarget(p[0]), p[0] = null);
            p[1] && (x.ReleaseAdditionalRenderTarget(p[1]), p[1] = null)
        }
    }
    const a = [];
    let d = 0;

    function c() {
        d === a.length && a.push(new b);
        return a[d++]
    }

    function e(p) {
        p.ReleaseEffectRenderTargets();
        p.Clear();
        d--
    }
    const g = new f.Quad;
    let h = !1;
    async function l(p, x, t) {
        x = await f.Gfx.WebGLRenderTarget.DebugReadPixelsToBlob(x, t);
        x = URL.createObjectURL(x);
        console.log("[FX] " + p + " " + (t ? "" : " [to display]") + ": ", x)
    }
    f.RenderEffectChain =
        function(p, x, t, r, B, z) {
            const C = c();
            C.renderer = p;
            C.runtime = x;
            if (t instanceof f.Instance) C.inst = t, C.wi = C.inst.GetWorldInfo();
            else if (t instanceof f.Layer) C.layer = t;
            else if (t instanceof f.Layout) C.layout = t;
            else throw Error("invalid effects object");
            t = x.GetCanvasManager();
            C.renderTarget = r;
            C.drawWidth = t.GetDrawWidth();
            C.drawHeight = t.GetDrawHeight();
            C.surfaceWidth = C.drawWidth;
            C.surfaceHeight = C.drawHeight;
            C.fxIndex = 0;
            C.otherFxIndex = 1;
            C.boxExtendHorizontal = 0;
            C.boxExtendVertical = 0;
            C.screenRect.set(0, 0, C.drawWidth,
                C.drawHeight);
            C.clearRect.set(0, 0, C.drawWidth, C.drawHeight);
            C.didChangeTransform = !1;
            C.opts = z;
            C.inst ? (r = C.wi, C.layerScale = r.GetLayer().GetRenderScale(), C.layerAngle = r.GetLayer().GetAngle(), C.layoutRect.copy(r.GetBoundingBox())) : C.layer ? (r = C.layer, C.layerScale = r.GetRenderScale(), C.layerAngle = r.GetAngle(), C.layoutRect.copy(r.GetViewport())) : (r = C.layout, C.layerScale = r.GetScale(), C.layerAngle = r.GetAngle(), C.layoutRect.set(0, 0, C.drawWidth, C.drawHeight));
            C.inst ? n(C, B) : (C.rcTexBounce.set(0, 0, C.drawWidth /
                C.surfaceWidth, C.drawHeight / C.surfaceHeight), C.rcTexDest.copy(C.rcTexBounce), C.rcTexOrigin.copy(C.rcTexBounce), C.rcTexBounce.swapTopBottom(), C.rcTexDest.swapTopBottom(), C.rcTexOrigin.swapTopBottom());
            p.SetAlphaBlend();
            p.ResetColor();
            p.SetBaseZ(0);
            p.SetCurrentZ(0);
            C.preDraw = C.ShouldPreDraw(B[0]);
            C.preDraw && q(C);
            p.ResetColor();
            r = B.length - 1;
            C.postDraw = C.ShouldPostDraw(B[r]);
            for (let F = 0, J = B.length; F < J; ++F) z = B[F], t = z.GetShaderProgram(), p.SetProgram(t), t.IsAnimated() && x.UpdateRender(), 0 !== F || C.preDraw ?
                (p.SetCopyBlend(), w(C, z, F === r && !C.postDraw, F)) : y(C, z), 0 === C.fxIndex ? (C.fxIndex = 1, C.otherFxIndex = 0) : (C.fxIndex = 0, C.otherFxIndex = 1);
            C.postDraw && u(C, B);
            p = C.didChangeTransform;
            e(C);
            h = !1;
            return p
        };

    function n(p, x) {
        for (let I = 0, L = x.length; I < L; ++I) {
            var t = x[I].GetShaderProgram();
            p.boxExtendHorizontal += t.GetBoxExtendHorizontal();
            p.boxExtendVertical += t.GetBoxExtendVertical()
        }
        var r = p.wi;
        x = r.GetLayer();
        var B = x.GetAngle();
        t = r.GetBoundingBox();
        var z = r.GetTotalZElevation();
        r = r.GetDepth();
        let [C, F] = x.LayerToDrawSurface(t.getLeft(),
            t.getTop(), z), [J, G] = x.LayerToDrawSurface(t.getRight(), t.getBottom(), z);
        if (0 !== B || 0 < r) {
            const [I, L] = x.LayerToDrawSurface(t.getRight(), t.getTop(), z), [N, S] = x.LayerToDrawSurface(t.getLeft(), t.getBottom(), z);
            if (0 < r) {
                B = z + r;
                const [X, U] = x.LayerToDrawSurface(t.getLeft(), t.getTop(), B), [W, ia] = x.LayerToDrawSurface(t.getRight(), t.getTop(), B), [ka, ya] = x.LayerToDrawSurface(t.getRight(), t.getBottom(), B), [ta, Ba] = x.LayerToDrawSurface(t.getLeft(), t.getBottom(), B);
                x = Math.min(C, J, I, N, X, W, ka, ta);
                J = Math.max(C, J, I, N, X, W, ka,
                    ta);
                C = x;
                x = Math.min(F, G, L, S, U, ia, ya, Ba);
                G = Math.max(F, G, L, S, U, ia, ya, Ba);
                F = x
            } else x = Math.min(C, J, I, N), J = Math.max(C, J, I, N), C = x, x = Math.min(F, G, L, S), G = Math.max(F, G, L, S), F = x
        }
        x = p.screenRect;
        t = p.rcTexOrigin;
        B = p.rcTexDest;
        z = p.clearRect;
        r = p.rcTexBounce;
        x.set(C, F, J, G);
        x.shuntY(p.drawHeight);
        t.copy(x);
        t.divide(p.surfaceWidth, p.surfaceHeight);
        t.swapTopBottom();
        x.inflate(p.boxExtendHorizontal, p.boxExtendVertical);
        B.copy(x);
        B.divide(p.surfaceWidth, p.surfaceHeight);
        B.swapTopBottom();
        z.copy(x);
        z.roundOuter();
        z.inflate(p.boxExtendHorizontal +
            1, p.boxExtendVertical + 1);
        x.clamp(0, 0, p.drawWidth, p.drawHeight);
        z.clamp(0, 0, p.drawWidth, p.drawHeight);
        r.copy(x);
        r.divide(p.surfaceWidth, p.surfaceHeight);
        r.swapTopBottom()
    }

    function q(p) {
        const x = p.renderer;
        x.SetTextureFillMode();
        const t = p.GetEffectRenderTarget(p.fxIndex);
        x.SetRenderTarget(t);
        var r = p.opts;
        r && r.preTransform && r.preTransform();
        x.ClearRect2(p.clearRect);
        p.inst ? (x.SetColor(p.wi.GetPremultipliedColor()), x.SetCurrentZ(p.wi.GetTotalZElevation()), p.inst.Draw(x), x.SetCurrentZ(0)) : (r = (p.layer ||
            p.layout).GetRenderTarget(), p.layer ? x.SetColor(p.layer.GetPremultipliedColor()) : x.ResetColor(), x.DrawRenderTarget(r), x.InvalidateRenderTarget(r), p.runtime.GetCanvasManager().ReleaseAdditionalRenderTarget(r));
        p.rcTexDest.clampFlipped(0, 1, 1, 0);
        p.fxIndex = 1;
        p.otherFxIndex = 0;
        h && l("Pre-draw", x, t)
    }

    function y(p, x) {
        const t = p.renderer,
            r = p.runtime,
            B = p.GetEffectRenderTarget(p.fxIndex);
        t.SetRenderTarget(B);
        var z = p.opts;
        z && z.preTransform && z.preTransform();
        t.ClearRect2(p.clearRect);
        if (p.inst) {
            const [C, F] = p.inst.GetCurrentSurfaceSize();
            (z = p.inst.GetCurrentTexRect()) ? p.srcRect.copy(z): p.srcRect.set(0, 0, 0, 0);
            x = p.wi.GetInstanceEffectList().GetEffectParametersForIndex(x.GetIndex());
            t.SetProgramParameters(p.renderTarget, p.rcTexDest, p.srcRect, p.srcRect, p.layoutRect, 1 / C, 1 / F, p.layerScale, p.layerAngle, r.GetGameTime(), x);
            t.SetCurrentZ(p.wi.GetTotalZElevation());
            p.inst.Draw(t);
            t.SetCurrentZ(0);
            p.rcTexDest.clampFlipped(0, 1, 1, 0);
            p.screenRect.shuntY(p.drawHeight)
        } else x = (p.layer || p.layout).GetEffectList().GetEffectParametersForIndex(x.GetIndex()),
            t.SetProgramParameters(p.renderTarget, p.rcTexDest, p.rcTexBounce, p.rcTexOrigin, p.layoutRect, 1 / p.drawWidth, 1 / p.drawHeight, p.layerScale, p.layerAngle, r.GetGameTime(), x), p = (p.layer || p.layout).GetRenderTarget(), h && l("Layer target", t, p), t.DrawRenderTarget(p), t.InvalidateRenderTarget(p), r.GetCanvasManager().ReleaseAdditionalRenderTarget(p);
        h && l("First bounce", t, B)
    }

    function w(p, x, t, r) {
        const B = p.renderer,
            z = p.runtime;
        0 === r && p.preDraw && p.inst && p.screenRect.shuntY(p.drawHeight);
        t ? (p.inst ? B.SetBlendMode(p.wi.GetBlendMode()) :
            p.layer && B.SetBlendMode(p.layer.GetBlendMode()), t = p.renderTarget, B.SetRenderTarget(t)) : (t = p.GetEffectRenderTarget(p.fxIndex), B.SetRenderTarget(t), B.ClearRect2(p.clearRect));
        x = p.inst ? p.wi.GetInstanceEffectList().GetEffectParametersForIndex(x.GetIndex()) : (p.layer || p.layout).GetEffectList().GetEffectParametersForIndex(x.GetIndex());
        B.SetProgramParameters(p.renderTarget, p.rcTexDest, p.rcTexBounce, p.rcTexOrigin, p.layoutRect, 1 / p.surfaceWidth, 1 / p.surfaceHeight, p.layerScale, p.layerAngle, z.GetGameTime(), x);
        x = p.GetEffectRenderTarget(p.otherFxIndex);
        B.SetTexture(x.GetTexture());
        z.GetCanvasManager().SetDeviceTransform(B);
        p.didChangeTransform = !0;
        g.setFromRect(p.screenRect);
        B.Quad3(g, p.rcTexBounce);
        p.inst || B.InvalidateRenderTarget(x);
        h && l("Bounce " + r, B, t)
    }

    function u(p, x) {
        x = p.renderer;
        if (p.layout) x.SetTextureFillMode(), x.SetRenderTarget(p.renderTarget), p = p.GetEffectRenderTarget(p.otherFxIndex), x.CopyRenderTarget(p), x.InvalidateRenderTarget(p);
        else {
            var t = p.runtime.GetCanvasManager();
            "low" === t.GetCurrentFullscreenScalingQuality() ?
                (x.SetTextureFillMode(), t.SetDeviceTransform(x, t.GetDrawWidth(), t.GetDrawHeight()), p.didChangeTransform = !0) : x.SetDeviceTransformTextureFillMode();
            p.inst ? x.SetBlendMode(p.wi.GetBlendMode()) : p.layer && x.SetBlendMode(p.layer.GetBlendMode());
            x.SetRenderTarget(p.renderTarget);
            t = p.GetEffectRenderTarget(p.otherFxIndex);
            x.SetTexture(t.GetTexture());
            g.setFromRect(p.screenRect);
            x.Quad3(g, p.rcTexBounce);
            p.inst || x.InvalidateRenderTarget(t);
            h && l("Post-draw", x, p.renderTarget)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = /<(.+?)>/g;
    f.TimelineManager = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a;
            this._timelineDataManager = f.New(f.TimelineDataManager);
            this._pluginInstance = null;
            this._timelines = [];
            this._timelinesByName = new Map;
            this._objectClassToTimelineMap = new Map;
            this._timelinesCreatedByTemplate = new Map;
            this._scheduledTimelines = [];
            this._playingTimelines = [];
            this._isTickingTimelines = this._changingLayout = this._hasRuntimeListeners = !1;
            this._tickFunc = () => this._OnTick();
            this._tick2Func = () => this._OnTick2();
            this._beforeLayoutChange = () => this._OnBeforeChangeLayout();
            this._layoutChange = () => this._OnAfterChangeLayout();
            this._instanceDestroy = d => this._OnInstanceDestroy(d.instance);
            this._afterLoad = d => this._OnAfterLoad();
            this._destroyedWhileLoadingState = []
        }
        Release() {
            this.RemoveRuntimeListeners();
            this._afterLoad = this._instanceDestroy = this._layoutChange = this._beforeLayoutChange = this._tick2Func = this._tickFunc = null;
            for (const a of this._timelines) a.Stop(), a.Release();
            f.clearArray(this._timelines);
            this._timelines = null;
            this._timelineDataManager.Release();
            this._timelineDataManager = null;
            f.clearArray(this._scheduledTimelines);
            this._scheduledTimelines = null;
            f.clearArray(this._playingTimelines);
            this._playingTimelines = null;
            this._timelinesByName.clear();
            this._timelinesByName = null;
            this._objectClassToTimelineMap.clear();
            this._objectClassToTimelineMap = null;
            this._timelinesCreatedByTemplate.clear();
            this._timelinesCreatedByTemplate = null;
            f.clearArray(this._destroyedWhileLoadingState);
            this._runtime = this._destroyedWhileLoadingState =
                null
        }
        AddRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.addEventListener("pretick", this._tickFunc);
            a.addEventListener("tick2", this._tick2Func);
            a.addEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.addEventListener("layoutchange", this._layoutChange);
            a.addEventListener("instancedestroy", this._instanceDestroy);
            a.addEventListener("afterload", this._afterLoad)
        }
        RemoveRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.removeEventListener("pretick", this._tickFunc);
            a.removeEventListener("tick2",
                this._tick2Func);
            a.removeEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.removeEventListener("layoutchange", this._layoutChange);
            a.removeEventListener("instancedestroy", this._instanceDestroy);
            a.removeEventListener("afterload", this._afterLoad)
        }
        Create(a) {
            this._timelineDataManager.Add(a);
            a = f.TimelineState.CreateInitial(a, this);
            this.Add(a);
            this.SetTimelineObjectClassesToMap(a);
            this._timelinesCreatedByTemplate.set(a.GetName(), 0)
        }
        CreateFromTemplate(a) {
            var d = this.GetTimelineDataManager();
            a =
                a.GetTemplateName();
            d = d.Get(a);
            d = f.TimelineState.CreateFromTemplate(`${a}:${this._timelinesCreatedByTemplate.get(a)}`, d, this);
            this._IncreaseTemplateTimelinesCount(a);
            this.Add(d);
            return d
        }
        _IncreaseTemplateTimelinesCount(a) {
            this._timelinesCreatedByTemplate.set(a, this._timelinesCreatedByTemplate.get(a) + 1)
        }
        _SetCreatedTemplateTimelinesCount() {
            for (const a of this._timelines) {
                if (a.IsTemplate()) continue;
                const d = a.GetTemplateName();
                this._IncreaseTemplateTimelinesCount(d)
            }
        }
        _ClearCreatedTemplateTimelinesCount() {
            for (const a of this._timelinesCreatedByTemplate.keys()) this._timelinesCreatedByTemplate.set(a,
                0)
        }
        Add(a) {
            this._timelines.push(a);
            this._timelinesByName.set(a.GetName().toLowerCase(), a)
        }
        Remove(a) {
            a.IsTemplate() || (f.arrayFindRemove(this._timelines, a), f.arrayFindRemove(this._scheduledTimelines, a), f.arrayFindRemove(this._playingTimelines, a), this._timelinesByName.delete(a.GetName().toLowerCase()), this.RemoveTimelineFromObjectClassMap(a), a.IsReleased() || a.Release())
        }
        Trigger(a) {
            this._runtime.Trigger(a, this._pluginInstance, null)
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimelineDataManager() {
            return this._timelineDataManager
        }
        SetPluginInstance(a) {
            this._pluginInstance =
                a
        }
        GetPluginInstance() {
            return this._pluginInstance
        }* GetTimelines() {
            for (const a of this._timelines) yield a
        }
        SetTimelineObjectClassToMap(a, d) {
            this._objectClassToTimelineMap.has(a) || this._objectClassToTimelineMap.set(a, new Set);
            this._objectClassToTimelineMap.get(a).add(d)
        }
        SetTimelineObjectClassesToMap(a) {
            for (const d of a.GetObjectClasses()) this.SetTimelineObjectClassToMap(d, a)
        }
        RemoveTimelineFromObjectClassMap(a) {
            for (const [d, c] of this._objectClassToTimelineMap.entries()) c.has(a) && (c.delete(a), 0 === c.size &&
                this._objectClassToTimelineMap.delete(d))
        }
        GetTimelinesForObjectClass(a) {
            if (this._objectClassToTimelineMap.has(a)) return this._objectClassToTimelineMap.get(a)
        }
        GetTimelineOfTemplateForInstances(a, d) {
            if (d)
                for (const c of this._timelines)
                    if (d.every(e => c.HasTrackInstance(e.instance, e.trackId)) && c.GetName().includes(a.GetName())) return c
        }
        GetTimelineByName(a) {
            return this._timelinesByName.get(a.toLowerCase()) || null
        }
        GetScheduledOrPlayingTimelineByName(a) {
            for (const d of this._scheduledTimelines)
                if (d.GetName() ===
                    a) return d;
            for (const d of this._playingTimelines)
                if (d.GetName() === a) return d;
            return null
        }* GetTimelinesByName(a) {
            if (b.test(a)) {
                b.lastIndex = 0;
                let c;
                var d = new Set;
                do
                    if (c = b.exec(a)) {
                        const e = c[1].split(",");
                        for (const g of e) d.add(g)
                    }
                while (c);
                for (const e of d.values())(a = this.GetTimelineByName(e)) && (yield a);
                d.clear()
            } else(d = this.GetTimelineByName(a)) && (yield d)
        }* GetTimelinesByTags(a) {
            for (const d of this._timelines) d.HasTags(a) && (yield d)
        }
        AddScheduledTimeline(a) {
            this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a);
            this._MaybeEnableRuntimeListeners()
        }
        RemovePlayingTimeline(a) {
            f.arrayFindRemove(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        ScheduleTimeline(a) {
            this._playingTimelines.includes(a) ? (a.SetPlaying(!0), a.SetScheduled(!1), a.SetMarkedForRemoval(!1)) : (a.SetPlaying(!1), a.SetScheduled(!0), a.SetMarkedForRemoval(!1), this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a));
            this._MaybeEnableRuntimeListeners()
        }
        DeScheduleTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.ResolvePlayPromise();
            f.arrayFindRemove(this._scheduledTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        CompleteTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.SetMarkedForRemoval(!0)
        }
        CompleteTimelineAndResolve(a) {
            this.CompleteTimeline(a);
            a.ResolvePlayPromise()
        }
        _OnTick() {
            if (!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a = !1;
                for (this._isTickingTimelines = !0; this._scheduledTimelines.length;) {
                    var d = this._scheduledTimelines.pop();
                    d.SetInitialState();
                    this._playingTimelines.push(d)
                }
                d =
                    this._runtime.GetDt();
                var c = this._runtime.GetTimeScale();
                for (const e of this._playingTimelines) {
                    if (e.IsMarkedForRemoval()) continue;
                    const g = e.Tick(d, c);
                    !a && g && (a = !0)
                }
                this._isTickingTimelines = !1;
                a && this.GetRuntime().UpdateRender()
            }
        }
        _OnTick2() {
            if (!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a;
                for (const d of this._playingTimelines) d.IsMarkedForRemoval() && (a || (a = new Set), this._MaybeExecuteTimelineFinishTriggers(d), a.add(d));
                a && f.arrayRemoveAllInSet(this._playingTimelines,
                    a);
                this._MaybeDisableRuntimeListeners()
            }
        }
        _MaybeExecuteTimelineFinishTriggers(a) {
            a.IsReleased() || a.HasValidTracks() && a.IsComplete() && a.InitialStateSet() && a.FinishTriggers()
        }
        _MaybeEnableRuntimeListeners() {
            this._hasRuntimeListeners || (this._hasRuntimeListeners = !0)
        }
        _MaybeDisableRuntimeListeners() {
            this._playingTimelines.length || this._scheduledTimelines.length || this._isTickingTimelines || (this._hasRuntimeListeners = !1)
        }
        _OnBeforeChangeLayout() {
            for (this._changingLayout = !0; this._scheduledTimelines.length;) this.DeScheduleTimeline(this._scheduledTimelines.pop());
            const a = new Set;
            for (const d of this._playingTimelines) d._OnBeforeChangeLayout() && a.add(d);
            f.arrayRemoveAllInSet(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners();
            for (const d of this._timelines) d.CleanCaches()
        }
        _OnAfterChangeLayout() {
            this._changingLayout = !1
        }
        _OnInstanceDestroy(a) {
            var d = a.GetObjectClass();
            if (d = this.GetTimelinesForObjectClass(d))
                if (this._runtime.IsLoadingState()) this._destroyedWhileLoadingState.push(a);
                else
                    for (const c of d) c.IsTemplate() || (c.IsReleased() ? this.Remove(c) : c.HasValidTracks() ||
                        (this._MaybeExecuteTimelineFinishTriggers(c), this.Remove(c)))
        }
        _OnAfterLoad() {
            for (const a of this._destroyedWhileLoadingState) this._OnInstanceDestroy(a);
            f.clearArray(this._destroyedWhileLoadingState)
        }
        _SaveToJson() {
            return {
                timelinesJson: this._SaveTimelinesToJson(),
                scheduledTimelinesJson: this._SaveScheduledTimelinesToJson(),
                playingTimelinesJson: this._SavePlayingTimelinesToJson(),
                hasRuntimeListeners: this._hasRuntimeListeners,
                changingLayout: this._changingLayout,
                isTickingTimelines: this._isTickingTimelines
            }
        }
        _LoadFromJson(a) {
            a &&
                (this._ClearCreatedTemplateTimelinesCount(), this._LoadTimelinesFromJson(a.timelinesJson), this._LoadScheduledTimelinesFromJson(a.scheduledTimelinesJson), this._LoadPlayingTimelinesFromJson(a.playingTimelinesJson), this._hasRuntimeListeners = !a.hasRuntimeListeners, this._changingLayout = !!a.changingLayout, this._isTickingTimelines = !!a.isTickingTimelines, this._SetCreatedTemplateTimelinesCount(), this._MaybeEnableRuntimeListeners(), this._MaybeDisableRuntimeListeners())
        }
        _SaveTimelinesToJson() {
            return this._timelines.map(a =>
                a._SaveToJson())
        }
        _LoadTimelinesFromJson(a) {
            for (const d of a) {
                a = this.GetTimelineByName(d.name);
                if (!a) {
                    a = this._GetTemplateNameFromJson(d);
                    if (!a) continue;
                    a = this.GetTimelineByName(a);
                    a = this.CreateFromTemplate(a)
                }
                a._LoadFromJson(d);
                a.HasTracks() || this.Remove(a)
            }
        }
        _GetTemplateNameFromJson(a) {
            return (a = a.name.split(":")) && 2 === a.length ? a[0] : null
        }
        _SaveScheduledTimelinesToJson() {
            return this._SaveTimelines(this._scheduledTimelines)
        }
        _LoadScheduledTimelinesFromJson(a) {
            this._LoadTimelines(a, this._scheduledTimelines)
        }
        _SavePlayingTimelinesToJson() {
            return this._SaveTimelines(this._playingTimelines)
        }
        _LoadPlayingTimelinesFromJson(a) {
            this._LoadTimelines(a,
                this._playingTimelines)
        }
        _IsTimelineInJson(a, d) {
            for (const c of d)
                if (c === a.GetName()) return !0;
            return !1
        }
        _SaveTimelines(a) {
            return a.map(d => d.GetName())
        }
        _LoadTimelines(a, d) {
            var c = new Set;
            for (const e of d) this._IsTimelineInJson(e, a) || c.add(e);
            f.arrayRemoveAllInSet(d, c);
            c = e => g => g.GetName() === e;
            for (const e of a)(a = this.GetTimelineByName(e)) && (d.find(c(e)) || d.push(a))
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.TimelineState = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._runtime = d.GetRuntime();
            this._timelineManager = d;
            this._timelineDataItem = a;
            this._name = b;
            this._tracks = [];
            for (const c of this._timelineDataItem.GetTrackData().trackDataItems()) this._tracks.push(f.TrackState.Create(this, c));
            this._playResolve = this._playPromise = null;
            this._playheadTime = f.New(f.KahanSum);
            this._playheadTime.Set(0);
            this._playbackRate = 1;
            this._pingPongState = 0;
            this._currentRepeatCount = 1;
            this._initialStateSet =
                this._isScheduled = this._isPlaying = !1;
            this._complete = !0;
            this._markedForRemoval = this._released = !1;
            this._completedTick = -1;
            this._firstTick = this._finishedTriggers = this._isTemplate = this._implicitPause = !1;
            this._lastDelta = NaN;
            this._tags = [""];
            this._stringTags = "";
            this._tagsChanged = !1
        }
        static CreateInitial(b, a) {
            var d = a.GetTimelineDataManager();
            const c = d.GetNameId();
            d = d.Get(b[c]);
            b = f.New(f.TimelineState, b[c], d, a);
            b.SetIsTemplate(!0);
            return b
        }
        static CreateFromTemplate(b, a, d) {
            return f.New(f.TimelineState, b, a, d)
        }
        static get WORLD_INSTANCE_BOX_CHANGE() {
            return 1
        }
        static get LAYOUT_RENDER_CHANGE() {
            return f.nextHighestPowerOfTwo(1)
        }
        Release() {
            if (!this.IsReleased()) {
                this._timelineManager.DeScheduleTimeline(this);
                this._timelineManager.CompleteTimelineAndResolve(this);
                for (const b of this._tracks) b.Release();
                f.clearArray(this._tracks);
                this._tracks = null;
                this._playheadTime.Release();
                this._timelineDataItem = this._timelineManager = this._runtime = this._playheadTime = null;
                this._released = !0;
                this._playResolve = this._playPromise = null
            }
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetTracks() {
            return this._tracks
        }
        GetSimilarPropertyTracks(b, a, d) {
            const c = [];
            for (const e of this._tracks) {
                if (b !==
                    e.GetInstance()) continue;
                const g = e.GetPropertyTrack(d);
                g && a.constructor === g.GetSourceAdapter().constructor && c.push(g)
            }
            return c
        }
        HasTracks() {
            return !!this._tracks.length
        }
        GetTrackById(b) {
            for (const a of this._tracks)
                if (f.equalsNoCase(a.GetId(), b)) return a;
            return null
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        GetTemplateName() {
            return this._timelineDataItem.GetName()
        }
        GetTotalTime() {
            return this._timelineDataItem.GetTotalTime()
        }
        SetTotalTime(b) {
            this._timelineDataItem.SetTotalTime(b)
        }
        GetStep() {
            return this._timelineDataItem.GetStep()
        }
        SetStep(b) {
            this._timelineDataItem.SetStep(b)
        }
        GetInterpolationMode() {
            return this._timelineDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._timelineDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._timelineDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._timelineDataItem.GetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetTracks()) a.SetEase(b)
        }
        GetLoop() {
            return this._timelineDataItem.GetLoop()
        }
        SetLoop(b) {
            return this._timelineDataItem.SetLoop(b)
        }
        GetPingPong() {
            return this._timelineDataItem.GetPingPong()
        }
        SetPingPong(b) {
            return this._timelineDataItem.SetPingPong(b)
        }
        GetRepeatCount() {
            return this._timelineDataItem.GetRepeatCount()
        }
        SetPlaybackRate(b) {
            return this._playbackRate =
                b
        }
        GetPlaybackRate() {
            return this._playbackRate
        }
        IsForwardPlayBack() {
            return this.IsPlaying() ? 0 < this._playbackRate : !0
        }
        GetPlayPromise() {
            return this._playPromise ? this._playPromise : this._playPromise = new Promise(b => {
                this._playResolve = b
            })
        }
        ResolvePlayPromise() {
            this._playPromise && (this._playResolve(), this._playResolve = this._playPromise = null)
        }
        SetTags(b) {
            this._tags = f.TimelineState._GetTagArray(b);
            this._tagsChanged = !0
        }
        GetTags() {
            return this._tags
        }
        GetStringTags() {
            this._tagsChanged && (this._stringTags = this._tags.join(" "));
            this._tagsChanged = !1;
            return this._stringTags
        }
        HasTags(b) {
            return this._tags && this._tags.length ? (b = f.TimelineState._GetTagArray(b)) && b.length ? b.every(f.TimelineState._HasTag, this) : !1 : !1
        }
        OnStarted() {
            f.Plugins.Timeline.Cnds.SetTriggerTimeline(this);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineStarted);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineStartedByName);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineStartedByTags);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnAnyTimelineStarted);
            f.Plugins.Timeline.Cnds.SetTriggerTimeline(null)
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            this._finishedTriggers || (this._finishedTriggers = !0, f.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineFinished), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineFinishedByName), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineFinishedByTags), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnAnyTimelineFinished),
                f.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        SetPlaying(b) {
            this._isPlaying = b
        }
        IsCompletedTick() {
            return this._completedTick === this._runtime.GetTickCount()
        }
        IsPlaying(b = !1) {
            return this.IsCompletedTick() || this.IsScheduled() && !b ? !0 : this._isPlaying
        }
        _IsPlaying() {
            return this.IsPlaying(!0)
        }
        IsPaused() {
            return this._IsPaused()
        }
        _IsPaused() {
            return this.IsReleased() || this.IsScheduled() || this._IsPlaying() || this.IsComplete() ? !1 : !0
        }
        SetScheduled(b) {
            this._isScheduled = b
        }
        IsScheduled() {
            return this._isScheduled
        }
        SetComplete(b) {
            this._complete =
                b;
            b = this.GetTime();
            if (0 >= b || b >= this.GetTotalTime()) this._complete = !0
        }
        IsComplete() {
            return this._complete
        }
        IsReleased() {
            return this._released
        }
        SetMarkedForRemoval(b) {
            this._markedForRemoval = b
        }
        IsMarkedForRemoval() {
            return this._markedForRemoval
        }
        SetImplicitPause(b) {
            this._implicitPause = b
        }
        IsImplicitPause() {
            return this._implicitPause
        }
        SetIsTemplate(b) {
            this._isTemplate = !!b
        }
        IsTemplate() {
            return this._isTemplate
        }
        InitialStateSet() {
            return this._initialStateSet
        }
        GetTime() {
            return this._playheadTime.Get()
        }
        SetTime(b) {
            const a =
                this.GetTime();
            this._SetTime(b);
            this.SetComplete(!1);
            this.IsComplete() || this.SetImplicitPause(!0);
            if (this._IsPlaying() || this.IsScheduled() || !this._initialStateSet) this._IsPlaying() || this.IsScheduled() || this._initialStateSet ? this._IsPlaying() ? this.Stop() : this.IsScheduled() && (this._timelineManager.DeScheduleTimeline(this), this.SetInitialStateFromSetTime()) : this.SetInitialStateFromSetTime();
            this._Interpolate(b, !1, !0, !0, a) && this.GetRuntime().UpdateRender();
            this._OnSetTime()
        }
        _SetTime(b) {
            0 > b ? this._playheadTime.Set(0) :
                b >= this.GetTotalTime() ? this._playheadTime.Set(this.GetTotalTime()) : this._playheadTime.Set(b)
        }
        _OnSetTime() {
            f.Plugins.Timeline && this.constructor === f.TimelineState && (f.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimeSet), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimeSetByName), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimeSetByTags), f.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        _CanResume() {
            if (!this.GetLoop())
                if (this.GetPingPong() &&
                    1 === this._pingPongState)
                    if (this.IsForwardPlayBack()) {
                        if (this.GetTime() >= this.GetTotalTime()) return !1
                    } else {
                        if (0 >= this.GetTime()) return !1
                    }
            else if (!this.GetLoop() && !this.GetPingPong())
                if (this.IsForwardPlayBack()) {
                    if (this.GetTime() >= this.GetTotalTime()) return !1
                } else if (0 >= this.GetTime()) return !1;
            return !0
        }
        Resume() {
            this.IsReleased() || this._CanResume() && this.Play(!0)
        }
        Play(b = !1) {
            return this.IsReleased() || this.IsScheduled() ? !1 : this._IsPlaying() && this.IsCompletedTick() ? this._SchedulePlayingTimeline() : this._IsPlaying() ||
                !this.IsComplete() && !b && !this.IsImplicitPause() ? !1 : this._ScheduleStoppedTimeline()
        }
        _SchedulePlayingTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.RemovePlayingTimeline(this);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        _ScheduleStoppedTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        Stop(b = !1) {
            this.IsReleased() || (this.SetComplete(b), this._timelineManager.CompleteTimeline(this), this.IsComplete() &&
                this.ResolvePlayPromise())
        }
        Reset(b = !0, a = !1) {
            if (!this.IsReleased()) {
                if (!this._IsPlaying() && this.IsScheduled()) return this._timelineManager.DeScheduleTimeline(this);
                if (!this.IsComplete()) {
                    this.Stop(!0);
                    this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                    var d = this.GetTime();
                    a = a ? this._InterpolateBeforeChangeLayout(d) : this._Interpolate(d, !1, !1, !0);
                    b && this._OnSetTime();
                    a && b && this.GetRuntime().UpdateRender()
                }
            }
        }
        ResetBeforeChangeLayout() {
            this.Reset(!1, !0)
        }
        _InterpolateBeforeChangeLayout(b) {
            this._Interpolate(b, !1, !1, !0, NaN, !1, !0)
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return !0;
            if (this.HasValidGlobalTracks()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        SetInitialStateFromSetTime() {
            this.SetInitialState(!0)
        }
        SetInitialState(b) {
            if (!this.IsMarkedForRemoval())
                if (b) {
                    this._firstTick = this._initialStateSet = !0;
                    for (const a of this._tracks) a.SetInitialState()
                } else if (this.SetPlaying(!0), this.SetScheduled(!1), this.OnStarted(), this.IsComplete()) {
                this._completedTick = -1;
                this._pingPongState = 0;
                this._currentRepeatCount = 1;
                this._finishedTriggers = this._complete = !1;
                this._firstTick = this._initialStateSet = !0;
                this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                for (const a of this._tracks) a.SetInitialState()
            } else {
                this._firstTick = !0;
                for (const a of this._tracks) a.SetResumeState()
            }
        }
        Tick(b, a) {
            if (0 !== b || 0 !== this._lastDelta) {
                this._lastDelta = b;
                var d = this.GetTime();
                this._SetTime(d + b * a * this._playbackRate);
                var c;
                this.GetLoop() || this.GetPingPong() ? this.GetLoop() &&
                    !this.GetPingPong() ? c = this._LoopCompleteCheck() : !this.GetLoop() && this.GetPingPong() ? c = this._PingPongCompleteCheck() : this.GetLoop() && this.GetPingPong() && (c = this._LoopPingPongCompleteCheck()) : c = this._SimpleCompleteCheck();
                if (c) {
                    for (const e of this._tracks) e.SetEndState();
                    this.Stop(!0);
                    this.OnCompleted();
                    return !0
                }
                return this._Interpolate(this.GetTime(), !0, !1, !1, d, !0)
            }
        }
        _Interpolate(b, a = !1, d = !1, c = !1, e = NaN, g = !1, h = !1) {
            let l = !1;
            for (var n of this._tracks) n.BeforeInterpolate();
            for (const q of this._tracks) {
                n =
                    b;
                if ("number" === typeof e) {
                    const y = this.GetTime() - q.GetStartOffset(),
                        w = e - q.GetStartOffset();
                    0 > y && 0 < w && (n = q.GetStartOffset(), this._SetTime(n))
                }
                n = q.Interpolate(n, a, d, c, this._firstTick, h);
                !l && n && (l = !0)
            }
            for (const q of this._tracks) q.AfterInterpolate();
            this._firstTick && g && (this._firstTick = !1);
            return l
        }
        _SimpleCompleteCheck() {
            if (this.IsForwardPlayBack()) {
                if (this.GetTime() >= this.GetTotalTime())
                    if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(0);
                    else return this._SetTime(this.GetTotalTime()), !0
            } else if (0 >= this.GetTime())
                if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(this.GetTotalTime());
                else return this._SetTime(0), !0;
            return !1
        }
        _LoopCompleteCheck() {
            this.IsForwardPlayBack() ? this.GetTime() >= this.GetTotalTime() && this._SetTime(0) : 0 >= this.GetTime() && this._SetTime(this.GetTotalTime());
            return !1
        }
        _PingPongCompleteCheck() {
            if (this.IsForwardPlayBack()) {
                if (this.GetTime() >= this.GetTotalTime())
                    if (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate()),
                        1 === this._pingPongState)
                        if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                        else return !0;
                else 0 === this._pingPongState && (this._pingPongState = 1)
            } else if (0 >= this.GetTime())
                if (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()), 1 === this._pingPongState)
                    if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                    else return !0;
            else 0 === this._pingPongState && (this._pingPongState = 1);
            return !1
        }
        _LoopPingPongCompleteCheck() {
            this.IsForwardPlayBack() ?
                this.GetTime() >= this.GetTotalTime() && (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate())) : 0 >= this.GetTime() && (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()));
            return !1
        }
        AddTrack() {
            var b = this._timelineDataItem.GetTrackData().AddEmptyTrackDataItem();
            b = f.TrackState.Create(this, b);
            this._tracks.push(b);
            return b
        }
        CleanCaches() {
            for (const b of this._tracks) b.CleanCaches()
        }
        ClearTrackInstances() {
            for (const b of this._tracks) b.ClearInstance()
        }
        SetTrackInstance(b,
            a) {
            if (a)
                for (const d of this._tracks) {
                    if (b) {
                        if (d.GetId() !== b) continue
                    } else if (d.HasInstance()) continue;
                    d.SetInstance(a);
                    this._timelineManager.SetTimelineObjectClassToMap(a.GetObjectClass(), this);
                    break
                }
        }
        HasTrackInstance(b, a) {
            for (const d of this._tracks)
                if (a) {
                    if (a === d.GetId() && b === d.GetInstance()) return !0
                } else if (b === d.GetInstance()) return !0;
            return !1
        }
        GetTrackInstance(b) {
            for (const a of this._tracks)
                if (b === a.GetInstance()) return a;
            return null
        }
        HasValidTracks() {
            return this._tracks.some(b => b.CanInstanceBeValid())
        }
        HasValidGlobalTracks() {
            return this._tracks.some(b =>
                b.CanInstanceBeValid() ? (b = b.GetObjectClass()) ? b.IsGlobal() : !1 : !1)
        }
        GetPropertyTrack(b) {
            for (const a of this.GetTracks())
                for (const d of a.GetPropertyTracks())
                    if (d.GetPropertyName() === b) return d
        }
        GetKeyframeWithTags(b) {
            b = b ? b.split(" ") : [];
            b = [...(new Set(b.map(a => a.toLowerCase().trim()))).values()];
            for (const a of this.GetTracks())
                for (const d of a.GetKeyframeDataItems())
                    if (b.every(c => d.HasTag(c))) return d
        }
        GetObjectClasses() {
            const b = [];
            for (const a of this.GetTracks()) b.push(a.GetObjectClass());
            return b.filter(a =>
                a)
        }
        _SaveToJson() {
            return {
                tracksJson: this._SaveTracksToJson(),
                name: this._name,
                playheadTime: this.GetTime(),
                playbackRate: this._playbackRate,
                pingPongState: this._pingPongState,
                currentRepeatCount: this._currentRepeatCount,
                isPlaying: this._isPlaying,
                isScheduled: this._isScheduled,
                initialStateSet: this._initialStateSet,
                finishedTriggers: this._finishedTriggers,
                complete: this._complete,
                released: this._released,
                markedForRemoval: this._markedForRemoval,
                completedTick: this._completedTick,
                implicitPause: this._implicitPause,
                isTemplate: this._isTemplate,
                tags: this._tags.join(" "),
                stringTags: this._stringTags,
                tagsChanged: this._tagsChanged,
                firstTick: this._firstTick
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadTracksFromJson(b.tracksJson), this._name = b.name, this._playheadTime.Set(b.playheadTime), this._playbackRate = b.playbackRate, this._pingPongState = b.pingPongState, this._currentRepeatCount = b.currentRepeatCount, this._isPlaying = !!b.isPlaying, this._isScheduled = !!b.isScheduled, this._initialStateSet = !!b.initialStateSet, this._finishedTriggers =
                b.hasOwnProperty("finishedTriggers") ? !!b.finishedTriggers : !1, this._complete = !!b.complete, this._released = !!b.released, this._markedForRemoval = !!b.markedForRemoval, this._completedTick = b.completedTick, this._implicitPause = !!b.implicitPause, this._isTemplate = !!b.isTemplate, this._tags = b.tags.split(" "), this._stringTags = b.stringTags, this._tagsChanged = !!b.tagsChanged, this._firstTick = !!b.firstTick)
        }
        _SaveTracksToJson() {
            return this._tracks.map(b => b._SaveToJson())
        }
        _LoadTracksFromJson(b) {
            b.forEach((a, d) => {
                this._tracks[d]._LoadFromJson(a)
            });
            this._tracks.filter(a => a.CanInstanceBeValid())
        }
        static _HasTag(b) {
            const a = this.GetTags();
            return "" === b ? 1 === a.length && "" === a[0] : a.includes(b)
        }
        static _GetTagArray(b) {
            if (f.IsArray(b)) return b.slice(0);
            if (f.IsString(b)) return b.split(" ")
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.TrackState = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._timeline = b;
            this._trackDataItem = a;
            this._trackData = a.GetTrackData();
            this._objectClassIndex = this._instanceUid = NaN;
            this._worldInfo = this._instance = null;
            this._isNested = 0 < a.GetStartOffset();
            this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
            this._lastKeyframeDataItem = null;
            this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            this._propertyTracks = [];
            for (const d of this._trackDataItem.GetPropertyTrackData().propertyTrackDataItems()) this._propertyTracks.push(f.PropertyTrackState.Create(this,
                d))
        }
        static Create(b, a) {
            return f.New(f.TrackState, b, a)
        }
        Release() {
            this._keyframeDataItems = null;
            for (const b of this._propertyTracks) b.Release();
            f.clearArray(this._propertyTracks);
            this._lastKeyframeDataItem = this._trackDataItem = this._worldInfo = this._instance = this._timeline = this._propertyTracks = null
        }
        CleanCaches() {
            for (const b of this._propertyTracks) b.CleanCaches();
            this._worldInfo = this._instance = null
        }
        GetTimeline() {
            return this._timeline
        }
        GetRuntime() {
            return this._timeline.GetRuntime()
        }
        GetKeyframeDataItems() {
            return this._keyframeDataItems ?
                this._keyframeDataItems : this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray()
        }
        GetPropertyTracks() {
            return this._propertyTracks
        }
        GetPropertyTrack(b) {
            for (const a of this._propertyTracks)
                if (a.GetPropertyName() === b) return a
        }
        MaybeGetInstance() {
            this._instance || this.GetInstance()
        }
        IsInstanceValid() {
            return this._instance ? !this._instance.IsDestroyed() : !1
        }
        CanInstanceBeValid() {
            var b = this.GetInstanceUID();
            return (b = this.GetRuntime().GetInstanceByUID(b)) ? !b.IsDestroyed() : !1
        }
        GetObjectClass() {
            const b =
                this.GetObjectClassIndex();
            if (-1 !== b) return this.GetRuntime().GetObjectClassByIndex(b)
        }
        ClearInstance() {
            this._instance = null;
            this._instanceUid = -1;
            this._worldInfo = null;
            this._objectClassIndex = -1
        }
        HasInstance() {
            return !!this._instance
        }
        GetInstance() {
            if (this._instance && this.IsInstanceValid()) return this._instance;
            const b = this.GetInstanceUID();
            return this._instance = this.GetRuntime().GetInstanceByUID(b)
        }
        SetInstance(b) {
            if (this._instance !== b) {
                this.CleanCaches();
                this._instance = b;
                this._objectClassIndex = b.GetObjectClass().GetIndex();
                this._instanceUid = b.GetUID();
                this._worldInfo = b.GetWorldInfo();
                for (const g of this.propertyTrackItems()) {
                    const h = g.sourceAdapter;
                    switch (g.propertyTrack.GetSourceAdapterId()) {
                        case "instance-variable":
                            h.GetEditorIndex();
                            var a = b.GetObjectClass(),
                                d = a.GetInstanceVariableIndexByName(g.name),
                                c = a.GetInstanceVariableName(d);
                            a = a.GetInstanceVariableType(d);
                            c === g.name && a === g.type && h.UpdateInstanceVariableIndex(d);
                            break;
                        case "behavior":
                            var e = g.behaviorType;
                            d = this.GetObjectClass();
                            c = b.GetObjectClass();
                            a = h.GetBehaviorType(c);
                            e && a && (e = e.GetName(), d.GetBehaviorIndexByName(e), c.GetBehaviorIndexByName(e), h.GetEditorIndex(), h.UpdateBehaviorTypeSid(a.GetSID()))
                    }
                }
            }
        }* propertyTrackItems() {
            for (const d of this._propertyTracks) {
                var b = d.GetSourceAdapter(),
                    a = this.GetObjectClass();
                const c = {
                    propertyTrack: d,
                    sourceAdapter: b
                };
                switch (d.GetSourceAdapterId()) {
                    case "world-instance":
                        c.property = d.GetPropertyName();
                        break;
                    case "instance-variable":
                        b = b.GetEditorIndex();
                        c.name = a.GetInstanceVariableName(b);
                        c.type = a.GetInstanceVariableType(b);
                        break;
                    case "effect":
                        a = a.GetEffectList();
                        b = b.GetEffectType(a);
                        c.effectType = b;
                        break;
                    case "behavior":
                        b = b.GetBehaviorType(a);
                        c.behaviorType = b;
                        break;
                    case "plugin":
                        c.plugin = a.GetPlugin()
                }
                yield c
            }
        }
        GetWorldInfo() {
            if (this._worldInfo && this.IsInstanceValid()) return this._worldInfo;
            const b = this.GetInstance();
            b && (this._worldInfo = b.GetWorldInfo());
            return this._worldInfo
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetInstanceUID() {
            return this._instanceUid ? this._instanceUid : this._trackDataItem.GetInstanceUID()
        }
        SetInstanceUID(b) {
            this._trackDataItem.SetInstanceUID(b)
        }
        GetInterpolationMode() {
            return this._trackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._trackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._trackDataItem.GetResultMode()
        }
        GetId() {
            return this._trackDataItem.GetId()
        }
        GetStartOffset() {
            return this._trackDataItem.GetStartOffset()
        }
        GetLocalTotalTime() {
            return this._trackDataItem.GetLocalTotalTime()
        }
        SetLocalTotalTime(b) {
            this._trackDataItem.SetLocalTotalTime(b)
        }
        SetResultMode(b) {
            this._trackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetKeyframeDataItems()) a.SetEase(b);
            for (const a of this.GetPropertyTracks()) a.SetEase(b)
        }
        GetEnable() {
            return this._trackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._trackDataItem.SetEnable(b)
        }
        GetObjectClassIndex() {
            return isNaN(this._objectClassIndex) ? this._trackDataItem.GetObjectClassIndex() : this._objectClassIndex
        }
        SetObjectClassIndex(b) {
            this._trackDataItem.SetObjectClassIndex(b)
        }
        SetOriginalWidth(b) {
            this._trackDataItem.SetOriginalWidth(b)
        }
        GetOriginalWidth() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalWidth() :
                this._trackDataItem.GetOriginalWidth()
        }
        SetOriginalHeight(b) {
            this._trackDataItem.SetOriginalHeight(b)
        }
        GetOriginalHeight() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalHeight() : this._trackDataItem.GetOriginalHeight()
        }
        SetInitialState() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid()) {
                for (var b of this._propertyTracks) b.SetInitialState();
                b = this.GetTimeline().IsForwardPlayBack() ? 0 : this.GetLocalTotalTime();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
                this.Interpolate(b)
            }
        }
        SetResumeState() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid()) {
                this._timeline.IsForwardPlayBack();
                var b = this._timeline.GetTime() - this.GetStartOffset();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                for (const a of this._propertyTracks) a.SetResumeState()
            }
        }
        SetEndState() {
            if (!this.GetTimeline().IsComplete() && (this.MaybeGetInstance(), this.IsInstanceValid() && !this._isNested)) {
                const b = this._timeline.GetTime(),
                    a = this.GetStartOffset() + this.GetLocalTotalTime();
                b >= a ? this.Interpolate(this.GetLocalTotalTime(), !0, !1, !0) : 0 >= b && this.Interpolate(0, !0, !1, !0)
            }
        }
        BeforeInterpolate() {
            for (const b of this._propertyTracks) b.BeforeInterpolate()
        }
        Interpolate(b, a = !1, d = !1, c = !1, e = !1, g = !1) {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() || g && this.GetObjectClass().IsGlobal()) return !1;
            b -= this.GetStartOffset();
            if (0 > b) return !1;
            this.MaybeSetInitialStateOfNestedTrack(b, a);
            this.MaybeTriggerKeyframeReachedConditions(b, a, e);
            e = g = !1;
            for (const h of this._propertyTracks) {
                const l =
                    h.Interpolate(b, d, !1, c);
                g || 0 === (l & f.TimelineState.WORLD_INSTANCE_BOX_CHANGE) || (g = !0);
                e || 0 === (l & f.TimelineState.LAYOUT_RENDER_CHANGE) || (e = !0)
            }
            this.MaybeSetEndStateOfNestedTrack(b, a);
            g && (b = this.GetWorldInfo()) && b.SetBboxChanged();
            return e
        }
        AfterInterpolate() {
            for (const b of this._propertyTracks) b.AfterInterpolate()
        }
        MaybeSetInitialStateOfNestedTrack(b, a) {
            if (a && this._isNested && !this._initialStateOfNestedSet) {
                if (this.GetTimeline().IsForwardPlayBack()) {
                    if (0 > b) return;
                    for (const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0)
                } else {
                    if (b > this.GetLocalTotalTime()) return;
                    for (const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0)
                }
                for (const d of this._propertyTracks) d.SetInitialState();
                this._initialStateOfNestedSet = !0
            }
        }
        MaybeSetEndStateOfNestedTrack(b, a) {
            if (a && this._isNested && !this._endStateOfNestedSet)
                if (this.GetTimeline().IsForwardPlayBack()) {
                    if (b >= this.GetLocalTotalTime()) {
                        for (const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0);
                        this._endStateOfNestedSet = !0
                    }
                } else if (0 >=
                b) {
                for (const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0);
                this._endStateOfNestedSet = !0
            }
        }
        MaybeTriggerKeyframeReachedConditions(b, a, d) {
            if (!d && a) return b = this.GetLastKeyFrameBeforeTime(b), b !== this._lastKeyframeDataItem && this.OnKeyframeReached(b), this._lastKeyframeDataItem = b
        }
        GetLastKeyFrameBeforeTime(b) {
            const a = this.GetTimeline();
            let d = this._trackData.GetKeyFrameDataItemAtTime(b, this._trackDataItem);
            return d ? d : a.IsForwardPlayBack() ? this._trackData.GetFirstKeyFrameDataItemLowerOrEqualThan(b, this._trackDataItem) :
                this._trackData.GetFirstKeyFrameDataItemHigherOrEqualThan(b, this._trackDataItem)
        }
        OnKeyframeReached(b) {
            if (f.Plugins.Timeline && this.GetTimeline().constructor === f.TimelineState) {
                var a = this.GetTimeline();
                f.Plugins.Timeline.Cnds.SetTriggerTimeline(a);
                f.Plugins.Timeline.Cnds.SetTriggerKeyframe(b);
                b = a.GetTimelineManager();
                b.Trigger(f.Plugins.Timeline.Cnds.OnAnyKeyframeReached);
                b.Trigger(f.Plugins.Timeline.Cnds.OnKeyframeReached);
                f.Plugins.Timeline.Cnds.SetTriggerTimeline(null);
                f.Plugins.Timeline.Cnds.SetTriggerKeyframe(null)
            }
        }
        AddKeyframe() {
            return this._trackDataItem.GetKeyframeData().AddEmptyKeyframeDataItem()
        }
        AddPropertyTrack() {
            var b =
                this._trackDataItem.GetPropertyTrackData().AddEmptyPropertyTrackDataItem();
            b = f.PropertyTrackState.Create(this, b);
            this._propertyTracks.push(b);
            return b
        }
        DeleteKeyframes(b) {
            this._trackDataItem.GetKeyframeData().DeleteKeyframeDataItems(b)
        }
        DeletePropertyKeyframes(b) {
            for (const a of this._propertyTracks) a.DeletePropertyKeyframes(b)
        }
        SaveState() {
            for (const b of this._propertyTracks) b.SaveState()
        }
        CompareInitialStateWithCurrent() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid())
                for (const b of this._propertyTracks) b.CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid()) {
                var b = !1;
                for (const a of this._propertyTracks) {
                    const d = a.CompareSaveStateWithCurrent();
                    !b && d && (b = !0)
                }
                b && (b = this.AddKeyframe(), b.SetTime(this.GetTimeline().GetTime()), b.SetEase("noease"), b.SetEnable(!0), b.SetTags(""))
            }
        }
        _SaveToJson() {
            var b = this.GetInstance();
            b = b ? b.GetUID() : this.GetInstanceUID();
            return {
                propertyTracksJson: this._SavePropertyTracksToJson(),
                lastKeyframeDataItemJson: this._SaveLastKeyframeDataItemToJson(),
                initialStateOfNestedSet: this._initialStateOfNestedSet,
                endStateOfNestedSet: this._endStateOfNestedSet,
                instanceUid: b
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadPropertyTracksFromJson(b.propertyTracksJson), this._LoadLastKeyframeDataItemFromJson(b.lastKeyframeDataItemJson), this._LoadInstanceFromJson(b.instanceUid), this._initialStateOfNestedSet = !1, b.hasOwnProperty.initialStateOfNestedSet && (this._initialStateOfNestedSet = b.initialStateOfNestedSet), this._endStateOfNestedSet = !1, b.hasOwnProperty.endStateOfNestedSet && (this._endStateOfNestedSet = b.endStateOfNestedSet))
        }
        _SaveLastKeyframeDataItemToJson() {
            return this._trackDataItem.GetKeyframeData().GetKeyframeDataItemIndex(this._lastKeyframeDataItem)
        }
        _SavePropertyTracksToJson() {
            return this._propertyTracks.map(b =>
                b._SaveToJson())
        }
        _LoadPropertyTracksFromJson(b) {
            b.forEach((a, d) => {
                this._propertyTracks[d]._LoadFromJson(a)
            })
        }
        _LoadInstanceFromJson(b) {
            if (f.IsFiniteNumber(b) && (b = this.GetRuntime().GetInstanceByUID(b))) {
                var a = this.GetTimeline();
                a.ClearTrackInstances();
                a.SetTrackInstance(this._trackDataItem.GetId(), b)
            }
        }
        _LoadLastKeyframeDataItemFromJson(b) {
            this._lastKeyframeDataItem = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemFromIndex(b)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.PropertyTrackState = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._track = b;
            this._propertyTrackDataItem = a;
            this._propertyTrackData = a.GetPropertyTrackData();
            this._sourceAdapter = this.GetSourceAdapter();
            this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }
        static Create(b, a) {
            return f.New(f.PropertyTrackState, b, a)
        }
        Release() {
            this._track = null;
            this._sourceAdapter && (this._sourceAdapter.Release(), this._sourceAdapter =
                null);
            this._propertyTrackData = this._propertyTrackDataItem = this._propertyKeyframeDataItems = null
        }
        GetTrack() {
            return this._track
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetTimeline() {
            return this._track.GetTimeline()
        }
        GetRuntime() {
            return this._track.GetRuntime()
        }
        GetInstance() {
            return this._track.GetInstance()
        }
        GetSourceAdapter() {
            if (this._sourceAdapter) return this._sourceAdapter;
            let b;
            switch (this._propertyTrackDataItem.GetSourceAdapterId()) {
                case "behavior":
                    b =
                        new f.PropertyTrackState.BehaviorSourceAdapter(this);
                    break;
                case "effect":
                    b = new f.PropertyTrackState.EffectSourceAdapter(this);
                    break;
                case "instance-variable":
                    b = new f.PropertyTrackState.InstanceVariableSourceAdapter(this);
                    break;
                case "plugin":
                    b = new f.PropertyTrackState.PluginSourceAdapter(this);
                    break;
                case "world-instance":
                    b = new f.PropertyTrackState.WorldInstanceSourceAdapter(this);
                    break;
                case "value":
                    b = new f.PropertyTrackState.ValueSourceAdapter(this)
            }
            return this._sourceAdapter = b
        }
        GetSourceAdapterId() {
            return this._propertyTrackDataItem.GetSourceAdapterId()
        }
        SetSourceAdapterId(b) {
            this._propertyTrackDataItem.SetSourceAdapterId(b)
        }
        GetSourceAdapterArgs() {
            return this._propertyTrackDataItem.GetSourceAdapterArguments()
        }
        SetSourceAdapterArgs(b) {
            this._propertyTrackDataItem.SetSourceAdapterArguments(b)
        }
        GetSourceAdapterValue() {
            return this.GetSourceAdapter().GetValue()
        }
        GetPropertyName() {
            return this._propertyTrackDataItem.GetProperty()
        }
        SetPropertyName(b) {
            this._propertyTrackDataItem.SetProperty(b)
        }
        GetPropertyType() {
            return this._propertyTrackDataItem.GetType()
        }
        SetPropertyType(b) {
            this._propertyTrackDataItem.SetType(b)
        }
        GetPropertyKeyframeType() {
            return this.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem).GetType()
        }
        GetMin() {
            return this._propertyTrackDataItem.GetMin()
        }
        SetMin(b) {
            this._propertyTrackDataItem.SetMin(b)
        }
        GetMax() {
            return this._propertyTrackDataItem.GetMax()
        }
        SetMax(b) {
            this._propertyTrackDataItem.SetMax(b)
        }
        GetEnable() {
            return this._propertyTrackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._propertyTrackDataItem.SetEnable(b)
        }
        GetInterpolationMode() {
            return this._propertyTrackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._propertyTrackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._propertyTrackDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._propertyTrackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetPropertyKeyframeDataItems()) a.SetEase(b)
        }
        GetPropertyKeyframeDataItems() {
            return this._propertyKeyframeDataItems ?
                this._propertyKeyframeDataItems : this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }* GetPropertyKeyframeValues() {
            for (const b of this.GetPropertyKeyframeDataItems()) yield b.GetValueWithResultMode()
        }
        CleanCaches() {
            this.GetSourceAdapter().CleanCaches()
        }
        GetCurrentState() {
            return this.GetSourceAdapter().GetCurrentState()
        }
        SetInitialState() {
            this.GetSourceAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetSourceAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetSourceAdapter().BeforeInterpolate()
        }
        Interpolate(b,
            a = !1, d = !1, c = !1) {
            var e = this._propertyTrackDataItem;
            let g = this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(b, e);
            g ? e = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherThan(b, e) : (g = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, e), e = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, e));
            return this.GetSourceAdapter().Interpolate(b, g, e, a, d, c)
        }
        AfterInterpolate() {
            this.GetSourceAdapter().AfterInterpolate()
        }
        static GetStartPropertyKeyframeForTime(b,
            a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            let c = a.GetPropertyKeyFrameDataItemAtTime(b, d);
            c || (c = a.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, d));
            return c
        }
        static GetEndPropertyKeyframeForTime(b, a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            return a.GetPropertyKeyFrameDataItemAtTime(b, d) ? a.GetFirstPropertyKeyFrameDataItemHigherThan(b, d) : a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, d)
        }
        AddPropertyKeyframe() {
            return this._propertyTrackDataItem.GetPropertyKeyframeData().AddEmptyPropertyKeyframeDataItem()
        }
        DeletePropertyKeyframes(b) {
            this._propertyTrackDataItem.GetPropertyKeyframeData().DeletePropertyKeyframeDataItems(b)
        }
        SaveState() {
            this.GetSourceAdapter().SaveState()
        }
        CompareInitialStateWithCurrent() {
            if (this.GetSourceAdapter().CompareInitialStateWithCurrent()) {
                const b =
                    this._propertyTrackData.GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem),
                    a = this.GetSourceAdapter().GetCurrentState();
                b.SetAbsoluteValue(a)
            }
        }
        CompareSaveStateWithCurrent() {
            const b = this.GetSourceAdapter().CompareSaveStateWithCurrent();
            b && this.AddPropertyKeyframeAtCurrentTime();
            this.GetSourceAdapter().ClearSaveState();
            return b
        }
        AddPropertyKeyframeAtCurrentTime() {
            const b = this.GetTimeline().GetTime(),
                a = this.GetSourceAdapter(),
                d = f.PropertyTrackState.GetStartPropertyKeyframeForTime(b, this),
                c =
                this.AddPropertyKeyframe();
            c.SetType(d.GetType());
            c.SetTime(b);
            c.SetEase(d.GetEase());
            c.SetEnable(!0);
            c.SetValue(a.GetValueAtTime());
            c.SetAbsoluteValue(a.GetCurrentState())
        }
        _SaveToJson() {
            return {
                sourceAdapterJson: this.GetSourceAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b && this.GetSourceAdapter()._LoadFromJson(b.sourceAdapterJson)
        }
    }
} {
    "use strict";
    const f = self.C3.PropertyTrackState;
    f.PropertySourceAdapter = class {
        constructor(b) {
            this._propertyTrack = b;
            this._propertyAdapter = null
        }
        Release() {
            this._propertyAdapter && (this._propertyAdapter.Release(), this._propertyAdapter = null);
            this._propertyTrack = null
        }
        GetPropertyTrack() {
            return this._propertyTrack
        }
        CleanCaches() {
            this._propertyAdapter && this._propertyAdapter.CleanCaches()
        }
        GetPropertyAdapter() {
            return this._propertyAdapter ? this._propertyAdapter : this._propertyAdapter = this._CreatePropertyAdapter()
        }
        GetEditorIndex() {}
        GetIndex() {
            return this.GetEditorIndex()
        }
        GetTarget() {}
        SetInitialState() {
            this.GetPropertyAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetPropertyAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetPropertyAdapter().BeforeChangeProperty()
        }
        Interpolate(b,
            a, d, c, e, g) {
            const h = f.PropertySourceAdapter.GetInterpolateFunc(this._propertyTrack)(b, a, d, this._propertyTrack);
            return e ? h : this.GetPropertyAdapter().ChangeProperty(b, h, a, d, c, g)
        }
        AfterInterpolate() {
            this.GetPropertyAdapter().AfterChangeProperty()
        }
        SaveState() {
            this.GetPropertyAdapter().SetSaveState()
        }
        ClearSaveState() {
            this.GetPropertyAdapter().ClearSaveState()
        }
        GetCurrentState() {
            return this.GetPropertyAdapter().GetCurrentState()
        }
        CompareInitialStateWithCurrent() {
            return this.GetPropertyAdapter().CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            return this.GetPropertyAdapter().CompareSaveStateWithCurrent()
        }
        GetValueAtTime() {
            return f.PropertySourceAdapter.GetValueAtTime(this._propertyTrack)
        }
        _CreatePropertyAdapter() {
            const b =
                this._propertyTrack.GetPropertyType();
            switch (this._propertyTrack.GetPropertyKeyframeType()) {
                case "combo":
                case "boolean":
                case "text":
                case "string":
                    return new f.PropertyInterpolationAdapter.NoInterpolationAdapter(this);
                case "numeric":
                case "number":
                case "angle":
                    return "combo" === b ? new f.PropertyInterpolationAdapter.NoInterpolationAdapter(this) : new f.PropertyInterpolationAdapter.NumericInterpolationAdapter(this);
                case "color":
                case "offsetColor":
                    return new f.PropertyInterpolationAdapter.ColorInterpolationAdapter(this)
            }
        }
        _SaveToJson() {
            return {
                propertyAdapterJson: this.GetPropertyAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b &&
                this.GetPropertyAdapter()._LoadFromJson(b.propertyAdapterJson)
        }
        static GetValueAtTime(b) {
            const a = b.GetTrack().GetTimeline().GetTime(),
                d = f.GetStartPropertyKeyframeForTime(a, b),
                c = f.GetEndPropertyKeyframeForTime(a, b);
            return f.PropertySourceAdapter.GetInterpolateFunc(b)(a, d, c, b)
        }
        static GetValue(b, a, d) {
            let c = b.GetResultMode();
            "combo" === b.GetPropertyType() && (c = "absolute");
            switch (c) {
                case "relative":
                    return a + d;
                case "absolute":
                    return d
            }
        }
        static GetInterpolateFunc(b) {
            switch (b.GetPropertyKeyframeType()) {
                case "numeric":
                    return f.NumericTypeAdapter.Interpolate;
                case "angle":
                    return f.AngleTypeAdapter.Interpolate;
                case "boolean":
                    return f.BooleanTypeAdapter.Interpolate;
                case "color":
                    return f.ColorTypeAdapter.Interpolate;
                case "text":
                    return f.TextTypeAdapter.Interpolate
            }
        }
        static GetWillChangeFunc(b) {
            switch (b.GetPropertyKeyframeType()) {
                case "numeric":
                    return f.NumericTypeAdapter.WillChange;
                case "angle":
                    return f.AngleTypeAdapter.WillChange;
                case "boolean":
                    return f.BooleanTypeAdapter.WillChange;
                case "color":
                    return f.ColorTypeAdapter.WillChange;
                case "text":
                    return f.TextTypeAdapter.WillChange
            }
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
    }
    f.PropertyTrackState.WorldInstanceSourceAdapter = b
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._updatedIndex = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetIndex() {
            return this._updatedIndex ? this._updatedIndex : super.GetIndex()
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance()
        }
        UpdateInstanceVariableIndex(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._updatedIndex =
                a)
        }
        Interpolate(a, d, c, e, g, h) {
            if (this.GetPropertyAdapter().CanChange(d.GetValue())) return super.Interpolate(a, d, c, e, g, h)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                index: this._updatedIndex
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a), this._updatedIndex = a.index)
        }
    }
    f.PropertyTrackState.InstanceVariableSourceAdapter = b
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._sid = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            var a = this._propertyTrack.GetPropertyTrackDataItem(),
                d = this._propertyTrack.GetTrack();
            a = this._sid ? this._sid : a.GetSourceAdapterArguments()[0];
            d = d.GetInstance();
            a = d.GetBehaviorIndexBySID(a);
            return d.GetBehaviorInstances()[a].GetSdkInstance()
        }
        GetBehaviorType(a) {
            const d =
                this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[2];
            return a.GetBehaviorTypeByName(d)
        }
        UpdateBehaviorTypeSid(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._sid = a)
        }
        Interpolate(a, d, c, e, g, h) {
            const l = this._propertyTrack.GetTrack().GetInstance();
            if (this.GetBehaviorType(l.GetObjectClass())) return super.Interpolate(a, d, c, e, g, h)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                sid: this._sid
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a),
                this._sid = a.sid)
        }
    }
    f.PropertyTrackState.BehaviorSourceAdapter = b
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            d = this.GetEffectType(d).GetIndex();
            return a.IsEffectIndexActive(d) ? a.GetEffectParametersForIndex(d) : null
        }
        GetEffectType(a) {
            const d = this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0];
            return a.GetEffectTypeByName(d)
        }
        Interpolate(a, d, c, e, g, h) {
            if (this._IsEffectActive()) return super.Interpolate(a, d, c, e, g, h)
        }
        _IsEffectActive() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            if (d = this.GetEffectType(d)) return d = d.GetIndex(), a.IsEffectIndexActive(d)
        }
    }
    f.PropertyTrackState.EffectSourceAdapter = b
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance().GetSdkInstance()
        }
        Interpolate(a, d, c, e, g, h) {
            var l = this._propertyTrack.GetTrack();
            const n = l.GetObjectClass().GetPlugin();
            l = l.GetInstance().GetObjectClass().GetPlugin();
            if (n === l) return super.Interpolate(a, d, c, e, g, h)
        }
    }
    f.PropertyTrackState.PluginSourceAdapter =
        b
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._value = 0;
            this._init = !1
        }
        SetInitialState() {
            const a = this._propertyTrack.GetPropertyTrackData();
            let d = this._propertyTrack.GetPropertyTrackDataItem();
            d = a.GetFirstPropertyKeyframeDataItem(d);
            this._value = d.GetValueWithResultMode()
        }
        SetResumeState() {}
        GetValue() {
            this._init || this._propertyTrack.Interpolate(0);
            return this._value
        }
        Interpolate(a, d, c, e, g, h) {
            e = f.PropertyTrackState.NumericTypeAdapter.Interpolate;
            this._value =
                e(a, d, c, this._propertyTrack);
            this._init = !0
        }
        SaveState() {}
        ClearSaveState() {}
        GetCurrentState() {
            return this._value
        }
        CompareInitialStateWithCurrent() {
            return !1
        }
        CompareSaveStateWithCurrent() {
            return !1
        }
        _SaveToJson() {
            return {
                value: this._value,
                init: this._init
            }
        }
        _LoadFromJson(a) {
            a && (this._value = a.value, this._init = a.hasOwnProperty("init") ? a.init : !0)
        }
    }
    f.PropertyTrackState.ValueSourceAdapter = b
}
"use strict";
self.C3.PropertyTrackState.PropertyInterpolationAdapter = class {
    constructor(f) {
        this._sourceAdapter = f;
        this._propertyTrack = f.GetPropertyTrack();
        this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo();
        this._property = this._propertyTrack.GetPropertyName();
        this._firstAbsoluteUpdate = !1;
        this._target = this._saveState = null
    }
    Release() {
        this._target = this._saveState = this._worldInfo = this._propertyTrack = this._sourceAdapter = null
    }
    CleanCaches() {
        this._target = this._saveState = this._worldInfo = null
    }
    GetPropertyTrack() {
        return this._propertyTrack
    }
    GetWorldInfo() {
        return this._worldInfo ?
            this._worldInfo : this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo()
    }
    SetFirstAbsoluteUpdate(f) {
        this._firstAbsoluteUpdate = !!f
    }
    GetFirstAbsoluteUpdate() {
        return this._firstAbsoluteUpdate
    }
    SetInitialState() {}
    SetResumeState() {}
    SetSaveState() {
        this._saveState = this.GetCurrentState()
    }
    ClearSaveState() {
        this._saveState = null
    }
    GetCurrentState() {}
    CompareInitialStateWithCurrent() {}
    CompareSaveStateWithCurrent() {}
    CanChange(f) {
        return typeof this._Getter() === typeof f
    }
    BeforeChangeProperty() {}
    ChangeProperty(f, b,
        a, d, c) {}
    AfterChangeProperty() {}
    _FirstKeyframeGetter() {
        return this._PickTimelinePlaybackMode(() => {
            const f = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(f)
        }, () => {
            const f = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(f)
        }).GetAbsoluteValue()
    }
    _CurrentKeyframeGetter() {
        const f = this._propertyTrack.GetTimeline().GetTime() - this._propertyTrack.GetTrack().GetStartOffset();
        return this._PickTimelinePlaybackMode(() => {
            const b = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(f, b)
        }, () => {
            const b = this._propertyTrack.GetPropertyTrackDataItem(),
                a = this._propertyTrack.GetPropertyTrackData(),
                d = a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(f, b);
            return d ? d : a.GetLastPropertyKeyframeDataItem(b)
        }).GetAbsoluteValue()
    }
    _PickTimelinePlaybackMode(f, b) {
        return this._propertyTrack.GetTimeline().IsForwardPlayBack() ?
            f() : b()
    }
    _PickResultMode(f, b) {
        return "relative" === this._propertyTrack.GetResultMode() ? f() : b()
    }
    _PickFirstAbsoluteUpdate(f, b) {
        return this.GetFirstAbsoluteUpdate() ? (this.SetFirstAbsoluteUpdate(!1), f()) : b()
    }
    _GetAbsoluteInitialValue(f) {}
    _GetIndex() {
        return this._sourceAdapter.GetIndex()
    }
    _GetTarget() {
        return this._target ? this._target : this._target = this._sourceAdapter.GetTarget()
    }
    _PickSource(f, b, a, d, c) {
        switch (this._propertyTrack.GetSourceAdapterId()) {
            case "behavior":
                return f();
            case "effect":
                return b();
            case "instance-variable":
                return a();
            case "plugin":
                return d();
            case "world-instance":
                return c()
        }
    }
    _SaveToJson() {
        return {
            firstAbsoluteUpdate: this._firstAbsoluteUpdate,
            saveState: this._saveState
        }
    }
    _LoadFromJson(f) {
        f && (this._firstAbsoluteUpdate = f.firstAbsoluteUpdate, this._saveState = f.saveState)
    }
    _GetPropertyKeyframeStubs(f, b = !1) {
        const a = [];
        for (const d of f) {
            f = d.GetTrack().GetStartOffset();
            for (const c of d.GetPropertyKeyframeDataItems()) b && 0 === c.GetTime() ? a.push({
                time: f + c.GetTime(),
                value: c.GetAbsoluteValue()
            }) : b || a.push({
                time: f + c.GetTime(),
                value: c.GetAbsoluteValue()
            })
        }
        return a.sort((d,
            c) => d.time - c.time)
    }
    _GetLastPropertyKeyframeStub(f, b, a) {
        return this._GetPropertyKeyframeStubLowerThanPlayhead(b, a)
    }
    _GetPropertyKeyframeStubLowerThanPlayhead(f, b) {
        for (let a = b.length - 1; 0 <= a; a--)
            if (b[a].time <= f) return b[a];
        return null
    }
}; {
    "use strict";
    const f = self.C3,
        b = new Map,
        a = [0, 0, 0];
    class d extends f.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                e = this._GetTarget(),
                g = this._GetIndex();
            switch (c) {
                case "behavior":
                    return this._ToColorArray(e.GetPropertyValueByIndex(g));
                case "effect":
                    return this._ToColorArray(e[g]);
                case "plugin":
                    return this._ToColorArray(e.GetPropertyValueByIndex(g));
                case "world-instance":
                    return this._ToColorArray(this._Getter())
            }
        }
        CompareInitialStateWithCurrent() {
            const c =
                this._FirstKeyframeGetter();
            return !this._CompareColors(c, this._Getter())
        }
        CompareSaveStateWithCurrent() {
            return f.IsNullOrUndefined(this._saveState) ? !1 : !this._CompareColors(this._saveState, this._Getter())
        }
        _CompareColors(c, e) {
            return c.equalsIgnoringAlpha(e)
        }
        _FirstKeyframeGetter() {
            const c = super._FirstKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _CurrentKeyframeGetter() {
            const c = super._CurrentKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _GetAbsoluteInitialValue(c) {}
        _ToColorArray(c) {
            return f.IsInstanceOf(c,
                f.Color) ? c.toArray().slice(0, 3) : c.slice(0, 3)
        }
        _GetColorFromArray(c) {
            return f.IsInstanceOf(c, f.Color) ? c : new f.Color(c[0], c[1], c[2], 1)
        }
        CanChange(c) {
            return !0
        }
        BeforeChangeProperty() {
            var c = this._propertyTrack.GetInstance();
            b.has(c) || b.set(c, new Map);
            c = b.get(c);
            const e = this._propertyTrack.GetSourceAdapterId();
            c.has(e) || c.set(e, new Map);
            c = c.get(e);
            c.has(this._property) || c.set(this._property, {
                used: !1,
                color: new f.Color(0, 0, 0, 1)
            })
        }
        _GetTmpColor(c, e, g) {
            c = b.get(c).get(e).get(g);
            c.used = !0;
            return c.color
        }
        ChangeProperty(c,
            e, g, h, l) {
            l = this._propertyTrack.GetTimeline();
            h = this._propertyTrack.GetTrack();
            c = this._propertyTrack.GetInstance();
            var n = this._propertyTrack.GetSourceAdapter();
            g = this._propertyTrack.GetSourceAdapterId();
            n = l.GetSimilarPropertyTracks(c, n, this._property);
            if (1 < n.length) {
                if (n = this._GetPropertyKeyframeStubs(n, !0), l = this._GetLastPropertyKeyframeStub(l, l.GetTime(), n))
                    if (h = h.GetStartOffset(), n = l.time - h, 0 === n) this._GetTmpColor(c, g, this._property).addRgb(e[0], e[1], e[2]);
                    else {
                        if (0 > n) return;
                        l = e[0];
                        h = e[1];
                        e = e[2];
                        n = this._propertyTrack.Interpolate(n, !1, !0);
                        l = f.Color.DiffChannel(l, n[0]);
                        h = f.Color.DiffChannel(h, n[1]);
                        e = f.Color.DiffChannel(e, n[2]);
                        this._GetTmpColor(c, g, this._property).addRgb(l, h, e)
                    }
            } else this._Setter(e[0], e[1], e[2]);
            return f.TimelineState.LAYOUT_RENDER_CHANGE
        }
        AfterChangeProperty() {
            const c = this._propertyTrack.GetInstance();
            if (b.has(c)) {
                var e = b.get(c),
                    g = this._propertyTrack.GetSourceAdapterId();
                if (e.has(g)) {
                    var h = e.get(g);
                    if (h.has(this._property)) {
                        var l = h.get(this._property),
                            n = l.color;
                        l.used && this._Setter(n.getR(),
                            n.getG(), n.getB());
                        0 === h.size && e.delete(g);
                        0 === e.size && b.delete(c)
                    }
                }
            }
        }
        _Getter() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                e = this._GetTarget(),
                g = this._GetIndex();
            switch (c) {
                case "behavior":
                    return this._GetColorFromArray(e.GetPropertyValueByIndex(g));
                case "effect":
                    return e[g].clone();
                case "plugin":
                    return this._GetColorFromArray(e.GetPropertyValueByIndex(g));
                case "world-instance":
                    return this.GetWorldInfo().GetUnpremultipliedColor().clone()
            }
        }
        _Setter(c, e, g) {
            const h = this._propertyTrack.GetSourceAdapterId(),
                l = this._GetTarget(),
                n = this._GetIndex();
            switch (h) {
                case "behavior":
                    a[0] = c;
                    a[1] = e;
                    a[2] = g;
                    l.SetPropertyValueByIndex(n, a);
                    break;
                case "effect":
                    l[n].setRgb(c, e, g);
                    break;
                case "plugin":
                    a[0] = c;
                    a[1] = e;
                    a[2] = g;
                    l.SetPropertyValueByIndex(n, a);
                    break;
                case "world-instance":
                    this.GetWorldInfo().SetUnpremultipliedColorRGB(c, e, g)
            }
        }
        _SaveToJson() {}
        _LoadFromJson(c) {}
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.ColorInterpolationAdapter = d
} {
    "use strict";
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(a) {
            super(a)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return f.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        ChangeProperty(a, d, c, e, g) {
            c = f.PropertyTrackState.PropertySourceAdapter.GetWillChangeFunc(this._propertyTrack);
            var h = this._propertyTrack;
            const l = h.GetTrack();
            e = h.GetSourceAdapterId();
            g = h.GetTimeline();
            var n = l.GetInstance();
            h = h.GetSourceAdapter();
            n = g.GetSimilarPropertyTracks(n, h, this._property);
            1 < n.length && (n = this._GetPropertyKeyframeStubs(n), a += l.GetStartOffset(), a = this._GetLastPropertyKeyframeStub(g, a, n)) && (d = a.value);
            if (c(this._GetIndex(), this._GetTarget(), d, e)) switch (this._Setter(d), e) {
                case "plugin":
                    return f.TimelineState.LAYOUT_RENDER_CHANGE
            }
        }
        _Getter() {
            const a = this._propertyTrack.GetSourceAdapterId(),
                d = this._GetTarget(),
                c = this._GetIndex();
            switch (a) {
                case "behavior":
                    return d.GetPropertyValueByIndex(c);
                case "effect":
                    return d[c];
                case "instance-variable":
                    return d.GetInstanceVariableValue(c);
                case "plugin":
                    return d.GetPropertyValueByIndex(c)
            }
        }
        _Setter(a) {
            const d = this._propertyTrack.GetSourceAdapterId(),
                c = this._GetTarget(),
                e = this._GetIndex();
            switch (d) {
                case "behavior":
                    c.SetPropertyValueByIndex(e, a);
                    break;
                case "effect":
                    c[e] = a;
                    break;
                case "instance-variable":
                    c.SetInstanceVariableValue(e, a);
                    break;
                case "plugin":
                    c.SetPropertyValueByIndex(e,
                        a)
            }
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NoInterpolationAdapter = b
} {
    "use strict";
    const f = self.C3,
        b = new Map,
        a = (c, e, g, h, l) => b.set(c, {
            setter: e,
            absolute_setter: g,
            getter: h,
            round: l
        });
    a("offsetX", (c, e) => c.OffsetX(e), (c, e) => c.SetX(e), c => c.GetX(), !0);
    a("offsetY", (c, e) => c.OffsetY(e), (c, e) => c.SetY(e), c => c.GetY(), !0);
    a("offsetWidth", (c, e) => c.OffsetWidth(e), (c, e) => c.SetWidth(e), c => c.GetWidth(), !0);
    a("offsetHeight", (c, e) => c.OffsetHeight(e), (c, e) => c.SetHeight(e), c => c.GetHeight(), !0);
    a("offsetAngle", (c, e) => c.OffsetAngle(e), (c, e) => c.SetAngle(e), c => c.GetAngle(), !1);
    a("offsetOpacity",
        (c, e, g, h) => {
            g = c.GetOpacity() + e;
            0 === h._clampAccumulator ? (1 < g ? h._clampAccumulator += g - 1 : 0 > g && (h._clampAccumulator += g), c.OffsetOpacity(e)) : (c = c.GetOpacity() + e, 0 < e && 0 < h._clampAccumulator ? 1 < c && (h._clampAccumulator += c - 1) : 0 < e && 0 > h._clampAccumulator ? (h._clampAccumulator += e, 0 < h._clampAccumulator && (h._clampAccumulator = 0)) : 0 > e && 0 < h._clampAccumulator ? (h._clampAccumulator += e, 0 > h._clampAccumulator && (h._clampAccumulator = 0)) : 0 > e && 0 > h._clampAccumulator && 0 > c && (h._clampAccumulator += c))
        }, (c, e) => {
            c.SetOpacity(e)
        }, c => c.GetOpacity(), !1);
    a("offsetOriginX", (c, e) => c.OffsetOriginX(e), (c, e) => c.SetOriginX(e), c => c.GetOriginX(), !1);
    a("offsetOriginY", (c, e) => c.OffsetOriginY(e), (c, e) => c.SetOriginY(e), c => c.GetOriginY(), !1);
    a("offsetZElevation", (c, e) => c.OffsetZElevation(e), (c, e) => c.SetZElevation(e), c => c.GetZElevation(), !0);
    a("offsetScaleX", (c, e, g, h) => {
        h = 0 > c.GetWidth() ? -1 : 1;
        c.GetTransformWithParentWidth();
        c.OffsetWidth(g.GetOriginalWidth() * h * e)
    }, (c, e, g) => {
        c.SetWidth(g.GetOriginalWidth() * e)
    }, (c, e) => {
        const g = 0 > c.GetWidth() ? -1 : 1;
        if (c.GetTransformWithParentWidth()) {
            var h =
                c.GetParent(),
                l = e.GetTimeline().GetTrackInstance(h.GetInstance());
            l ? h = h.GetWidth() / l.GetOriginalWidth() : (l = h.GetInstance().GetSdkInstance(), h = l.IsOriginalSizeKnown() ? h.GetWidth() / l.GetOriginalWidth() : 1);
            return c.GetWidth() * g / (e.GetOriginalWidth() * h)
        }
        return c.GetWidth() * g / e.GetOriginalWidth()
    }, !1);
    a("offsetScaleY", (c, e, g, h) => {
        h = 0 > c.GetHeight() ? -1 : 1;
        c.GetTransformWithParentHeight();
        c.OffsetHeight(g.GetOriginalHeight() * h * e)
    }, (c, e, g) => {
        c.SetHeight(g.GetOriginalHeight() * e)
    }, (c, e) => {
        const g = 0 > c.GetHeight() ?
            -1 : 1;
        if (c.GetTransformWithParentHeight()) {
            var h = c.GetParent(),
                l = e.GetTimeline().GetTrackInstance(h.GetInstance());
            l ? h = h.GetHeight() / l.GetOriginalHeight() : (l = h.GetInstance().GetSdkInstance(), h = l.IsOriginalSizeKnown() ? h.GetHeight() / l.GetOriginalHeight() : 1);
            return c.GetHeight() * g / (e.GetOriginalHeight() * h)
        }
        return c.GetHeight() * g / e.GetOriginalHeight()
    }, !1);
    class d extends f.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c);
            this._clampAccumulator = this._lastValue = 0;
            this._instance_absolute_setter =
                this._instance_setter = this._instance_getter = null;
            this._round = !1;
            f.IsInstanceOf(this._propertyTrack.GetTimeline(), f.Tween) ? this._typeAdapter = new f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween(this) : this._typeAdapter = new f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline(this);
            c = this._propertyTrack.GetPropertyName();
            "world-instance" === this._propertyTrack.GetSourceAdapterId() && (c = b.get(c), this._instance_getter = c.getter, this._instance_setter =
                c.setter, this._instance_absolute_setter = c.absolute_setter, this._round = c.round)
        }
        Release() {
            this._instance_absolute_setter = this._instance_setter = this._instance_getter = this._typeAdapter = null;
            super.Release()
        }
        GetLastValue() {
            return this._lastValue
        }
        SetLastValue(c) {
            this._lastValue = c
        }
        SetInitialState() {
            const c = this._typeAdapter.SetInitialState();
            "number" === typeof c && (this._lastValue = c);
            this._clampAccumulator = 0
        }
        SetResumeState() {
            const c = this._typeAdapter.SetResumeState();
            "number" === typeof c && (this._lastValue =
                c)
        }
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return f.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        BeforeChangeProperty() {
            this._typeAdapter.BeforeChangeProperty()
        }
        ChangeProperty(c, e, g, h, l, n, q) {
            return this._typeAdapter.ChangeProperty(c, e, g, h, l, n, q)
        }
        AfterChangeProperty() {
            this._typeAdapter.AfterChangeProperty()
        }
        _Getter() {
            const c = this._GetTarget(),
                e = this._GetIndex(),
                g = this._propertyTrack.GetTrack(),
                h = this.GetWorldInfo();
            return this._PickSource(() => c.GetPropertyValueByIndex(e), () => c[e], () => c.GetInstanceVariableValue(e), () => c.GetPropertyValueByIndex(e), () => this._instance_getter(h, g))
        }
        _Setter(c, e, g) {
            const h = this._GetTarget(),
                l = this._GetIndex(),
                n = this._propertyTrack.GetTrack(),
                q = this.GetWorldInfo();
            this._PickSource(() => h.OffsetPropertyValueByIndex(l, c), () => h[l] += c, () => h.SetInstanceVariableOffset(l, c), () => h.OffsetPropertyValueByIndex(l, c), () => this._instance_setter(q,
                c, n, this))
        }
        _SetterAbsolute(c, e, g) {
            const h = this._GetTarget(),
                l = this._GetIndex(),
                n = this._propertyTrack.GetTrack(),
                q = this.GetWorldInfo();
            this._PickSource(() => h.SetPropertyValueByIndex(l, c), () => h[l] = c, () => h.SetInstanceVariableValue(l, c), () => h.SetPropertyValueByIndex(l, c), () => this._instance_absolute_setter(q, c, n))
        }
        _MaybeEnsureValue(c, e, g, h, l, n) {
            this._typeAdapter._MaybeEnsureValue(c, e, g, h, l, n)
        }
        _AddDelta(c, e, g) {
            var h = (c.toString().split(".")[1] || "").length;
            c = this._Getter();
            h = 0 === h ? this._round ? Math.round(c) :
                c : f.toFixed(c, h);
            this._Setter(h - c, e, g)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                v: this._lastValue,
                a: this._clampAccumulator
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._lastValue = c.v, this._clampAccumulator = c.a)
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapter = d
} {
    "use strict";
    const f = self.C3,
        b = new Map;
    class a {
        constructor(d) {
            this._numericInterpolationAdapter = d
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack();
            return d._PickResultMode(() => d._PickTimelinePlaybackMode(() => 0, () => f.PropertyTrackState.PropertySourceAdapter.GetValueAtTime(c)), () => {})
        }
        SetResumeState() {}
        BeforeChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                e = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                var g = c.GetInstance();
                b.has(g) || b.set(g, new Map);
                g = b.get(g);
                const h = c.GetSourceAdapterId();
                g.has(h) || g.set(h, new Map);
                g = g.get(h);
                g.has(e) || g.set(e, {
                    used: !1,
                    value: 0
                })
            })
        }
        _GetTmpAbsoluteValueObject(d, c, e) {
            d = b.get(d).get(c).get(e);
            d.used = !0;
            return d
        }
        ChangeProperty(d, c, e, g, h, l) {
            const n = this._numericInterpolationAdapter,
                q = this._numericInterpolationAdapter.GetPropertyTrack(),
                y = q.GetPropertyName();
            n._PickResultMode(() => {
                const w = n.GetLastValue();
                n._Setter(c -
                    w, e, g);
                l && this._MaybeEnsureValue(d, e, g, h, w, c);
                n.SetLastValue(c)
            }, () => {
                var w = q.GetTimeline(),
                    u = q.GetTrack();
                const p = q.GetInstance();
                var x = q.GetSourceAdapter();
                const t = q.GetSourceAdapterId();
                x = w.GetSimilarPropertyTracks(p, x, y);
                if (1 < x.length) {
                    if (x = n._GetPropertyKeyframeStubs(x, !0), w = n._GetLastPropertyKeyframeStub(w, w.GetTime(), x)) u = u.GetStartOffset(), u = w.time - u, 0 === u ? this._GetTmpAbsoluteValueObject(p, t, y).value += c : 0 > u || (u = q.Interpolate(u, !1, !0), this._GetTmpAbsoluteValueObject(p, t, y).value += c - u)
                } else n._SetterAbsolute(c)
            });
            return n._PickSource(() => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => f.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                e = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                const g = c.GetInstance();
                if (b.has(g)) {
                    var h = b.get(g),
                        l = c.GetSourceAdapterId();
                    if (h.has(l)) {
                        var n = h.get(l);
                        if (n.has(e)) {
                            var q = n.get(e),
                                y = q.value;
                            q.used && d._SetterAbsolute(y);
                            n.delete(e);
                            0 === n.size && h.delete(l);
                            0 === h.size && b.delete(g)
                        }
                    }
                }
            })
        }
        _MaybeEnsureValue(d, c, e, g, h, l) {
            const n = this._numericInterpolationAdapter;
            g || (c && d === c.GetTime() ? n._AddDelta(c.GetValueWithResultMode(), c, e) : e && d === e.GetTime() ? n._AddDelta(e.GetValueWithResultMode(), c, e) : 0 === l - h && n._AddDelta(c.GetValueWithResultMode(), c, e))
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline = a
} {
    "use strict";
    const f = self.C3;
    new Map;
    class b {
        constructor(a) {
            this._numericInterpolationAdapter = a
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const a = this._numericInterpolationAdapter;
            a.SetFirstAbsoluteUpdate(!0);
            return this._GetAbsoluteInitialValue(a._FirstKeyframeGetter())
        }
        SetResumeState() {
            const a = this._numericInterpolationAdapter;
            if (a._FirstKeyframeGetter() !== a._CurrentKeyframeGetter()) return a.SetFirstAbsoluteUpdate(!0), this._GetAbsoluteInitialValue(a._CurrentKeyframeGetter())
        }
        BeforeChangeProperty() {}
        ChangeProperty(a,
            d, c, e, g, h) {
            const l = this._numericInterpolationAdapter,
                n = l.GetLastValue();
            l._PickResultMode(() => {
                l._Setter(d - n, c, e);
                h && this._MaybeEnsureValue(a, c, e, g, n, d)
            }, () => {
                l._PickFirstAbsoluteUpdate(() => {
                    l._Setter(n, c, e)
                }, () => {
                    l._Setter(d - n, c, e);
                    h && this._MaybeEnsureValue(a, c, e, g, n, d)
                })
            });
            l.SetLastValue(d);
            return l._PickSource(() => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => f.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {}
        _GetAbsoluteInitialValue(a) {
            return a -
                this._numericInterpolationAdapter.GetCurrentState()
        }
        _MaybeEnsureValue(a, d, c, e, g, h) {
            const l = this._numericInterpolationAdapter;
            e ? d && a === d.GetTime() ? l._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? l._AddDelta(c.GetValueWithResultMode(), d, c) : c || l._AddDelta(d.GetValueWithResultMode(), d, c) : d && a === d.GetTime() ? l._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? l._AddDelta(c.GetValueWithResultMode(), d, c) : 0 === h - g && l._AddDelta(d.GetValueWithResultMode(), d, c)
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween =
        b
} {
    "use strict";
    const f = self.C3,
        b = self.Ease;
    f.PropertyTrackState.NumericTypeAdapter = class {
        constructor() {}
        static WillChange(a, d, c, e) {
            let g;
            switch (e) {
                case "behavior":
                    g = d.GetPropertyValueByIndex(a);
                    break;
                case "effect":
                    g = d[a];
                    break;
                case "instance-variable":
                    g = d.GetInstanceVariableValue(a);
                    break;
                case "plugin":
                    g = d.GetPropertyValueByIndex(a)
            }
            return g === c ? !1 : !0
        }
        static Interpolate(a, d, c, e) {
            if (!c) return c = e.GetPropertyTrackDataItem(), c = e.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(c), c.GetValueWithResultMode();
            var g =
                e.GetInterpolationMode();
            "default" === g && (g = "continuous");
            "combo" === e.GetPropertyType() && (g = "discrete");
            if ("discrete" === g) return d.GetValueWithResultMode();
            if ("continuous" === g || "step" === g) {
                "step" === g && (g = e.GetTimeline().GetStep(), 0 !== g && (g = 1 / g, a = Math.floor(a * g) / g));
                var h = d.GetTime();
                const l = c.GetTime();
                g = d.GetValueWithResultMode();
                const n = c.GetValueWithResultMode();
                if (g === n) return g;
                a = f.normalize(a, h, l);
                const q = d.GetEase();
                d = d.GetAddOn("cubic-bezier");
                c = c.GetAddOn("cubic-bezier");
                d && d.GetStartEnable() &&
                    c && c.GetEndEnable() ? (h = l - h, h = b.GetRuntimeEase(q)(h * a, 0, 1, h), h = b.GetRuntimeEase("cubicbezier")(h, g, g + d.GetStartAnchor(), n + c.GetEndAnchor(), n)) : h = b.GetRuntimeEase(q)((l - h) * a, g, n - g, l - h);
                return "integer" === e.GetPropertyType() ? Math.floor(h) : h
            }
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.PropertyTrackState.AngleTypeAdapter = class {
        constructor() {}
        static WillChange(b, a, d, c) {
            let e;
            switch (c) {
                case "behavior":
                    e = a.GetPropertyValueByIndex(b);
                    break;
                case "effect":
                    e = a[b];
                    break;
                case "instance-variable":
                    e = a.GetInstanceVariableValue(b);
                    break;
                case "plugin":
                    e = a.GetPropertyValueByIndex(b)
            }
            return e === d ? !1 : !0
        }
        static Interpolate(b, a, d, c) {
            if (!d) return a = c.GetPropertyTrackDataItem(), a = c.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(a), a.GetValueWithResultMode();
            var e =
                c.GetInterpolationMode();
            "default" === e && (e = "continuous");
            "combo" === c.GetPropertyType() && (e = "discrete");
            if ("discrete" === e) return a.GetValueWithResultMode();
            if ("continuous" === e || "step" === e) {
                "step" === e && (c = c.GetTimeline().GetStep(), 0 !== c && (c = 1 / c, b = Math.floor(b * c) / c));
                const g = a.GetTime(),
                    h = d.GetTime();
                c = a.GetValueWithResultMode();
                d = d.GetValueWithResultMode();
                if (e = a.GetAddOn("angle")) {
                    const l = e.GetRevolutions();
                    if (c === d && 0 === l) return c;
                    b = f.normalize(b, g, h);
                    a = self.Ease.GetRuntimeEase(a.GetEase())(b, 0, 1,
                        1);
                    switch (e.GetDirection()) {
                        case "closest":
                            return f.angleLerp(c, d, a, l);
                        case "clockwise":
                            return f.angleLerpClockwise(c, d, a, l);
                        case "anti-clockwise":
                            return f.angleLerpAntiClockwise(c, d, a, l)
                    }
                } else {
                    if (c === d) return c;
                    b = f.normalize(b, g, h);
                    a = self.Ease.GetRuntimeEase(a.GetEase());
                    return f.angleLerp(c, d, a(b, 0, 1, 1))
                }
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.BooleanTypeAdapter = class {
    constructor() {}
    static WillChange(f, b, a, d) {
        let c;
        switch (d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(f);
                break;
            case "effect":
                c = b[f];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(f);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(f)
        }
        return !!c === !!a ? !1 : !0
    }
    static Interpolate(f, b, a, d) {
        return a ? b.GetValueWithResultMode() ? 1 : 0 : (f = d.GetPropertyTrackDataItem(), f = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(f), f.GetValueWithResultMode() ?
            1 : 0)
    }
}; {
    "use strict";
    const f = self.C3,
        b = [0, 0, 0],
        a = [0, 0, 0],
        d = [0, 0, 0];
    f.PropertyTrackState.ColorTypeAdapter = class {
        constructor() {}
        static WillChange(c, e, g, h) {
            let l;
            switch (h) {
                case "behavior":
                    l = e.GetPropertyValueByIndex(c);
                    break;
                case "effect":
                    l = e[c];
                    break;
                case "instance-variable":
                    l = e.GetInstanceVariableValue(c);
                    break;
                case "plugin":
                    l = e.GetPropertyValueByIndex(c)
            }
            Array.isArray(g) ? (b[0] = g[0], b[1] = g[1], b[2] = g[2]) : (d.parseCommaSeparatedRgb(g), b[0] = Math.floor(255 * d.getR()), b[1] = Math.floor(255 * d.getG()), b[2] = Math.floor(255 * d.getB()));
            Array.isArray(l) ? (a[0] = l[0], a[1] = l[1], a[2] = l[2]) : (d.parseCommaSeparatedRgb(l), a[0] = Math.floor(255 * d.getR()), a[1] = Math.floor(255 * d.getG()), a[2] = Math.floor(255 * d.getB()));
            return b[0] !== a[0] || b[1] !== a[1] || b[2] !== a[2] ? !0 : !1
        }
        static Interpolate(c, e, g, h) {
            if (!g) {
                var l = h.GetPropertyTrackDataItem();
                l = h.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(l);
                h = l.GetValueWithResultMode();
                b[0] = h[0];
                b[1] = h[1];
                b[2] = h[2];
                return b
            }
            l = h.GetInterpolationMode();
            "default" === l && (l = "continuous");
            if ("discrete" === l) return h =
                e.GetValueWithResultMode(), b[0] = h[0], b[1] = h[1], b[2] = h[2], b;
            if ("continuous" === l || "step" === l) {
                "step" === l && (h = h.GetTimeline().GetStep(), 0 !== h && (h = 1 / h, c = Math.floor(c * h) / h));
                h = e.GetTime();
                l = g.GetTime();
                var n = e.GetValueWithResultMode(),
                    q = g.GetValueWithResultMode();
                c = f.normalize(c, h, l);
                var y = e.GetEase();
                e = n[0];
                g = n[1];
                n = n[2];
                const w = q[0],
                    u = q[1];
                q = q[2];
                y = self.Ease.GetRuntimeEase(y);
                h = l - h;
                l = h * c;
                b[0] = e === w ? e : y(l, e, w - e, h);
                b[1] = g === u ? g : y(l, g, u - g, h);
                b[2] = n === q ? n : y(l, n, q - n, h);
                return b
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.TextTypeAdapter = class {
    constructor() {}
    static WillChange(f, b, a, d) {
        let c;
        switch (d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(f);
                break;
            case "effect":
                c = b[f];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(f);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(f)
        }
        return c === a ? !1 : !0
    }
    static Interpolate(f, b, a, d) {
        return a ? b.GetValueWithResultMode() : (f = d.GetPropertyTrackDataItem(), f = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(f), f.GetValueWithResultMode())
    }
}; {
    "use strict";
    const f = self.C3;
    f.TimelineDataManager = class {
        constructor() {
            this._timelineDataItems = new Map
        }
        Release() {
            for (const b of this._timelineDataItems.values()) b.Release();
            this._timelineDataItems.clear();
            this._timelineDataItems = null
        }
        Add(b) {
            b = new f.TimelineDataItem(b);
            const a = b.GetName();
            this._timelineDataItems.set(a, b)
        }
        Get(b) {
            return this._timelineDataItems.get(b)
        }
        GetNameId() {
            return 0
        }
        static _CreateDataItems(b, a, d, c) {
            if (a)
                for (const e of a) f.TimelineDataManager._CreateDataItem("create", e, b, d, c)
        }
        static _LoadDataItemsFromJson(b,
            a, d, c) {
            b.length ? a.forEach((e, g) => {
                b[g]._LoadFromJson(e)
            }) : a.forEach(e => {
                f.TimelineDataManager._CreateDataItem("load", e, b, d, c)
            })
        }
        static _CreateDataItem(b, a, d, c, e) {
            let g;
            if ("function" === typeof c) switch (b) {
                case "load":
                    g = new c(null, e);
                    break;
                case "create":
                    g = new c(a, e)
            } else if ("object" === typeof c) switch (c = c.map.get(a[c.prop]), b) {
                case "load":
                    g = new c(null, e);
                    break;
                case "create":
                    g = new c(a, e)
            }
            switch (b) {
                case "load":
                    g._LoadFromJson(a);
                    d.push(g);
                    break;
                case "create":
                    if ("function" === typeof g.GetEnable && !g.GetEnable()) return g.Release();
                    d.push(g)
            }
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.TimelineDataItem = class {
        constructor(b) {
            this._name = "";
            this._totalTime = NaN;
            this._step = 0;
            this._resultMode = this._interpolationMode = "default";
            this._pingPong = this._loop = !1;
            this._repeatCount = 1;
            this._trackData = null;
            b && (this._name = b[0], this._totalTime = b[1], this._step = b[2], this._interpolationMode = b[3], this._resultMode = b[4], this._loop = !!b[6], this._pingPong = !!b[7], this._repeatCount = b[8], this._trackData = new f.TrackData(b[5], this))
        }
        Release() {
            this._trackData.Release();
            this._trackData =
                null
        }
        GetTrackData() {
            this._trackData || (this._trackData = new f.TrackData(null, this));
            return this._trackData
        }
        GetName() {
            return this._name
        }
        SetName(b) {
            this._name = b
        }
        GetTotalTime() {
            return this._totalTime
        }
        SetTotalTime(b) {
            this._totalTime = b
        }
        GetStep() {
            return this._step
        }
        SetStep(b) {
            this._step = b
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(b) {
            this._interpolationMode = b
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(b) {
            this._resultMode = b
        }
        GetLoop() {
            return this._loop
        }
        SetLoop(b) {
            this._loop =
                b
        }
        GetPingPong() {
            return this._pingPong
        }
        SetPingPong(b) {
            this._pingPong = b
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        _SaveToJson() {
            return {
                trackDataJson: this._trackData._SaveToJson(),
                name: this._name,
                totalTime: this._totalTime,
                step: this._step,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                loop: this._loop,
                pingPong: this._pingPong,
                repeatCount: this._repeatCount
            }
        }
        _LoadFromJson(b) {
            b && (this.GetTrackData()._LoadFromJson(b.trackDataJson), this._name = b.name, this._totalTime = b.totalTime, this._step =
                b.step, this._interpolationMode = b.interpolationMode, this._resultMode = b.resultMode, this._loop = b.loop, this._pingPong = b.pingPong, this._repeatCount = b.repeatCount)
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._trackData = d;
            this._additionalInstanceData = this._instanceData = null;
            this._objectClassIndex = this._instanceUid = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyTrackData = this._keyframeData = null;
            this._id = "";
            this._nestedData = null;
            this._startOffset = 0;
            this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime();
            a && (this._instanceData = a[0], this._instanceUid = a[0][2], this._objectClassIndex = a[0][1], this._interpolationMode =
                a[1], this._resultMode = a[2], this._enabled = !!a[3], a[6] && (this._id = a[6]), a[7] && (this._nestedData = a[7], this._startOffset = a[7][0], this._localTotalTime = a[7][1]), a[8] && (this._additionalInstanceData = a[8]), this._keyframeData = new f.KeyframeData(a[4], this), this._propertyTrackData = new f.PropertyTrackData(a[5], this))
        }
        Release() {
            this._trackData = this._instanceData = null;
            this._keyframeData && (this._keyframeData.Release(), this._keyframeData = null);
            this._propertyTrackData && (this._propertyTrackData.Release(), this._propertyTrackData =
                null);
            this._nestedData = null
        }
        GetTrackData() {
            return this._trackData
        }
        GetKeyframeData() {
            this._keyframeData || (this._keyframeData = new f.KeyframeData(null, this));
            return this._keyframeData
        }
        GetPropertyTrackData() {
            this._propertyTrackData || (this._propertyTrackData = new f.PropertyTrackData(null, this));
            return this._propertyTrackData
        }
        GetInstanceData() {
            return this._instanceData
        }
        GetObjectClassIndex() {
            return this._objectClassIndex
        }
        SetObjectClassIndex(a) {
            this._objectClassIndex = a
        }
        GetInstanceUID() {
            return this._instanceUid
        }
        SetInstanceUID(a) {
            this._instanceUid =
                a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode = a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        GetId() {
            return this._id
        }
        GetStartOffset() {
            return this._startOffset
        }
        GetLocalTotalTime() {
            return this._localTotalTime
        }
        SetLocalTotalTime(a) {
            this._localTotalTime = a
        }
        GetOriginalWidth() {
            return this._additionalInstanceData[0]
        }
        SetOriginalWidth(a) {
            this._additionalInstanceData ||
                (this._additionalInstanceData = []);
            this._additionalInstanceData[0] = a
        }
        GetOriginalHeight() {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            return this._additionalInstanceData[1]
        }
        SetOriginalHeight(a) {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            this._additionalInstanceData[1] = a
        }
        _SaveToJson() {
            return {
                keyframeDataJson: this._keyframeData._SaveToJson(),
                propertyTrackDataJson: this._propertyTrackData._SaveToJson(),
                instanceData: this._instanceData,
                additionalInstanceData: this._additionalInstanceData,
                instanceUid: this._instanceUid,
                objectClassIndex: this._objectClassIndex,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled,
                id: this._id,
                nestedData: this._nestedData
            }
        }
        _LoadFromJson(a) {
            a && (this._instanceData = a.instanceData, this._instanceUid = a.instanceUid, this._objectClassIndex = a.objectClassIndex, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled = a.enabled, this._id = a.id, this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime(),
                a.nestedData && (this._nestedData = a.nestedData, this._startOffset = this._nestedData[0], this._localTotalTime = this._nestedData[1]), a.additionalInstanceData && (this._additionalInstanceData = a.additionalInstanceData), this.GetKeyframeData()._LoadFromJson(a.keyframeDataJson), this.GetPropertyTrackData()._LoadFromJson(a.propertyTrackDataJson))
        }
    }
    f.TrackData = class {
        constructor(a, d) {
            this._timelineDataItem = d;
            this._trackDataItems = [];
            this._keyframeTimeMap = new Map;
            f.TimelineDataManager._CreateDataItems(this._trackDataItems,
                a, b, this)
        }
        Release() {
            this._timelineDataItem = null;
            for (const a of this._trackDataItems) a.Release();
            f.clearArray(this._trackDataItems);
            this._trackDataItems = null;
            this._keyframeTimeMap.clear();
            this._keyframeTimeMap = null
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        AddEmptyTrackDataItem() {
            const a = new b(null, this);
            this._trackDataItems.push(a);
            return a
        }
        GetFirstKeyframeDataItem(a) {
            return a.GetKeyframeData().GetKeyframeDataItemArray()[0]
        }
        GetLastKeyframeDataItem(a) {
            a = a.GetKeyframeData().GetKeyframeDataItemArray();
            return a[a.length - 1]
        }
        GetKeyFrameDataItemAtTime(a, d) {
            const c = this._keyframeTimeMap.get(d);
            if (c && c.has(a)) return c.get(a);
            for (const e of d.GetKeyframeData().keyframeDataItems())
                if (e.GetTime() === a) return c || this._keyframeTimeMap.set(d, new Map), this._keyframeTimeMap.get(d).set(a, e), e
        }
        GetFirstKeyFrameDataItemHigherThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItems())
                if (c.GetTime() > a) return c
        }
        GetFirstKeyFrameDataItemHigherOrEqualThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItems())
                if (c.GetTime() >=
                    a) return c
        }
        GetFirstKeyFrameDataItemLowerOrEqualThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItemsReverse())
                if (c.GetTime() <= a) return c
        }* trackDataItems() {
            for (const a of this._trackDataItems) yield a
        }
        _SaveToJson() {
            return {
                trackDataItemsJson: this._trackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._trackDataItems, a.trackDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._propertyTrackData = d;
            this._sourceAdapterId = "";
            this._type = this._property = this._sourceAdapterArguments = null;
            this._max = this._min = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyKeyframeData = null;
            a && (this._sourceAdapterId = a[0][0], this._sourceAdapterArguments = a[0].slice(1), this._property = a[1], this._type = a[2], this._min = a[3], this._max = a[4], this._interpolationMode = a[5], this._resultMode = a[6], this._enabled = !!a[7],
                this._propertyKeyframeData = new f.PropertyKeyframeData(a[8], this))
        }
        Release() {
            this._propertyKeyframeData.Release();
            this._sourceAdapterArguments = this._propertyTrackData = this._propertyKeyframeData = null
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetPropertyKeyframeData() {
            this._propertyKeyframeData || (this._propertyKeyframeData = new f.PropertyKeyframeData(null, this));
            return this._propertyKeyframeData
        }
        GetSourceAdapterId() {
            return this._sourceAdapterId
        }
        SetSourceAdapterId(a) {
            this._sourceAdapterId =
                a
        }
        GetSourceAdapterArguments() {
            return this._sourceAdapterArguments
        }
        SetSourceAdapterArguments(a) {
            this._sourceAdapterArguments = a
        }
        GetProperty() {
            return this._property
        }
        SetProperty(a) {
            this._property = a
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetMin() {
            return this._min
        }
        SetMin(a) {
            this._min = a
        }
        GetMax() {
            return this._max
        }
        SetMax(a) {
            this._max = a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode =
                a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataJson: this._propertyKeyframeData._SaveToJson(),
                sourceAdapterId: this._sourceAdapterId,
                sourceAdapterArguments: this._sourceAdapterArguments,
                property: this._property,
                type: this._type,
                min: this._min,
                max: this._max,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled
            }
        }
        _LoadFromJson(a) {
            a && (this._sourceAdapterId = a.sourceAdapterId, this._sourceAdapterArguments = a.sourceAdapterArguments,
                this._property = a.property, this._type = a.type, this._min = a.min, this._max = a.max, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled = a.enabled, this.GetPropertyKeyframeData()._LoadFromJson(a.propertyKeyframeDataJson))
        }
    }
    f.PropertyTrackData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._propertyTrackDataItems = [];
            this._propertyKeyframeTimeMap = new Map;
            f.TimelineDataManager._CreateDataItems(this._propertyTrackDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const a of this._propertyTrackDataItems) a.Release();
            f.clearArray(this._propertyTrackDataItems);
            this._propertyTrackDataItems = null;
            this._propertyKeyframeTimeMap.clear();
            this._propertyKeyframeTimeMap = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        AddEmptyPropertyTrackDataItem() {
            const a = new b(null, this);
            this._propertyTrackDataItems.push(a);
            return a
        }
        GetFirstPropertyKeyframeDataItem(a) {
            return a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()[0]
        }
        GetLastPropertyKeyframeDataItem(a) {
            a = a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray();
            return a[a.length - 1]
        }
        GetPropertyKeyFrameDataItemAtTime(a, d) {
            const c = this._propertyKeyframeTimeMap.get(d);
            if (c && c.has(a)) return c.get(a);
            const e = d.GetPropertyKeyframeData();
            for (const g of e.propertyKeyframeDataItems())
                if (g.GetTime() === a) return c || this._propertyKeyframeTimeMap.set(d, new Map), this._propertyKeyframeTimeMap.get(d).set(a, g), g
        }
        GetFirstPropertyKeyFrameDataItemHigherThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItems())
                if (c.GetTime() > a) return c
        }
        GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(a,
            d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItems())
                if (c.GetTime() >= a) return c
        }
        GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItemsReverse())
                if (c.GetTime() <= a) return c
        }* propertyTrackDataItems() {
            for (const a of this._propertyTrackDataItems) yield a
        }
        _SaveToJson() {
            return {
                propertyTrackDataItemsJson: this._propertyTrackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._propertyTrackDataItems,
                a.propertyTrackDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._keyframeData = d;
            this._time = -1;
            this._ease = "noease";
            this._enable = !1;
            this._lowerTags = this._tags = null;
            a && (this._time = a[0], this._ease = a[1], this._enable = !!a[2], this._tags = (a = a[3]) ? a.split(" ") : [], this._lowerTags = new Set(this._tags.map(c => c.toLowerCase())))
        }
        Release() {
            this._keyframeData = null;
            f.clearArray(this._tags);
            this._tags = null;
            this._lowerTags.clear();
            this._lowerTags = null
        }
        GetKeyframeData() {
            return this._keyframeData
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease =
                a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetTags() {
            return this._tags
        }
        SetTags(a) {
            this._tags = a ? a.split(" ") : [];
            this._lowerTags = new Set(this._tags.map(d => d.toLowerCase()))
        }
        GetLowerTags() {
            return this._lowerTags
        }
        HasTag(a) {
            return this._lowerTags.has(a.toLowerCase())
        }
        _SaveToJson() {
            return {
                time: this._time,
                ease: this._ease,
                enable: this._enable,
                tags: this._tags
            }
        }
        _LoadFromJson(a) {
            a && (this._time = a.time, this._ease = a.ease, this._enable = a.enable, this._tags = a.tags, this._lowerTags = new Set(this._tags.map(d =>
                d.toLowerCase())))
        }
    }
    f.KeyframeData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._keyframeDataItems = [];
            f.TimelineDataManager._CreateDataItems(this._keyframeDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const a of this._keyframeDataItems) a.Release();
            f.clearArray(this._keyframeDataItems);
            this._keyframeDataItems = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetKeyframeDataItemCount() {
            return this._keyframeDataItems.length
        }
        GetKeyframeDataItemArray() {
            return this._keyframeDataItems
        }
        AddEmptyKeyframeDataItem() {
            const a =
                new b(null, this);
            this._keyframeDataItems.push(a);
            return a
        }
        DeleteKeyframeDataItems(a) {
            for (const d of this._keyframeDataItems) {
                if (!a(d)) continue;
                const c = this._keyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._keyframeDataItems.splice(c, 1))
            }
            this.SortKeyframeDataItems()
        }
        SortKeyframeDataItems() {
            this._keyframeDataItems.sort((a, d) => a.GetTime() - d.GetTime())
        }
        GetKeyframeDataItemIndex(a) {
            return this._keyframeDataItems.indexOf(a)
        }
        GetKeyframeDataItemFromIndex(a) {
            return this._keyframeDataItems[a]
        }* keyframeDataItems() {
            for (const a of this._keyframeDataItems) yield a
        }* keyframeDataItemsReverse() {
            for (let a =
                    this._keyframeDataItems.length - 1; 0 <= a; a--) yield this._keyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                keyframeDataItemsJson: this._keyframeDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._keyframeDataItems, a.keyframeDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._propertyKeyframeData = d;
            this._aValue = this._value = null;
            this._type = "";
            this._time = NaN;
            this._ease = "noease";
            this._enable = !1;
            this._addonData = null;
            a && (this._value = a[0][0], this._aValue = a[0][1], this._type = a[0][2], this._time = a[1], this._ease = a[2], this._enable = !!a[3], this._addonData = null, a[4] && (this._addonData = new f.AddonData(a[4], this)))
        }
        Release() {
            this._propertyKeyframeData = null;
            this._addonData && (this._addonData.Release(), this._addonData = null)
        }
        GetAddonData() {
            return this._addonData
        }
        GetValue() {
            return this._value
        }
        SetValue(a) {
            "color" ===
            this._type && f.IsFiniteNumber(a) ? (this._value[0] = f.GetRValue(a), this._value[1] = f.GetGValue(a), this._value[2] = f.GetBValue(a)) : this._value = a
        }
        GetAbsoluteValue() {
            return this._aValue
        }
        SetAbsoluteValue(a) {
            "color" === this._type && f.IsFiniteNumber(a) ? (this._aValue[0] = f.GetRValue(a), this._aValue[1] = f.GetGValue(a), this._aValue[2] = f.GetBValue(a)) : this._aValue = a
        }
        GetValueWithResultMode() {
            const a = this._propertyKeyframeData.GetPropertyTrackDataItem().GetResultMode();
            if ("relative" === a) return this.GetValue();
            if ("absolute" ===
                a) return this.GetAbsoluteValue()
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease = a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetAddOn(a) {
            if (this.GetAddonData())
                for (const d of this.GetAddonData().addonDataItems())
                    if (d.GetId() === a) return d
        }
        _SaveToJson() {
            const a = this._addonData;
            return {
                addonDataJson: a ? a._SaveToJson() : a,
                value: this._value,
                aValue: this._aValue,
                type: this._type,
                time: this._time,
                ease: this._ease,
                enable: this._enable
            }
        }
        _LoadFromJson(a) {
            a && (a.addonDataJson && this._addonData._SetFromJson(a.addonDataJson), this._value = a.value, this._aValue = a.aValue, this._type = a.type, this._time = a.time, this._ease = a.ease, this._enable = a.enable)
        }
    }
    f.PropertyKeyframeData = class {
        constructor(a, d) {
            this._propertyTrackDataItem = d;
            this._propertyKeyframeDataItems = [];
            f.TimelineDataManager._CreateDataItems(this._propertyKeyframeDataItems, a, b, this)
        }
        Release() {
            this._propertyTrackDataItem = null;
            for (const a of this._propertyKeyframeDataItems) a.Release();
            f.clearArray(this._propertyKeyframeDataItems);
            this._propertyKeyframeDataItems = null
        }
        AddEmptyPropertyKeyframeDataItem() {
            const a = new b(null, this);
            this._propertyKeyframeDataItems.push(a);
            return a
        }
        DeletePropertyKeyframeDataItems(a) {
            for (const d of this._propertyKeyframeDataItems) {
                if (!a(d)) continue;
                const c = this._propertyKeyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._propertyKeyframeDataItems.splice(c, 1))
            }
            this.SortPropertyKeyFrameDataItems()
        }
        SortPropertyKeyFrameDataItems() {
            this._propertyKeyframeDataItems.sort((a,
                d) => a.GetTime() - d.GetTime())
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyKeyframeDataItemCount() {
            return this._propertyKeyframeDataItems.length
        }
        GetPropertyKeyframeDataItemArray() {
            return this._propertyKeyframeDataItems
        }* propertyKeyframeDataItems() {
            for (const a of this._propertyKeyframeDataItems) yield a
        }* propertyKeyframeDataItemsReverse() {
            for (let a = this._propertyKeyframeDataItems.length - 1; 0 <= a; a--) yield this._propertyKeyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataItemsJson: this._propertyKeyframeDataItems.map(a =>
                    a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._propertyKeyframeDataItems, a.propertyKeyframeDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const f = self.C3;
    class b {
        constructor(c, e) {
            this._addonData = e;
            this._id = c[0];
            this._data = c[1]
        }
        Release() {
            this._data = this._addonData = null
        }
        GetAddonData() {
            return this._addonData
        }
        GetId() {
            return this._id
        }
        _SaveToJson() {
            return {
                id: this._id,
                data: this._data
            }
        }
        _LoadFromJson(c) {
            c && (this._id = c.id, this._data = c.data)
        }
    }
    class a extends b {
        constructor(c, e) {
            super(c, e);
            this._startAnchor = this._data[0];
            this._startEnable = !!this._data[1];
            this._endAnchor = this._data[2];
            this._endEnable = !!this._data[3]
        }
        Release() {
            super.Release()
        }
        GetStartAnchor() {
            return this._startAnchor
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndAnchor() {
            return this._endAnchor
        }
        GetEndEnable() {
            return this._endEnable
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                startAnchor: this._startAnchor,
                startEnable: !!this._startEnable,
                endAnchor: this._endAnchor,
                endEnable: !!this._endEnable
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._startAnchor = c.startAnchor, this._startEnable = !!c.startEnable, this._endAnchor = c.endAnchor, this._endEnable = !!c.endEnable)
        }
    }
    class d extends b {
        constructor(c, e) {
            super(c, e);
            this._direction = this._data[0];
            this._revolutions = this._data[1]
        }
        Release() {
            super.Release()
        }
        GetDirection() {
            return this._direction
        }
        GetRevolutions() {
            return this._revolutions
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                direction: this._direction,
                revolutions: this._revolutions
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._direction = c.direction, this._revolutions = c.revolutions)
        }
    }
    f.AddonData = class {
        constructor(c, e) {
            this._propertyKeyframeDataItem = e;
            this._addonDataItems = [];
            f.TimelineDataManager._CreateDataItems(this._addonDataItems, c, {
                prop: 0,
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
        Release() {
            this._propertyKeyframeDataItem = null;
            for (const c of this._addonDataItems) c.Release();
            f.clearArray(this._addonDataItems);
            this._addonDataItems = null
        }
        GetPropertyKeyframeDataItem() {
            return this._propertyKeyframeDataItem
        }* addonDataItems() {
            for (const c of this._addonDataItems) yield c
        }
        _SaveToJson() {
            return {
                addonDataItemsJson: this._addonDataItems.map(c => c._SaveToJson())
            }
        }
        _LoadFromJson(c) {
            c && f.TimelineDataManager._LoadDataItemsFromJson(this._addonDataItems, c.addonDataItemsJson, {
                prop: "id",
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
    }
} {
    "use strict";
    const f = self.C3;
    let b = 0;
    f.Tween = class extends f.TimelineState {
        constructor(a, d) {
            super(`tween-${b++}`, a, d);
            this._id = "";
            this._destroyInstanceOnComplete = !1;
            this._initialValueMode = "start-value";
            this._on_started_callbacks = this._on_completed_callbacks = null
        }
        GetInstance() {
            var a = this.GetTracks();
            if (a && a.length && (a = a[0])) {
                var d = a.GetInstance();
                return a.IsInstanceValid() ? d : null
            }
        }
        AddStartedCallback(a) {
            this._on_started_callbacks || (this._on_started_callbacks = []);
            this._on_started_callbacks.push(a)
        }
        AddCompletedCallback(a) {
            this._on_completed_callbacks ||
                (this._on_completed_callbacks = []);
            this._on_completed_callbacks.push(a)
        }
        RemoveStartedCallback(a) {
            this._on_started_callbacks && (a = this._on_started_callbacks.indexOf(a), -1 !== a && this._on_started_callbacks.splice(a, 1))
        }
        RemoveCompletedCallback(a) {
            this._on_completed_callbacks && (a = this._on_completed_callbacks.indexOf(a), -1 !== a && this._on_completed_callbacks.splice(a, 1))
        }
        SetStartValue(a, d) {
            for (const e of this._tracks)
                for (const g of e._propertyTracks) {
                    if (g.GetPropertyName() !== d) continue;
                    var c = g.GetPropertyTrackData();
                    const h = g.GetPropertyTrackDataItem();
                    c = c.GetFirstPropertyKeyframeDataItem(h);
                    c.SetValue(a);
                    c.SetAbsoluteValue(a)
                }
        }
        _GetPropertyTrackState(a) {
            for (const d of this._tracks)
                for (const c of d._propertyTracks)
                    if (c.GetPropertyName() === a) return c
        }
        BeforeSetEndValues(a) {
            for (const e of a) a = this._GetPropertyTrackState(e), this.SetStartValue(a.GetCurrentState(), e);
            if (this.IsForwardPlayBack()) {
                var d = this.GetTotalTime() - this.GetTime();
                this.SetTotalTime(d);
                for (var c of this._tracks) c.SetLocalTotalTime(d);
                this._SetTime(0)
            } else {
                c =
                    this.GetTime();
                this.SetTotalTime(c);
                for (d of this._tracks) d.SetLocalTotalTime(c);
                this._SetTime(c)
            }
            this.SetInitialStateFromSetTime()
        }
        SetEndValue(a, d) {
            var c = this._GetPropertyTrackState(d);
            d = c.GetPropertyTrackData();
            c = c.GetPropertyTrackDataItem();
            d = d.GetLastPropertyKeyframeDataItem(c);
            d.SetTime(this.GetTotalTime());
            d.SetValue(a);
            d.SetAbsoluteValue(a)
        }
        SetId(a) {
            this._id = a
        }
        GetId() {
            return this._id
        }
        SetInitialValueMode(a) {
            this._initialValueMode = a
        }
        GetInitialValueMode() {
            return this._initialValueMode
        }
        SetDestroyInstanceOnComplete(a) {
            this._destroyInstanceOnComplete =
                a
        }
        GetDestroyInstanceOnComplete() {
            return this._destroyInstanceOnComplete
        }
        OnStarted() {
            if (this._on_started_callbacks)
                for (const a of this._on_started_callbacks) a(this);
            if (!this.IsComplete())
                for (const a of this._tracks) a.CompareSaveStateWithCurrent()
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            if (!this._finishedTriggers && (this._finishedTriggers = !0, this._on_completed_callbacks))
                for (const a of this._on_completed_callbacks) a(this)
        }
        SetTime(a) {
            this._DeleteIntermediateKeyframes();
            super.SetTime(a)
        }
        SetInitialState(a) {
            if (!this.InitialStateSet() && "current-state" === this.GetInitialValueMode())
                for (const d of this._tracks) d.CompareInitialStateWithCurrent();
            super.SetInitialState(a)
        }
        Stop(a = !1) {
            super.Stop(a);
            if (!this.IsComplete())
                for (const d of this._tracks) d.SaveState()
        }
        Reset(a = !0, d = !1) {
            this._DeleteIntermediateKeyframes();
            super.Reset(a, d)
        }
        _DeleteIntermediateKeyframes() {
            for (const a of this._tracks) {
                const d = c => {
                    c = c.GetTime();
                    const e = this.GetTotalTime();
                    return 0 !== c && c !== e
                };
                a.DeleteKeyframes(d);
                a.DeletePropertyKeyframes(d)
            }
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return !0;
            const a = this.GetInstance();
            if (a && a.GetObjectClass().IsGlobal()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        MaybeTriggerKeyframeReachedConditions() {}
        Tick(a, d) {
            a = this.GetInstance();
            a = this.GetRuntime().GetDt(a);
            super.Tick(a, 1)
        }
        _SaveToJson() {
            const a = super._SaveToJson(),
                d = this.GetTimelineDataItem();
            return Object.assign(a, {
                tweenDataItemJson: d._SaveToJson(),
                id: this._id,
                destroyInstanceOnComplete: this._destroyInstanceOnComplete,
                initialValueMode: this._initialValueMode
            })
        }
        _LoadFromJson(a) {
            a && (this.GetTimelineDataItem()._LoadFromJson(a.tweenDataItemJson), super._LoadFromJson(a), this._id = a.id, this._destroyInstanceOnComplete = a.destroyInstanceOnComplete, this._initialValueMode = a.initialValueMode)
        }
        static IsPlaying(a) {
            return a.IsPlaying()
        }
        static IsPaused(a) {
            return a.IsPaused()
        }
        static Build(a) {
            var d = a.runtime.GetTimelineManager(),
                c = new f.TimelineDataItem;
            if (a.json) {
                c._LoadFromJson(a.json.tweenDataItemJson);
                var e = new f.Tween(c, d);
                e._LoadFromJson(a.json);
                return e
            }
            d = new f.Tween(c, d);
            f.IsArray(a.propertyTracksConfig) || (a.propertyTracksConfig = [a.propertyTracksConfig]);
            d.SetId(a.id);
            d.SetTags(a.tags);
            d.SetInitialValueMode(a.initialValueMode);
            d.SetDestroyInstanceOnComplete(a.releaseOnComplete);
            d.SetLoop(a.loop);
            d.SetPingPong(a.pingPong);
            d.SetTotalTime(a.time);
            d.SetStep(0);
            d.SetInterpolationMode("default");
            d.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c = d.AddTrack();
            c.SetInstanceUID(a.instance.GetUID());
            c.SetInterpolationMode("default");
            c.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c.SetEnable(!0);
            c.SetObjectClassIndex(a.instance.GetObjectClass().GetIndex());
            var g = a.instance.GetSdkInstance(),
                h = g.IsOriginalSizeKnown() ? g.GetOriginalWidth() : a.instance.GetWorldInfo().GetWidth();
            g = g.IsOriginalSizeKnown() ? g.GetOriginalHeight() : a.instance.GetWorldInfo().GetHeight();
            c.SetOriginalWidth(h);
            c.SetOriginalHeight(g);
            h = c.AddKeyframe();
            h.SetTime(0);
            h.SetEase("noease");
            h.SetEnable(!0);
            h.SetTags("");
            h = c.AddKeyframe();
            h.SetTime(a.time);
            h.SetEase("noease");
            h.SetEnable(!0);
            h.SetTags("");
            for (e of a.propertyTracksConfig) h =
                c.AddPropertyTrack(), h.SetSourceAdapterId(e.sourceId), h.SetSourceAdapterArgs(e.sourceArgs), h.SetPropertyName(e.property), h.SetPropertyType(e.type), h.SetMin(NaN), h.SetMax(NaN), h.SetInterpolationMode("default"), h.SetResultMode(e.resultMode), h.SetEnable(!0), g = h.AddPropertyKeyframe(), g.SetType(e.valueType), g.SetTime(0), g.SetEase(e.ease), g.SetEnable(!0), g.SetValue(e.startValue), g.SetAbsoluteValue(e.startValue), h = h.AddPropertyKeyframe(), h.SetType(e.valueType), h.SetTime(a.time), h.SetEase(e.ease), h.SetEnable(!0),
                h.SetValue(e.endValue), h.SetAbsoluteValue(e.endValue);
            return d
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.Ease;
    f.Transition = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._name = a[0];
            this._transitionKeyframes = [];
            for (const d of a[1]) a = f.TransitionKeyframe.Create(this, d), this._transitionKeyframes.push(a);
            this._precalculatedSamples = new Map;
            this._transitionKeyframeCache = new Map;
            this._PreCalcSamples();
            b.AddCustomEase(this._name, (d, c, e, g) => this.Interpolate(d, c, e, g))
        }
        static Create(a) {
            return f.New(f.Transition, a)
        }
        Release() {
            for (const a of this._transitionKeyframes) a.Release();
            f.clearArray(this._transitionKeyframes);
            this._transitionKeyframes = null;
            this._precalculatedSamples.clear();
            this._precalculatedSamples = null;
            this._transitionKeyframeCache.clear();
            this._transitionKeyframeCache = null
        }
        GetTransitionKeyFrameAt(a) {
            const d = this._transitionKeyframeCache.get(a);
            if (d) return d;
            for (const c of this._transitionKeyframes)
                if (c.GetValueX() === a) return this._transitionKeyframeCache.set(a, c), c
        }
        GetFirstTransitionKeyFrameHigherThan(a) {
            for (const d of this._transitionKeyframes)
                if (d.GetValueX() >
                    a) return d
        }
        GetFirstTransitionKeyFrameHigherOrEqualThan(a) {
            for (const d of this._transitionKeyframes)
                if (d.GetValueX() >= a) return d
        }
        GetFirstTransitionKeyFrameLowerOrEqualThan(a) {
            for (let d = this._transitionKeyframes.length - 1; 0 <= d; d--) {
                const c = this._transitionKeyframes[d];
                if (c.GetValueX() <= a) return c
            }
        }
        Interpolate(a, d, c, e) {
            var g = a / e;
            (a = this.GetTransitionKeyFrameAt(g)) ? e = this.GetFirstTransitionKeyFrameHigherThan(g): (a = this.GetFirstTransitionKeyFrameLowerOrEqualThan(g), e = this.GetFirstTransitionKeyFrameHigherOrEqualThan(g));
            var h = e.GetValueX() - a.GetValueX();
            g = f.mapToRange(g, a.GetValueX(), e.GetValueX(), 0, h);
            h = a.GetValueX();
            const l = a.GetValueY(),
                n = a.GetValueX() + a.GetStartAnchorX(),
                q = a.GetValueY() + a.GetStartAnchorY(),
                y = e.GetValueX() + e.GetEndAnchorX(),
                w = e.GetValueY() + e.GetEndAnchorY(),
                u = e.GetValueX();
            e = e.GetValueY();
            e = b.GetRuntimeEase("spline")(g, h, l, n, q, y, w, u, e, this._precalculatedSamples.get(a));
            e += a.GetValueY();
            return (1 - e) * d + e * (d + c)
        }
        _PreCalcSamples() {
            this._precalculatedSamples.clear();
            for (let c = 0; c < this._transitionKeyframes.length -
                1; c++) {
                var a = this._transitionKeyframes[c];
                if (!a.GetStartEnable()) continue;
                var d = this._transitionKeyframes[c + 1];
                const e = a.GetValueX(),
                    g = a.GetValueX() + a.GetStartAnchorX(),
                    h = d.GetValueX() + d.GetEndAnchorX();
                d = d.GetValueX();
                this._precalculatedSamples.set(a, b.GetBezierSamples(e, g, h, d))
            }
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.TransitionKeyframe = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._transition = b;
            this._valueX = a[0];
            this._valueY = a[1];
            this._startAnchorX = a[2];
            this._startAnchorY = a[3];
            this._endAnchorX = a[4];
            this._endAnchorY = a[5];
            this._startEnable = a[6];
            this._endEnable = a[7]
        }
        Release() {
            this._transition = null
        }
        static Create(b, a) {
            return f.New(f.TransitionKeyframe, b, a)
        }
        GetValueX() {
            return this._valueX
        }
        GetValueY() {
            return this._valueY
        }
        GetStartAnchorX() {
            return this._startAnchorX
        }
        GetStartAnchorY() {
            return this._startAnchorY
        }
        GetEndAnchorX() {
            return this._endAnchorX
        }
        GetEndAnchorY() {
            return this._endAnchorY
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndEnable() {
            return this._endEnable
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.TransitionManager = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._transitions = []
        }
        Release() {
            for (const b of this._transitions) b.Release();
            f.clearArray(this._transitions);
            this._transitions = null
        }
        Create(b) {
            this._transitions.push(f.Transition.Create(b))
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SolStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._stack = [];
            this._stack.push(f.New(f.Sol, this));
            this._index = 0;
            this._current = this._stack[0]
        }
        Release() {
            for (const b of this._stack) b.Release();
            f.clearArray(this._stack);
            this._objectClass = this._current = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetCurrentSol() {
            return this._current
        }
        Clear() {
            this.GetCurrentSol().Clear()
        }
        PushClean() {
            var b = this._stack,
                a = ++this._index;
            a === b.length ? (a = f.New(f.Sol,
                this), b.push(a), this._current = a) : (b = b[a], b.Reset(), this._current = b)
        }
        PushCopy() {
            const b = this._stack,
                a = ++this._index;
            a === b.length && b.push(f.New(f.Sol, this));
            const d = b[a];
            d.Copy(b[a - 1]);
            this._current = d
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
        RemoveInstances(b) {
            const a = this._stack;
            for (let d = 0, c = a.length; d < c; ++d) a[d].RemoveInstances(b)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Sol = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._stack = b;
            this._objectClass = this._stack.GetObjectClass();
            this._eventStack = this._objectClass.GetRuntime().GetEventStack();
            this._selectAll = !0;
            this._instances = [];
            this._elseInstances = []
        }
        Release() {
            this.ClearArrays();
            this._eventStack = this._objectClass = this._stack = null
        }
        ClearArrays() {
            f.clearArray(this._instances);
            f.clearArray(this._elseInstances)
        }
        GetObjectClass() {
            return this._objectClass
        }
        IsSelectAll() {
            return this._selectAll
        }
        HasAnyInstances() {
            return this._selectAll ?
                !!this._objectClass.GetInstanceCount() : !!this._instances.length
        }
        GetInstances() {
            return this._selectAll ? this._objectClass.GetInstances() : this._instances
        }
        HasAnyElseInstances() {
            return !!this._elseInstances.length
        }
        GetElseInstances() {
            return this._elseInstances
        }
        GetExpressionInstances() {
            const b = this.GetInstances();
            return b.length ? b : this._elseInstances
        }
        Reset() {
            this._selectAll = !0;
            f.clearArray(this._elseInstances)
        }
        Clear() {
            this._selectAll = !0
        }
        Copy(b) {
            b.IsSelectAll() ? this.Reset() : (this._selectAll = !1, f.shallowAssignArray(this._instances,
                b._instances), f.clearArray(this._elseInstances))
        }
        _PushInstance(b) {
            this._instances.push(b)
        }
        _PushElseInstance(b) {
            this._elseInstances.push(b)
        }
        _SetSelectAll(b) {
            this._selectAll = !!b
        }
        _GetOwnInstances() {
            return this._instances
        }
        _GetOwnElseInstances() {
            return this._elseInstances
        }
        SetSinglePicked(b) {
            this._selectAll = !1;
            f.clearArray(this._instances);
            this._instances.push(b)
        }
        SetArrayPicked(b) {
            this._selectAll = !1;
            f.shallowAssignArray(this._instances, b)
        }
        SetSetPicked(b) {
            this._selectAll = !1;
            f.clearArray(this._instances);
            for (const a of b) this._instances.push(a)
        }
        AddElseInstances(b, a) {
            for (const d of a) b.has(d) || this._elseInstances.push(d)
        }
        TransferElseInstancesToOwn(b) {
            for (const a of b) this._instances.push(a);
            f.arrayRemoveAllInSet(this._elseInstances, b)
        }
        PickOne(b) {
            b && (this._eventStack.GetCurrentStackFrame().GetCurrentEvent().IsOrBlock() ? (this.IsSelectAll() && (f.clearArray(this._instances), f.shallowAssignArray(this._elseInstances, b.GetObjectClass().GetInstances()), this._selectAll = !1), b = this._elseInstances.indexOf(b), -1 !==
                b && (this._instances.push(this._elseInstances[b]), this._elseInstances.splice(b, 1))) : this.SetSinglePicked(b))
        }
        RemoveInstances(b) {
            f.arrayRemoveAllInSet(this._instances, b);
            f.arrayRemoveAllInSet(this._elseInstances, b)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.EventStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._stack.push(f.New(f.EventStackFrame, this, null));
            this._index = 0;
            this._expFuncStack = []
        }
        Release() {
            for (const b of this._stack) b.Release();
            f.clearArray(this._stack);
            f.clearArray(this._expFuncStack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrentStackFrame() {
            return this._stack[this._index]
        }
        Push(b) {
            var a =
                this._stack;
            const d = ++this._index;
            if (d === a.length) return b = f.New(f.EventStackFrame, this, b), a.push(b), b;
            a = a[d];
            a.Reset(b);
            return a
        }
        Pop() {
            --this._index
        }
        PushExpFunc(b) {
            this._expFuncStack.push(b)
        }
        PopExpFunc() {
            this._expFuncStack.pop()
        }
        GetCurrentExpFuncStackFrame() {
            const b = this._expFuncStack;
            return 0 === b.length ? null : b[b.length - 1]
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.EventStackFrame = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._stack = b;
            this._runtime = this._stack.GetRuntime();
            this._currentEvent = a;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1;
            this._expressionObjectClass = null;
            this._functionReturnValue = this._functionReturnType = 0
        }
        Release() {
            this.Reset(null);
            this._runtime = this._stack = null
        }
        Reset(b) {
            this._currentEvent = b;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1
        }
        _Restore(b,
            a) {
            this._currentEvent = b;
            this._cndIndex = 0;
            this._actIndex = a
        }
        ResetQuick() {
            this._actIndex = this._cndIndex = 0
        }
        GetCurrentEvent() {
            return this._currentEvent
        }
        SetCurrentEvent(b) {
            this._currentEvent = b
        }
        GetConditionIndex() {
            return this._cndIndex
        }
        SetConditionIndex(b) {
            this._cndIndex = b
        }
        GetActionIndex() {
            return this._actIndex
        }
        SetActionIndex(b) {
            this._actIndex = b
        }
        SetLastEventTrue(b) {
            this._lastEventTrue = !!b
        }
        GetLastEventTrue() {
            return this._lastEventTrue
        }
        SetElseBranchRan(b) {
            this._elseBranchRan = !!b
        }
        GetElseBranchRan() {
            return this._elseBranchRan
        }
        SetExpressionObjectClass(b) {
            this._expressionObjectClass =
                b
        }
        GetExpressionObjectClass() {
            return this._expressionObjectClass
        }
        InitCallFunctionExpression(b, a) {
            this._functionReturnType = b;
            this._functionReturnValue = a
        }
        GetFunctionReturnType() {
            return this._functionReturnType
        }
        SetFunctionReturnValue(b) {
            this._functionReturnValue = b
        }
        GetFunctionReturnValue() {
            return this._functionReturnValue
        }
        IsSolModifierAfterCnds() {
            const b = this._currentEvent;
            return b.IsSolWriterAfterCnds() ? !0 : this._cndIndex < b.GetConditionCount() - 1 ? !!b.GetSolModifiers().length : !1
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.LocalVarStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1;
            this._current = null;
            this._initialValues = []
        }
        Release() {
            f.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        _SetInitialValues(b) {
            this._initialValues = b;
            b = this._initialValues.slice(0);
            this._stack.push(b);
            this._index = 0;
            this._current = b
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrent() {
            return this._current
        }
        Push() {
            const b =
                ++this._index,
                a = this._stack;
            b === a.length ? a.push(this._initialValues.slice(0)) : f.shallowAssignArray(a[b], this._initialValues);
            this._current = a[b]
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.LoopStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1
        }
        Release() {
            f.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        IsInLoop() {
            return 0 <= this._index
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                var b =
                    f.New(f.Loop, this);
                this._stack.push(b);
                return b
            }
            b = this._stack[this._index];
            b.Reset();
            return b
        }
        Pop() {
            --this._index
        }
        FindByName(b) {
            const a = this._stack;
            for (let d = this._index; 0 <= d; --d) {
                const c = a[d];
                if (c.GetName() === b) return c
            }
            return null
        }
        _GetStack() {
            return this._stack.slice(0, this._index + 1)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Loop = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._loopStack = b;
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        Reset() {
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        Stop() {
            this._isStopped = !0
        }
        IsStopped() {
            return this._isStopped
        }
        SetEnd(b) {
            this._end = b
        }
        GetEnd() {
            return this._end
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.ArrayStack = class extends f.DefendedBase {
        constructor() {
            super();
            this._stack = [];
            this._index = -1
        }
        Release() {
            f.clearArray(this._stack)
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                const b = [];
                this._stack.push(b);
                return b
            }
            return this._stack[this._index]
        }
        Pop() {
            --this._index
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(d, c) {
        return d.GetIndex() - c.GetIndex()
    }

    function a(d, c) {
        for (let e = 0, g = d.length; e < g; ++e)
            if (d[e] !== c[e]) return !1;
        return !0
    }
    f.EventSheetManager = class extends f.DefendedBase {
        constructor(d) {
            super();
            this._runtime = d;
            this._allSheets = [];
            this._sheetsByName = new Map;
            this._allGroups = [];
            this._groupsByName = new Map;
            this._blocksBySid = new Map;
            this._cndsBySid = new Map;
            this._actsBySid = new Map;
            this._allUniqueSolModifiers = new Map;
            this._eventVarsBySid = new Map;
            this._nextLocalVarIndex =
                0;
            this._allGlobalVars = [];
            this._allLocalVars = [];
            this._localVarInitialValues = [];
            this._functionBlocksByName = new Map;
            this._eventStack = f.New(f.EventStack, this);
            this._localVarStack = f.New(f.LocalVarStack, this);
            this._loopStack = f.New(f.LoopStack, this);
            this._triggersToPostInit = [];
            this._queuedTriggers = [];
            this._queuedDebugTriggers = [];
            this._blockFlushingDepth = this._executingTriggerDepth = this._runningEventsDepth = 0;
            this._scheduledWaits = [];
            this._asyncActionPromises = [];
            self.c3_callFunction = (c, e) => this._InvokeFunctionFromJS(c,
                e)
        }
        Release() {
            this.ClearAllScheduledWaits();
            this._eventStack.Release();
            this._eventStack = null;
            this._localVarStack.Release();
            this._localVarStack = null;
            f.clearArray(this._queuedTriggers);
            f.clearArray(this._queuedDebugTriggers);
            this._runtime = null;
            f.clearArray(this._allSheets);
            this._sheetsByName.clear()
        }
        Create(d) {
            d = f.New(f.EventSheet, this, d);
            this._allSheets.push(d);
            this._sheetsByName.set(d.GetName().toLowerCase(), d)
        }
        _AddTriggerToPostInit(d) {
            this._triggersToPostInit.push(d)
        }
        _PostInit() {
            for (const d of this._functionBlocksByName.values()) d._PostInit(!1);
            for (const d of this._allSheets) d._PostInit();
            for (const d of this._allSheets) d._UpdateDeepIncludes();
            for (const d of this._triggersToPostInit) d._PostInit(!1);
            f.clearArray(this._triggersToPostInit);
            this._localVarStack._SetInitialValues(this._localVarInitialValues)
        }
        GetRuntime() {
            return this._runtime
        }
        GetEventSheetByName(d) {
            return this._sheetsByName.get(d.toLowerCase()) || null
        }
        _RegisterGroup(d) {
            this._allGroups.push(d);
            this._groupsByName.set(d.GetGroupName(), d)
        }
        _RegisterEventBlock(d) {
            this._blocksBySid.set(d.GetSID(),
                d)
        }
        _RegisterCondition(d) {
            this._cndsBySid.set(d.GetSID(), d)
        }
        _RegisterAction(d) {
            this._actsBySid.set(d.GetSID(), d)
        }
        _RegisterFunctionBlock(d) {
            this._functionBlocksByName.set(d.GetFunctionName().toLowerCase(), d)
        }
        _RegisterEventVariable(d) {
            this._eventVarsBySid.set(d.GetSID(), d);
            d.IsGlobal() ? this._allGlobalVars.push(d) : this._allLocalVars.push(d)
        }
        _DeduplicateSolModifierList(d) {
            2 <= d.length && d.sort(b);
            let c = this._allUniqueSolModifiers.get(d.length);
            c || (c = [], this._allUniqueSolModifiers.set(d.length, c));
            for (let e =
                    0, g = c.length; e < g; ++e) {
                const h = c[e];
                if (a(d, h)) return h
            }
            c.push(d);
            return d
        }
        _GetNextLocalVarIndex(d) {
            this._localVarInitialValues.push(d.GetInitialValue());
            return this._nextLocalVarIndex++
        }
        GetEventStack() {
            return this._eventStack
        }
        GetCurrentEventStackFrame() {
            return this.GetEventStack().GetCurrentStackFrame()
        }
        GetCurrentEvent() {
            return this.GetCurrentEventStackFrame().GetCurrentEvent()
        }
        GetCurrentCondition() {
            const d = this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetConditionAt(d.GetConditionIndex())
        }
        GetCurrentAction() {
            const d =
                this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetActionAt(d.GetActionIndex())
        }
        GetLocalVarStack() {
            return this._localVarStack
        }
        GetLoopStack() {
            return this._loopStack
        }
        GetAllLocalVariablesInScope(d) {
            const c = [];
            for (d = d.GetScopeParent(); d;) f.appendArray(c, d._GetAllLocalVariablesInScope()), d = d.GetScopeParent();
            return c
        }
        _GetLocalVariablesScriptInterface(d) {
            const c = {};
            for (const e of this.GetAllLocalVariablesInScope(d)) c[e.GetJsPropName()] = e._GetScriptInterfaceDescriptor();
            return Object.create(Object.prototype,
                c)
        }
        GetEventVariableBySID(d) {
            return this._eventVarsBySid.get(d) || null
        }
        GetEventBlockBySID(d) {
            return this._blocksBySid.get(d) || null
        }
        GetConditionBySID(d) {
            return this._cndsBySid.get(d) || null
        }
        GetActionBySID(d) {
            return this._actsBySid.get(d) || null
        }
        GetFunctionBlockByName(d) {
            return this._functionBlocksByName.get(d.toLowerCase()) || null
        }
        GetAllGlobalVariables() {
            return this._allGlobalVars
        }
        GetAllLocalVariables() {
            return this._allLocalVars
        }
        ResetAllGlobalsToInitialValue() {
            for (const d of this._allGlobalVars) d.ResetToInitialValue()
        }
        GetEventGroupByName(d) {
            return this._groupsByName.get(d.toLowerCase()) ||
                null
        }
        GetEventGroupBySID(d) {
            return (d = this._blocksBySid.get(d)) && d.IsGroup() ? d : null
        }
        GetAllGroups() {
            return this._allGroups
        }
        ResetAllGroupsInitialActivation() {
            for (const d of this._allGroups) d.ResetInitialActivation()
        }
        _ResetAllHasRunFlags() {
            for (const d of this._allSheets) d._ResetHasRunFlag()
        }
        RunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const c of d.runningLayouts())
                if (d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), d.Run(), this._runtime.PopCurrentLayout();
            this._runningEventsDepth--
        }
        async DebugRunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const c of this._DebugRunEventsGen(d)) await this._runtime.DebugBreak(c);
            this._runningEventsDepth--
        }* _DebugRunEventsGen(d) {
            for (const c of d.runningLayouts())
                if (d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), yield* d.DebugRun(), this._runtime.PopCurrentLayout()
        }
        _Trigger(d, c, e, g) {
            let h = !1;
            if (!d.GetMainRunningLayout()) return this.QueueTrigger(c, e, g);
            this._executingTriggerDepth++;
            for (const l of d.runningLayouts())
                if (d = l.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(l);
                    for (const n of d.deepIncludes()) {
                        const q = n._Trigger(c, e, g);
                        h = h || q
                    }
                    d = d._Trigger(c, e, g);
                    h = h || d;
                    this._runtime.PopCurrentLayout()
                }
            this._executingTriggerDepth--;
            return h
        }* _DebugTrigger(d, c, e, g) {
            let h = !1;
            if (!d.GetMainRunningLayout()) return this.QueueTrigger(c, e, g);
            this._executingTriggerDepth++;
            for (const l of d.runningLayouts())
                if (d = l.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(l);
                    for (const n of d.deepIncludes()) {
                        const q = yield* n._DebugTrigger(c, e, g);
                        h = h || q
                    }
                    d = yield* d._DebugTrigger(c, e, g);
                    h = h || d;
                    this._runtime.PopCurrentLayout()
                }
            this._executingTriggerDepth--;
            return h
        }
        QueueTrigger(d, c, e) {
            this._queuedTriggers.push([d, c, e]);
            return !1
        }
        QueueDebugTrigger(d, c, e) {
            let g = null;
            const h = new Promise(l => g = l);
            this._queuedDebugTriggers.push([d, c, e, g]);
            return h
        }* _RunQueuedDebugTriggersGen() {
            if (this._runtime.HitBreakpoint()) throw Error("should not be in breakpoint");
            const d = this._runtime.GetLayoutManager();
            for (; this._queuedDebugTriggers.length;) {
                const [c, e, g, h] = this._queuedDebugTriggers.shift(), l = yield* this._DebugTrigger(d, c, e, g);
                h(l)
            }
        }
        async RunQueuedDebugTriggersAsync() {
            for (const d of this._RunQueuedDebugTriggersGen()) await this._runtime.DebugBreak(d)
        }
        _FastTrigger(d,
            c, e, g) {
            let h = !1;
            var l = d.GetMainRunningLayout();
            if (d = l.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(l);
                l = d.deepIncludes();
                for (let n = 0, q = l.length; n < q; ++n) {
                    const y = l[n]._FastTrigger(c, e, g);
                    h = h || y
                }
                c = d._FastTrigger(c, e, g);
                h = h || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return h
            }
        }* _DebugFastTrigger(d, c, e, g) {
            let h = !1;
            var l = d.GetMainRunningLayout();
            if (d = l.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(l);
                l = d.deepIncludes();
                for (let n = 0, q = l.length; n < q; ++n) {
                    const y = yield* l[n]._DebugFastTrigger(c, e, g);
                    h = h || y
                }
                c = yield* d._DebugFastTrigger(c, e, g);
                h = h || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return h
            }
        }
        GetTriggerDepth() {
            return this._executingTriggerDepth
        }
        IsInTrigger() {
            return 0 < this.GetTriggerDepth()
        }
        _IncTriggerDepth() {
            return ++this._executingTriggerDepth
        }
        _DecTriggerDepth() {
            --this._executingTriggerDepth
        }
        IsRunningEvents() {
            return 0 < this._runningEventsDepth
        }
        IsInEventEngine() {
            return this.IsRunningEvents() ||
                this.IsInTrigger()
        }
        _RunQueuedTriggers(d) {
            for (const [c, e, g] of this._queuedTriggers) this._Trigger(d, c, e, g);
            f.clearArray(this._queuedTriggers)
        }
        BlockFlushingInstances(d) {
            d ? this._blockFlushingDepth++ : this._blockFlushingDepth--
        }
        IsFlushingBlocked() {
            return 0 < this._blockFlushingDepth
        }
        ClearSol(d) {
            for (let c = 0, e = d.length; c < e; ++c) d[c].GetSolStack().Clear()
        }
        PushCleanSol(d) {
            for (let c = 0, e = d.length; c < e; ++c) d[c].GetSolStack().PushClean()
        }
        PushCopySol(d) {
            for (let c = 0, e = d.length; c < e; ++c) d[c].GetSolStack().PushCopy()
        }
        PopSol(d) {
            for (let c =
                    0, e = d.length; c < e; ++c) d[c].GetSolStack().Pop()
        }
        AddScheduledWait() {
            const d = f.New(f.ScheduledWait, this);
            this._scheduledWaits.push(d);
            return d
        }
        scheduledWaits() {
            return this._scheduledWaits
        }
        RunScheduledWaits() {
            if (this._scheduledWaits.length) {
                var d = this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for (let e = 0, g = this._scheduledWaits.length; e < g; ++e) {
                    const h = this._scheduledWaits[e];
                    h._ShouldRun() && h._Run(d);
                    h.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        async DebugRunScheduledWaits() {
            if (this._scheduledWaits.length) {
                var d =
                    this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for (let e = 0, g = this._scheduledWaits.length; e < g; ++e) {
                    const h = this._scheduledWaits[e];
                    h._ShouldRun() && await h._DebugRun(d);
                    h.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        _FilterScheduledWaitsToRelease() {
            const d = f.arrayFilterOut(this._scheduledWaits, c => c.ShouldRelease());
            for (const c of d) c.Release()
        }
        ClearAllScheduledWaits() {
            for (const d of this._scheduledWaits) d.Release();
            f.clearArray(this._scheduledWaits)
        }
        RemoveInstancesFromScheduledWaits(d) {
            for (const c of this._scheduledWaits) c.RemoveInstances(d)
        }
        AddAsyncActionPromise(d) {
            this._asyncActionPromises.push(d)
        }
        ClearAsyncActionPromises() {
            f.clearArray(this._asyncActionPromises)
        }
        GetPromiseForAllAsyncActions() {
            const d =
                Promise.all(this._asyncActionPromises);
            this._asyncActionPromises = [];
            return d
        }
        _SaveToJson() {
            return {
                groups: this._SaveGroupsToJson(),
                cnds: this._SaveCndsToJson(),
                acts: this._SaveActsToJson(),
                vars: this._SaveVarsToJson(),
                waits: this._SaveScheduledWaitsToJson()
            }
        }
        _LoadFromJson(d) {
            this._LoadGroupsFromJson(d.groups);
            this._LoadCndsFromJson(d.cnds);
            this._LoadActsFromJson(d.acts);
            this._LoadVarsFromJson(d.vars);
            this._LoadScheduledWaitsFromJson(d.waits)
        }
        _SaveGroupsToJson() {
            const d = {};
            for (const c of this.GetAllGroups()) d[c.GetSID().toString()] =
                c.IsGroupActive();
            return d
        }
        _LoadGroupsFromJson(d) {
            for (const [c, e] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventGroupBySID(d)) && d.SetGroupActive(e)
        }
        _SaveCndsToJson() {
            const d = {};
            for (const [c, e] of this._cndsBySid) {
                const g = e._SaveToJson();
                g && (d[c.toString()] = g)
            }
            return d
        }
        _LoadCndsFromJson(d) {
            const c = new Map;
            for (const [e, g] of Object.entries(d)) c.set(parseInt(e, 10), g);
            for (const [e, g] of this._cndsBySid) g._LoadFromJson(c.get(e) || null)
        }
        _SaveActsToJson() {
            const d = {};
            for (const [c, e] of this._actsBySid) {
                const g =
                    e._SaveToJson();
                g && (d[c.toString()] = g)
            }
            return d
        }
        _LoadActsFromJson(d) {
            const c = new Map;
            for (const [e, g] of Object.entries(d)) c.set(parseInt(e, 10), g);
            for (const [e, g] of this._actsBySid) g._LoadFromJson(c.get(e) || null)
        }
        _SaveVarsToJson() {
            const d = {};
            for (const [c, e] of this._eventVarsBySid) e.IsConstant() || !e.IsGlobal() && !e.IsStatic() || (d[c.toString()] = e.GetValue());
            return d
        }
        _LoadVarsFromJson(d) {
            for (const [c, e] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventVariableBySID(d)) && d.SetValue(e)
        }
        _SaveScheduledWaitsToJson() {
            return this._scheduledWaits.filter(d =>
                !d.IsPromise()).map(d => d._SaveToJson())
        }
        _LoadScheduledWaitsFromJson(d) {
            this.ClearAllScheduledWaits();
            for (const c of d)(d = f.ScheduledWait._CreateFromJson(this, c)) && this._scheduledWaits.push(d)
        }
        _GetPerfRecords() {
            return [...this._runtime.GetLayoutManager().runningLayouts()].map(d => d.GetEventSheet()).filter(d => d).map(d => d._GetPerfRecord())
        }
        FindFirstFunctionBlockParent(d) {
            for (; d;)
                if (d = d.GetScopeParent(), d instanceof f.FunctionBlock) return d;
            return null
        }
        _InvokeFunctionFromJS(d, c) {
            Array.isArray(c) || (c = []);
            d = this.GetFunctionBlockByName(d.toLowerCase());
            if (!d) return null;
            if (!d.IsEnabled()) return d.GetDefaultReturnValue();
            var e = d.GetFunctionParameters();
            if (c.length < e.length) {
                c = c.slice(0);
                do c.push(e[c.length].GetInitialValue()); while (c.length < e.length)
            }
            e = d.GetEventBlock();
            return e.RunAsExpressionFunctionCall(e.GetSolModifiersIncludingParents(), d.GetReturnType(), d.GetDefaultReturnValue(), ...c)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.EventSheet = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._eventSheetManager = b;
            this._runtime = b.GetRuntime();
            this._name = a[0];
            this._events = [];
            this._triggers = new Map;
            this._fastTriggers = new Map;
            this._eventsByDisplayNumber = new Map;
            this._hasRun = !1;
            this._shallowIncludes = [];
            this._deepIncludes = [];
            this._alreadyIncludedSheets = new Set;
            for (const d of a[1]) this._CreateEvent(d, null, this._events);
            this._perfRecord = this._runtime.IsDebug() ? {
                type: "sheet",
                name: this._name,
                totalTimeCounter: 0,
                children: []
            } : null
        }
        Release() {
            this._runtime = this._eventSheetManager = null
        }
        _CreateEvent(b, a, d) {
            switch (b[0]) {
                case 0:
                case 3:
                    this._CreateEventBlock(b, a, d);
                    break;
                case 1:
                    this._CreateEventVariable(b, a, d);
                    break;
                case 2:
                    this._CreateInclude(b, a, d);
                    break;
                case 4:
                    this._CreateFunctionBlock(b, a);
                    break;
                case 5:
                    this._CreateScriptBlock(b, a, d);
                    break;
                default:
                    throw Error("invalid event type");
            }
        }
        _CreateEventBlock(b, a, d) {
            b = f.EventBlock.Create(this, a, b);
            if (b.IsOrBlock()) {
                d.push(b);
                d = b.GetConditions();
                for (let c = 0, e = d.length; c <
                    e; ++c) d[c].IsTrigger() && this._InitTrigger(b, c)
            } else b.IsTrigger() ? this._InitTrigger(b, 0) : d.push(b)
        }
        _CreateFunctionBlock(b, a) {
            b = f.FunctionBlock.Create(this, a, b);
            this._eventSheetManager._RegisterFunctionBlock(b)
        }
        _CreateEventVariable(b, a, d) {
            b = f.EventVariable.Create(this, a, b);
            d.push(b)
        }
        _CreateInclude(b, a, d) {
            b = f.EventInclude.Create(this, a, b);
            d.push(b)
        }
        _CreateScriptBlock(b, a, d) {
            b = f.EventScript.Create(this, a, b);
            d.push(b)
        }
        _InitTrigger(b, a) {
            b.IsOrBlock() || this._eventSheetManager._AddTriggerToPostInit(b);
            var d =
                b.GetConditionAt(a),
                c = d._GetFunc(),
                e = d.GetObjectClass();
            if (d.IsFastTrigger()) {
                var g = this._fastTriggers.get(e);
                g || (g = new Map, this._fastTriggers.set(e, g));
                d = d.GetFastTriggerValue().toLowerCase();
                e = g.get(c);
                e || (e = new Map, g.set(c, e));
                c = e.get(d);
                c || (c = [], e.set(d, c));
                c.push([b, a])
            } else g = this._triggers.get(e), g || (g = {
                    methodMap: new Map,
                    behaviors: new Map
                }, this._triggers.set(e, g)), (e = d.GetBehaviorType()) ? (d = g.behaviors.get(e), d || (d = new Map, g.behaviors.set(e, d))) : d = g.methodMap, g = d.get(c), g || (g = [], d.set(c, g)),
                g.push([b, a])
        }
        _PostInit() {
            const b = this._events;
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = a < d - 1 && b[a + 1] instanceof f.EventBlock && b[a + 1].IsElseBlock();
                b[a]._PostInit(c)
            }
        }
        _AddShallowInclude(b) {
            this._shallowIncludes.push(b)
        }
        _UpdateDeepIncludes() {
            f.clearArray(this._deepIncludes);
            this._AddDeepIncludes(this);
            this._alreadyIncludedSheets.clear()
        }
        _AddDeepIncludes(b) {
            const a = b._deepIncludes,
                d = b._alreadyIncludedSheets;
            for (const c of this._shallowIncludes) {
                const e = c.GetIncludeSheet();
                c.IsActive() && b !== e && !d.has(e) &&
                    (d.add(e), e._AddDeepIncludes(b), a.push(e))
            }
        }
        deepIncludes() {
            return this._deepIncludes
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        _RegisterEventByDisplayNumber(b, a) {
            this._eventsByDisplayNumber.set(a, b)
        }
        _GetEventByDisplayNumber(b) {
            return this._eventsByDisplayNumber.get(b) || null
        }
        _ResetHasRunFlag() {
            this._hasRun = !1
        }
        Run() {
            if (!this._hasRun) {
                var b = this._runtime,
                    a = b.IsCPUProfiling(),
                    d = a ? performance.now() : 0;
                this._hasRun = !0;
                var c = this.GetEventSheetManager(),
                    e = c.GetCurrentEventStackFrame();
                for (const g of this._events) g.Run(e), c.ClearSol(g.GetSolModifiers()), c.ClearAsyncActionPromises(), b.FlushPendingInstances();
                e.Reset(null);
                a && (this._perfRecord.totalTimeCounter += performance.now() - d)
            }
        }* DebugRun() {
            if (!this._hasRun) {
                this._hasRun = !0;
                var b = this._runtime,
                    a = this.GetEventSheetManager(),
                    d = a.GetCurrentEventStackFrame();
                for (const c of this._events) yield* c.DebugRun(d), a.ClearSol(c.GetSolModifiers()), a.ClearAsyncActionPromises(), b.FlushPendingInstances();
                d.Reset(null)
            }
        }
        _Trigger(b,
            a, d) {
            if (a) {
                const c = a.GetObjectClass();
                this._TriggerForClass(b, a, c, d);
                for (const e of c.GetFamilies()) this._TriggerForClass(b, a, e, d)
            } else return this._TriggerForClass(b, a, null, null)
        }
        _TriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if (!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if (!c) return !1;
            c = c.get(b);
            if (!c) return !1;
            b = !1;
            for (const [e, g] of c) c = this._ExecuteTrigger(a, e, g), b = b || c;
            return b
        }* _DebugTrigger(b, a, d) {
            if (a) {
                const c = a.GetObjectClass();
                yield* this._DebugTriggerForClass(b, a, c, d);
                for (const e of c.GetFamilies()) yield* this._DebugTriggerForClass(b,
                    a, e, d)
            } else return yield* this._DebugTriggerForClass(b, a, null, null)
        }* _DebugTriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if (!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if (!c) return !1;
            c = c.get(b);
            if (!c) return !1;
            b = !1;
            for (const [e, g] of c) c = e.DebugCanRunFast() ? this._ExecuteTrigger(a, e, g) : yield* this._DebugExecuteTrigger(a, e, g), b = b || c;
            return b
        }
        _FastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if (!a) return !1;
            b = a.get(b);
            if (!b) return !1;
            d = b.get(d);
            if (!d) return !1;
            b = !1;
            for (let c = 0, e = d.length; c <
                e; ++c) a = d[c], a = this._ExecuteTrigger(null, a[0], a[1]), b = b || a;
            return b
        }* _DebugFastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if (!a) return !1;
            b = a.get(b);
            if (!b) return !1;
            d = b.get(d);
            if (!d) return !1;
            b = !1;
            for (let e = 0, g = d.length; e < g; ++e) {
                var c = d[e];
                a = c[0];
                c = c[1];
                a = a.DebugCanRunFast() ? this._ExecuteTrigger(null, a, c) : yield* this._DebugExecuteTrigger(null, a, c);
                b = b || a
            }
            return b
        }
        _ExecuteTrigger(b, a, d) {
            const c = this._runtime,
                e = this._eventSheetManager,
                g = e.GetCurrentEvent(),
                h = e.GetEventStack(),
                l = e.GetTriggerDepth();
            let n = !1;
            g && e.PushCleanSol(g.GetSolModifiersIncludingParents());
            e.PushCleanSol(a.GetSolModifiersIncludingParents());
            const q = 1 < l;
            q && e.GetLocalVarStack().Push();
            const y = h.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if (a.GetParent()) {
                const w = a.GetTriggerParents();
                for (let u = 0, p = w.length; u < p; ++u)
                    if (!w[u].RunPreTrigger(y)) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? a.RunOrBlockTrigger(y, d) : a.Run(y), n =
                y.GetLastEventTrue());
            h.Pop();
            q && e.GetLocalVarStack().Pop();
            e.PopSol(a.GetSolModifiersIncludingParents());
            g && e.PopSol(g.GetSolModifiersIncludingParents());
            g || 1 !== l || (e.ClearAsyncActionPromises(), e.IsFlushingBlocked() || c.FlushPendingInstances());
            return n
        }* _DebugExecuteTrigger(b, a, d) {
            const c = this._runtime,
                e = this._eventSheetManager,
                g = e.GetCurrentEvent(),
                h = e.GetEventStack(),
                l = e.GetTriggerDepth();
            let n = !1;
            g && e.PushCleanSol(g.GetSolModifiersIncludingParents());
            e.PushCleanSol(a.GetSolModifiersIncludingParents());
            const q = 1 < l;
            q && e.GetLocalVarStack().Push();
            const y = h.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if (a.GetParent()) {
                const w = a.GetTriggerParents();
                for (let u = 0, p = w.length; u < p; ++u)
                    if (!(yield* w[u].DebugRunPreTrigger(y))) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? yield* a.DebugRunOrBlockTrigger(y, d): yield* a.DebugRun(y), n = y.GetLastEventTrue());
            h.Pop();
            q && e.GetLocalVarStack().Pop();
            e.PopSol(a.GetSolModifiersIncludingParents());
            g && e.PopSol(g.GetSolModifiersIncludingParents());
            g || 1 !== l || (e.ClearAsyncActionPromises(), e.IsFlushingBlocked() || c.FlushPendingInstances());
            return n
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [];

    function a(c, e) {
        return !0
    }

    function* d(c, e) {
        return !0
    }
    f.EventBlock = class extends f.DefendedBase {
        constructor(c, e, g) {
            super();
            this._eventSheet = c;
            this._runtime = c.GetRuntime();
            this._parent = e;
            this._scopeParent = null;
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._solModifiers = [];
            this._solModifiersIncludingParents = [];
            this._hasElseBlock = this._isTopLevelGroup = this._isSolWriterAfterCnds = this._hasGotSolModifiersIncludingParents = !1;
            this._isOrBlock = !!g[2];
            this._isElseBlock = !1;
            this._triggerParents = null;
            this._conditions = [];
            this._actions = [];
            this._subEvents = [];
            this._RunActions = a;
            this._DebugRunActions = d;
            this._isInitiallyActive = this._isGroup = !1;
            this._groupName = "";
            this._isGroupActive = !1;
            this._perfRecord = this._containedIncludes = null;
            this._sid = g[4];
            this._displayNumber = g[5];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: g[3][0],
                isBreakable: g[3][1],
                canRunAllConditionsFast: !1,
                canRunAllActionsFast: !1,
                canRunAllSubEventsFast: !1,
                canRunSelfFast: !1
            } : null;
            this.GetEventSheetManager()._RegisterEventBlock(this);
            3 === g[0] && this._InitGroup(g[1]);
            c = 0;
            for (var h of g[6]) e = f.Condition.Create(this, h, c++), this._conditions.push(e), this._AddSolModifier(e.GetObjectClass());
            c = 0;
            for (const l of g[7]) h = f.Action.Create(this, l, c++), this._actions.push(h);
            if (9 === g.length) {
                g = g[8];
                for (const l of g) this._eventSheet._CreateEvent(l, this, this._subEvents)
            }
            this._conditions.length && (this._isElseBlock = null === this._conditions[0].GetObjectClass() &&
                this._conditions[0]._GetFunc() === f.Plugins.System.Cnds.Else);
            0 === this._conditions.length && (this._conditions = b);
            0 === this._actions.length && (this._actions = b);
            0 === this._subEvents.length && (this._subEvents = b)
        }
        static Create(c, e, g) {
            return f.New(f.EventBlock, c, e, g)
        }
        _InitGroup(c) {
            this._isGroup = !0;
            this._isGroupActive = this._isInitiallyActive = !!c[0];
            this._groupName = c[1].toLowerCase();
            this._containedIncludes = [];
            this.GetEventSheetManager()._RegisterGroup(this);
            this._runtime.IsDebug() && (this._perfRecord = {
                type: "group",
                name: c[1],
                totalTimeCounter: 0,
                children: []
            })
        }
        _AddContainedInclude(c) {
            this._containedIncludes.push(c)
        }
        _AddContainerSolModifierToList(c, e) {
            for (const g of c.GetContainer().objectTypes()) e.includes(g) || e.push(g)
        }
        _AddSolModifierToList(c, e) {
            if (c)
                if (e.includes(c) || e.push(c), c.IsFamily())
                    for (const g of c.GetFamilyMembers()) g.IsInContainer() && this._AddContainerSolModifierToList(g, e);
                else c.IsInContainer() && this._AddContainerSolModifierToList(c, e)
        }
        _AddSolModifier(c) {
            this._AddSolModifierToList(c, this._solModifiers)
        }
        _AddParentSolModifier(c) {
            this._AddSolModifierToList(c,
                this._solModifiersIncludingParents)
        }
        SetAllSolModifiers() {
            this._solModifiers = this._runtime.GetAllObjectClasses()
        }
        _PostInit(c) {
            this._hasElseBlock = !!c;
            this._IdentifyTopLevelGroup();
            this._IdentifyTriggerParents();
            for (const g of this._conditions) g._PostInit();
            if (0 < this._actions.length) {
                c = !1;
                for (var e of this._actions) e._PostInit(), e.HasReturnType() && (c = !0);
                c ? (this._RunActions = this._RunActions_ReturnValue, this._DebugRunActions = this._DebugRunActions_ReturnValue) : (this._RunActions = this._RunActions_Fast, this._DebugRunActions =
                    this._DebugRunActions_Fast)
            }
            e = this._subEvents;
            for (let g = 0, h = e.length; g < h; ++g) c = g < h - 1 && e[g + 1] instanceof f.EventBlock && e[g + 1].IsElseBlock(), e[g]._PostInit(c);
            this._debugData && this._UpdateCanRunFast();
            this._perfRecord && this._GetPerfRecordParent()._GetPerfRecord().children.push(this._perfRecord)
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
        _GetPerfRecordParent() {
            let c = this.GetParent();
            for (; c;) {
                if (c.IsGroup()) return c;
                c = c.GetParent()
            }
            return this._eventSheet
        }
        _UpdateCanRunFast() {
            const c = this._debugData;
            c.canRunAllConditionsFast =
                this._conditions.every(e => e.DebugCanRunFast());
            c.canRunAllActionsFast = this._actions.every(e => e.DebugCanRunFast());
            c.canRunAllSubEventsFast = this._subEvents.every(e => e.DebugCanRunFast());
            c.canRunSelfFast = c.canRunAllConditionsFast && c.canRunAllActionsFast && c.canRunAllSubEventsFast
        }
        _UpdateCanRunFastRecursive() {
            let c = this;
            do c._UpdateCanRunFast(), c = c.GetParent(); while (c)
        }
        _IdentifyTopLevelGroup() {
            if (this.IsGroup()) {
                var c = this.GetParent();
                for (this._isTopLevelGroup = !0; c;) {
                    if (!c.IsGroup()) {
                        this._isTopLevelGroup = !1;
                        break
                    }
                    c = c.GetParent()
                }
            }
        }
        _IdentifySolModifiersIncludingParents() {
            var c = this._runtime.GetAllObjectClasses();
            if (this._solModifiers === c) this._solModifiersIncludingParents = c;
            else {
                this._solModifiersIncludingParents = f.cloneArray(this._solModifiers);
                for (c = this.GetParent(); c;) {
                    for (var e of c._solModifiers) this._AddParentSolModifier(e);
                    c = c.GetParent()
                }
                e = this.GetEventSheetManager();
                this._solModifiers = e._DeduplicateSolModifierList(this._solModifiers);
                this._solModifiersIncludingParents = e._DeduplicateSolModifierList(this._solModifiersIncludingParents)
            }
        }
        _IdentifyTriggerParents() {
            if (this.HasAnyTriggeredCondition()) {
                this._triggerParents = [];
                for (var c = this.GetParent(); c;) this._triggerParents.push(c), c = c.GetParent();
                this._triggerParents.reverse()
            }
        }
        SetSolWriterAfterCnds() {
            this._isSolWriterAfterCnds = !0;
            this._parent && this._parent.SetSolWriterAfterCnds()
        }
        IsSolWriterAfterCnds() {
            return this._isSolWriterAfterCnds
        }
        GetSolModifiers() {
            return this._solModifiers
        }
        GetSolModifiersIncludingParents() {
            this._hasGotSolModifiersIncludingParents || (this._hasGotSolModifiersIncludingParents = !0, this._IdentifySolModifiersIncludingParents());
            return this._solModifiersIncludingParents
        }
        HasSolModifier(c) {
            return this._solModifiers.includes(c)
        }
        GetTriggerParents() {
            return this._triggerParents
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetEventSheetManager() {
            return this._eventSheet.GetEventSheetManager()
        }
        GetRuntime() {
            return this._runtime
        }
        GetParent() {
            return this._parent
        }
        _SetScopeParent(c) {
            this._scopeParent =
                c
        }
        GetScopeParent() {
            return this._scopeParent || this._parent
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._UpdateCanRunFastRecursive()
        }
        IsGroup() {
            return this._isGroup
        }
        IsTopLevelGroup() {
            return this._isTopLevelGroup
        }
        IsElseBlock() {
            return this._isElseBlock
        }
        HasElseBlock() {
            return this._hasElseBlock
        }
        GetGroupName() {
            return this._groupName
        }
        IsGroupActive() {
            return this._isGroupActive
        }
        ResetInitialActivation() {
            this.SetGroupActive(this._isInitiallyActive)
        }
        SetGroupActive(c) {
            c = !!c;
            if (!this._isGroup) throw Error("not a group");
            if (this._isGroupActive !== c) {
                this._isGroupActive = c;
                for (const e of this._containedIncludes) e.UpdateActive();
                this._containedIncludes.length && (c = this._runtime.GetCurrentLayout().GetEventSheet()) && c._UpdateDeepIncludes()
            }
        }
        GetSID() {
            return this._sid
        }
        IsOrBlock() {
            return this._isOrBlock
        }
        IsTrigger() {
            return this._conditions.length && this._conditions[0].IsTrigger()
        }
        IsForFunctionBlock() {
            return this._scopeParent && this._scopeParent instanceof f.FunctionBlock
        }
        HasAnyTriggeredCondition() {
            return this.IsForFunctionBlock() ||
                this._conditions.some(c => c.IsTrigger())
        }
        GetConditions() {
            return this._conditions
        }
        GetConditionCount() {
            return this._conditions.length
        }
        GetConditionAt(c) {
            c = Math.floor(c);
            if (0 > c || c >= this._conditions.length) throw new RangeError("invalid condition index");
            return this._conditions[c]
        }
        GetConditionByDebugIndex(c) {
            return this.GetConditionAt(c)
        }
        IsFirstConditionOfType(c) {
            let e = c.GetIndex();
            if (0 === e) return !0;
            for (--e; 0 <= e; --e)
                if (this._conditions[e].GetObjectClass() === c.GetObjectClass()) return !1;
            return !0
        }
        GetActions() {
            return this._actions
        }
        GetActionCount() {
            return this._actions.length
        }
        GetActionAt(c) {
            c =
                Math.floor(c);
            if (0 > c || c >= this._actions.length) throw new RangeError("invalid action index");
            return this._actions[c]
        }
        GetActionByDebugIndex(c) {
            c = Math.floor(c);
            const e = this._actions.find(g => g.GetDebugIndex() === c);
            if (!e) throw new RangeError("invalid action debug index");
            return e
        }
        _HasActionIndex(c) {
            c = Math.floor(c);
            return 0 <= c && c < this._actions.length
        }
        GetSubEvents() {
            return this._subEvents
        }
        _GetAllLocalVariablesInScope() {
            return this._subEvents.filter(c => c instanceof f.EventVariable)
        }
        RunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let e = !1;
            const g = this._conditions;
            for (let h = 0, l = g.length; h < l; ++h) {
                const n = g[h];
                c.SetConditionIndex(h);
                if (n.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if (n.Run()) e = !0;
                else if (!this._isOrBlock) return !1
            }
            return this._isOrBlock ? e : !0
        }
        RunOrBlockTrigger(c, e) {
            c.SetCurrentEvent(this);
            this._conditions[e].Run() && (this._RunActions(c, 0) && this._RunSubEvents(c), c.SetLastEventTrue(!0))
        }* DebugRunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let e = !1;
            const g = this._conditions;
            for (let h = 0, l = g.length; h <
                l; ++h) {
                const n = g[h];
                c.SetConditionIndex(h);
                if (n.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if (n.DebugCanRunFast() ? n.Run() : yield* n.DebugRun()) e = !0;
                else if (!this._isOrBlock) return !1
            }
            return this._isOrBlock ? e : !0
        }* DebugRunOrBlockTrigger(c, e) {
            c.SetCurrentEvent(this);
            e = this._conditions[e];
            if (e.DebugCanRunFast() ? e.Run() : yield* e.DebugRun())(this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() :
                yield* this._DebugRunSubEvents()), c.SetLastEventTrue(!0)
        }
        Run(c) {
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? this._RunOrBlock(c) : this._RunAndBlock(c)
        }* DebugRun(c) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? yield* this._DebugRunOrBlock(c): yield* this._DebugRunAndBlock(c)
        }
        _RunOrBlock(c) {
            const e = this._conditions;
            let g = 0 === e.length;
            for (let l = 0, n = e.length; l < n; ++l) {
                var h =
                    e[l];
                h.IsTrigger() || (c.SetConditionIndex(l), h = h.Run(), g = g || h)
            }
            c.SetLastEventTrue(g);
            g && (this._RunActions(c, 0) && this._RunSubEvents(c), this._hasElseBlock && c.SetElseBranchRan(!0))
        }* _DebugRunOrBlock(c) {
            const e = this._conditions;
            let g = 0 === e.length;
            for (let l = 0, n = e.length; l < n; ++l) {
                var h = e[l];
                h.IsTrigger() || (c.SetConditionIndex(l), h = h.DebugCanRunFast() ? h.Run() : yield* h.DebugRun(), g = g || h)
            }
            c.SetLastEventTrue(g);
            g && ((this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ?
                this._RunSubEvents() : yield* this._DebugRunSubEvents()), this._hasElseBlock && c.SetElseBranchRan(!0))
        }
        _RunAndBlock(c) {
            const e = this._conditions;
            for (let g = 0, h = e.length; g < h; ++g) {
                const l = e[g];
                c.SetConditionIndex(g);
                if (!l.Run()) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            this._RunActions(c, 0) && this._RunSubEvents(c);
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }* _DebugRunAndBlock(c) {
            const e = this._conditions;
            for (let g = 0, h = e.length; g < h; ++g) {
                const l = e[g];
                c.SetConditionIndex(g);
                if (l.DebugCanRunFast() ?
                    !l.Run() : !(yield* l.DebugRun())) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            (this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }
        _RunActions_Fast(c, e) {
            const g = this._actions;
            for (let h = e, l = g.length; h < l; ++h) e = g[h], c.SetActionIndex(h), e.Run();
            return !0
        }* _DebugRunActions_Fast(c, e) {
            const g = this._actions;
            for (let h =
                    e, l = g.length; h < l; ++h) e = g[h], c.SetActionIndex(h), e.DebugCanRunFast() ? e.Run() : yield* e.DebugRun();
            return !0
        }
        _RunActions_ReturnValue(c, e) {
            const g = this.GetEventSheetManager(),
                h = this._actions;
            for (let l = e, n = h.length; l < n; ++l) {
                e = h[l];
                c.SetActionIndex(l);
                const q = e.Run();
                if (e.CanBailOut() && !0 === q) return !1;
                e.IsAsync() && q instanceof Promise && g.AddAsyncActionPromise(q)
            }
            return !0
        }* _DebugRunActions_ReturnValue(c, e) {
            const g = this.GetEventSheetManager(),
                h = this._actions;
            for (let l = e, n = h.length; l < n; ++l) {
                e = h[l];
                c.SetActionIndex(l);
                let q;
                q = e.DebugCanRunFast() ? e.Run() : yield* e.DebugRun();
                if (e.CanBailOut() && !0 === q) return !1;
                e.IsAsync() && q instanceof Promise && g.AddAsyncActionPromise(q)
            }
            return !0
        }
        _ResumeActionsAndSubEvents(c) {
            this._RunActions(c, c.GetActionIndex()) && this._RunSubEvents()
        }* _DebugResumeActionsAndSubEvents(c) {
            if (yield* this._DebugRunActions(c, c.GetActionIndex())) yield* this._DebugRunSubEvents()
        }
        _RunSubEvents() {
            if (this._subEvents.length) {
                var c = this.IsGroup() && this._runtime.IsCPUProfiling(),
                    e = c ? performance.now() : 0,
                    g = this._eventStack,
                    h = g.Push(this);
                this._isSolWriterAfterCnds ? this._RunSubEvents_SolWriterAfterCnds(h) : this._RunSubEvents_Fast(h);
                g.Pop();
                c && (this._perfRecord.totalTimeCounter += performance.now() - e)
            }
        }
        _RunSubEvents_SolWriterAfterCnds(c) {
            const e = this._isGroup,
                g = this._isTopLevelGroup,
                h = this.GetEventSheetManager(),
                l = this._subEvents;
            for (let n = 0, q = l.length, y = q - 1; n < q; ++n) {
                const w = l[n],
                    u = w.GetSolModifiers(),
                    p = !g || !e && n < y;
                p && h.PushCopySol(u);
                w.Run(c);
                p ? h.PopSol(u) : h.ClearSol(u)
            }
        }
        _RunSubEvents_Fast(c) {
            const e = this._subEvents;
            for (let g =
                    0, h = e.length; g < h; ++g) e[g].Run(c)
        }* _DebugRunSubEvents() {
            if (this._subEvents.length) {
                var c = this._eventStack,
                    e = c.Push(this);
                this._isSolWriterAfterCnds ? yield* this._DebugRunSubEvents_SolWriterAfterCnds(e): yield* this._DebugRunSubEvents_Fast(e);
                c.Pop()
            }
        }* _DebugRunSubEvents_SolWriterAfterCnds(c) {
            const e = this._isGroup,
                g = this._isTopLevelGroup,
                h = this.GetEventSheetManager(),
                l = this._subEvents;
            for (let n = 0, q = l.length, y = q - 1; n < q; ++n) {
                const w = l[n],
                    u = w.GetSolModifiers(),
                    p = !g || !e && n < y;
                p && h.PushCopySol(u);
                yield* w.DebugRun(c);
                p ? h.PopSol(u) : h.ClearSol(u)
            }
        }* _DebugRunSubEvents_Fast(c) {
            const e = this._subEvents;
            for (let g = 0, h = e.length; g < h; ++g) yield* e[g].DebugRun(c)
        }
        Retrigger(c, e) {
            this._runtime.IncrementExecCount();
            e.ResetQuick();
            const g = this._conditions;
            if (!this.IsOrBlock())
                for (let h = c.GetConditionIndex() + 1, l = g.length; h < l; ++h)
                    if (c = g[h], e.SetConditionIndex(h), !c.Run()) return !1;
            this._RunActions(e, 0) && this._RunSubEvents(e);
            return !0
        }* DebugRetrigger(c, e) {
            this._runtime.IncrementExecCount();
            e.ResetQuick();
            const g = this._conditions;
            if (!this.IsOrBlock())
                for (let h =
                        c.GetConditionIndex() + 1, l = g.length; h < l; ++h)
                    if (c = g[h], e.SetConditionIndex(h), c.DebugCanRunFast() ? !c.Run() : !(yield* c.DebugRun())) return !1;
            (this.DebugCanRunActionsFast() ? this._RunActions(e, 0) : yield* this._DebugRunActions(e, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            return !0
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext() && this._debugData.canRunSelfFast
        }
        DebugCanRunActionsFast() {
            return !this._runtime.DebugBreakNext() && this._debugData.canRunAllActionsFast
        }
        DebugCanRunSubEventsFast() {
            return !this._runtime.DebugBreakNext() &&
                this._debugData.canRunAllSubEventsFast
        }
        _CheckParentsOKToRun(c) {
            if (this.GetParent()) {
                const e = this.GetTriggerParents();
                for (let g = 0, h = e.length; g < h; ++g)
                    if (!e[g].RunPreTrigger(c)) return !1
            }
            return !0
        }* _DebugCheckParentsOKToRun(c) {
            if (this.GetParent()) {
                const e = this.GetTriggerParents();
                for (let g = 0, h = e.length; g < h; ++g)
                    if (!(yield* e[g].DebugRunPreTrigger(c))) return !1
            }
            return !0
        }
        _EvaluateFunctionCallParameters(c, e, g) {
            0 < e.length ? g ? (e = e.map(h => h.Get(0)), c.GetLocalVarStack().Push(), this._scopeParent.SetFunctionParameters(e)) :
                this._scopeParent.EvaluateFunctionParameters(e) : g && c.GetLocalVarStack().Push()
        }
        RunAsFunctionCall(c, e) {
            let g, h;
            const l = 0 < c.length;
            var n = this._runtime;
            const q = this._eventStack,
                y = n.GetEventSheetManager(),
                w = 1 < y._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(y, e, w);
            l && y.PushCleanSol(c);
            e = q.Push(this);
            this._CheckParentsOKToRun(e) && (n.IncrementExecCount(), e.SetCurrentEvent(this), (n = this._scopeParent.IsAsync()) && ([h, g] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(e), n && this._scopeParent.MaybeFinishAsyncFunctionCall(h));
            q.Pop();
            w && y.GetLocalVarStack().Pop();
            l && y.PopSol(c);
            y._DecTriggerDepth();
            return g
        }* DebugRunAsFunctionCall(c, e) {
            let g, h;
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const l = 0 < c.length;
            var n = this._runtime;
            const q = this._eventStack,
                y = n.GetEventSheetManager(),
                w = 1 < y._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(y, e, w);
            l && y.PushCleanSol(c);
            e = q.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(e)) n.IncrementExecCount(), e.SetCurrentEvent(this), (n = this._scopeParent.IsAsync()) &&
                ([h, g] = this._scopeParent.StartAsyncFunctionCall()), yield* this._DebugRunAndBlock(e), n && this._scopeParent.MaybeFinishAsyncFunctionCall(h);
            q.Pop();
            w && y.GetLocalVarStack().Pop();
            l && y.PopSol(c);
            y._DecTriggerDepth();
            return g
        }
        RunAsMappedFunctionCall(c) {
            const e = this.GetSolModifiersIncludingParents(),
                g = 0 < e.length,
                h = this._runtime,
                l = this._eventStack,
                n = h.GetEventSheetManager(),
                q = 1 < n._IncTriggerDepth();
            q && n.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            g && n.PushCleanSol(e);
            c = l.Push(this);
            this._CheckParentsOKToRun(c) && (h.IncrementExecCount(), c.SetCurrentEvent(this), this._RunAndBlock(c));
            l.Pop();
            q && n.GetLocalVarStack().Pop();
            g && n.PopSol(e);
            n._DecTriggerDepth()
        }* DebugRunAsMappedFunctionCall(c) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const e = this.GetSolModifiersIncludingParents(),
                g = 0 < e.length,
                h = this._runtime,
                l = this._eventStack,
                n = h.GetEventSheetManager(),
                q = 1 < n._IncTriggerDepth();
            q && n.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            g &&
                n.PushCleanSol(e);
            c = l.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(c)) h.IncrementExecCount(), c.SetCurrentEvent(this), yield* this._DebugRunAndBlock(c);
            l.Pop();
            q && n.GetLocalVarStack().Pop();
            g && n.PopSol(e);
            n._DecTriggerDepth()
        }
        RunAsExpressionFunctionCall(c, e, g, ...h) {
            let l, n;
            const q = 0 < c.length,
                y = this._runtime,
                w = this._eventStack,
                u = y.GetEventSheetManager(),
                p = 1 < u._IncTriggerDepth();
            p && u.GetLocalVarStack().Push();
            0 < h.length && this._scopeParent.SetFunctionParameters(h);
            q && u.PushCleanSol(c);
            h = w.Push(this);
            h.InitCallFunctionExpression(e, g);
            w.PushExpFunc(h);
            y.SetDebuggingEnabled(!1);
            this._CheckParentsOKToRun(h) && (y.IncrementExecCount(), h.SetCurrentEvent(this), (e = this._scopeParent.IsAsync()) && ([n, l] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(h), e && this._scopeParent.MaybeFinishAsyncFunctionCall(n));
            y.SetDebuggingEnabled(!0);
            w.Pop();
            w.PopExpFunc();
            p && u.GetLocalVarStack().Pop();
            q && u.PopSol(c);
            u._DecTriggerDepth();
            return l || h.GetFunctionReturnValue()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [];
    let a = !1;
    f.EventScript = class extends f.DefendedBase {
        constructor(d, c, e) {
            super();
            const g = d.GetRuntime(),
                h = d.GetEventSheetManager();
            this._eventSheet = d;
            this._eventSheetManager = h;
            this._runtime = d.GetRuntime();
            this._parent = c;
            this._func = g.GetObjectReference(e[1]);
            this._displayNumber = e[2];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = g.IsDebug() ? {
                isBreakpoint: e[3][0],
                isBreakable: e[3][1]
            } : null
        }
        static Create(d, c, e) {
            return f.New(f.EventScript,
                d, c, e)
        }
        _PostInit() {
            const d = this._func,
                c = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this);
            this._func = d.bind(null, this._runtime.GetIRuntime(), c)
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(d) {
            this._debugData.isBreakpoint = !!d
        }
        IsElseBlock() {
            return !1
        }
        GetSolModifiers() {
            return b
        }
        GetSolModifiersIncludingParents() {
            return this._parent ? this._parent.GetSolModifiersIncludingParents() : b
        }
        Run(d) {
            d.SetCurrentEvent(this);
            this._eventSheetManager.AddAsyncActionPromise(this._RunUserScript())
        }
        async _RunUserScript() {
            try {
                await this._func()
            } catch (d) {
                console.error(`Unhandled exception running script %c${this.GetEventSheet().GetName()}, event ${this.GetDisplayNumber()}:`, "font-size: 1.2em; font-weight: bold;", d), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    a || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), a = !0)
            }
        }* DebugRun(d) {
            d.SetCurrentEvent(this);
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            this.Run(d)
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext()
        }
        static HadUserScriptException() {
            return a
        }
        static SetHadUserScriptException() {
            a = !0
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.FunctionBlock = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._eventSheet = b;
            this._runtime = b.GetRuntime();
            this._parent = a;
            const c = d[1];
            this._functionName = c[0];
            this._returnType = c[1];
            this._functionParameters = c[2].map(e => f.EventVariable.Create(b, this, e));
            this._isEnabled = c[3];
            this._innerLocalVariables = [];
            this._isAsync = c[4];
            this._nextAsyncId = 0;
            this._currentAsyncId = -1;
            this._asyncMap = new Map;
            this._eventBlock = f.EventBlock.Create(b, a, d);
            this._eventBlock._SetScopeParent(this)
        }
        static Create(b,
            a, d) {
            return f.New(f.FunctionBlock, b, a, d)
        }
        _PostInit() {
            for (const b of this._functionParameters) b._PostInit();
            this._eventBlock._PostInit(!1)
        }
        _GetAllLocalVariablesInScope() {
            return this._functionParameters
        }
        GetFunctionParameters() {
            return this._functionParameters
        }
        GetFunctionParameterCount() {
            return this._functionParameters.length
        }
        _RegisterLocalVariable(b) {
            this._innerLocalVariables.push(b)
        }
        _GetAllInnerLocalVariables() {
            return this._innerLocalVariables
        }
        EvaluateFunctionParameters(b) {
            const a = this._functionParameters;
            for (let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d].Get(0))
        }
        SetFunctionParameters(b) {
            const a = this._functionParameters;
            for (let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d])
        }
        CaptureFunctionParameters() {
            return this._functionParameters.map(b => b.GetValue())
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetFunctionName() {
            return this._functionName
        }
        GetReturnType() {
            return this._returnType
        }
        IsEnabled() {
            return this._isEnabled
        }
        GetDefaultReturnValue() {
            switch (this._returnType) {
                case 0:
                    return null;
                case 2:
                    return "";
                default:
                    return 0
            }
        }
        GetEventBlock() {
            return this._eventBlock
        }
        IsAsync() {
            return this._isAsync
        }
        StartAsyncFunctionCall() {
            const b = this._nextAsyncId++;
            this._currentAsyncId = b;
            let a;
            const d = new Promise(c => a = c);
            this._asyncMap.set(b, {
                resolve: a,
                pauseCount: 0
            });
            return [b, d]
        }
        MaybeFinishAsyncFunctionCall(b) {
            const a = this._asyncMap.get(b);
            0 === a.pauseCount && (a.resolve(), this._asyncMap.delete(b));
            this._currentAsyncId = -1
        }
        PauseCurrentAsyncFunction() {
            this._asyncMap.get(this._currentAsyncId).pauseCount++;
            return this._currentAsyncId
        }
        ResumeAsyncFunction(b) {
            this._currentAsyncId =
                b;
            this._asyncMap.get(b).pauseCount--
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [];
    f.EventVariable = class extends f.DefendedBase {
        constructor(a, d, c) {
            super();
            const e = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = e;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._localVarStack = e.GetLocalVarStack();
            this._name = c[1];
            this._type = c[2];
            this._initialValue = c[3];
            this._isStatic = !!c[4];
            this._isConstant = !!c[5];
            this._isFunctionParameter = d instanceof f.FunctionBlock;
            this._sid = c[6];
            this._jsPropName = this._runtime.GetJsPropName(c[8]);
            this._scriptSetter =
                g => this.SetValue(g);
            this._scriptGetter = () => this.GetValue();
            this._hasSingleValue = !this._parent || this._isStatic || this._isConstant;
            this._value = this._initialValue;
            this._localIndex = -1;
            this.IsBoolean() && (this._value = this._value ? 1 : 0);
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || (this._localIndex = e._GetNextLocalVarIndex(this));
            e._RegisterEventVariable(this)
        }
        static Create(a, d, c) {
            return f.New(f.EventVariable, a, d, c)
        }
        _PostInit() {
            if (this.IsLocal() && !this.IsStatic() && !this.IsConstant() && !this.IsFunctionParameter()) {
                const a =
                    this._eventSheetManager.FindFirstFunctionBlockParent(this);
                a && a._RegisterLocalVariable(this)
            }
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this.GetParent()
        }
        IsGlobal() {
            return !this.GetParent()
        }
        IsLocal() {
            return !this.IsGlobal()
        }
        IsFunctionParameter() {
            return this._isFunctionParameter
        }
        IsStatic() {
            return this._isStatic
        }
        IsConstant() {
            return this._isConstant
        }
        IsNumber() {
            return 0 === this._type
        }
        IsString() {
            return 1 === this._type
        }
        IsBoolean() {
            return 2 ===
                this._type
        }
        IsElseBlock() {
            return !1
        }
        GetSID() {
            return this._sid
        }
        GetInitialValue() {
            return this._initialValue
        }
        GetSolModifiers() {
            return b
        }
        Run(a) {
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || this.SetValue(this.GetInitialValue())
        }
        DebugCanRunFast() {
            return !0
        }* DebugRun(a) {
            this.Run(a)
        }
        SetValue(a) {
            this.IsNumber() ? "number" !== typeof a && (a = parseFloat(a)) : this.IsString() ? "string" !== typeof a && (a = a.toString()) : this.IsBoolean() && (a = a ? 1 : 0);
            this._hasSingleValue ? this._value = a : this._localVarStack.GetCurrent()[this._localIndex] =
                a
        }
        GetValue() {
            return this._hasSingleValue ? this._value : this._localVarStack.GetCurrent()[this._localIndex]
        }
        GetTypedValue() {
            let a = this.GetValue();
            this.IsBoolean() && (a = !!a);
            return a
        }
        ResetToInitialValue() {
            this._value = this._initialValue
        }
        _GetScriptInterfaceDescriptor() {
            return {
                configurable: !1,
                enumerable: !0,
                get: this._scriptGetter,
                set: this._scriptSetter
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [];
    f.EventInclude = class extends f.DefendedBase {
        constructor(a, d, c) {
            super();
            const e = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = e;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._includeSheet = null;
            this._includeSheetName = c[1];
            this._isActive = !0
        }
        static Create(a, d, c) {
            return f.New(f.EventInclude, a, d, c)
        }
        _PostInit() {
            this._includeSheet = this._eventSheetManager.GetEventSheetByName(this._includeSheetName);
            this._eventSheet._AddShallowInclude(this);
            let a =
                this.GetParent();
            for (; a;) a instanceof f.EventBlock && a.IsGroup() && a._AddContainedInclude(this), a = a.GetParent();
            this.UpdateActive();
            this._runtime.IsDebug() && this._eventSheet._GetPerfRecord().children.push(this._includeSheet._GetPerfRecord())
        }
        GetParent() {
            return this._parent
        }
        GetSolModifiers() {
            return b
        }
        GetIncludeSheet() {
            return this._includeSheet
        }
        Run(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            this._includeSheet.Run();
            a && this._eventSheetManager.PopSol(d)
        }* DebugRun(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            yield* this._includeSheet.DebugRun();
            a && this._eventSheetManager.PopSol(d)
        }
        DebugCanRunFast() {
            return !1
        }
        IsActive() {
            return this._isActive
        }
        UpdateActive() {
            let a = this.GetParent();
            for (; a;) {
                if (a instanceof f.EventBlock && a.IsGroup() && !a.IsGroupActive()) {
                    this._isActive = !1;
                    return
                }
                a = a.GetParent()
            }
            this._isActive = !0
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.ExpNode = class extends f.DefendedBase {
        constructor(l) {
            super();
            this._owner = l;
            this._runtime = l.GetRuntime()
        }
        _PostInit() {}
        static CreateNode(l, n) {
            return f.New([g, c, e, h, b, a][n[0]], l, n)
        }
    };
    class b extends f.ExpNode {
        constructor(l, n) {
            super(l);
            this._systemPlugin = this._runtime.GetSystemPlugin();
            this._func = this._runtime.GetObjectReference(n[1]);
            this._func !== f.Plugins.System.Exps.random && this._func !== f.Plugins.System.Exps.choose || this._owner.SetVariesPerInstance()
        }
        GetBoundMethod() {
            return this._systemPlugin._GetBoundACEMethod(this._func,
                this._systemPlugin)
        }
    }
    class a extends f.ExpNode {
        constructor(l, n) {
            super(l);
            this._functionBlock = null;
            this._functionName = n[1];
            this._owner.SetVariesPerInstance()
        }
        _PostInit() {
            const l = this._runtime.GetEventSheetManager();
            this._functionBlock = l.GetFunctionBlockByName(this._functionName);
            this._functionName = null;
            const n = this._owner.GetEventBlock(),
                q = this._functionBlock.GetEventBlock();
            this._combinedSolModifiers = [...new Set([...n.GetSolModifiersIncludingParents(), ...q.GetSolModifiersIncludingParents()])];
            this._combinedSolModifiers =
                l._DeduplicateSolModifierList(this._combinedSolModifiers)
        }
        GetBoundMethod() {
            const l = this._functionBlock;
            if (l.IsEnabled()) {
                const n = l.GetEventBlock();
                return f.EventBlock.prototype.RunAsExpressionFunctionCall.bind(n, this._combinedSolModifiers, l.GetReturnType(), l.GetDefaultReturnValue())
            } {
                const n = l.GetDefaultReturnValue();
                return () => n
            }
        }
    }

    function d(l, n) {
        if (l >= n) return l % n;
        0 > l && (l <= -n && (l %= n), 0 > l && (l += n));
        return l
    }
    class c extends f.ExpNode {
        constructor(l, n) {
            super(l);
            this._objectClass = this._runtime.GetObjectClassByIndex(n[1]);
            this._func = this._runtime.GetObjectReference(n[2]);
            this._returnsString = !!n[3];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        GetBoundMethod() {
            return this._objectClass.GetPlugin()._GetBoundACEMethod(this._func, this._objectClass.GetSingleGlobalInstance().GetSdkInstance())
        }
        ExpObject(...l) {
            const n = this._objectClass,
                q = n.GetCurrentSol().GetExpressionInstances();
            var y = q.length;
            if (0 === y) return this._returnsString ? "" : 0;
            y = d(this._owner.GetSolIndex(),
                y);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(n);
            return this._func.apply(q[y].GetSdkInstance(), l)
        }
        ExpObject_InstExpr(l, ...n) {
            const q = this._objectClass,
                y = q.GetInstances(),
                w = y.length;
            if (0 === w) return this._returnsString ? "" : 0;
            l = d(l, w);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(q);
            return this._func.apply(y[l].GetSdkInstance(), n)
        }
    }
    class e extends f.ExpNode {
        constructor(l, n) {
            super(l);
            this._objectClass = this._runtime.GetObjectClassByIndex(n[1]);
            this._varIndex = n[3];
            this._returnsString = !!n[2];
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpInstVar() {
            const l = this._objectClass.GetCurrentSol().GetExpressionInstances();
            var n = l.length;
            if (0 === n) return this._returnsString ? "" : 0;
            n = d(this._owner.GetSolIndex(), n);
            return l[n]._GetInstanceVariableValueUnchecked(this._varIndex)
        }
        ExpInstVar_Family() {
            var l = this._objectClass,
                n = l.GetCurrentSol().GetExpressionInstances(),
                q = n.length;
            if (0 === q) return this._returnsString ? "" : 0;
            q = d(this._owner.GetSolIndex(), q);
            n = n[q];
            l = n.GetObjectClass().GetFamilyInstanceVariableOffset(l.GetFamilyIndex());
            return n._GetInstanceVariableValueUnchecked(this._varIndex + l)
        }
        ExpInstVar_InstExpr(l) {
            const n = this._objectClass;
            var q = n.GetInstances();
            const y = q.length;
            if (0 === y) return this._returnsString ? "" : 0;
            l = d(l, y);
            q = q[l];
            l = 0;
            n.IsFamily() && (l = q.GetObjectClass().GetFamilyInstanceVariableOffset(n.GetFamilyIndex()));
            return q._GetInstanceVariableValueUnchecked(this._varIndex + l)
        }
    }
    class g extends f.ExpNode {
        constructor(l, n) {
            super(l);
            this._objectClass = this._runtime.GetObjectClassByIndex(n[1]);
            this._behaviorType = this._objectClass.GetBehaviorTypeByName(n[2]);
            this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(n[2]);
            this._func = this._runtime.GetObjectReference(n[3]);
            this._returnsString = !!n[4];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpBehavior(...l) {
            const n = this._objectClass;
            var q = n.GetCurrentSol().GetExpressionInstances(),
                y = q.length;
            if (0 === y) return this._returnsString ? "" : 0;
            y = d(this._owner.GetSolIndex(), y);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(n);
            q = q[y];
            y = 0;
            n.IsFamily() && (y = q.GetObjectClass().GetFamilyBehaviorOffset(n.GetFamilyIndex()));
            return this._func.apply(q.GetBehaviorInstances()[this._behaviorIndex + y].GetSdkInstance(), l)
        }
        ExpBehavior_InstExpr(l, ...n) {
            const q = this._objectClass;
            var y = q.GetInstances();
            const w = y.length;
            if (0 === w) return this._returnsString ? "" : 0;
            l = d(l, w);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(q);
            y = y[l];
            l = 0;
            q.IsFamily() && (l = y.GetObjectClass().GetFamilyBehaviorOffset(q.GetFamilyIndex()));
            return this._func.apply(y.GetBehaviorInstances()[this._behaviorIndex +
                l].GetSdkInstance(), n)
        }
    }
    class h extends f.ExpNode {
        constructor(l, n) {
            super(l);
            this._eventVar = null;
            this._eventVarSid = n[1]
        }
        _PostInit() {
            this._eventVar = this._runtime.GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetVar() {
            return this._eventVar
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Parameter = class extends f.DefendedBase {
        constructor(t, r, B) {
            super();
            this._owner = t;
            this._index = B;
            this._type = r;
            this.Get = null;
            this._isConstant = this._variesPerInstance = !1
        }
        static Create(t, r, B) {
            const z = r[0];
            return f.New([a, d, q, e, h, c, l, a, e, e, y, w, q, p, d, n, g, u, x][z], t, z, B, r)
        }
        _PostInit() {}
        SetVariesPerInstance() {
            this._variesPerInstance = !0
        }
        _MaybeVaryFor(t) {
            this._variesPerInstance || !t || t.GetPlugin().IsSingleGlobal() || (this._variesPerInstance = !0)
        }
        VariesPerInstance() {
            return this._variesPerInstance
        }
        GetIndex() {
            return this._index
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        GetEventBlock() {
            return this._owner.GetEventBlock()
        }
        IsConstant() {
            return this._isConstant
        }
    };

    function b(t) {
        t = self.C3_ExpressionFuncs[t];
        if (!t) throw Error("invalid expression number");
        return t
    }
    class a extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._solIndex = 0;
            t = z[1];
            this._expressionNumber = t[0];
            this._numberedNodes = [];
            this._expressionFunc = null;
            for (let C = 1, F = t.length; C < F; ++C) this._numberedNodes.push(f.ExpNode.CreateNode(this, t[C]));
            this._numberedNodes.length ? this.Get = this.GetExpression : (this.Get = b(this._expressionNumber), this._isConstant = !0)
        }
        _GetNode(t) {
            if (0 > t || t >= this._numberedNodes.length) throw new RangeError("invalid numbered node");
            return this._numberedNodes[t]
        }
        _PostInit() {
            for (var t of this._numberedNodes) t._PostInit();
            t = b(this._expressionNumber);
            this._expressionFunc = this._numberedNodes.length ? t(this) : t
        }
        GetSolIndex() {
            return this._solIndex
        }
        GetExpression(t) {
            this._solIndex = t;
            return this._expressionFunc()
        }
    }
    class d extends a {
        constructor(t, r, B, z) {
            super(t, r, B, z);
            this.Get = this.GetStringExpression;
            14 === r && (this.GetEventBlock().SetAllSolModifiers(), this._owner instanceof f.Action && this.GetEventBlock().SetSolWriterAfterCnds())
        }
        GetStringExpression(t) {
            this._solIndex =
                t;
            t = this._expressionFunc();
            return "string" === typeof t ? t : ""
        }
        _GetFastTriggerValue() {
            return b(this._expressionNumber)()
        }
    }
    class c extends a {
        constructor(t, r, B, z) {
            super(t, r, B, z);
            this.Get = this.GetLayer;
            this._isConstant = !1
        }
        GetLayer(t) {
            this._solIndex = t;
            t = this._expressionFunc();
            return this.GetRuntime().GetCurrentLayout().GetLayer(t)
        }
    }
    class e extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._combo = z[1];
            this.Get = this.GetCombo;
            this._isConstant = !0
        }
        GetCombo() {
            return this._combo
        }
    }
    class g extends f.Parameter {
        constructor(t,
            r, B, z) {
            super(t, r, B);
            this._bool = z[1];
            this.Get = this.GetBoolean;
            this._isConstant = !0
        }
        GetBoolean() {
            return this._bool
        }
    }
    class h extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._objectClass = this.GetRuntime().GetObjectClassByIndex(z[1]);
            this.Get = this.GetObjectClass;
            t = this.GetEventBlock();
            t._AddSolModifier(this._objectClass);
            this._owner instanceof f.Action ? t.SetSolWriterAfterCnds() : t.GetParent() && t.GetParent().SetSolWriterAfterCnds();
            this._isConstant = !0
        }
        GetObjectClass() {
            return this._objectClass
        }
    }
    class l extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._layout = this.GetRuntime().GetLayoutManager().GetLayoutByName(z[1]);
            this.Get = this.GetLayout;
            this._isConstant = !0
        }
        GetLayout() {
            return this._layout
        }
    }
    class n extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._timeline = this.GetRuntime().GetTimelineManager().GetTimelineByName(z[1]);
            this.Get = this.GetTimeline;
            this._isConstant = !0
        }
        GetTimeline() {
            return this._timeline
        }
    }
    class q extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._fileInfo =
                z[1];
            this.Get = this.GetFile;
            this._isConstant = !0
        }
        GetFile() {
            return this._fileInfo
        }
    }
    class y extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._instVarIndex = z[1];
            (t = this._owner.GetObjectClass()) && t.IsFamily() ? (this.Get = this.GetFamilyInstanceVariable, this.SetVariesPerInstance()) : (this.Get = this.GetInstanceVariable, this._isConstant = !0)
        }
        GetInstanceVariable() {
            return this._instVarIndex
        }
        GetFamilyInstanceVariable(t) {
            t = t || 0;
            const r = this._owner.GetObjectClass();
            var B = r.GetCurrentSol();
            const z = B.GetInstances();
            if (z.length) t = z[t % z.length].GetObjectClass();
            else if (B.HasAnyElseInstances()) B = B.GetElseInstances(), t = B[t % B.length].GetObjectClass();
            else if (0 < r.GetInstanceCount()) B = r.GetInstances(), t = B[t % B.length].GetObjectClass();
            else return 0;
            return this._instVarIndex + t.GetFamilyInstanceVariableOffset(r.GetFamilyIndex())
        }
    }
    class w extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._eventVarSid = z[1];
            this._eventVar = null;
            this.Get = this.GetEventVariable;
            this._isConstant = !0
        }
        _PostInit() {
            this._eventVar = this.GetRuntime().GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetEventVariable() {
            return this._eventVar
        }
    }
    class u extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._functionBlockName = z[1];
            this._functionBlock = null;
            this.Get = this.GetFunction;
            this._isConstant = !0
        }
        _PostInit() {
            this._functionBlock = this.GetRuntime().GetEventSheetManager().GetFunctionBlockByName(this._functionBlockName);
            this._functionBlockName = null
        }
        GetFunction() {
            return this._functionBlock
        }
    }
    class p extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._subParams = [];
            this._variadicRet = [];
            this._isConstant = !0;
            for (let C = 1, F = z.length; C <
                F; ++C) t = f.Parameter.Create(this._owner, z[C], 0), this._subParams.push(t), this._variadicRet.push(0), t.IsConstant() || (this._isConstant = !1);
            this.Get = this.GetVariadic
        }
        _PostInit() {
            for (const t of this._subParams) t._PostInit()
        }
        GetVariadic() {
            const t = this._subParams,
                r = this._variadicRet;
            for (let B = 0, z = t.length; B < z; ++B) r[B] = t[B].Get(0);
            return r
        }
    }
    class x extends f.Parameter {
        constructor(t, r, B, z) {
            super(t, r, B);
            this._easeIndex = z[1];
            this.Get = this.GetEase;
            this._isConstant = !0
        }
        GetEase() {
            return this._easeIndex
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(c, e) {
        for (let g = 0, h = c.length; g < h; ++g) e[g] = c[g].Get(0)
    }
    const a = [],
        d = function() {};
    f.Condition = class extends f.DefendedBase {
        constructor(c, e, g) {
            super();
            this._eventBlock = c;
            this._runtime = c.GetRuntime();
            this._index = g;
            this._func = this._runtime.GetObjectReference(e[1]);
            this._isTrigger = 0 < e[3];
            this._isFastTrigger = 2 === e[3];
            this._isLooping = !!e[4];
            this._isInverted = !!e[5];
            this._isStatic = !!e[6];
            this._sid = e[7];
            this._isInOrBlock = this._eventBlock.IsOrBlock();
            this._behaviorType =
                this._objectClass = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: e[8][0],
                canDebug: e[8][1]
            } : null; - 1 === e[0] ? this._systemPlugin = this._runtime.GetSystemPlugin() : (this._objectClass = this._runtime.GetObjectClassByIndex(e[0]), e[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(e[2]), this._behaviorIndex =
                this._objectClass.GetBehaviorIndexByName(e[2])), this._eventBlock.GetParent() && this._eventBlock.GetParent().SetSolWriterAfterCnds());
            if (10 === e.length) {
                c = e[9];
                for (let h of c) this._parameters.push(f.Parameter.Create(this, h, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterCondition(this)
        }
        static Create(c, e, g) {
            return f.New(f.Condition, c, e, g)
        }
        _PostInit() {
            for (const c of this._parameters) c._PostInit(),
                c.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            this._isFastTrigger ? (this.Run = this._RunFastTrigger, this.DebugRun = this._DebugRunFastTrigger) : this._systemPlugin ? (this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this._isStatic ? (this.Run = this._RunStatic, this.DebugRun = this._DebugRunStatic) : (this.Run = this._RunObject, this.DebugRun = this._DebugRunObject)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const c = this._objectClass.GetPlugin(),
                e = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(c, e, this._RunSingleGlobal)
        }
        _SetRunMethodForBoundFunc(c, e, g) {
            const h = this._func,
                l = this._isInverted,
                n = this._parameters;
            if (0 === n.length) {
                const q = c._GetBoundACEMethod(h, e);
                this.Run = l ? function() {
                    return f.xor(q(), l)
                } : q
            } else if (1 === n.length) {
                const q = n[0];
                if (!l && q.IsConstant()) this.Run = c._GetBoundACEMethod_1param(h,
                    e, q.Get(0));
                else {
                    const y = c._GetBoundACEMethod(h, e);
                    this.Run = function() {
                        return f.xor(y(q.Get(0)), l)
                    }
                }
            } else if (2 === n.length) {
                const q = n[0],
                    y = n[1];
                if (!l && q.IsConstant() && y.IsConstant()) this.Run = c._GetBoundACEMethod_2params(h, e, q.Get(0), y.Get(0));
                else {
                    const w = c._GetBoundACEMethod(h, e);
                    this.Run = function() {
                        return f.xor(w(q.Get(0), y.Get(0)), l)
                    }
                }
            } else if (3 === n.length) {
                const q = n[0],
                    y = n[1],
                    w = n[2];
                if (!l && q.IsConstant() && y.IsConstant() && w.IsConstant()) this.Run = c._GetBoundACEMethod_3params(h, e, q.Get(0), y.Get(0),
                    w.Get(0));
                else {
                    const u = c._GetBoundACEMethod(h, e);
                    this.Run = function() {
                        return f.xor(u(q.Get(0), y.Get(0), w.Get(0)), l)
                    }
                }
            } else this.Run = g
        }
        GetSID() {
            return this._sid
        }
        _GetFunc() {
            return this._func
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this.GetIndex()
        }
        IsTrigger() {
            return this._isTrigger
        }
        IsFastTrigger() {
            return this._isFastTrigger
        }
        IsInverted() {
            return this._isInverted
        }
        IsLooping() {
            return this._isLooping
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const c = this._results;
            b(this._parameters, c);
            return f.xor(this._func.apply(this._systemPlugin, c),
                this._isInverted)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._systemPlugin, c);
                f.IsIterator(c) && (c = yield* c);
                return f.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunSingleGlobal() {
            const c = this._results;
            b(this._parameters, c);
            const e = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            return f.xor(this._func.apply(e, c), this._isInverted)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                const e = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
                c = this._func.apply(e, c);
                f.IsIterator(c) && (c = yield* c);
                return f.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunFastTrigger() {
            return !0
        }* _DebugRunFastTrigger() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return !0
        }
        _RunStatic() {
            var c = this._results;
            b(this._parameters, c);
            c = this._func.apply(this._behaviorType ||
                this._objectClass, c);
            this._objectClass.ApplySolToContainer();
            return c
        }* _DebugRunStatic() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._behaviorType || this._objectClass, c);
                f.IsIterator(c) && (c = yield* c);
                this._objectClass.ApplySolToContainer();
                return c
            }
            return this.Run()
        }
        _RunObject() {
            const c = this._parameters,
                e = this._results,
                g = this._objectClass.GetCurrentSol();
            for (let h = 0, l = c.length; h <
                l; ++h) {
                const n = c[h];
                n.VariesPerInstance() || (e[h] = n.Get(0))
            }
            return g.IsSelectAll() ? this._RunObject_FirstFilter(g) : this._RunObject_NextFilter(g)
        }* _DebugRunObject() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this._RunObject()
        }
        _EvaluateVaryingParameters(c) {
            const e = this._parameters,
                g = this._results;
            for (let h = 0, l = e.length; h < l; ++h) {
                const n = e[h];
                n.VariesPerInstance() && (g[h] = n.Get(c))
            }
        }
        _RunObject_FirstFilter(c) {
            const e = this._objectClass,
                g = e.IsFamily(),
                h = e.GetFamilyIndex(),
                l = this._behaviorIndex,
                n = 0 <= l,
                q = e.GetInstances(),
                y = this._anyParamVariesPerInstance,
                w = this._results,
                u = this._func,
                p = this._isInverted,
                x = this._isInOrBlock && !this._isTrigger;
            c.ClearArrays();
            for (let r = 0, B = q.length; r < B; ++r) {
                const z = q[r];
                y && this._EvaluateVaryingParameters(r);
                var t = void 0;
                n ? (t = g ? z.GetObjectClass().GetFamilyBehaviorOffset(h) : 0, t = u.apply(z.GetBehaviorInstances()[l + t].GetSdkInstance(), w)) : t = u.apply(z.GetSdkInstance(), w);
                f.xor(t, p) ? c._PushInstance(z) : x && c._PushElseInstance(z)
            }
            e.FinishCondition(!0);
            c._SetSelectAll(!1);
            e.ApplySolToContainer();
            return c.HasAnyInstances()
        }
        _RunObject_NextFilter(c) {
            const e = this._objectClass;
            var g = e.IsFamily();
            const h = e.GetFamilyIndex(),
                l = e.IsInContainer(),
                n = this._behaviorIndex,
                q = 0 <= n,
                y = this._anyParamVariesPerInstance,
                w = this._results,
                u = this._func,
                p = this._isInverted,
                x = this._isInOrBlock && !this._isTrigger,
                t = c._GetOwnInstances(),
                r = c._GetOwnElseInstances(),
                B = x && !this._eventBlock.IsFirstConditionOfType(this),
                z = B ? r : t;
            let C = 0,
                F = !1;
            for (let G = 0, I = z.length; G < I; ++G) {
                const L = z[G];
                y && this._EvaluateVaryingParameters(G);
                var J = void 0;
                q ? (J = g ? L.GetObjectClass().GetFamilyBehaviorOffset(h) : 0, J = u.apply(L.GetBehaviorInstances()[n + J].GetSdkInstance(), w)) : J = u.apply(L.GetSdkInstance(), w);
                f.xor(J, p) ? (F = !0, B ? (t.push(L), l && L._PushSiblingsToSolInstances()) : (z[C] = L, l && L._SetSiblingsToSolInstancesIndex(C), ++C)) : B ? (z[C] = L, l && L._SetSiblingsToSolElseInstancesIndex(C), ++C) : x && (r.push(L), l && L._PushSiblingsToSolElseInstances())
            }
            f.truncateArray(z, C);
            l && e._TruncateContainerSols(B, C);
            g = F;
            B && !F && (F = this._OrBlockCheckInstances(t));
            e.FinishCondition(g ||
                x);
            return x ? F : c.HasAnyInstances()
        }
        _OrBlockCheckInstances(c) {
            var e = this._objectClass;
            const g = e.IsFamily();
            e = e.GetFamilyIndex();
            const h = this._anyParamVariesPerInstance,
                l = this._behaviorIndex,
                n = 0 <= l,
                q = this._results,
                y = this._func,
                w = this._isInverted;
            for (let p = 0, x = c.length; p < x; ++p) {
                var u = c[p];
                h && this._EvaluateVaryingParameters(p);
                if (n) {
                    const t = g ? u.GetObjectClass().GetFamilyBehaviorOffset(e) : 0;
                    u = y.apply(u.GetBehaviorInstances()[l + t].GetSdkInstance(), q)
                } else u = y.apply(u.GetSdkInstance(), q);
                if (f.xor(u, w)) return !0
            }
            return !1
        }
        ReevaluateParameter(c,
            e) {
            return this._parameters[c].Get(e)
        }
        GetFastTriggerValue() {
            const c = this._parameters;
            if (!c.length) throw Error("no parameters");
            return c[0]._GetFastTriggerValue()
        }
        _SaveToJson() {
            if (!this._savedData || !this._savedData.size) return null;
            const c = {};
            for (const [e, g] of this._savedData.entries()) {
                let h = g;
                "collmemory" === e && (h = [...g.entries()].map(l => [l[0].GetUID(), l[1].GetUID(), l[2]]));
                c[e] = h
            }
            return {
                ex: c
            }
        }
        _LoadFromJson(c) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            if (c) {
                var e = this._runtime,
                    g = c.ex;
                if (g) {
                    c = this.GetSavedDataMap();
                    c.clear();
                    for (const [h, l] of Object.entries(g)) g = l, "collmemory" === h && (g = f.New(f.PairMap, l.map(n => [e.GetInstanceByUID(n[0]), e.GetInstanceByUID(n[1]), n[2]]).filter(n => n[0] && n[1]))), c.set(h, g)
                }
            }
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(e, g) {
        for (let h = 0, l = e.length; h < l; ++h) g[h] = e[h].Get(0)
    }
    const a = [],
        d = function() {},
        c = function*() {};
    f.Action = class extends f.DefendedBase {
        constructor(e, g, h) {
            super();
            this._eventBlock = e;
            this._runtime = e = e.GetRuntime();
            this._index = h;
            this._sid = 4 <= g.length ? g[3] : -1;
            this._actionReturnType = 5 <= g.length ? g[4] : 0;
            this._behaviorType = this._objectClass = this._func = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this._callFunctionName = "";
            this._combinedSolModifiers = this._callEventBlock =
                null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            const l = (h = -3 === g[0]) ? g[2] : g[5];
            this._debugData = e.IsDebug() || h ? {
                isBreakpoint: l[0],
                canDebug: l[1],
                index: l[2]
            } : null; - 1 === g[0] ? (this._systemPlugin = e.GetSystemPlugin(), this._func = e.GetObjectReference(g[1])) : -2 === g[0] ? this._callFunctionName = g[1] : h ? (this._func = e.GetObjectReference(g[1]), this.Run = this.RunUserScript, this.DebugRun = this.DebugRunUserScript, this._actionReturnType =
                1) : (this._func = e.GetObjectReference(g[1]), this._objectClass = e.GetObjectClassByIndex(g[0]), g[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(g[2]), this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(g[2])));
            if (7 === g.length) {
                g = g[6];
                for (const n of g) this._parameters.push(f.Parameter.Create(this, n, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterAction(this)
        }
        static Create(e,
            g, h) {
            return f.New(f.Action, e, g, h)
        }
        _PostInit() {
            for (var e of this._parameters) e._PostInit(), e.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            if (this._systemPlugin) this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem;
            else if (this._callFunctionName) this._SetCallFunctionRunMethod(), this._callFunctionName = "";
            else if (this.Run === this.RunUserScript) {
                e = this._func;
                const g = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this._eventBlock);
                this._func = e.bind(null, this._runtime.GetIRuntime(),
                    g)
            } else this._behaviorType ? this.IsAsync() ? (this.Run = this._RunBehavior_Async, this.DebugRun = this._DebugRunBehavior_Async) : (this.Run = this._RunBehavior, this.DebugRun = this._DebugRunBehavior) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this.IsAsync() ? (this.Run = this._RunObject_Async, this.DebugRun = this._DebugRunObject_Async) : this._parameters.length ? this._parameters.every(g => g.VariesPerInstance()) ? (this.Run = this._RunObject_AllParamsVary,
                this.DebugRun = this._DebugRunObject_AllParamsVary) : this._anyParamVariesPerInstance ? (this.Run = this._RunObject_SomeParamsVary, this.DebugRun = this._DebugRunObject_SomeParamsVary) : this._parameters.every(g => g.IsConstant()) ? (b(this._parameters, this._results), this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst) : (this.Run = this._RunObject_ParamsDontVary, this.DebugRun = this._DebugRunObject_ParamsDontVary) : (this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const e = this._objectClass.GetPlugin(),
                g = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(e, g, this._RunSingleGlobal)
        }
        _SetCallFunctionRunMethod() {
            const e = this._eventBlock.GetEventSheetManager(),
                g = e.GetFunctionBlockByName(this._callFunctionName);
            g.IsEnabled() ? (this._callEventBlock = g.GetEventBlock(), this._combinedSolModifiers = [...new Set([...this._eventBlock.GetSolModifiersIncludingParents(), ...this._callEventBlock.GetSolModifiersIncludingParents()])],
                this._combinedSolModifiers = e._DeduplicateSolModifierList(this._combinedSolModifiers), this.Run = f.EventBlock.prototype.RunAsFunctionCall.bind(this._callEventBlock, this._combinedSolModifiers, this._parameters), this.DebugRun = this._DebugRunCallFunction) : (this.Run = d, this.DebugRun = c)
        }
        _SetRunMethodForBoundFunc(e, g, h) {
            const l = this._func,
                n = this._parameters;
            if (0 === n.length) this.Run = e._GetBoundACEMethod(l, g);
            else if (1 === n.length) {
                const q = n[0];
                if (q.IsConstant()) this.Run = e._GetBoundACEMethod_1param(l, g, q.Get(0));
                else {
                    const y = e._GetBoundACEMethod(l, g);
                    this.Run = function() {
                        return y(q.Get(0))
                    }
                }
            } else if (2 === n.length) {
                const q = n[0],
                    y = n[1];
                if (q.IsConstant() && y.IsConstant()) this.Run = e._GetBoundACEMethod_2params(l, g, q.Get(0), y.Get(0));
                else {
                    const w = e._GetBoundACEMethod(l, g);
                    this.Run = function() {
                        return w(q.Get(0), y.Get(0))
                    }
                }
            } else if (3 === n.length) {
                const q = n[0],
                    y = n[1],
                    w = n[2];
                if (q.IsConstant() && y.IsConstant() && w.IsConstant()) this.Run = e._GetBoundACEMethod_3params(l, g, q.Get(0), y.Get(0), w.Get(0));
                else {
                    const u = e._GetBoundACEMethod(l,
                        g);
                    this.Run = function() {
                        return u(q.Get(0), y.Get(0), w.Get(0))
                    }
                }
            } else this.Run = h
        }
        GetSID() {
            return this._sid
        }
        IsAsync() {
            return 1 === this._actionReturnType
        }
        CanBailOut() {
            return 2 === this._actionReturnType
        }
        HasReturnType() {
            return 0 !== this._actionReturnType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this._debugData.index
        }
        GetCombinedSolModifiers() {
            return this._combinedSolModifiers
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(e) {
            this._debugData.isBreakpoint = !!e;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const e = this._results;
            b(this._parameters, e);
            return this._func.apply(this._systemPlugin, e)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results;
                b(this._parameters, e);
                return yield* this._func.apply(this._systemPlugin, e)
            }
            return this.Run()
        }* _DebugRunCallFunction() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return yield* this._callEventBlock.DebugRunAsFunctionCall(this._combinedSolModifiers, this._parameters)
        }
        _RunSingleGlobal() {
            const e = this._results;
            b(this._parameters, e);
            return this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(),
                e)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results;
                b(this._parameters, e);
                return yield* this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(), e)
            }
            return this.Run()
        }
        _RunObject_ParamsConst() {
            const e = this._results,
                g = this._objectClass.GetCurrentSol().GetInstances();
            for (let h = 0, l = g.length; h < l; ++h) this._func.apply(g[h].GetSdkInstance(), e)
        }* _DebugRunObject_ParamsConst() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results,
                    g = this._objectClass.GetCurrentSol().GetInstances();
                for (let h = 0, l = g.length; h < l; ++h) yield* this._func.apply(g[h].GetSdkInstance(), e)
            } else this._RunObject_ParamsConst()
        }
        _RunObject_ParamsDontVary() {
            const e = this._results;
            b(this._parameters, e);
            const g = this._objectClass.GetCurrentSol().GetInstances();
            for (let h = 0, l = g.length; h < l; ++h) this._func.apply(g[h].GetSdkInstance(), e)
        }* _DebugRunObject_ParamsDontVary() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results;
                b(this._parameters, e);
                const g = this._objectClass.GetCurrentSol().GetInstances();
                for (let h = 0, l = g.length; h < l; ++h) yield* this._func.apply(g[h].GetSdkInstance(), e)
            } else this._RunObject_ParamsDontVary()
        }
        _RunObject_AllParamsVary() {
            const e = this._parameters,
                g = this._results,
                h = this._func,
                l = this._objectClass.GetCurrentSol().GetInstances();
            for (let n = 0, q = l.length; n < q; ++n) {
                const y = l[n];
                for (let w = 0, u = e.length; w < u; ++w) g[w] =
                    e[w].Get(n);
                h.apply(y.GetSdkInstance(), g)
            }
        }* _DebugRunObject_AllParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._parameters,
                    g = this._results,
                    h = this._func,
                    l = this._objectClass.GetCurrentSol().GetInstances();
                for (let n = 0, q = l.length; n < q; ++n) {
                    const y = l[n];
                    for (let w = 0, u = e.length; w < u; ++w) g[w] = e[w].Get(n);
                    yield* h.apply(y.GetSdkInstance(), g)
                }
            } else this._RunObject_AllParamsVary()
        }
        _RunObject_SomeParamsVary() {
            const e = this._parameters,
                g = this._results,
                h = this._func,
                l = this._objectClass.GetCurrentSol().GetInstances();
            for (let q = 0, y = e.length; q < y; ++q) {
                var n = e[q];
                n.VariesPerInstance() || (g[q] = n.Get(0))
            }
            for (let q = 0, y = l.length; q < y; ++q) {
                n = l[q];
                for (let w = 0, u = e.length; w < u; ++w) {
                    const p = e[w];
                    p.VariesPerInstance() && (g[w] = p.Get(q))
                }
                h.apply(n.GetSdkInstance(), g)
            }
        }* _DebugRunObject_SomeParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const g = this._parameters,
                    h = this._results,
                    l = this._func,
                    n = this._objectClass.GetCurrentSol().GetInstances();
                for (let q = 0, y = g.length; q < y; ++q) {
                    var e = g[q];
                    e.VariesPerInstance() || (h[q] = e.Get(0))
                }
                for (let q = 0, y = n.length; q < y; ++q) {
                    e = n[q];
                    for (let w = 0, u = g.length; w < u; ++w) {
                        const p = g[w];
                        p.VariesPerInstance() && (h[w] = p.Get(q))
                    }
                    yield* l.apply(e.GetSdkInstance(), h)
                }
            } else this._RunObject_SomeParamsVary()
        }
        _RunBehavior() {
            var e = this._objectClass;
            const g = e.IsFamily(),
                h = e.GetFamilyIndex(),
                l = this._parameters,
                n = this._anyParamVariesPerInstance,
                q = this._results,
                y = this._func,
                w = this._behaviorIndex;
            e = e.GetCurrentSol().GetInstances();
            for (let x = 0, t = l.length; x < t; ++x) {
                var u = l[x];
                u.VariesPerInstance() || (q[x] = u.Get(0))
            }
            for (let x = 0, t = e.length; x < t; ++x) {
                u = e[x];
                if (n)
                    for (let r = 0, B = l.length; r < B; ++r) {
                        var p = l[r];
                        p.VariesPerInstance() && (q[r] = p.Get(x))
                    }
                p = g ? u.GetObjectClass().GetFamilyBehaviorOffset(h) : 0;
                y.apply(u.GetBehaviorInstances()[w + p].GetSdkInstance(), q)
            }
        }* _DebugRunBehavior() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var e = this._objectClass;
                const l =
                    e.IsFamily(),
                    n = e.GetFamilyIndex(),
                    q = this._parameters,
                    y = this._anyParamVariesPerInstance,
                    w = this._results,
                    u = this._func,
                    p = this._behaviorIndex;
                e = e.GetCurrentSol().GetInstances();
                for (let x = 0, t = q.length; x < t; ++x) {
                    var g = q[x];
                    g.VariesPerInstance() || (w[x] = g.Get(0))
                }
                for (let x = 0, t = e.length; x < t; ++x) {
                    g = e[x];
                    if (y)
                        for (let r = 0, B = q.length; r < B; ++r) {
                            var h = q[r];
                            h.VariesPerInstance() && (w[r] = h.Get(x))
                        }
                    h = l ? g.GetObjectClass().GetFamilyBehaviorOffset(n) : 0;
                    yield* u.apply(g.GetBehaviorInstances()[p + h].GetSdkInstance(), w)
                }
            } else this._RunBehavior()
        }
        _RunObject_Async() {
            const e =
                this._parameters,
                g = this._results,
                h = this._func,
                l = this._objectClass.GetCurrentSol().GetInstances(),
                n = [];
            for (let q = 0, y = l.length; q < y; ++q) {
                const w = l[q];
                for (let u = 0, p = e.length; u < p; ++u) g[u] = e[u].Get(q);
                n.push(h.apply(w.GetSdkInstance(), g))
            }
            return Promise.all(n)
        }* _DebugRunObject_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._parameters,
                    g = this._results,
                    h = this._func,
                    l = this._objectClass.GetCurrentSol().GetInstances(),
                    n = [];
                for (let q = 0,
                        y = l.length; q < y; ++q) {
                    const w = l[q];
                    for (let u = 0, p = e.length; u < p; ++u) g[u] = e[u].Get(q);
                    n.push(yield* h.apply(w.GetSdkInstance(), g))
                }
                return Promise.all(n)
            }
            return this._RunObject_Async()
        }
        _RunBehavior_Async() {
            var e = this._objectClass;
            const g = e.IsFamily(),
                h = e.GetFamilyIndex(),
                l = this._parameters,
                n = this._results,
                q = this._func,
                y = this._behaviorIndex;
            e = e.GetCurrentSol().GetInstances();
            const w = [];
            for (let u = 0, p = e.length; u < p; ++u) {
                const x = e[u];
                for (let r = 0, B = l.length; r < B; ++r) n[r] = l[r].Get(u);
                const t = g ? x.GetObjectClass().GetFamilyBehaviorOffset(h) :
                    0;
                w.push(q.apply(x.GetBehaviorInstances()[y + t].GetSdkInstance(), n))
            }
            return Promise.all(w)
        }* _DebugRunBehavior_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var e = this._objectClass;
                const g = e.IsFamily(),
                    h = e.GetFamilyIndex(),
                    l = this._parameters,
                    n = this._results,
                    q = this._func,
                    y = this._behaviorIndex;
                e = e.GetCurrentSol().GetInstances();
                const w = [];
                for (let u = 0, p = e.length; u < p; ++u) {
                    const x = e[u];
                    for (let r = 0, B = l.length; r < B; ++r) n[r] = l[r].Get(u);
                    const t = g ?
                        x.GetObjectClass().GetFamilyBehaviorOffset(h) : 0;
                    w.push(yield* q.apply(x.GetBehaviorInstances()[y + t].GetSdkInstance(), n))
                }
                return Promise.all(w)
            }
            return this._RunBehavior_Async()
        }
        async RunUserScript() {
            try {
                await this._func()
            } catch (e) {
                console.error(`Unhandled exception running script %c${this._eventBlock.GetEventSheet().GetName()}, event ${this._eventBlock.GetDisplayNumber()}, action ${this.GetDebugIndex()+1}:`, "font-size: 1.2em; font-weight: bold;", e), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    f.EventScript.HadUserScriptException() || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), f.EventScript.SetHadUserScriptException())
            }
        }* DebugRunUserScript() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this.RunUserScript()
        }
        _SaveToJson() {
            return this._savedData && this._savedData.size ? {
                ex: f.ToSuperJSON(this._savedData)
            } : null
        }
        _LoadFromJson(e) {
            this._savedData &&
                (this._savedData.clear(), this._savedData = null);
            e && (e = e.ex) && (this._savedData = f.FromSuperJSON(e))
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new f.Color;

    function a(O, Q) {
        return f.compare(this.GetWorldInfo().GetX(), O, Q)
    }

    function d(O, Q) {
        return f.compare(this.GetWorldInfo().GetY(), O, Q)
    }

    function c() {
        const O = this.GetWorldInfo();
        return O.IsInViewport(O.GetLayer().GetViewport(), O.GetLayout().HasVanishingPointOutsideViewport())
    }

    function e() {
        var O = this.GetWorldInfo();
        const Q = O.GetLayout();
        O = O.GetBoundingBox();
        return 0 > O.getRight() || 0 > O.getBottom() || O.getLeft() > Q.GetWidth() || O.getTop() > Q.GetHeight()
    }

    function g(O, Q,
        Y) {
        const ba = this.GetCurrentSol(),
            fa = ba.GetInstances();
        if (!fa.length) return !1;
        let ha = fa[0];
        var ea = ha.GetWorldInfo();
        let ua = ha,
            sa = f.distanceSquared(ea.GetX(), ea.GetY(), Q, Y);
        for (let xa = 1, Ha = fa.length; xa < Ha; ++xa)
            if (ha = fa[xa], ea = ha.GetWorldInfo(), ea = f.distanceSquared(ea.GetX(), ea.GetY(), Q, Y), 0 === O && ea < sa || 1 === O && ea > sa) sa = ea, ua = ha;
        ba.PickOne(ua);
        return !0
    }

    function h(O) {
        const Q = this.GetWorldInfo();
        Q.GetX() !== O && (Q.SetX(O), Q.SetBboxChanged())
    }

    function l(O) {
        const Q = this.GetWorldInfo();
        Q.GetY() !== O && (Q.SetY(O),
            Q.SetBboxChanged())
    }

    function n(O, Q) {
        const Y = this.GetWorldInfo();
        Y.EqualsXY(O, Q) || (Y.SetXY(O, Q), Y.SetBboxChanged())
    }

    function q(O, Q) {
        if (O && (O = O.GetPairedInstance(this._inst))) {
            var [Y, ba] = O.GetImagePoint(Q);
            Q = this.GetWorldInfo();
            if (Q.GetX() !== Y || Q.GetY() !== ba) Q.SetXY(Y, ba), Q.SetBboxChanged()
        }
    }

    function y(O) {
        if (0 !== O) {
            var Q = this.GetWorldInfo();
            Q.OffsetXY(Q.GetCosAngle() * O, Q.GetSinAngle() * O);
            Q.SetBboxChanged()
        }
    }

    function w(O, Q) {
        if (0 !== Q) {
            var Y = this.GetWorldInfo();
            O = f.toRadians(O);
            Y.OffsetXY(Math.cos(O) *
                Q, Math.sin(O) * Q);
            Y.SetBboxChanged()
        }
    }

    function u() {
        return this.GetWorldInfo().GetX()
    }

    function p() {
        return this.GetWorldInfo().GetY()
    }

    function x() {
        return this._runtime.GetDt(this._inst)
    }

    function t(O, Q) {
        return f.compare(this.GetWorldInfo().GetWidth(), O, Q)
    }

    function r(O, Q) {
        return f.compare(this.GetWorldInfo().GetHeight(), O, Q)
    }

    function B(O) {
        const Q = this.GetWorldInfo();
        Q.GetWidth() !== O && (Q.SetWidth(O), Q.SetBboxChanged())
    }

    function z(O) {
        const Q = this.GetWorldInfo();
        Q.GetHeight() !== O && (Q.SetHeight(O), Q.SetBboxChanged())
    }

    function C(O, Q) {
        const Y = this.GetWorldInfo();
        if (Y.GetWidth() !== O || Y.GetHeight() !== Q) Y.SetSize(O, Q), Y.SetBboxChanged()
    }

    function F() {
        return this.GetWorldInfo().GetWidth()
    }

    function J() {
        return this.GetWorldInfo().GetHeight()
    }

    function G() {
        return this.GetWorldInfo().GetBoundingBox().getLeft()
    }

    function I() {
        return this.GetWorldInfo().GetBoundingBox().getTop()
    }

    function L() {
        return this.GetWorldInfo().GetBoundingBox().getRight()
    }

    function N() {
        return this.GetWorldInfo().GetBoundingBox().getBottom()
    }

    function S(O,
        Q) {
        return f.angleDiff(this.GetWorldInfo().GetAngle(), f.toRadians(Q)) <= f.toRadians(O)
    }

    function X(O) {
        return f.angleClockwise(this.GetWorldInfo().GetAngle(), f.toRadians(O))
    }

    function U(O, Q) {
        O = f.toRadians(O);
        Q = f.toRadians(Q);
        const Y = this.GetWorldInfo().GetAngle();
        return f.angleClockwise(Q, O) ? f.angleClockwise(Y, O) && !f.angleClockwise(Y, Q) : !(!f.angleClockwise(Y, O) && f.angleClockwise(Y, Q))
    }

    function W(O) {
        const Q = this.GetWorldInfo();
        O = f.clampAngle(f.toRadians(O));
        isNaN(O) || Q.GetAngle() === O || (Q.SetAngle(O), Q.SetBboxChanged())
    }

    function ia(O) {
        if (!isNaN(O) && 0 !== O) {
            var Q = this.GetWorldInfo();
            Q.SetAngle(Q.GetAngle() + f.toRadians(O));
            Q.SetBboxChanged()
        }
    }

    function ka(O) {
        if (!isNaN(O) && 0 !== O) {
            var Q = this.GetWorldInfo();
            Q.SetAngle(Q.GetAngle() - f.toRadians(O));
            Q.SetBboxChanged()
        }
    }

    function ya(O, Q) {
        const Y = this.GetWorldInfo(),
            ba = Y.GetAngle();
        O = f.angleRotate(ba, f.toRadians(Q), f.toRadians(O));
        isNaN(O) || ba === O || (Y.SetAngle(O), Y.SetBboxChanged())
    }

    function ta(O, Q, Y) {
        const ba = this.GetWorldInfo(),
            fa = ba.GetAngle();
        Q -= ba.GetX();
        Y -= ba.GetY();
        O =
            f.angleRotate(fa, Math.atan2(Y, Q), f.toRadians(O));
        isNaN(O) || fa === O || (ba.SetAngle(O), ba.SetBboxChanged())
    }

    function Ba(O, Q) {
        const Y = this.GetWorldInfo(),
            ba = Y.GetAngle();
        O -= Y.GetX();
        Q -= Y.GetY();
        Q = Math.atan2(Q, O);
        isNaN(Q) || ba === Q || (Y.SetAngle(Q), Y.SetBboxChanged())
    }

    function Ea() {
        return f.toDegrees(this.GetWorldInfo().GetAngle())
    }

    function Ca(O, Q) {
        return f.compare(f.round6dp(100 * this.GetWorldInfo().GetOpacity()), O, Q)
    }

    function Aa() {
        return this.GetWorldInfo().IsVisible()
    }

    function ja(O) {
        const Q = this.GetWorldInfo();
        O = 2 === O ? !Q.IsVisible() : 0 !== O;
        Q.IsVisible() !== O && (Q.SetVisible(O), this._runtime.UpdateRender())
    }

    function Fa(O) {
        O = f.clamp(O / 100, 0, 1);
        const Q = this.GetWorldInfo();
        Q.GetOpacity() !== O && (Q.SetOpacity(O), this._runtime.UpdateRender())
    }

    function wa(O) {
        b.setFromRgbValue(O);
        O = this.GetWorldInfo();
        O.GetUnpremultipliedColor().equalsIgnoringAlpha(b) || (O.SetUnpremultipliedColor(b), this._runtime.UpdateRender())
    }

    function Da() {
        const O = this.GetWorldInfo().GetUnpremultipliedColor();
        return f.PackRGBAEx(O.getR(), O.getG(),
            O.getB(), O.getA())
    }

    function Pa() {
        return f.round6dp(100 * this.GetWorldInfo().GetOpacity())
    }

    function Qa(O) {
        return O ? this.GetWorldInfo().GetLayer() === O : !1
    }

    function Ra(O) {
        const Q = this.GetCurrentSol(),
            Y = Q.GetInstances();
        if (!Y.length) return !1;
        let ba = Y[0];
        for (let fa = 1, ha = Y.length; fa < ha; ++fa) {
            const ea = Y[fa],
                ua = ea.GetWorldInfo(),
                sa = ba.GetWorldInfo(),
                xa = ua.GetLayer().GetIndex(),
                Ha = sa.GetLayer().GetIndex();
            if (0 === O) {
                if (xa > Ha || xa === Ha && ua.GetZIndex() > sa.GetZIndex()) ba = ea
            } else if (xa < Ha || xa === Ha && ua.GetZIndex() <
                sa.GetZIndex()) ba = ea
        }
        Q.PickOne(ba);
        return !0
    }

    function Ja(O, Q, Y) {
        const ba = this.GetWorldInfo();
        O = 0 === O ? ba.GetZElevation() : ba.GetTotalZElevation();
        return f.compare(O, Q, Y)
    }

    function Sa() {
        this.GetWorldInfo().ZOrderMoveToTop()
    }

    function Ta() {
        this.GetWorldInfo().ZOrderMoveToBottom()
    }

    function Ua(O) {
        O && this.GetWorldInfo().ZOrderMoveToLayer(O)
    }

    function Va(O, Q) {
        O = 0 === O;
        Q && (Q = Q.GetFirstPicked(this.GetInstance())) && this.GetWorldInfo().ZOrderMoveAdjacentToInstance(Q, O)
    }

    function Wa(O) {
        const Q = this.GetWorldInfo();
        Q.GetZElevation() !==
            O && (Q.SetZElevation(O), this._runtime.UpdateRender())
    }

    function Xa() {
        return this.GetWorldInfo().GetLayer().GetIndex()
    }

    function Ya() {
        return this.GetWorldInfo().GetLayer().GetName()
    }

    function Ka() {
        return this.GetWorldInfo().GetZIndex()
    }

    function Za() {
        return this.GetWorldInfo().GetZElevation()
    }

    function $a() {
        return this.GetWorldInfo().GetTotalZElevation()
    }

    function ab(O, Q) {
        if (Q = this.GetObjectClass().GetEffectList().GetEffectTypeByName(Q)) {
            Q = Q.GetIndex();
            O = 1 === O;
            var Y = this.GetWorldInfo().GetInstanceEffectList();
            Y.IsEffectIndexActive(Q) !== O && (Y.SetEffectIndexActive(Q, O), Y.UpdateActiveEffects(), this._runtime.UpdateRender())
        }
    }

    function bb(O, Q, Y) {
        var ba = this.GetObjectClass().GetEffectList().GetEffectTypeByName(O);
        if (ba) {
            O = ba.GetIndex();
            var fa = this.GetWorldInfo().GetInstanceEffectList(),
                ha = fa.GetEffectParametersForIndex(O);
            Q = Math.floor(Q);
            if (!(0 > Q || Q >= ha.length)) {
                ba = ba.GetShaderProgram().GetParameterType(Q);
                if ("color" === ba) {
                    b.setFromRgbValue(Y);
                    Q = ha[Q];
                    if (b.equalsIgnoringAlpha(Q)) return;
                    Q.copyRgb(b)
                } else {
                    "percent" ===
                    ba && (Y /= 100);
                    if (ha[Q] === Y) return;
                    ha[Q] = Y
                }
                fa.IsEffectIndexActive(O) && this._runtime.UpdateRender()
            }
        }
    }

    function cb() {
        return this.GetWorldInfo().HasParent()
    }

    function db() {
        return this.GetWorldInfo().HasChildren()
    }

    function eb(O, Q) {
        const Y = this.GetCurrentSol().GetInstances();
        if (0 === Y.length) return !1;
        const ba = O.GetCurrentSol();
        var fa = ba.GetInstances();
        if (0 === fa.length) return !1;
        fa = new Set(fa);
        const ha = new Set;
        for (let ua = 0, sa = Y.length; ua < sa; ++ua) {
            var ea = Y[ua];
            if (1 === Q)
                for (const xa of ea.parents()) xa.BelongsToObjectClass(O) &&
                    fa.has(xa) && ha.add(xa);
            else {
                if (0 === Q) {
                    if (ea = ea.GetParent(), null === ea) continue
                } else ea = ea.GetTopParent();
                ea.BelongsToObjectClass(O) && fa.has(ea) && ha.add(ea)
            }
        }
        if (0 === ha.size) return !1;
        ba.SetSetPicked(ha);
        O.ApplySolToContainer();
        return !0
    }

    function fb(O, Q) {
        const Y = this.GetCurrentSol().GetInstances();
        if (0 === Y.length) return !1;
        const ba = O.GetCurrentSol();
        var fa = ba.GetInstances();
        if (ba.IsSelectAll()) {
            var ha = [...this._runtime.instancesPendingCreateForObjectClass(O)];
            0 < ha.length && (fa = fa.concat(ha))
        }
        if (0 === fa.length) return !1;
        fa = new Set(fa);
        ha = new Set;
        for (let ea = 0, ua = Y.length; ea < ua; ++ea) {
            const sa = Y[ea];
            2 === Q && !sa.HasChildren() && sa.BelongsToObjectClass(O) && fa.has(sa) && ha.add(sa);
            for (const xa of 0 === Q ? sa.children() : sa.allChildren()) 2 === Q && xa.HasChildren() || xa.BelongsToObjectClass(O) && fa.has(xa) && ha.add(xa)
        }
        if (0 === ha.size) return !1;
        ba.SetSetPicked(ha);
        O.ApplySolToContainer();
        return !0
    }

    function gb(O, Q) {
        const Y = this.GetCurrentSol().GetInstances();
        if (0 === Y.length) return !1;
        const ba = O.GetCurrentSol();
        var fa = ba.GetInstances();
        if (ba.IsSelectAll()) {
            var ha = [...this._runtime.instancesPendingCreateForObjectClass(O)];
            0 < ha.length && (fa = fa.concat(ha))
        }
        if (0 === fa.length) return !1;
        fa = new Set(fa);
        ha = [];
        for (let ea = 0, ua = Y.length; ea < ua; ++ea) {
            const sa = Y[ea].GetChildAt(Q);
            null !== sa && sa.BelongsToObjectClass(O) && fa.has(sa) && ha.push(sa)
        }
        if (0 === ha.length) return !1;
        ba.SetArrayPicked(ha);
        O.ApplySolToContainer();
        return !0
    }

    function hb(O, Q) {
        return f.compare(this._inst.GetChildCount(), O, Q)
    }

    function ib(O, Q, Y, ba, fa, ha, ea, ua) {
        const sa = this._inst,
            xa = this._runtime.GetCurrentAction().GetObjectClass();
        for (const Ha of O.allCorrespondingInstances(sa, xa)) {
            if (!Ha.GetPlugin().SupportsSceneGraph()) break;
            sa.AddChild(Ha, {
                transformX: Q,
                transformY: Y,
                transformWidth: ba,
                transformHeight: fa,
                transformAngle: ha,
                transformZElevation: ea,
                destroyWithParent: ua
            })
        }
    }

    function jb(O) {
        const Q = this._inst,
            Y = this._runtime.GetCurrentAction().GetObjectClass();
        for (const ba of O.allCorrespondingInstances(Q, Y)) Q.RemoveChild(ba)
    }

    function na() {
        this._inst.HasParent() && this._inst.GetParent().RemoveChild(this._inst)
    }

    function Ga() {
        return this._inst.GetChildCount()
    }

    function kb(O, Q) {
        O = Math.floor(O);
        Q = Math.floor(Q);
        const Y = this.GetWorldInfo();
        2 > O || 2 > Q || !isFinite(O) || !isFinite(Q) ? (Y.ReleaseMesh(), Y.SetBboxChanged()) : Y.CreateMesh(O, Q)
    }

    function lb(O, Q, Y, ba, fa, ha, ea, ua) {
        const sa = this.GetWorldInfo();
        sa.SetMeshPoint(O, Q, {
            mode: 0 === Y ? "absolute" : "relative",
            x: ba,
            y: fa,
            zElevation: ha,
            u: ea,
            v: ua
        }) && sa.SetBboxChanged()
    }

    function mb() {
        const O = this.GetWorldInfo();
        return O.HasMesh() ? O.GetSourceMesh().GetHSize() : 0
    }

    function nb() {
        const O = this.GetWorldInfo();
        return O.HasMesh() ? O.GetSourceMesh().GetVSize() :
            0
    }

    function ob(O) {
        const Q = this.GetWorldInfo();
        O = 2 === O ? !Q.IsVisible() : 0 !== O;
        Q.IsVisible() !== O && Q.SetVisible(O)
    }

    function pb(O, Q) {
        this.SetElementCSSStyle(O, Q)
    }

    function La(O, Q) {
        this.SetElementAttribute(O, "" + Q)
    }

    function Ma(O) {
        this.RemoveElementAttribute(O)
    }

    function Na() {
        this.FocusElement()
    }

    function Oa() {
        this.BlurElement()
    }

    function Ia() {
        return this.IsElementFocused()
    }

    function k(O) {
        this._SetEnabled(0 !== O)
    }

    function m() {
        return this._IsEnabled()
    }

    function v(O, Q, Y) {
        return f.compare(this.GetInstance().GetInstanceVariableValue(O),
            Q, Y)
    }

    function A(O) {
        return !!this.GetInstance().GetInstanceVariableValue(O)
    }

    function D(O, Q) {
        const Y = this.GetCurrentSol(),
            ba = Y.GetInstances();
        if (!ba.length) return !1;
        let fa = ba[0],
            ha = fa,
            ea = fa.GetInstanceVariableValue(Q);
        for (let ua = 1, sa = ba.length; ua < sa; ++ua) {
            fa = ba[ua];
            const xa = fa.GetInstanceVariableValue(Q);
            if (0 === O && xa < ea || 1 === O && xa > ea) ea = xa, ha = fa
        }
        Y.PickOne(ha);
        return !0
    }

    function E(O) {
        return this._runtime.GetCurrentCondition().IsInverted() ? K(this, O) : H(this, O)
    }

    function H(O, Q) {
        Q = O.GetRuntime().GetInstanceByUID(Q);
        if (!Q) return !1;
        const Y = O.GetCurrentSol();
        if (!Y.IsSelectAll() && !Y._GetOwnInstances().includes(Q)) return !1;
        if (O.IsFamily()) {
            if (Q.GetObjectClass().BelongsToFamily(O)) return Y.PickOne(Q), O.ApplySolToContainer(), !0
        } else if (Q.GetObjectClass() === O) return Y.PickOne(Q), O.ApplySolToContainer(), !0;
        return !1
    }

    function K(O, Q) {
        const Y = O.GetCurrentSol();
        if (Y.IsSelectAll()) {
            Y._SetSelectAll(!1);
            Y.ClearArrays();
            var ba = O.GetInstances();
            for (let ha = 0, ea = ba.length; ha < ea; ++ha) {
                var fa = ba[ha];
                fa.GetUID() === Q ? Y._PushElseInstance(fa) :
                    Y._PushInstance(fa)
            }
            O.ApplySolToContainer();
            return !!Y._GetOwnInstances().length
        }
        ba = Y._GetOwnInstances();
        fa = 0;
        for (let ha = 0, ea = ba.length; ha < ea; ++ha) {
            const ua = ba[ha];
            ba[fa] = ua;
            ua.GetUID() === Q ? Y._PushElseInstance(ua) : ++fa
        }
        f.truncateArray(ba, fa);
        O.ApplySolToContainer();
        return !!ba.length
    }

    function M() {
        this._runtime.DestroyInstance(this._inst)
    }

    function P() {
        return !0
    }

    function R() {
        return !0
    }

    function T(O, Q) {
        this.GetInstance().SetInstanceVariableValue(O, Q)
    }

    function Z(O, Q) {
        const Y = this.GetInstance(),
            ba = Y.GetInstanceVariableValue(O);
        "number" === typeof ba && "number" !== typeof Q ? Q = parseFloat(Q) : "string" === typeof ba && "string" !== typeof Q && (Q = Q.toString());
        Y.SetInstanceVariableValue(O, ba + Q)
    }

    function V(O, Q) {
        const Y = this.GetInstance(),
            ba = Y.GetInstanceVariableValue(O);
        "number" === typeof ba && ("number" !== typeof Q && (Q = parseFloat(Q)), Y.SetInstanceVariableValue(O, ba - Q))
    }

    function da(O, Q) {
        this.GetInstance().SetInstanceVariableValue(O, Q ? 1 : 0)
    }

    function ca(O) {
        const Q = this.GetInstance();
        Q.SetInstanceVariableValue(O, 0 === Q.GetInstanceVariableValue(O) ?
            1 : 0)
    }

    function aa(O) {
        let Q;
        try {
            Q = JSON.parse(O)
        } catch (Y) {
            console.error("Failed to load from JSON string: ", Y);
            return
        }
        O = this.GetInstance();
        O._OnBeforeLoad("state");
        O.LoadFromJson(Q, "state")
    }

    function ra() {
        return JSON.stringify(this.GetInstance().SaveToJson("state"))
    }

    function ma() {
        return this.GetInstance().GetObjectClass().GetName()
    }

    function pa() {
        const O = this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass();
        let Q = O.GetInstanceCount();
        for (const Y of this._runtime.instancesPendingCreateForObjectClass(O)) ++Q;
        return Q
    }

    function qa() {
        return this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass().GetCurrentSol().GetInstances().length
    }

    function oa() {
        return this._inst.GetIID()
    }

    function za() {
        return this._inst.GetUID()
    }
    f.AddCommonACEs = function(O, Q) {
        const Y = O[1],
            ba = O[4],
            fa = O[5],
            ha = O[6],
            ea = O[7],
            ua = O[8],
            sa = O[10],
            xa = O[11],
            Ha = O[12],
            qb = O[13],
            rb = O[14],
            va = Q.Cnds,
            la = Q.Acts;
        Q = Q.Exps;
        O[3] && (va.CompareX = a, va.CompareY = d, va.IsOnScreen = c, va.IsOutsideLayout = e, va.PickDistance = g, la.SetX = h, la.SetY = l, la.SetPos = n, la.SetPosToObject =
            q, la.MoveForward = y, la.MoveAtAngle = w, Q.X = u, Q.Y = p, Q.dt = x);
        ba && (va.CompareWidth = t, va.CompareHeight = r, la.SetWidth = B, la.SetHeight = z, la.SetSize = C, Q.Width = F, Q.Height = J, Q.BBoxLeft = G, Q.BBoxTop = I, Q.BBoxRight = L, Q.BBoxBottom = N);
        fa && (va.AngleWithin = S, va.IsClockwiseFrom = X, va.IsBetweenAngles = U, la.SetAngle = W, la.RotateClockwise = ia, la.RotateCounterclockwise = ka, la.RotateTowardAngle = ya, la.RotateTowardPosition = ta, la.SetTowardPosition = Ba, Q.Angle = Ea);
        ha && (va.IsVisible = Aa, va.CompareOpacity = Ca, la.SetVisible = ja, la.SetOpacity =
            Fa, la.SetDefaultColor = wa, Q.Opacity = Pa, Q.ColorValue = Da);
        ea && (va.IsOnLayer = Qa, va.PickTopBottom = Ra, va.CompareZElevation = Ja, la.MoveToTop = Sa, la.MoveToBottom = Ta, la.MoveToLayer = Ua, la.ZMoveToObject = Va, la.SetZElevation = Wa, Q.LayerNumber = Xa, Q.LayerName = Ya, Q.ZIndex = Ka, Q.ZElevation = Za, Q.TotalZElevation = $a);
        ua && (la.SetEffectEnabled = ab, la.SetEffectParam = bb);
        qb && (va.HasParent = cb, va.HasChildren = db, va.PickParent = eb, va.PickChildren = fb, va.PickNthChild = gb, va.CompareChildCount = hb, la.AddChild = ib, la.RemoveChild = jb, la.RemoveFromParent =
            na, Q.ChildCount = Ga);
        rb && (la.SetMeshSize = kb, la.SetMeshPoint = lb, Q.MeshColumns = mb, Q.MeshRows = nb);
        sa && (va.IsVisible = Aa, la.SetVisible = ob, la.SetCSSStyle = pb, la.SetElemAttribute = La, la.RemoveElemAttribute = Ma);
        xa && (va.IsFocused = Ia, la.SetFocus = Na, la.SetBlur = Oa);
        Ha && (va.IsEnabled = m, la.SetEnabled = k);
        Y || (va.CompareInstanceVar = v, va.IsBoolInstanceVarSet = A, va.PickInstVarHiLow = D, va.PickByUID = E, la.SetInstanceVar = T, la.AddInstanceVar = Z, la.SubInstanceVar = V, la.SetBoolInstanceVar = da, la.ToggleBoolInstanceVar = ca, va.OnCreated =
            P, va.OnDestroyed = R, la.Destroy = M, la.LoadFromJsonString || (la.LoadFromJsonString = aa), Q.AsJSON || (Q.AsJSON = ra), Q.Count = pa, Q.PickedCount = qa, Q.IID = oa, Q.UID = za, Q.ObjectTypeName = ma)
    }
} {
    "use strict";
    const f = self.C3;
    f.ScheduledWait = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._isSignalled = !1;
            this._event = null;
            this._actIndex = 0;
            this._solModifiers = [];
            this._sols = new Map;
            this._callingFunctionBlock = null;
            this._asyncId = -1;
            this._functionInnerLocalVars = this._functionParameters = null;
            this._shouldRelease = !1
        }
        Release() {
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._functionInnerLocalVars = this._functionParameters =
                this._callingFunctionBlock = this._event = null;
            this._asyncId = -1;
            f.clearArray(this._solModifiers);
            for (const b of this._sols.values()) b.Release();
            this._sols.clear()
        }
        _Init() {
            var b = this._eventSheetManager,
                a = b.GetRuntime().GetAllObjectClasses();
            const d = b.GetCurrentEventStackFrame();
            this._event = d.GetCurrentEvent();
            this._actIndex = d.GetActionIndex() + 1;
            if (b = b.FindFirstFunctionBlockParent(this._event)) this._callingFunctionBlock = b, this._functionParameters = b.CaptureFunctionParameters(), this._functionInnerLocalVars =
                b._GetAllInnerLocalVariables().map(c => c.GetValue()), b.IsAsync() && (this._asyncId = b.PauseCurrentAsyncFunction());
            for (const c of a)
                if (a = c.GetCurrentSol(), !a.IsSelectAll() || this._event.HasSolModifier(c)) this._solModifiers.push(c), this._sols.set(c, f.New(f.SolState, a))
        }
        InitTimer(b) {
            this._type = "timer";
            this._Init();
            this._time = this._eventSheetManager.GetRuntime().GetGameTime() + b
        }
        InitSignal(b) {
            this._type = "signal";
            this._Init();
            this._signalTag = b.toLowerCase()
        }
        InitPromise(b) {
            this._type = "promise";
            this._Init();
            b.then(() => this.SetSignalled()).catch(a => {
                console.warn("[C3 runtime] Promise rejected in 'Wait for previous actions to complete': ", a);
                this.SetSignalled()
            })
        }
        IsTimer() {
            return "timer" === this._type
        }
        IsSignal() {
            return "signal" === this._type
        }
        IsPromise() {
            return "promise" === this._type
        }
        GetSignalTag() {
            return this._signalTag
        }
        IsSignalled() {
            return this._isSignalled
        }
        SetSignalled() {
            this._isSignalled = !0
        }
        _ShouldRun() {
            return this.IsTimer() ? this._time <= this._eventSheetManager.GetRuntime().GetGameTime() : this.IsSignalled()
        }
        _RestoreState(b) {
            b._Restore(this._event,
                this._actIndex);
            for (const [a, d] of this._sols.entries()) b = a.GetCurrentSol(), d._Restore(b);
            if (b = this._callingFunctionBlock) b.SetFunctionParameters(this._functionParameters), b._GetAllInnerLocalVariables().map((a, d) => a.SetValue(this._functionInnerLocalVars[d])), b.IsAsync() && b.ResumeAsyncFunction(this._asyncId)
        }
        _Run(b) {
            this._RestoreState(b);
            this._event._ResumeActionsAndSubEvents(b);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        async _DebugRun(b) {
            this._RestoreState(b);
            for (const a of this._event._DebugResumeActionsAndSubEvents(b)) await this._eventSheetManager.GetRuntime().DebugBreak(a);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        ShouldRelease() {
            return this._shouldRelease
        }
        RemoveInstances(b) {
            for (const a of this._sols.values()) a.RemoveInstances(b)
        }
        _SaveToJson() {
            const b = {},
                a = {
                    t: this._time,
                    st: this._signalTag,
                    s: this._isSignalled,
                    ev: this._event.GetSID(),
                    sm: this._solModifiers.map(d => d.GetSID()),
                    sols: b
                };
            this._event._HasActionIndex(this._actIndex) && (a.act = this._event.GetActionAt(this._actIndex).GetSID());
            for (const [d, c] of this._sols) b[d.GetSID().toString()] = c._SaveToJson();
            return a
        }
        static _CreateFromJson(b, a) {
            const d = b.GetRuntime();
            var c = b.GetEventBlockBySID(a.ev);
            if (!c) return null;
            let e = 0;
            if (a.hasOwnProperty("act")) {
                var g = b.GetActionBySID(a.act);
                if (!g) return null;
                e = g.GetIndex()
            }
            g =
                f.New(f.ScheduledWait, b);
            g._time = a.t;
            g._type = -1 === g._time ? "signal" : "timer";
            g._signalTag = a.st;
            g._isSignalled = a.s;
            g._event = c;
            g._actIndex = e;
            for (var h of a.sm)(c = d.GetObjectClassBySID(h)) && g._solModifiers.push(c);
            for (const [l, n] of Object.entries(a.sols))
                if (a = parseInt(l, 10), a = d.GetObjectClassBySID(a)) h = f.New(f.SolState, null), h._LoadFromJson(b, n), g._sols.set(a, h);
            return g
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SolState = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = null;
            this._isSelectAll = !0;
            this._instances = [];
            b && (this._objectClass = b.GetObjectClass(), this._isSelectAll = b.IsSelectAll(), f.shallowAssignArray(this._instances, b._GetOwnInstances()))
        }
        Release() {
            this._objectClass = null;
            f.clearArray(this._instances)
        }
        _Restore(b) {
            b._SetSelectAll(this._isSelectAll);
            f.shallowAssignArray(b._GetOwnInstances(), this._instances)
        }
        RemoveInstances(b) {
            f.arrayRemoveAllInSet(this._instances,
                b)
        }
        _SaveToJson() {
            return {
                sa: this._isSelectAll,
                insts: this._instances.map(b => b.GetUID())
            }
        }
        _LoadFromJson(b, a) {
            b = b.GetRuntime();
            this._isSelectAll = !!a.sa;
            f.clearArray(this._instances);
            for (const d of a.insts)(a = b.GetInstanceByUID(d)) && this._instances.push(a)
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(a, d) {
        let c = a.get(d);
        c || (c = new Map, a.set(d, c));
        return c
    }
    f.SDKPluginBase = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._isSingleGlobal = !!a.isSingleGlobal;
            this._isWorldType = !!a.isWorld;
            this._isRotatable = !!a.isRotatable;
            this._mustPredraw = !!a.mustPredraw;
            this._hasEffects = !!a.hasEffects;
            this._supportsSceneGraph = !!a.supportsSceneGraph;
            this._supportsMesh = !!a.supportsMesh;
            this._singleGlobalObjectClass = null;
            this._boundACEMethodCache =
                new Map;
            this._boundACEMethodCache_1param = new Map;
            this._boundACEMethodCache_2params = new Map;
            this._boundACEMethodCache_3params = new Map
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        IsSingleGlobal() {
            return this._isSingleGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        IsRotatable() {
            return this._isRotatable
        }
        MustPreDraw() {
            return this._mustPredraw
        }
        HasEffects() {
            return this._hasEffects
        }
        SupportsSceneGraph() {
            return this._supportsSceneGraph
        }
        SupportsMesh() {
            return this._supportsMesh
        }
        _GetBoundACEMethod(a,
            d) {
            if (!d) throw Error("missing 'this' binding");
            let c = this._boundACEMethodCache.get(a);
            if (c) return c;
            c = a.bind(d);
            this._boundACEMethodCache.set(a, c);
            return c
        }
        _GetBoundACEMethod_1param(a, d, c) {
            if (!d) throw Error("missing 'this' binding");
            const e = b(this._boundACEMethodCache_1param, a);
            let g = e.get(c);
            if (g) return g;
            g = a.bind(d, c);
            e.set(c, g);
            return g
        }
        _GetBoundACEMethod_2params(a, d, c, e) {
            if (!d) throw Error("missing 'this' binding");
            var g = b(this._boundACEMethodCache_2params, a);
            g = b(g, c);
            let h = g.get(e);
            if (h) return h;
            h = a.bind(d, c, e);
            g.set(e, h);
            return h
        }
        _GetBoundACEMethod_3params(a, d, c, e, g) {
            if (!d) throw Error("missing 'this' binding");
            var h = b(this._boundACEMethodCache_3params, a);
            h = b(h, c);
            h = b(h, e);
            let l = h.get(g);
            if (l) return l;
            l = a.bind(d, c, e, g);
            h.set(g, l);
            return l
        }
        _SetSingleGlobalObjectClass(a) {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            this._singleGlobalObjectClass = a
        }
        GetSingleGlobalObjectClass() {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass
        }
        GetSingleGlobalInstance() {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass.GetSingleGlobalInstance()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SDKDOMPluginBase = class extends f.SDKPluginBase {
        constructor(b, a) {
            super(b);
            this._domComponentId = a;
            this._nextElementId = 0;
            this._instMap = new Map;
            this.AddElementMessageHandler("elem-focused", d => d._OnElemFocused());
            this.AddElementMessageHandler("elem-blurred", d => {
                d && d._OnElemBlurred()
            })
        }
        Release() {
            super.Release()
        }
        _AddElement(b) {
            const a = this._nextElementId++;
            this._instMap.set(a, b);
            return a
        }
        _RemoveElement(b) {
            this._instMap.delete(b)
        }
        AddElementMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, d => {
                    const c = this._instMap.get(d.elementId);
                    a(c, d)
                })
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SDKTypeBase = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetImageInfo() {
            return this._objectClass.GetImageInfo()
        }
        FinishCondition(b) {}
        LoadTextures(b) {}
        ReleaseTextures() {}
        OnDynamicTextureLoadComplete() {}
        PreloadTexturesWithInstances(b) {}
        LoadTilemapData() {}
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SDKInstanceBase = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._domComponentId = a;
            this._runtime = b.GetRuntime();
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._tick2Func = this._tickFunc = null;
            this._isTicking2 = this._isTicking = !1;
            this._disposables = null;
            this._wasReleased = !1
        }
        Release() {
            this._wasReleased = !0;
            this._StopTicking();
            this._StopTicking2();
            this._tick2Func = this._tickFunc = null;
            this._disposables &&
                (this._disposables.Release(), this._disposables = null);
            this._sdkType = this._objectClass = this._runtime = this._inst = null
        }
        WasReleased() {
            return this._wasReleased
        }
        GetInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetPlugin() {
            return this._sdkType.GetPlugin()
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._inst.GetInterfaceClass()
        }
        Trigger(b) {
            return this._runtime.Trigger(b, this._inst, null)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b,
                this._inst, null)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, null)
        }
        FastTrigger(b, a) {
            return this._runtime.FastTrigger(b, this._inst, a)
        }
        DebugFastTrigger(b, a) {
            return this._runtime.DebugFastTrigger(b, this._inst, a)
        }
        ScheduleTriggers(b) {
            return this._runtime.ScheduleTriggers(b)
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId, b, a)
        }
        AddDOMMessageHandlers(b) {
            for (const [a, d] of b) this.AddDOMMessageHandler(a, d)
        }
        PostToDOM(b, a) {
            this._runtime.PostComponentMessageToDOM(this._domComponentId,
                b, a)
        }
        PostToDOMAsync(b, a) {
            return this._runtime.PostComponentMessageToDOMAsync(this._domComponentId, b, a)
        }
        _PostToDOMMaybeSync(b, a) {
            if (this._runtime.IsInWorker()) this.PostToDOM(b, a);
            else return window.c3_runtimeInterface._OnMessageFromRuntime({
                type: "event",
                component: this._domComponentId,
                handler: b,
                data: a,
                responseId: null
            })
        }
        Tick() {}
        Tick2() {}
        _StartTicking() {
            this._isTicking || (this._tickFunc || (this._tickFunc = () => this.Tick()), this._runtime.Dispatcher().addEventListener("tick", this._tickFunc), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime.Dispatcher().removeEventListener("tick", this._tickFunc), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._tick2Func || (this._tick2Func = () => this.Tick2()), this._runtime.Dispatcher().addEventListener("tick2", this._tick2Func), this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime.Dispatcher().removeEventListener("tick2", this._tick2Func), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        GetDebuggerProperties() {
            return []
        }
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b,
            a) {}
        OffsetPropertyValueByIndex(b, a) {
            if (0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if ("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SDKWorldInstanceBase = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, a);
            this._worldInfo = b.GetWorldInfo();
            this._webglcontextrestored_handler = this._webglcontextlost_handler = null
        }
        Release() {
            if (this._webglcontextlost_handler) {
                const b = this._runtime.Dispatcher();
                b.removeEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.removeEventListener("webglcontextrestored", this._webglcontextrestored_handler);
                this._webglcontextrestored_handler = this._webglcontextlost_handler =
                    null
            }
            this._worldInfo = null;
            super.Release()
        }
        HandleWebGLContextLoss() {
            if (!this._webglcontextlost_handler) {
                this._webglcontextlost_handler = () => this.OnWebGLContextLost();
                this._webglcontextrestored_handler = () => this.OnWebGLContextRestored();
                var b = this._runtime.Dispatcher();
                b.addEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.addEventListener("webglcontextrestored", this._webglcontextrestored_handler)
            }
        }
        OnWebGLContextLost() {}
        OnWebGLContextRestored() {}
        GetWorldInfo() {
            return this._worldInfo
        }
        IsOriginalSizeKnown() {
            return !1
        }
        GetOriginalWidth() {
            if (!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if (b) return b.GetWidth()
        }
        GetOriginalHeight() {
            if (!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if (b) return b.GetHeight()
        }
        GetCurrentImageInfo() {
            return null
        }
        GetCurrentSurfaceSize() {
            var b = this.GetCurrentImageInfo();
            return b && (b = b.GetTexture()) ? [b.GetWidth(), b.GetHeight()] : [100, 100]
        }
        GetCurrentTexRect() {
            const b = this.GetCurrentImageInfo();
            return b ? b.GetTexRect() : null
        }
        GetImagePoint(b) {
            b = this._inst.GetWorldInfo();
            return [b.GetX(),
                b.GetY()
            ]
        }
        LoadTilemapData(b, a, d) {}
        TestPointOverlapTile(b, a) {}
    }
} {
    "use strict";
    const f = self.C3,
        b = f.New(f.Rect);
    f.SDKDOMInstanceBase = class extends f.SDKWorldInstanceBase {
        constructor(a, d) {
            super(a, d);
            this._elementId = this.GetPlugin()._AddElement(this);
            this._isElementShowing = !0;
            this._autoFontSize = this._elemHasFocus = !1;
            this._lastRect = f.New(f.Rect, 0, 0, -1, -1);
            a = this._runtime.GetCanvasManager();
            this._lastWindowWidth = a.GetLastWidth();
            this._lastWindowHeight = a.GetLastHeight();
            this._isPendingUpdateState = !1;
            this._StartTicking()
        }
        Release() {
            this.GetPlugin()._RemoveElement(this._elementId);
            this.PostToDOMElement("destroy");
            this._elementId = -1;
            super.Release()
        }
        _GetElementInDOMMode() {
            if (this._runtime.IsInWorker()) throw Error("not valid in worker mode");
            return this._PostToDOMElementMaybeSync("get-element")
        }
        PostToDOMElement(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            this.PostToDOM(a, d)
        }
        _PostToDOMElementMaybeSync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this._PostToDOMMaybeSync(a, d)
        }
        PostToDOMElementAsync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this.PostToDOMAsync(a, d)
        }
        CreateElement(a) {
            a || (a = {});
            const d =
                this.GetWorldInfo().IsVisible();
            a.elementId = this._elementId;
            a.isVisible = d;
            Object.assign(a, this.GetElementState());
            this._isElementShowing = !!a.isVisible;
            this._PostToDOMMaybeSync("create", a);
            this._UpdatePosition(!0)
        }
        SetElementVisible(a) {
            a = !!a;
            this._isElementShowing !== a && (this._isElementShowing = a, this.PostToDOMElement("set-visible", {
                isVisible: a
            }))
        }
        Tick() {
            this._UpdatePosition(!1)
        }
        _ShouldPreserveElement() {
            const a = this._runtime.GetCanvasManager().GetFullscreenMode();
            return "Android" === f.Platform.OS && ("scale-inner" ===
                a || "scale-outer" === a || "crop" === a)
        }
        _UpdatePosition(a) {
            var d = this.GetWorldInfo();
            const c = d.GetLayer();
            var e = d.GetX(),
                g = d.GetY();
            let [h, l] = c.LayerToCanvasCss(e, g), [n, q] = c.LayerToCanvasCss(e + d.GetWidth(), g + d.GetHeight());
            e = this._runtime.GetCanvasManager();
            g = e.GetCssWidth();
            const y = e.GetCssHeight();
            if (d.IsVisible() && c.IsVisible()) {
                if (!this._ShouldPreserveElement()) {
                    if (0 >= n || 0 >= q || h >= g || l >= y) {
                        this.SetElementVisible(!1);
                        return
                    }
                    1 > h && (h = 1);
                    1 > l && (l = 1);
                    n >= g && (n = g - 1);
                    q >= y && (q = y - 1)
                }
                b.set(h, l, n, q);
                d = e.GetLastWidth();
                g = e.GetLastHeight();
                !a && b.equals(this._lastRect) && this._lastWindowWidth === d && this._lastWindowHeight === g ? this.SetElementVisible(!0) : (this._lastRect.copy(b), this._lastWindowWidth = d, this._lastWindowHeight = g, this.SetElementVisible(!0), a = null, this._autoFontSize && (a = c.GetDisplayScale() - .2), this.PostToDOMElement("update-position", {
                    left: Math.round(this._lastRect.getLeft()) + e.GetCanvasClientX(),
                    top: Math.round(this._lastRect.getTop()) + e.GetCanvasClientY(),
                    width: Math.round(this._lastRect.width()),
                    height: Math.round(this._lastRect.height()),
                    fontSize: a
                }))
            } else this.SetElementVisible(!1)
        }
        FocusElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !0
            })
        }
        BlurElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !1
            })
        }
        _OnElemFocused() {
            this._elemHasFocus = !0
        }
        _OnElemBlurred() {
            this._elemHasFocus = !1
        }
        IsElementFocused() {
            return this._elemHasFocus
        }
        SetElementCSSStyle(a, d) {
            this.PostToDOMElement("set-css-style", {
                prop: f.CSSToCamelCase(a),
                val: d
            })
        }
        SetElementAttribute(a, d) {
            this.PostToDOMElement("set-attribute", {
                name: a,
                val: d
            })
        }
        RemoveElementAttribute(a) {
            this.PostToDOMElement("remove-attribute", {
                name: a
            })
        }
        UpdateElementState() {
            this._isPendingUpdateState || (this._isPendingUpdateState = !0, Promise.resolve().then(() => {
                this._isPendingUpdateState = !1;
                this.PostToDOMElement("update-state", this.GetElementState())
            }))
        }
        GetElementState() {}
        GetElementId() {
            return this._elementId
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.IBehavior;
    f.SDKBehaviorBase = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._myObjectClasses = f.New(f.ArraySet);
            this._myInstances = f.New(f.ArraySet);
            this._iBehavior = null;
            this._scriptInterfaceClass = a.scriptInterfaceClass || null
        }
        Release() {
            this._myInstances.Release();
            this._myObjectClasses.Release();
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        _AddObjectClass(a) {
            this._myObjectClasses.Add(a)
        }
        GetObjectClasses() {
            return this._myObjectClasses.GetArray()
        }
        _AddInstance(a) {
            this._myInstances.Add(a)
        }
        _RemoveInstance(a) {
            this._myInstances.Delete(a)
        }
        GetInstances() {
            return this._myInstances.GetArray()
        }
        GetIBehavior() {
            if (null ===
                this._iBehavior) {
                const a = this._scriptInterfaceClass;
                if (a) {
                    if (this._iBehavior = new a(this), !(this._iBehavior instanceof b)) throw new TypeError("script interface class must derive from IBehavior");
                } else this._iBehavior = new b(this)
            }
            return this._iBehavior
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SDKBehaviorTypeBase = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b.GetRuntime();
            this._behaviorType = b;
            this._objectClass = b.GetObjectClass();
            this._behavior = b.GetBehavior();
            this._behavior._AddObjectClass(this._objectClass)
        }
        Release() {
            this._behavior = this._objectClass = this._behaviorType = this._runtime = null
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehavior() {
            return this._behavior
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SDKBehaviorInstanceBase = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._behInst = b;
            this._domComponentId = a;
            this._inst = b.GetObjectInstance();
            this._runtime = b.GetRuntime();
            this._behaviorType = b.GetBehaviorType();
            this._sdkType = this._behaviorType.GetSdkType();
            this._isPostTicking = this._isTicking2 = this._isTicking = !1;
            this._disposables = null
        }
        Release() {
            this._StopTicking();
            this._StopTicking2();
            this._StopPostTicking();
            this._disposables && (this._disposables.Release(), this._disposables =
                null);
            this._sdkType = this._behaviorType = this._runtime = this._inst = this._behInst = null
        }
        GetBehavior() {
            return this._behaviorType.GetBehavior()
        }
        GetBehaviorInstance() {
            return this._behInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetObjectClass() {
            return this._inst.GetObjectClass()
        }
        GetWorldInfo() {
            return this._inst.GetWorldInfo()
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._behInst.GetScriptInterface()
        }
        Trigger(b) {
            return this._runtime.Trigger(b,
                this._inst, this._behaviorType)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b, this._inst, this._behaviorType)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, this._behaviorType)
        }
        PostCreate() {}
        Tick() {}
        Tick2() {}
        PostTick() {}
        _StartTicking() {
            this._isTicking || (this._runtime._AddBehInstToTick(this), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime._RemoveBehInstToTick(this), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._runtime._AddBehInstToTick2(this),
                this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime._RemoveBehInstToTick2(this), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        _StartPostTicking() {
            this._isPostTicking || (this._runtime._AddBehInstToPostTick(this), this._isPostTicking = !0)
        }
        _StopPostTicking() {
            this._isPostTicking && (this._runtime._RemoveBehInstToPostTick(this), this._isPostTicking = !1)
        }
        IsPostTicking() {
            return this._isPostTicking
        }
        GetDebuggerProperties() {
            return []
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, a)
        }
        OnSpriteFrameChanged(b, a) {}
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b, a) {}
        OffsetPropertyValueByIndex(b, a) {
            if (0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if ("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins = {};
    f.Behaviors = {};
    f.PluginManager = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allPlugins = [];
            this._pluginsByCtor = new Map;
            this._systemPlugin = null;
            this._allBehaviors = [];
            this._behaviorsByCtor = new Map;
            this._jumpthruBehavior = this._solidBehavior = null
        }
        CreatePlugin(b) {
            const a = this._runtime.GetObjectReference(b[0]);
            if (!a) throw Error("missing plugin");
            f.AddCommonACEs(b, a);
            b = f.New(a, {
                runtime: this._runtime,
                isSingleGlobal: b[1],
                isWorld: b[2],
                isRotatable: b[5],
                hasEffects: b[8],
                mustPredraw: b[9],
                supportsSceneGraph: b[13],
                supportsMesh: b[14]
            });
            b.OnCreate();
            this._allPlugins.push(b);
            this._pluginsByCtor.set(a, b)
        }
        CreateSystemPlugin() {
            this._systemPlugin = f.New(f.Plugins.System, {
                runtime: this._runtime,
                isSingleGlobal: !0
            });
            this._systemPlugin.OnCreate()
        }
        CreateBehavior(b) {
            b = this._runtime.GetObjectReference(b[1]);
            if (!b) throw Error("missing behavior");
            const a = f.New(b, {
                runtime: this._runtime
            });
            a.OnCreate();
            this._allBehaviors.push(a);
            this._behaviorsByCtor.set(b, a);
            !this._solidBehavior &&
                f.Behaviors.solid && a instanceof f.Behaviors.solid ? this._solidBehavior = a : !this._jumpthruBehavior && f.Behaviors.jumpthru && a instanceof f.Behaviors.jumpthru && (this._jumpthruBehavior = a)
        }
        GetPluginByConstructorFunction(b) {
            return this._pluginsByCtor.get(b) || null
        }
        HasBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.has(b)
        }
        GetBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.get(b) || null
        }
        GetSystemPlugin() {
            return this._systemPlugin
        }
        GetSolidBehavior() {
            return this._solidBehavior
        }
        GetJumpthruBehavior() {
            return this._jumpthruBehavior
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new Set;
    f.ImageInfo = class extends f.DefendedBase {
        constructor() {
            super();
            this._url = "";
            this._height = this._width = this._offsetY = this._offsetX = this._pixelFormat = this._size = 0;
            this._hasMetaData = !1;
            this._imageAsset = null;
            this._textureState = "";
            this._rcTex = f.New(f.Rect);
            b.add(this)
        }
        Release() {
            this.ReleaseTexture();
            this._imageAsset = null;
            b.delete(this)
        }
        static OnWebGLContextLost() {
            for (const a of b) a._textureState = "", a._rcTex.set(0, 0, 0, 0)
        }
        LoadData(a) {
            this._url = a[0];
            this._size = a[1];
            this._pixelFormat = a[2];
            this._offsetX = a[3];
            this._offsetY = a[4];
            this._width = a[5];
            this._height = a[6];
            this._hasMetaData = !0
        }
        LoadAnimationFrameData(a) {
            this._url = a[0];
            this._size = a[1];
            this._offsetX = a[2];
            this._offsetY = a[3];
            this._width = a[4];
            this._height = a[5];
            this._pixelFormat = a[11];
            this._hasMetaData = !0
        }
        LoadDynamicAsset(a, d) {
            if (this._imageAsset) throw Error("already loaded asset");
            this._url = d;
            const c = {};
            f.IsAbsoluteURL(d) && (c.loadPolicy = "remote");
            this.LoadAsset(a, c);
            return this._imageAsset.Load()
        }
        ReplaceWith(a) {
            if (a ===
                this) throw Error("cannot replace with self");
            this.ReleaseTexture();
            this._url = a._url;
            this._size = a._size;
            this._pixelFormat = a._pixelFormat;
            this._offsetX = a._offsetX;
            this._offsetY = a._offsetY;
            this._width = a._width;
            this._height = a._height;
            this._hasMetaData = a._hasMetaData;
            this._imageAsset = a._imageAsset;
            this._textureState = a._textureState;
            this._rcTex = a._rcTex
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        GetPixelFormat() {
            return this._pixelFormat
        }
        GetOffsetX() {
            return this._offsetX
        }
        GetOffsetY() {
            return this._offsetY
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetSheetWidth() {
            return this._imageAsset.GetWidth()
        }
        GetSheetHeight() {
            return this._imageAsset.GetHeight()
        }
        LoadAsset(a,
            d) {
            if (this._imageAsset) throw Error("already got asset");
            d = Object.assign({}, d, {
                url: this.GetURL(),
                size: this.GetSize()
            });
            this._imageAsset = a.LoadImage(d)
        }
        IsLoaded() {
            return this._imageAsset && this._imageAsset.IsLoaded()
        }
        async LoadStaticTexture(a, d) {
            if (!this._imageAsset) throw Error("no asset");
            if (this._textureState) throw Error("already loaded texture");
            this._textureState = "loading";
            a = await this._imageAsset.LoadStaticTexture(a, d);
            if (!a) return this._textureState = "", null;
            this._textureState = "loaded";
            this._hasMetaData ||
                (this._width = a.GetWidth(), this._height = a.GetHeight(), this._hasMetaData = !0);
            this._rcTex.set(this._offsetX, this._offsetY, this._offsetX + this._width, this._offsetY + this._height);
            this._rcTex.divide(a.GetWidth(), a.GetHeight());
            return a
        }
        ReleaseTexture() {
            this._textureState && (this._imageAsset && this._imageAsset.ReleaseTexture(), this._textureState = "", this._rcTex.set(0, 0, 0, 0))
        }
        GetTexture() {
            return this._imageAsset ? this._imageAsset.GetTexture() : null
        }
        GetTexRect() {
            return this._rcTex
        }
        async ExtractImageToCanvas() {
            const a =
                await this._imageAsset.LoadToDrawable(),
                d = f.CreateCanvas(this._width, this._height);
            d.getContext("2d").drawImage(a, this._offsetX, this._offsetY, this._width, this._height, 0, 0, this._width, this._height);
            return d
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.AnimationInfo = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._name = b[0];
            this._speed = b[1];
            this._isLooping = !!b[2];
            this._repeatCount = b[3];
            this._repeatTo = b[4];
            this._isPingPong = !!b[5];
            this._sid = b[6];
            this._frames = b[7].map(a => f.New(f.AnimationFrameInfo, a))
        }
        Release() {
            for (const b of this._frames) b.Release();
            f.clearArray(this._frames)
        }
        LoadAllAssets(b) {
            for (const a of this._frames) a.GetImageInfo().LoadAsset(b)
        }
        LoadAllTextures(b, a) {
            return Promise.all(this._frames.map(d =>
                d.GetImageInfo().LoadStaticTexture(b, a)))
        }
        ReleaseAllTextures() {
            for (const b of this._frames) b.GetImageInfo().ReleaseTexture()
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetFrameCount() {
            return this._frames.length
        }
        GetFrames() {
            return this._frames
        }
        GetFrameAt(b) {
            b = Math.floor(b);
            if (0 > b || b >= this._frames.length) throw new RangeError("invalid frame");
            return this._frames[b]
        }
        GetSpeed() {
            return this._speed
        }
        IsLooping() {
            return this._isLooping
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        GetRepeatTo() {
            return this._repeatTo
        }
        IsPingPong() {
            return this._isPingPong
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.AnimationFrameInfo = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._imageInfo = f.New(f.ImageInfo);
            this._imageInfo.LoadAnimationFrameData(b);
            this._duration = b[6];
            this._origin = f.New(f.Vector2, b[7], b[8]);
            this._imagePoints = b[9].map(a => f.New(f.ImagePoint, this, a));
            this._imagePointsByName = new Map;
            for (const a of this._imagePoints) this._imagePointsByName.set(a.GetName().toLowerCase(), a);
            this._collisionPoly = null;
            b = b[10];
            6 <= b.length && (this._collisionPoly = f.New(f.CollisionPoly,
                b))
        }
        Release() {
            this._collisionPoly && (this._collisionPoly.Release(), this._collisionPoly = null);
            this._imageInfo.Release();
            this._imageInfo = null
        }
        GetImageInfo() {
            return this._imageInfo
        }
        GetDuration() {
            return this._duration
        }
        GetOriginX() {
            return this._origin.getX()
        }
        GetOriginY() {
            return this._origin.getY()
        }
        GetCollisionPoly() {
            return this._collisionPoly
        }
        GetImagePointByName(b) {
            return this._imagePointsByName.get(b.toLowerCase()) || null
        }
        GetImagePointByIndex(b) {
            b = Math.floor(b);
            return 0 > b || b >= this._imagePoints.length ? null :
                this._imagePoints[b]
        }
        GetImagePointCount() {
            return this._imagePoints.length
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.ImagePoint = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._afi = b;
            this._name = a[0];
            this._pos = f.New(f.Vector2, a[1], a[2])
        }
        Release() {}
        GetName() {
            return this._name
        }
        GetX() {
            return this._pos.getX()
        }
        GetY() {
            return this._pos.getY()
        }
        GetVec2() {
            return this._pos
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3Debugger,
        a = self.IObjectClass;
    f.ObjectClass = class extends f.DefendedBase {
        constructor(d, c, e) {
            super();
            const g = d.GetObjectReference(e[1]);
            this._runtime = d;
            this._plugin = d.GetPluginManager().GetPluginByConstructorFunction(g);
            this._sdkType = null;
            this._instSdkCtor = g.Instance;
            this._index = c;
            this._sid = e[11];
            this._name = e[0];
            this._jsPropName = this._runtime.GetJsPropName(e[14]);
            this._isGlobal = !!e[9];
            this._isFamily = !!e[2];
            this._isOnLoaderLayout = !!e[10];
            this._instVars = e[3].map(h =>
                ({
                    sid: h[0],
                    type: h[1],
                    name: h[2],
                    jsPropName: d.GetJsPropName(h[3])
                }));
            this._behaviorsCount = e[4];
            this._effectsCount = e[5];
            this._isWorldType = this._plugin.IsWorldType();
            this._effectList = null;
            this._collisionGrid = f.New(f.SparseGrid, d.GetOriginalViewportWidth(), d.GetOriginalViewportHeight());
            this._anyCollisionCellChanged = !0;
            this._anyInstanceParallaxed = !1;
            this._familyMembersSet = this._familyMembers = null;
            this._familyIndex = -1;
            this._familyEffectMap = this._familyBehaviorMap = this._familyInstVarMap = this._familiesSet =
                this._families = null;
            this._isInContainer = !1;
            this._container = null;
            this._behaviorTypes = e[8].map(h => f.BehaviorType.Create(this, h));
            this._behaviorTypesIncludingInherited = [];
            this._behaviorsByName = new Map;
            this._behaviorNameToIndex = new Map;
            this._usedBehaviorCtors = new Set;
            this._solStack = f.New(f.SolStack, this);
            this._defaultInstanceData = null;
            this._defaultLayerIndex = 0;
            this._isContained = !1;
            this._animationsBySid = this._animationsByName = this._animations = this._imageInfo = this._container = null;
            this._textureRefCount =
                0;
            this._savedData = new Map;
            this._unsavedData = new Map;
            this._instances = [];
            this._iidsStale = !0;
            this._plugin.HasEffects() && (this._effectList = f.New(f.EffectList, this, e[12]));
            e[6] && (this._imageInfo = f.New(f.ImageInfo), this._imageInfo.LoadData(e[6]));
            if (e[7]) {
                this._animations = e[7].map(h => f.New(f.AnimationInfo, h));
                this._animationsByName = new Map;
                this._animationsBySid = new Map;
                for (const h of this._animations) this._animationsByName.set(h.GetName().toLowerCase(), h), this._animationsBySid.set(h.GetSID(), h)
            }
            this._isFamily ?
                (this._familyMembers = [], this._familyMembersSet = new Set, this._familyIndex = this._runtime._GetNextFamilyIndex()) : (this._families = [], this._familiesSet = new Set, this._familyInstVarMap = [], this._familyBehaviorMap = [], this._familyEffectMap = []);
            this._sdkType = f.New(g.Type, this, e[15]);
            this._instanceUserScriptClass = this._iObjectClass = null;
            this._userScriptDispatcher = f.New(f.Event.Dispatcher);
            if (c = this._sdkType.GetScriptInterfaceClass()) {
                if (this._iObjectClass = new c(this), !(this._iObjectClass instanceof a)) throw new TypeError("script interface class must derive from IObjectClass");
            } else this._iObjectClass = new a(this);
            e[13] && (c = e[13]) && this._sdkType.LoadTilemapData(c[0], c[1]);
            this._runtime.UsesLoaderLayout() && !this._isFamily && !this._isOnLoaderLayout && this._isWorldType || this.OnCreate();
            this._plugin.IsSingleGlobal() && (this._plugin._SetSingleGlobalObjectClass(this), this._CreateSingleGlobalInstance(e))
        }
        static Create(d, c, e) {
            return f.New(f.ObjectClass, d, c, e)
        }
        Release() {
            this._imageInfo && (this._imageInfo.Release(), this._imageInfo = null);
            if (this._animations) {
                for (const d of this._animations) d.Release();
                f.clearArray(this._animations);
                this._animationsByName.clear();
                this._animationsBySid.clear()
            }
            this._solStack.Release();
            this._solStack = null;
            this._savedData.clear();
            this._unsavedData.clear();
            this._runtime = this._container = null
        }
        _LoadFamily(d) {
            for (let c = 1, e = d.length; c < e; ++c) {
                const g = this._runtime.GetObjectClassByIndex(d[c]);
                this._familyMembers.push(g);
                this._familyMembersSet.add(g);
                g._families.push(this);
                g._familiesSet.add(this)
            }
        }
        _SetContainer(d) {
            this._isInContainer = !0;
            this._container = d
        }
        IsInContainer() {
            return this._isInContainer
        }
        GetContainer() {
            return this._container
        }
        _OnAfterCreate() {
            var d =
                0;
            if (!this._isFamily)
                for (var c of this._families)
                    for (var e of c.GetBehaviorTypes()) {
                        const l = e.GetName().toLowerCase();
                        this._behaviorsByName.set(l, e);
                        this._behaviorNameToIndex.set(l, d);
                        this._behaviorTypesIncludingInherited.push(e);
                        ++d
                    }
            for (var g of this.GetBehaviorTypes()) c = g.GetName().toLowerCase(), this._behaviorsByName.set(c, g), this._behaviorNameToIndex.set(c, d), this._behaviorTypesIncludingInherited.push(g), ++d;
            for (var h of this._behaviorTypesIncludingInherited) this._usedBehaviorCtors.add(h.GetBehavior().constructor);
            if (!this._isFamily && this._families.length) {
                d = this._runtime.GetFamilyCount();
                f.extendArray(this._familyInstVarMap, d, 0);
                f.extendArray(this._familyBehaviorMap, d, 0);
                f.extendArray(this._familyEffectMap, d, 0);
                d = [];
                c = h = g = 0;
                for (const l of this._families)
                    if (e = l.GetFamilyIndex(), this._familyInstVarMap[e] = g, g += l.GetInstanceVariablesCount(), this._familyBehaviorMap[e] = h, h += l.GetBehaviorTypesCount(), this._familyEffectMap[e] = c, c += l.GetEffectTypesCount(), (e = l.GetEffectList()) && this._effectList)
                        for (const n of e.GetAllEffectTypes()) d.push(n.Clone(this._effectList));
                this._effectList && this._effectList.PrependEffectTypes(d)
            }
        }
        _CreateSingleGlobalInstance(d) {
            const c = this._runtime._GetNewUID(),
                e = f.New(f.Instance, {
                    runtime: this._runtime,
                    objectType: this,
                    uid: c
                });
            e._CreateSdkInstance(d[16], []);
            this._runtime._MapInstanceByUID(c, e);
            this._instances.push(e)
        }
        GetSdkType() {
            return this._sdkType
        }
        IsOnLoaderLayout() {
            return this._isOnLoaderLayout
        }
        OnCreate() {
            this._isFamily || this._sdkType.OnCreate()
        }
        HasLoadedTextures() {
            return 0 < this._textureRefCount
        }
        LoadTextures(d) {
            if (this._isFamily) return Promise.resolve();
            this._textureRefCount++;
            return 1 === this._textureRefCount ? this._sdkType.LoadTextures(d) || Promise.resolve() : Promise.resolve()
        }
        ReleaseTextures() {
            if (!this._isFamily) {
                this._textureRefCount--;
                if (0 > this._textureRefCount) throw Error("released textures too many times");
                0 === this._textureRefCount && this._sdkType.ReleaseTextures()
            }
        }
        OnDynamicTextureLoadComplete() {
            if (this._isFamily) throw Error("not applicable to family");
            this._sdkType.OnDynamicTextureLoadComplete()
        }
        PreloadTexturesWithInstances(d) {
            return this._isFamily ?
                Promise.resolve() : this._sdkType.PreloadTexturesWithInstances(d)
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        IsFamily() {
            return this._isFamily
        }
        IsGlobal() {
            return this._isGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        GetFamilyIndex() {
            return this._familyIndex
        }
        GetBehaviorTypes() {
            return this._behaviorTypes
        }
        GetBehaviorTypesCount() {
            return this._behaviorsCount
        }
        UsesBehaviorByCtor(d) {
            return d &&
                this._usedBehaviorCtors.has(d)
        }
        GetInstanceVariablesCount() {
            return this._instVars.length
        }
        GetInstanceVariableSIDs() {
            return this._instVars.map(d => d.sid)
        }
        GetInstanceVariableIndexBySID(d) {
            return this._instVars.findIndex(c => c.sid === d)
        }
        GetInstanceVariableIndexByName(d) {
            return this._instVars.findIndex(c => c.name === d)
        }
        _GetAllInstanceVariableNames() {
            return this._instVars.map(d => d.name)
        }
        _GetAllInstanceVariableJsPropNames() {
            return this._instVars.map(d => d.jsPropName)
        }
        GetInstanceVariableType(d) {
            d = Math.floor(d);
            if (0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].type
        }
        GetInstanceVariableName(d) {
            d = Math.floor(d);
            if (0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].name
        }
        GetEffectTypesCount() {
            return this._effectsCount
        }
        GetBehaviorTypesIncludingInherited() {
            return this._behaviorTypesIncludingInherited
        }
        GetBehaviorTypeByName(d) {
            return this._behaviorsByName.get(d.toLowerCase()) || null
        }
        GetBehaviorIndexByName(d) {
            d =
                this._behaviorNameToIndex.get(d.toLowerCase());
            return "undefined" === typeof d ? -1 : d
        }
        GetEffectList() {
            return this._effectList
        }
        HasEffects() {
            return this._plugin.HasEffects()
        }
        UsesEffects() {
            return this._effectList && this._effectList.HasAnyEffectType()
        }
        GetSolStack() {
            return this._solStack
        }
        GetCurrentSol() {
            return this._solStack.GetCurrentSol()
        }
        GetImageInfo() {
            return this._imageInfo
        }
        SetDefaultInstanceData(d) {
            this._defaultInstanceData = d
        }
        GetDefaultInstanceData() {
            return this._defaultInstanceData
        }
        _SetDefaultLayerIndex(d) {
            this._defaultLayerIndex =
                d
        }
        GetDefaultLayerIndex() {
            return this._defaultLayerIndex
        }
        GetAnimations() {
            return this._animations
        }
        GetAnimationCount() {
            return this._animations.length
        }
        GetFamilies() {
            return this._families
        }
        BelongsToFamily(d) {
            return this._familiesSet.has(d)
        }
        GetFamilyMembers() {
            return this._familyMembers
        }
        FamilyHasMember(d) {
            return this._familyMembersSet.has(d)
        }
        GetFamilyBehaviorOffset(d) {
            return this._familyBehaviorMap[d]
        }
        GetFamilyInstanceVariableOffset(d) {
            return this._familyInstVarMap[d]
        }
        GetAnimationByName(d) {
            if (!this._animations) throw Error("no animations");
            return this._animationsByName.get(d.toLowerCase()) || null
        }
        GetAnimationBySID(d) {
            if (!this._animations) throw Error("no animations");
            return this._animationsBySid.get(d) || null
        }
        GetFirstAnimationFrame() {
            if (!this._animations) throw Error("no animations");
            return this._animations[0].GetFrameAt(0)
        }
        GetDefaultInstanceSize() {
            if (this._animations) {
                const d = this.GetFirstAnimationFrame().GetImageInfo();
                return [d.GetWidth(), d.GetHeight()]
            }
            return this._imageInfo ? [this._imageInfo.GetWidth(), this._imageInfo.GetHeight()] : [100,
                100
            ]
        }
        GetSingleGlobalInstance() {
            if (!this._plugin.IsSingleGlobal()) throw Error("not a single-global plugin");
            return this._instances[0]
        }
        GetInstances() {
            return this._instances
        }* instances() {
            yield* this._instances
        }* instancesIncludingPendingCreate() {
            yield* this._instances;
            for (const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && (yield d)
        }
        GetInstanceCount() {
            return this._instances.length
        }
        _AddInstance(d) {
            this._instances.push(d)
        }
        _SetIIDsStale() {
            this._iidsStale = !0
        }
        _UpdateIIDs() {
            if (this._iidsStale &&
                !this._isFamily) {
                var d = this._instances,
                    c = 0;
                for (let e = d.length; c < e; ++c) d[c]._SetIID(c);
                d = this._runtime._GetInstancesPendingCreate();
                for (const e of d) e.GetObjectClass() === this && e._SetIID(c++);
                this._iidsStale = !1
            }
        }
        GetInstanceByIID(d) {
            var c = this._instances;
            if (d < c.length) return c[d];
            d -= c.length;
            c = this._runtime._GetInstancesPendingCreate();
            for (const e of c)
                if (e.GetObjectClass() === this) {
                    if (0 === d) return e;
                    --d
                }
            return null
        }
        GetFirstPicked(d) {
            if (d && d.IsInContainer() && d.GetObjectClass() !== this)
                for (const c of d.siblings())
                    if (c.GetObjectClass() ===
                        this) return c;
            d = this.GetCurrentSol().GetInstances();
            return d.length ? d[0] : null
        }
        GetPairedInstance(d) {
            const c = this.GetCurrentSol().GetInstances();
            return 0 < c.length ? c[d.GetIID() % c.length] : null
        }* allCorrespondingInstances(d, c) {
            const e = this.GetCurrentSol().GetInstances();
            var g = e.length;
            const h = c.GetCurrentSol(),
                l = c.GetCurrentSol().GetInstances(),
                n = l.length;
            var q = d.GetIID();
            if (c.IsFamily() || !h.IsSelectAll()) q = l.indexOf(d);
            d = Math.ceil(g / n);
            g %= n;
            0 === g || q < g ? (q *= d, g = d) : (q = g * d + (q - g) * (d - 1), g = d - 1);
            for (let y = q, w =
                    q + g; y < w; ++y) yield e[y]
        }
        FinishCondition(d) {
            this._sdkType.FinishCondition(d)
        }
        ApplySolToContainer() {
            if (this._isInContainer && !this._isFamily) {
                this._UpdateIIDs();
                var d = this.GetCurrentSol(),
                    c = d._GetOwnInstances(),
                    e = d.IsSelectAll(),
                    g = this._runtime.GetCurrentEventStackFrame();
                g = g && g.GetCurrentEvent() && g.GetCurrentEvent().IsOrBlock();
                for (const n of this._container.objectTypes())
                    if (n !== this) {
                        n._UpdateIIDs();
                        var h = n.GetCurrentSol();
                        h._SetSelectAll(e);
                        if (!e) {
                            var l = h._GetOwnInstances();
                            f.clearArray(l);
                            for (const q of c) l.push(n.GetInstanceByIID(q.GetIID()));
                            if (g) {
                                l = d._GetOwnElseInstances();
                                h = h._GetOwnElseInstances();
                                f.clearArray(h);
                                for (const q of l) h.push(n.GetInstanceByIID(q.GetIID()))
                            }
                        }
                    }
            }
        }
        _TruncateContainerSols(d, c) {
            for (const e of this.GetContainer().objectTypes()) {
                const g = e.GetCurrentSol();
                d ? f.truncateArray(g._GetOwnElseInstances(), c) : f.truncateArray(g._GetOwnInstances(), c)
            }
        }
        _GetCollisionCellGrid() {
            return this._collisionGrid
        }
        _SetAnyCollisionCellChanged(d) {
            this._anyCollisionCellChanged = !!d
        }
        _SetAnyInstanceParallaxed(d) {
            this._anyInstanceParallaxed = !!d
        }
        IsAnyInstanceParallaxed() {
            return this._anyInstanceParallaxed
        }
        _UpdateAllCollisionCells() {
            if (this._anyCollisionCellChanged &&
                this._isWorldType) {
                for (const d of this._instances) d.GetWorldInfo()._UpdateCollisionCell();
                for (const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && d.GetWorldInfo()._UpdateCollisionCell();
                this._anyCollisionCellChanged = !1
            }
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        HasSolidBehavior() {
            return this.UsesBehaviorByCtor(f.Behaviors.solid)
        }
        HasNoSaveBehavior() {
            return this.UsesBehaviorByCtor(f.Behaviors.NoSave)
        }
        HasPersistBehavior() {
            return this.UsesBehaviorByCtor(f.Behaviors.Persist)
        }
        _SaveToJson() {
            const d = {
                instances: this._instances.map(c => c.SaveToJson())
            };
            this._savedData && this._savedData.size && (d.ex = f.ToSuperJSON(this._savedData));
            return d
        }
        _LoadFromJson(d) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            var c = d.ex;
            c && (this._savedData = f.FromSuperJSON(c));
            c = this._instances;
            d = d.instances;
            for (let e = 0, g = Math.min(c.length, d.length); e < g; ++e) c[e].LoadFromJson(d[e]);
            for (let e = d.length, g = c.length; e < g; ++e) this._runtime.DestroyInstance(c[e]);
            for (let e = c.length, g = d.length; e < g; ++e) {
                c = d[e];
                let h =
                    null;
                if (this.IsWorldType() && (h = this._runtime.GetMainRunningLayout().GetLayerBySID(c.w.l), !h)) continue;
                this._runtime.CreateInstanceFromData(this._defaultInstanceData || this, h, !1, 0, 0, !0).LoadFromJson(c)
            }
            this._SetIIDsStale()
        }
        GetIObjectClass() {
            return this._iObjectClass
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        _GetUserScriptInstanceClass() {
            return this._instanceUserScriptClass
        }
        _SetUserScriptInstanceClass(d) {
            this._instanceUserScriptClass = d
        }
        DispatchUserScriptEvent(d) {
            var c = this._runtime;
            (c =
                c.IsDebug() && !c.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(d);
            c && b.AddScriptTime()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Container = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._objectTypes = a;
            for (const d of this._objectTypes) d._SetContainer(this)
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectTypes() {
            return this._objectTypes
        }
        objectTypes() {
            return this._objectTypes
        }
        HasAnyWorldType() {
            return this._objectTypes.some(b => b.IsWorldType())
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3Debugger,
        a = self.IInstance,
        d = [];
    let c = 0;
    const e = new WeakMap,
        g = new WeakMap;
    f.Instance = class extends f.DefendedBase {
        constructor(h) {
            super();
            this._runtime = h.runtime;
            this._objectType = h.objectType;
            this._iScriptInterface = this._sdkInst = this._worldInfo = null;
            this._iid = 0;
            this._uid = h.uid;
            this._puid = c++;
            this._flags = 0;
            this._behaviorInstances = this._instVarValues = d;
            var l = this._objectType.GetBehaviorTypesIncludingInherited();
            0 < l.length && (this._behaviorInstances = l.map((n, q) => f.New(f.BehaviorInstance, {
                runtime: this._runtime,
                behaviorType: n,
                instance: this,
                index: q
            })));
            this._siblings = this._objectType.IsInContainer() ? [] : null;
            this._timeScale = -1;
            this._dispatcher = null;
            l = this.GetPlugin();
            l.MustPreDraw() && (this._flags |= 4);
            if (l.IsWorldType())
                if (this._worldInfo = f.New(f.WorldInfo, this, h.layer), h.worldData) this._worldInfo.Init(h.worldData);
                else {
                    this._worldInfo.InitNoData();
                    const [n, q] = this._objectType.GetDefaultInstanceSize();
                    this._worldInfo.SetSize(n, q);
                    this.GetObjectClass().UsesEffects() && this._worldInfo.GetInstanceEffectList().LoadDefaultEffectParameters()
                }
            h.instVarData ?
                this._LoadInstanceVariableData(h.instVarData) : this._LoadDefaultInstanceVariables()
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            if (0 < this._behaviorInstances.length) {
                for (var h of this._behaviorInstances) h.Release();
                f.clearArray(this._behaviorInstances)
            }
            this._sdkInst.Release();
            this._sdkInst = null;
            if (h = e.get(this)) h.clear(), e.delete(this);
            if (h = g.get(this)) h.clear(), g.delete(this);
            this._siblings && f.clearArray(this._siblings);
            this._dispatcher && (this._dispatcher.Release(),
                this._dispatcher = null);
            this._objectType = this._runtime = null;
            0 < this._instVarValues.length && f.clearArray(this._instVarValues);
            this._worldInfo && (this._worldInfo.Release(), this._worldInfo = null)
        }
        _LoadInstanceVariableData(h) {
            0 < h.length && (this._instVarValues = [], f.shallowAssignArray(this._instVarValues, h))
        }
        _LoadDefaultInstanceVariables() {
            const h = this._objectType.GetInstanceVariablesCount();
            if (0 !== h) {
                this._instVarValues = [];
                var l = [0, 0, ""];
                for (let n = 0; n < h; ++n) this._instVarValues.push(l[this._objectType.GetInstanceVariableType(n)])
            }
        }
        _CreateSdkInstance(h,
            l) {
            if (this._sdkInst) throw Error("already got sdk instance");
            for (let n = 0, q = this._behaviorInstances.length; n < q; ++n) this._behaviorInstances[n]._CreateSdkInstance(l ? l[n] : null);
            this._sdkInst = f.New(this._objectType.GetInstanceSdkCtor(), this, h);
            if (!(this._sdkInst instanceof f.SDKInstanceBase)) throw Error("sdk type must derive from SDKInstanceBase");
            for (let n = 0, q = this._behaviorInstances.length; n < q; ++n) this._behaviorInstances[n].PostCreate();
            this._objectType._GetUserScriptInstanceClass() && this._InitUserScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetWorldInfo() {
            return this._worldInfo
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimeScale() {
            return this._timeScale
        }
        GetActiveTimeScale() {
            const h =
                this._timeScale;
            return -1 === h ? this.GetRuntime().GetTimeScale() : h
        }
        SetTimeScale(h) {
            h = +h;
            if (0 > h || !isFinite(h)) h = 0;
            this._timeScale = h
        }
        RestoreTimeScale() {
            this._timeScale = -1
        }
        Dispatcher() {
            this._dispatcher || (this._dispatcher = f.New(f.Event.Dispatcher));
            return this._dispatcher
        }
        Draw(h) {
            this._sdkInst.Draw(h)
        }
        OnCreate(h) {
            this._sdkInst.OnCreate(h)
        }
        _SetHasTilemap() {
            this._flags |= 2
        }
        HasTilemap() {
            return 0 !== (this._flags & 2)
        }
        _MarkDestroyed() {
            this._flags |= 1
        }
        IsDestroyed() {
            return 0 !== (this._flags & 1)
        }
        MustPreDraw() {
            return 0 !==
                (this._flags & 4)
        }
        _IsSolidEnabled() {
            return 0 !== (this._flags & 8)
        }
        _SetSolidEnabled(h) {
            this._flags = h ? this._flags | 8 : this._flags & -9
        }
        _IsJumpthruEnabled() {
            return 0 !== (this._flags & 16)
        }
        _SetJumpthruEnabled(h) {
            this._flags = h ? this._flags | 16 : this._flags & -17
        }
        SetFlag(h, l) {
            h <<= 16;
            this._flags = l ? this._flags | h : this._flags & ~h
        }
        GetFlag(h) {
            return 0 !== (this._flags & h << 16)
        }
        GetCurrentImageInfo() {
            return this._sdkInst.GetCurrentImageInfo()
        }
        GetCurrentSurfaceSize() {
            return this._sdkInst.GetCurrentSurfaceSize()
        }
        GetCurrentTexRect() {
            return this._sdkInst.GetCurrentTexRect()
        }
        GetImagePoint(h) {
            return this._sdkInst.GetImagePoint(h)
        }
        GetObjectClass() {
            return this._objectType
        }
        BelongsToObjectClass(h) {
            return h.IsFamily() ?
                h.FamilyHasMember(this.GetObjectClass()) : this.GetObjectClass() === h
        }
        VerifySupportsSceneGraph() {
            if (!this.GetPlugin().SupportsSceneGraph()) throw Error("object does not support scene graph");
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            var h = this.GetWorldInfo();
            return h ? (h = h.GetParent()) ? h.GetInstance() : null : null
        }
        GetTopParent() {
            var h = this.GetWorldInfo();
            return h ? (h = h.GetTopParent()) ? h.GetInstance() : null : null
        }* parents() {
            const h = this.GetWorldInfo();
            if (h)
                for (const l of h.parents()) yield l.GetInstance()
        }
        HasChildren() {
            const h =
                this.GetWorldInfo();
            return h ? h.HasChildren() : !1
        }
        GetChildren() {
            const h = this.GetWorldInfo();
            return h ? h.GetChildren().map(l => l.GetInstance()) : []
        }* children() {
            const h = this.GetWorldInfo();
            if (h)
                for (const l of h.children()) yield l.GetInstance()
        }* allChildren() {
            const h = this.GetWorldInfo();
            if (h)
                for (const l of h.allChildren()) yield l.GetInstance()
        }
        GetChildCount() {
            const h = this.GetWorldInfo();
            return h ? h.GetChildCount() : 0
        }
        GetChildAt(h) {
            const l = this.GetWorldInfo();
            return l ? (h = l.GetChildAt(h)) ? h.GetInstance() : null :
                null
        }
        AddChild(h, l) {
            this.VerifySupportsSceneGraph();
            h.VerifySupportsSceneGraph();
            this.GetWorldInfo().AddChild(h.GetWorldInfo(), l || {})
        }
        RemoveChild(h) {
            const l = this.GetWorldInfo();
            l && l.RemoveChild(h.GetWorldInfo())
        }
        GetDestroyWithParent() {
            const h = this.GetWorldInfo();
            return h ? h.GetDestroyWithParent() : !1
        }
        SetupInitialSceneGraphConnections() {
            var h = this.GetWorldInfo();
            if (h && (h = h.GetSceneGraphChildrenExportData()))
                for (const l of h)
                    if (h = this._runtime.GetInstanceByUID(l[2])) {
                        const n = l[3];
                        this.AddChild(h, {
                            transformX: !!(n >>
                                0 & 1),
                            transformY: !!(n >> 1 & 1),
                            transformWidth: !!(n >> 2 & 1),
                            transformHeight: !!(n >> 3 & 1),
                            transformAngle: !!(n >> 4 & 1),
                            destroyWithParent: !!(n >> 5 & 1),
                            transformZElevation: !!(n >> 6 & 1)
                        })
                    }
        }
        IsInContainer() {
            return null !== this._siblings
        }
        _AddSibling(h) {
            this._siblings.push(h)
        }
        GetSiblings() {
            return this._siblings
        }
        HasSibling(h) {
            return !!this.GetSibling(h)
        }
        GetSibling(h) {
            const l = this.siblings();
            if (null === l || 0 === l.length) return !1;
            for (const n of l)
                if (n.GetObjectClass() === h) return n;
            return null
        }
        siblings() {
            return this._siblings
        }
        SetSiblingsSinglePicked() {
            for (const h of this.siblings()) h.GetObjectClass().GetCurrentSol().SetSinglePicked(h)
        }
        _PushSiblingsToSolInstances() {
            for (const h of this.siblings()) h.GetObjectClass().GetCurrentSol()._PushInstance(h)
        }
        _SetSiblingsToSolInstancesIndex(h) {
            for (const l of this.siblings()) l.GetObjectClass().GetCurrentSol()._GetOwnInstances()[h] =
                l
        }
        _PushSiblingsToSolElseInstances() {
            for (const h of this.siblings()) h.GetObjectClass().GetCurrentSol()._PushElseInstance(h)
        }
        _SetSiblingsToSolElseInstancesIndex(h) {
            for (const l of this.siblings()) l.GetObjectClass().GetCurrentSol()._GetOwnElseInstances()[h] = l
        }
        GetPlugin() {
            return this._objectType.GetPlugin()
        }
        _SetIID(h) {
            this._iid = h
        }
        GetIID() {
            this._objectType._UpdateIIDs();
            return this._iid
        }
        GetUID() {
            return this._uid
        }
        GetPUID() {
            return this._puid
        }
        GetBehaviorInstances() {
            return this._behaviorInstances
        }
        GetBehaviorInstanceFromCtor(h) {
            if (!h) return null;
            for (const l of this._behaviorInstances)
                if (l.GetBehavior() instanceof h) return l;
            return null
        }
        GetBehaviorSdkInstanceFromCtor(h) {
            return h ? (h = this.GetBehaviorInstanceFromCtor(h)) ? h.GetSdkInstance() : null : null
        }
        GetBehaviorIndexBySID(h) {
            const l = this._behaviorInstances;
            for (let n = 0, q = l.length; n < q; ++n)
                if (l[n].GetBehaviorType().GetSID() === h) return n;
            return -1
        }
        GetAllInstanceVariableValues() {
            return this._instVarValues
        }
        _GetAllInstanceVariableNames() {
            return this._objectType._GetAllInstanceVariableNames()
        }
        GetInstanceVariableCount() {
            return this._instVarValues.length
        }
        GetInstanceVariableValue(h) {
            h |=
                0;
            const l = this._instVarValues;
            if (0 > h || h >= l.length) throw new RangeError("invalid instance variable");
            return l[h]
        }
        _GetInstanceVariableValueUnchecked(h) {
            return this._instVarValues[h]
        }
        _GetInstanceVariableTypedValue(h) {
            const l = this._instVarValues[h];
            return 0 === this._objectType.GetInstanceVariableType(h) ? !!l : l
        }
        SetInstanceVariableValue(h, l) {
            h |= 0;
            const n = this._instVarValues;
            if (0 > h || h >= n.length) throw new RangeError("invalid instance variable");
            switch (this._objectType.GetInstanceVariableType(h)) {
                case 0:
                    n[h] =
                        l ? 1 : 0;
                    break;
                case 1:
                    n[h] = "number" === typeof l ? l : parseFloat(l);
                    break;
                case 2:
                    n[h] = "string" === typeof l ? l : l.toString();
                    break;
                default:
                    throw Error("unknown instance variable type");
            }
        }
        SetInstanceVariableOffset(h, l) {
            if (0 !== l) {
                h |= 0;
                var n = this._instVarValues;
                if (0 > h || h >= n.length) throw new RangeError("invalid instance variable");
                var q = n[h];
                if ("number" === typeof q) n[h] = "number" === typeof l ? n[h] + l : n[h] + parseFloat(l);
                else {
                    if ("boolean" === typeof q) throw Error("can not set offset of boolean variable");
                    if ("string" === typeof q) throw Error("can not set offset of string variable");
                    throw Error("unknown instance variable type");
                }
            }
        }
        GetSavedDataMap() {
            let h = e.get(this);
            if (h) return h;
            h = new Map;
            e.set(this, h);
            return h
        }
        GetUnsavedDataMap() {
            let h = g.get(this);
            if (h) return h;
            h = new Map;
            g.set(this, h);
            return h
        }
        _HasAnyCreateDestroyHandler(h) {
            const l = this.GetObjectClass();
            if (l.UserScriptDispatcher().HasAnyHandlerFor(h)) return !0;
            for (const n of l.GetFamilies())
                if (n.UserScriptDispatcher().HasAnyHandlerFor(h)) return !0;
            return this._runtime.UserScriptDispatcher().HasAnyHandlerFor(h) ? !0 : !1
        }
        _TriggerOnCreatedOnSelfAndRelated() {
            const h =
                new Set;
            h.add(this);
            const l = this.GetWorldInfo();
            if (l && l.HasChildren())
                for (const n of this.allChildren())
                    if (h.add(n), n.IsInContainer())
                        for (const q of n.siblings()) h.add(q);
            if (this.IsInContainer())
                for (const n of this.siblings()) h.add(n);
            for (const n of h.values()) n._TriggerOnCreated()
        }
        _TriggerOnCreated() {
            if (this._HasAnyCreateDestroyHandler("instancecreate")) {
                const h = this.GetObjectClass(),
                    l = new f.Event("instancecreate");
                l.instance = this.GetInterfaceClass();
                h.DispatchUserScriptEvent(l);
                for (const n of h.GetFamilies()) n.DispatchUserScriptEvent(l);
                this._runtime.DispatchUserScriptEvent(l)
            }
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnCreated, this, null)
        }
        _TriggerOnDestroyed() {
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnDestroyed, this, null)
        }
        _FireDestroyedScriptEvents(h) {
            if (this._iScriptInterface) {
                var l = new f.Event("destroy");
                l.isEndingLayout = h;
                this.DispatchUserScriptEvent(l)
            }
            if (this._HasAnyCreateDestroyHandler("instancedestroy")) {
                l = this.GetObjectClass();
                var n = new f.Event("instancedestroy");
                n.instance = this.GetInterfaceClass();
                n.isEndingLayout = h;
                l.DispatchUserScriptEvent(n);
                for (const q of l.GetFamilies()) q.DispatchUserScriptEvent(n);
                this._runtime.DispatchUserScriptEvent(n)
            }
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson(h = "full") {
            const l = {};
            "full" === h ? l.uid = this.GetUID() : l.c3 = !0;
            if ("visual-state" !== h) {
                var n = e.get(this);
                n && n.size && (l.ex = f.ToSuperJSON(n)); - 1 !== this.GetTimeScale() && (l.mts = this.GetTimeScale());
                if (0 < this._objectType.GetInstanceVariablesCount()) {
                    n = {};
                    var q = this._objectType.GetInstanceVariableSIDs();
                    for (let y = 0, w = this._instVarValues.length; y < w; ++y) n[q[y].toString()] = this._instVarValues[y];
                    l.ivs = n
                }
                if (this._behaviorInstances.length) {
                    n = {};
                    for (const y of this._behaviorInstances)(q = y.SaveToJson()) && (n[y.GetBehaviorType().GetSID().toString()] = q);
                    l.behs = n
                }
            }
            this._worldInfo && (l.w = this._worldInfo._SaveToJson(h));
            (h = this._sdkInst.SaveToJson()) && (l.data = h);
            return l
        }
        _OnBeforeLoad(h = "full") {
            this._worldInfo && this._worldInfo._OnBeforeLoad(h)
        }
        LoadFromJson(h, l = "full") {
            if ("full" === l) this._uid = h.uid;
            else if (!h.c3) return;
            if ("visual-state" !== l) {
                var n = e.get(this);
                n && (n.clear(), e.delete(this));
                if (n = h.ex) n = f.FromSuperJSON(n), e.set(this, n);
                this._timeScale = h.hasOwnProperty("mts") ? h.mts : -1;
                if (n = h.ivs)
                    for (const [w, u] of Object.entries(n))
                        if (n = parseInt(w, 10), n = this._objectType.GetInstanceVariableIndexBySID(n), !(0 > n || n >= this._instVarValues.length)) {
                            var q = u;
                            null === q && (q = NaN);
                            this._instVarValues[n] = q
                        }
            }
            if (this.GetPlugin().IsWorldType()) {
                n = h.w;
                var y = n.l;
                this._worldInfo.GetLayer().GetSID() !== y && (q = this._worldInfo.GetLayer(), (y = q.GetLayout().GetLayerBySID(y)) ?
                    (this._worldInfo._SetLayer(y), q._RemoveInstance(this, !0), y._AddInstance(this, !0), y.SetZIndicesChanged(), this._worldInfo.SetBboxChanged()) : "full" === l && this._runtime.DestroyInstance(this));
                this._worldInfo._LoadFromJson(n, l)
            }
            if ("visual-state" !== l && (l = h.behs))
                for (const [w, u] of Object.entries(l)) l = parseInt(w, 10), l = this.GetBehaviorIndexBySID(l), 0 > l || l >= this._behaviorInstances.length || this._behaviorInstances[l].LoadFromJson(u);
            (h = h.data) && this._sdkInst.LoadFromJson(h)
        }
        GetInterfaceClass() {
            return this._iScriptInterface ||
                this._InitUserScriptInterface()
        }
        _InitUserScriptInterface() {
            var h = this._worldInfo ? self.IWorldInstance : a;
            const l = this._sdkInst.GetScriptInterfaceClass(),
                n = this._objectType._GetUserScriptInstanceClass(),
                q = n || l || h;
            a._Init(this);
            this._iScriptInterface = new q;
            a._Init(null);
            if (l && !(this._iScriptInterface instanceof h)) throw new TypeError(`script interface class '${l.name}' does not extend the right base class '${h.name}'`);
            if (n && (h = l || h, !(this._iScriptInterface instanceof h))) throw new TypeError(`setInstanceClass(): class '${n.name}' does not extend the right base class '${h.name}'`);
            return this._iScriptInterface
        }
        _GetInstVarsScriptDescriptor(h) {
            if (0 !== this._instVarValues.length) {
                var l = {},
                    n = this._objectType._GetAllInstanceVariableJsPropNames();
                for (let q = 0, y = n.length; q < y; ++q) l[n[q]] = {
                    configurable: !1,
                    enumerable: !0,
                    get: f.Instance.prototype._GetInstanceVariableTypedValue.bind(this, q),
                    set: f.Instance.prototype.SetInstanceVariableValue.bind(this, q)
                };
                l = Object.create(Object.prototype, l);
                h.instVars = {
                    value: l,
                    writable: !1
                }
            }
        }
        _GetBehaviorsScriptDescriptor(h) {
            var l = this._behaviorInstances;
            if (0 !==
                l.length) {
                var n = {};
                for (const q of l) n[q.GetBehaviorType().GetJsPropName()] = {
                    value: q.GetScriptInterface(),
                    writable: !1
                };
                l = Object.create(Object.prototype, n);
                h.behaviors = {
                    value: l,
                    writable: !1
                }
            }
        }
        DispatchUserScriptEvent(h) {
            h.instance = this.GetInterfaceClass();
            var l = this._runtime;
            (l = l.IsDebug() && !l.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this.GetInterfaceClass().dispatchEvent(h);
            l && b.AddScriptTime()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SceneGraphInfo = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._owner = b;
            this._parent = null;
            this._children = [];
            this._startWidth = b.GetWidth();
            this._startHeight = b.GetHeight();
            this._startScaleY = this._startScaleX = 1;
            this._parentStartAngle = 0
        }
        Release() {
            this._parent = null;
            f.clearArray(this._children)
        }
        SetParent(b) {
            this._parentStartAngle = (this._parent = b) ? b.GetAngle() : 0
        }
        GetParent() {
            return this._parent
        }
        HasChildren() {
            return 0 < this._children.length
        }
        GetChildren() {
            return this._children
        }
        GetStartScaleX() {
            return this._startScaleX
        }
        SetStartScaleX(b) {
            this._startScaleX =
                b
        }
        GetStartScaleY() {
            return this._startScaleY
        }
        SetStartScaleY(b) {
            this._startScaleY = b
        }
        _GetStartWidth() {
            return this._startWidth
        }
        _GetStartHeight() {
            return this._startHeight
        }
        GetParentScaleX() {
            return this._owner.GetTransformWithParentWidth() ? this._parent.GetWidth() / this._parent._GetSceneGraphInfo()._GetStartWidth() : 1
        }
        GetParentScaleY() {
            return this._owner.GetTransformWithParentHeight() ? this._parent.GetHeight() / this._parent._GetSceneGraphInfo()._GetStartHeight() : 1
        }
        GetParentStartAngle() {
            return this._parentStartAngle
        }
        _SaveToJson() {
            return {
                sw: this._startWidth,
                sh: this._startHeight,
                sx: this._startScaleX,
                sy: this._startScaleY,
                psa: this._parentStartAngle,
                c: this._children.map(b => {
                    let a = "";
                    b.GetTransformWithParentX() && (a += "x");
                    b.GetTransformWithParentY() && (a += "y");
                    b.GetTransformWithParentWidth() && (a += "w");
                    b.GetTransformWithParentHeight() && (a += "h");
                    b.GetTransformWithParentAngle() && (a += "a");
                    b.GetTransformWithParentZElevation() && (a += "z");
                    b.GetDestroyWithParent() && (a += "d");
                    return {
                        uid: b.GetInstance().GetUID(),
                        f: a
                    }
                })
            }
        }
        _LoadFromJson(b) {
            this._startWidth = b.sw;
            this._startHeight =
                b.sh;
            this._startScaleX = b.sx;
            this._startScaleY = b.sy;
            this._parentStartAngle = b.psa
        }
        _OnAfterLoad(b) {
            const a = this._owner,
                d = a.GetRuntime();
            for (const c of b.c) {
                b = d.GetInstanceByUID(c.uid).GetWorldInfo();
                const e = c.f,
                    g = {};
                g.transformX = e.includes("x");
                g.transformY = e.includes("y");
                g.transformWidth = e.includes("w");
                g.transformHeight = e.includes("h");
                g.transformAngle = e.includes("a");
                g.transformZElevation = e.includes("z");
                g.destroyWithParent = e.includes("d");
                a.AddChild(b, g)
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = f.New(f.Rect),
        e = f.New(f.Quad),
        g = f.New(f.Event, "bboxchange", !1),
        h = f.New(f.Color, 0, 0, 0, 0),
        l = f.New(f.CollisionPoly),
        n = f.New(f.Color, 1, 1, 1, 1),
        q = f.New(f.Rect, 0, 0, -1, -1),
        y = f.New(f.Rect, 0, 0, -1, -1),
        w = new Set(["absolute", "relative"]),
        u = [],
        p = a.create(),
        x = d.create();
    let t = !0;
    f.WorldInfo = class extends f.DefendedBase {
        constructor(r, B) {
            super();
            this._inst = r;
            this._objectClass = r.GetObjectClass();
            this._runtime = r.GetRuntime();
            this._layer = B;
            this._zIndex = -1;
            this._flags = 196635;
            this._objectClass.GetPlugin().IsRotatable() && (this._flags |= 128);
            this._oy = this._ox = this._cosA = this._sinA = this._a = this._depth = this._h = this._w = this._zElevation = this._y = this._x = NaN;
            this._boundingBox = f.New(f.Rect);
            this._boundingQuad = f.New(f.Quad);
            this._collisionCells = y;
            this._renderCells = q;
            this._solidFilterTags = this._transformedPolyInfo = this._sourceCollisionPoly = null;
            this._colorPremultiplied = this._color = n;
            this._instanceEffectList = this._stateGroup = null;
            this._inst.GetObjectClass().UsesEffects() &&
                (this._instanceEffectList = f.New(f.InstanceEffectList, this._inst, this));
            this._sceneGraphInfo = null;
            this._sceneGraphFlagsExportData = NaN;
            this._sceneGraphChildrenExportData = null;
            this._sceneGraphZIndex = this._sceneGraphZIndexExportData = NaN;
            this._meshInfo = null
        }
        _MarkDestroyed() {
            this._flags |= 256
        }
        Release() {
            this._stateGroup && (this._runtime.GetRenderer().ReleaseStateGroup(this._stateGroup), this._stateGroup = null);
            this._sourceCollisionPoly = null;
            this._transformedPolyInfo && (this._transformedPolyInfo.poly.Release(),
                this._transformedPolyInfo = null);
            this._solidFilterTags && (this._solidFilterTags.clear(), this._solidFilterTags = null);
            this.ReleaseMesh();
            this.HasParent() && this.GetParent().RemoveChild(this);
            if (this.HasChildren()) {
                const r = [...this.GetChildren()];
                for (const B of r) this.RemoveChild(B)
            }
            this._ReleaseSceneGraphInfo();
            this._layer = this._runtime = this._objectClass = this._inst = null
        }
        Init(r) {
            t = !1;
            this.SetXY(r[0], r[1]);
            this.SetZElevation(r[2]);
            this.SetSize(r[3], r[4]);
            this._depth = 0;
            this.IsRotatable() ? this.SetAngle(r[6]) :
                this._a = 0;
            h.setFromJSON(r[7]);
            this._SetColor(h);
            this.SetOriginX(r[8]);
            this.SetOriginY(r[9]);
            this.SetBlendMode(r[10]);
            this._instanceEffectList && this._instanceEffectList._LoadEffectParameters(r[12]);
            r[14] && (this._sceneGraphFlagsExportData = r[14][0], this._sceneGraphChildrenExportData = r[14][1], this._sceneGraphZIndexExportData = r[14][2]);
            if (r[15]) {
                var B = r[15];
                this.CreateMesh(B[0], B[1]);
                r = this.GetSourceMesh();
                B = B[2];
                for (let z = 0, C = B.length; z < C; ++z) {
                    const F = B[z];
                    for (let J = 0, G = F.length; J < G; ++J) {
                        const I = F[J],
                            L = r.GetMeshPointAt(J, z);
                        L.SetX(I[0]);
                        L.SetY(I[1]);
                        L.SetZElevation(I[2]);
                        L.SetU(I[3]);
                        L.SetV(I[4])
                    }
                }
            }
            t = !0;
            this._UpdateRendererStateGroup()
        }
        InitNoData() {
            this._sinA = this._a = this._depth = this._h = this._w = this._zElevation = this._y = this._x = 0;
            this._cosA = 1;
            this._oy = this._ox = 0;
            this._UpdateRendererStateGroup()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetInstance() {
            return this._inst
        }
        _GetParentOffsetAngle() {
            return this.GetTransformWithParentAngle() ? this.GetParent().GetAngle() -
                this._sceneGraphInfo.GetParentStartAngle() : 0
        }
        SetX(r) {
            r = +r;
            if (this.GetTransformWithParentX()) {
                const B = this._sceneGraphInfo;
                r -= this.GetX();
                const z = -this._GetParentOffsetAngle();
                0 === z ? this._x += r / B.GetParentScaleX() : (this._x += Math.cos(z) * r / B.GetParentScaleX(), this.GetTransformWithParentY() && (this._y += Math.sin(z) * r / B.GetParentScaleY()))
            } else this._x = r
        }
        OffsetX(r) {
            r = +r;
            this.GetTransformWithParentX() ? this.SetX(this.GetX() + r) : this._x += r
        }
        GetX() {
            if (this.GetTransformWithParentX()) {
                let r = this._x;
                const B = this._sceneGraphInfo,
                    z = this.GetParent(),
                    C = this._GetParentOffsetAngle();
                0 === C ? r *= B.GetParentScaleX() : (r = r * B.GetParentScaleX() * Math.cos(C), this.GetTransformWithParentY() && (r -= this._y * B.GetParentScaleY() * Math.sin(C)));
                return z.GetX() + r
            }
            return this._x
        }
        SetY(r) {
            r = +r;
            if (this.GetTransformWithParentY()) {
                const B = this._sceneGraphInfo;
                r -= this.GetY();
                const z = -this._GetParentOffsetAngle();
                0 === z ? this._y += r / B.GetParentScaleY() : (this.GetTransformWithParentX() && (this._x -= Math.sin(z) * r / B.GetParentScaleX()), this._y += Math.cos(z) * r / B.GetParentScaleY())
            } else this._y =
                r
        }
        OffsetY(r) {
            r = +r;
            this.GetTransformWithParentY() ? this.SetY(this.GetY() + r) : this._y += r
        }
        GetY() {
            if (this.GetTransformWithParentY()) {
                let r = this._y;
                const B = this._sceneGraphInfo,
                    z = this.GetParent(),
                    C = this._GetParentOffsetAngle();
                0 === C ? r *= B.GetParentScaleY() : (r = r * B.GetParentScaleY() * Math.cos(C), this.GetTransformWithParentX() && (r += this._x * B.GetParentScaleX() * Math.sin(C)));
                return z.GetY() + r
            }
            return this._y
        }
        SetXY(r, B) {
            r = +r;
            B = +B;
            if (this.GetTransformWithParentXOrY()) {
                const C = this.GetTransformWithParentX(),
                    F = this.GetTransformWithParentY(),
                    J = this._sceneGraphInfo,
                    G = r - this.GetX(),
                    I = B - this.GetY();
                var z = -this._GetParentOffsetAngle();
                if (0 === z) this._x = C ? this._x + G / J.GetParentScaleX() : r, this._y = F ? this._y + I / J.GetParentScaleY() : B;
                else {
                    const L = Math.sin(z);
                    z = Math.cos(z);
                    this._x = C ? F ? this._x + (z * G - L * I) / J.GetParentScaleX() : this._x + z * G / J.GetParentScaleX() : r;
                    this._y = F ? C ? this._y + (L * G + z * I) / J.GetParentScaleY() : this._y + z * I / J.GetParentScaleY() : B
                }
            } else this._x = r, this._y = B
        }
        OffsetXY(r, B) {
            r = +r;
            B = +B;
            this.GetTransformWithParentXOrY() ? this.SetXY(this.GetX() + r, this.GetY() +
                B) : (this._x += r, this._y += B)
        }
        EqualsXY(r, B) {
            return this.GetX() === r && this.GetY() === B
        }
        SetZElevation(r) {
            r = +r;
            this.GetTransformWithParentZElevation() && (r -= this.GetParent().GetZElevation());
            this._zElevation !== r && (this._zElevation = r, this._UpdateZElevation(), r = this.GetLayer(), 0 !== this._zElevation && r._SetAnyInstanceZElevated(), r.SetZIndicesChanged())
        }
        _UpdateZElevation() {
            this._UpdateRendererStateGroup();
            if (this.HasChildren()) {
                const r = this.GetChildren();
                for (let B = 0, z = r.length; B < z; B++) {
                    const C = r[B];
                    C.GetTransformWithParentZElevation() &&
                        C._UpdateZElevation()
                }
            }
        }
        OffsetZElevation(r) {
            this.SetZElevation(this.GetZElevation() + r)
        }
        GetZElevation() {
            return this.GetTransformWithParentZElevation() ? this.GetParent().GetZElevation() + this._zElevation : this._zElevation
        }
        GetTotalZElevation() {
            return this.GetLayer().GetZElevation() + this.GetZElevation()
        }
        SetWidth(r) {
            r = +r;
            this.GetTransformWithParentWidth() ? this._w *= r / this.GetWidth() : this._w = r
        }
        OffsetWidth(r) {
            r = +r;
            this.GetTransformWithParentWidth() ? this.SetWidth(this.GetWidth() + r) : this._w += r
        }
        GetWidth() {
            return this.GetTransformWithParentWidth() ?
                this.GetParent().GetWidth() * this._w : this._w
        }
        SetHeight(r) {
            r = +r;
            this.GetTransformWithParentHeight() ? this._h *= r / this.GetHeight() : this._h = r
        }
        OffsetHeight(r) {
            r = +r;
            this.GetTransformWithParentHeight() ? this.SetHeight(this.GetHeight() + r) : this._h += r
        }
        GetHeight() {
            return this.GetTransformWithParentHeight() ? this.GetParent().GetHeight() * this._h : this._h
        }
        SetSize(r, B) {
            r = +r;
            B = +B;
            this.GetTransformWithParentWidth() ? this._w *= r / this.GetWidth() : this._w = r;
            this.GetTransformWithParentHeight() ? this._h *= B / this.GetHeight() : this._h =
                B
        }
        GetDepth() {
            return this._depth
        }
        SetDepth(r) {
            if (0 > r) throw new RangeError("invalid depth");
            this._depth = r
        }
        GetSceneGraphScale() {
            if (this.HasParent()) {
                const r = this._sceneGraphInfo;
                return Math.min(r.GetParentScaleX(), r.GetParentScaleY())
            }
            return 1
        }
        IsRotatable() {
            return 0 !== (this._flags & 128)
        }
        SetAngle(r) {
            r = +r;
            this.IsRotatable() && (this.GetTransformWithParentAngle() && (r -= this.GetParent().GetAngle()), r = f.clampAngle(r), this._a !== r && (this._a = r, this._MarkSinCosAngleChanged()))
        }
        OffsetAngle(r) {
            r = +r;
            0 !== r && this.IsRotatable() &&
                (this._a = f.clampAngle(this._a + r), this._MarkSinCosAngleChanged())
        }
        _MarkSinCosAngleChanged() {
            this._flags |= 262144;
            if (this.HasChildren()) {
                const r = this.GetChildren();
                for (let B = 0, z = r.length; B < z; B++) r[B]._MarkSinCosAngleChanged()
            }
        }
        GetAngle() {
            return this.GetTransformWithParentAngle() ? f.clampAngle(this.GetParent().GetAngle() + this._a) : this._a
        }
        _MaybeUpdateSinCosAngle() {
            const r = this._flags;
            if (0 !== (r & 262144)) {
                var B = this.GetAngle();
                this._sinA = Math.sin(B);
                this._cosA = Math.cos(B);
                this._flags = r & -262145
            }
        }
        GetSinAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._sinA
        }
        GetCosAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._cosA
        }
        SetOriginX(r) {
            this._ox = +r
        }
        OffsetOriginX(r) {
            this._ox += +r
        }
        GetOriginX() {
            return this._ox
        }
        SetOriginY(r) {
            this._oy = +r
        }
        OffsetOriginY(r) {
            this._oy += +r
        }
        GetOriginY() {
            return this._oy
        }
        _SetColor(r) {
            this._color.equals(r) || (this._color === n ? (this._color = f.New(f.Color, r), this._colorPremultiplied = f.New(f.Color, r), this._colorPremultiplied.premultiply()) : r.equalsRgba(1, 1, 1, 1) ? this._colorPremultiplied = this._color = n : (this._color.set(r), this._colorPremultiplied.set(r),
                this._colorPremultiplied.premultiply()), this._UpdateRendererStateGroup())
        }
        SetOpacity(r) {
            r = f.clamp(+r, 0, 1);
            this._color.a !== r && (h.copyRgb(this._color), h.a = r, this._SetColor(h))
        }
        OffsetOpacity(r) {
            this.SetOpacity(this.GetOpacity() + r)
        }
        GetOpacity() {
            return this._color.a
        }
        SetUnpremultipliedColor(r) {
            this._color.equalsIgnoringAlpha(r) || (h.copyRgb(r), h.a = this._color.a, this._SetColor(h))
        }
        SetUnpremultipliedColorRGB(r, B, z) {
            h.setRgb(r, B, z);
            this.SetUnpremultipliedColor(h)
        }
        OffsetUnpremultipliedColorRGB(r, B, z) {
            if (0 !==
                r || 0 !== B || 0 !== z) h.copyRgb(this._color), h.r += r, h.g += B, h.b += z, this.SetUnpremultipliedColor(h)
        }
        GetUnpremultipliedColor() {
            return this._color
        }
        GetPremultipliedColor() {
            return this._colorPremultiplied
        }
        GetDestroyWithParent() {
            return 0 !== (this._flags & 512)
        }
        SetDestroyWithParent(r) {
            this._SetFlag(512, r)
        }
        GetTransformWithParentX() {
            return 0 !== (this._flags & 1024)
        }
        SetTransformWithParentX(r) {
            this._SetFlag(1024, r)
        }
        GetTransformWithParentY() {
            return 0 !== (this._flags & 2048)
        }
        GetTransformWithParentXOrY() {
            return 0 !== (this._flags &
                3072)
        }
        SetTransformWithParentY(r) {
            this._SetFlag(2048, r)
        }
        GetTransformWithParentWidth() {
            return 0 !== (this._flags & 4096)
        }
        SetTransformWithParentWidth(r) {
            this._SetFlag(4096, r)
        }
        GetTransformWithParentHeight() {
            return 0 !== (this._flags & 8192)
        }
        SetTransformWithParentHeight(r) {
            this._SetFlag(8192, r)
        }
        GetTransformWithParentAngle() {
            return 0 !== (this._flags & 16384)
        }
        SetTransformWithParentAngle(r) {
            this._SetFlag(16384, r)
        }
        GetTransformWithParentZElevation() {
            return 0 !== (this._flags & 32768)
        }
        SetTransformWithParentZElevation(r) {
            this._SetFlag(32768,
                r)
        }
        _ClearAllSceneGraphFlags() {
            this._flags &= -65025
        }
        AddChild(r, B) {
            if (r !== this && !r.HasParent() && !this._HasChildRecursive(r) && !this._HasAnyParent(r)) {
                var z = r.GetX(),
                    C = r.GetY(),
                    F = r.GetWidth(),
                    J = r.GetHeight(),
                    G = r.GetAngle(),
                    I = r.GetZElevation();
                r._SetParent(this);
                r.SetTransformWithParentX(B.transformX);
                r.SetTransformWithParentY(B.transformY);
                r.SetTransformWithParentWidth(B.transformWidth);
                r.SetTransformWithParentHeight(B.transformHeight);
                r.SetTransformWithParentAngle(B.transformAngle);
                r.SetTransformWithParentZElevation(B.transformZElevation);
                r.SetDestroyWithParent(B.destroyWithParent);
                B.transformX && (r._x = z - this.GetX(), B.transformWidth && (r._x /= this.GetWidth() / this._sceneGraphInfo._GetStartWidth()));
                B.transformY && (r._y = C - this.GetY(), B.transformHeight && (r._y /= this.GetHeight() / this._sceneGraphInfo._GetStartHeight()));
                B.transformWidth && (r._w = F / this.GetWidth(), r._sceneGraphInfo.SetStartScaleX(r._w));
                B.transformHeight && (r._h = J / this.GetHeight(), r._sceneGraphInfo.SetStartScaleY(r._h));
                B.transformAngle && (r._a = G - this.GetAngle());
                B.transformZElevation &&
                    (r._zElevation = I - this.GetZElevation());
                this._AddChildToSceneGraphInfo(r);
                this.SetBboxChanged()
            }
        }
        RemoveChild(r) {
            if (r.GetParent() === this) {
                var B = r.GetX(),
                    z = r.GetY(),
                    C = r.GetWidth(),
                    F = r.GetHeight(),
                    J = r.GetAngle(),
                    G = r.GetZElevation();
                r._SetParent(null);
                r._ClearAllSceneGraphFlags();
                r.SetXY(B, z);
                r.SetSize(C, F);
                r.SetAngle(J);
                r.SetZElevation(G);
                this._RemoveChildFromSceneGraphInfo(r);
                this.SetBboxChanged()
            }
        }
        _ResetAllSceneGraphState() {
            for (var r of this.children()) this.RemoveChild(r);
            (r = this.GetParent()) && r.RemoveChild(this);
            this._ClearAllSceneGraphFlags()
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            const r = this._sceneGraphInfo;
            return null !== r ? r.GetParent() : null
        }
        GetTopParent() {
            let r = this;
            for (; r.HasParent();) r = r.GetParent();
            return r
        }* parents() {
            let r = this.GetParent();
            for (; r;) yield r, r = r.GetParent()
        }
        HasChild(r) {
            return this.GetChildren().includes(r)
        }
        HasChildren() {
            const r = this._sceneGraphInfo;
            return null !== r ? r.HasChildren() : !1
        }
        GetChildren() {
            const r = this._sceneGraphInfo;
            return null !== r ? r.GetChildren() : u
        }
        children() {
            return this.GetChildren()
        }* allChildren() {
            for (const r of this.children()) yield r,
                yield* r.allChildren()
        }
        GetChildCount() {
            return this.GetChildren().length
        }
        GetChildAt(r) {
            const B = this.GetChildren();
            r = Math.floor(+r);
            return 0 > r || r >= B.length ? null : B[r]
        }
        _CreateSceneGraphInfo(r) {
            this._sceneGraphInfo || (this._sceneGraphInfo = f.New(f.SceneGraphInfo, this));
            r && this._sceneGraphInfo.SetParent(r)
        }
        _GetSceneGraphInfo() {
            return this._sceneGraphInfo
        }
        _ReleaseSceneGraphInfo() {
            this._sceneGraphInfo && (this._sceneGraphInfo.Release(), this._sceneGraphInfo = null)
        }
        _SetParent(r) {
            r ? (r._CreateSceneGraphInfo(null),
                this._CreateSceneGraphInfo(r)) : (this._sceneGraphInfo && this._sceneGraphInfo.SetParent(null), this.HasChildren() || this._ReleaseSceneGraphInfo())
        }
        _HasAnyParent(r) {
            if (!this.HasParent()) return !1;
            const B = this.GetParent();
            return B === r ? !0 : B._HasAnyParent(r)
        }
        _HasChildRecursive(r) {
            if (this.HasChild(r)) return !0;
            for (const B of this.GetChildren())
                if (B._HasChildRecursive(r)) return !0;
            return !1
        }
        _AddChildToSceneGraphInfo(r) {
            this._sceneGraphInfo.GetChildren().push(r)
        }
        _RemoveChildFromSceneGraphInfo(r) {
            const B = this._sceneGraphInfo.GetChildren(),
                z = B.indexOf(r); - 1 !== z && B.splice(z, 1);
            0 !== B.length || this.HasParent() || this._ReleaseSceneGraphInfo();
            r.HasChildren() || r._ReleaseSceneGraphInfo()
        }
        GetSceneGraphChildrenExportData() {
            return this._sceneGraphChildrenExportData
        }
        GetSceneGraphZIndexExportData() {
            return this._sceneGraphZIndexExportData
        }
        GetSceneGraphZIndex() {
            return this._sceneGraphZIndex
        }
        SetSceneGraphZIndex(r) {
            this._sceneGraphZIndex = r
        }
        SetUsePointsShaderProgram() {
            this._SetFlag(524288, !0);
            this._UpdateRendererStateGroup()
        }
        _UpdateRendererStateGroup() {
            if (t) {
                var r =
                    this._runtime.GetRenderer();
                this._stateGroup && r.ReleaseStateGroup(this._stateGroup);
                var B = 0 !== (this._flags & 524288) ? r.GetPointsRenderingProgram() || "<point>" : r.GetTextureFillShaderProgram() || "<default>";
                this._stateGroup = r.AcquireStateGroup(B, this.GetBlendMode(), this._colorPremultiplied, this.GetZElevation())
            }
        }
        GetRendererStateGroup() {
            return this._stateGroup
        }
        HasDefaultColor() {
            return this._color === n
        }
        SetBlendMode(r) {
            r |= 0;
            if (0 > r || 31 < r) throw new RangeError("invalid blend mode");
            this.GetBlendMode() !== r && (this._flags =
                this._flags & -2080374785 | r << 26, this._UpdateRendererStateGroup())
        }
        GetBlendMode() {
            return (this._flags & 2080374784) >> 26
        }
        _SetLayer(r) {
            this._layer = r;
            0 !== this.GetZElevation() && this._layer._SetAnyInstanceZElevated()
        }
        GetLayer() {
            return this._layer
        }
        GetLayout() {
            return this.GetLayer().GetLayout()
        }
        _SetZIndex(r) {
            this._zIndex = r | 0
        }
        GetZIndex() {
            this._layer._UpdateZIndices();
            return this._zIndex
        }
        _GetLastCachedZIndex() {
            return this._zIndex
        }
        _SetFlag(r, B) {
            this._flags = B ? this._flags | r : this._flags & ~r
        }
        IsVisible() {
            return 0 !== (this._flags &
                1)
        }
        SetVisible(r) {
            this._SetFlag(1, r)
        }
        IsCollisionEnabled() {
            return 0 !== (this._flags & 8)
        }
        SetCollisionEnabled(r) {
            r = !!r;
            this.IsCollisionEnabled() !== r && (this._SetFlag(8, r), r ? this.SetBboxChanged() : this._RemoveFromCollisionCells())
        }
        SetSolidCollisionFilter(r, B) {
            this._SetFlag(32, r);
            this._solidFilterTags && this._solidFilterTags.clear();
            if (B.trim()) {
                this._solidFilterTags || (this._solidFilterTags = new Set);
                for (const z of B.split(" ")) z && this._solidFilterTags.add(z.toLowerCase())
            } else this._solidFilterTags = null
        }
        IsSolidCollisionAllowed(r) {
            const B =
                0 !== (this._flags & 32),
                z = this._solidFilterTags;
            if (!r || !z) return !B;
            for (const C of z)
                if (r.has(C)) return B;
            return !B
        }
        SetBboxChanged() {
            this._flags |= 65554;
            this._objectClass._SetAnyCollisionCellChanged(!0);
            this._runtime.UpdateRender();
            this._layer.UsesRenderCells() && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0), this._flags &= -3, this._UpdateRenderCell());
            0 !== (this._flags & 4) && this._inst.Dispatcher().dispatchEvent(g);
            if (null !== this._sceneGraphInfo) {
                const r = this._sceneGraphInfo.GetChildren();
                for (let B =
                        0, z = r.length; B < z; ++B) r[B].SetBboxChanged()
            }
        }
        CalculateBbox(r, B, z) {
            const C = this.GetX(),
                F = this.GetY(),
                J = this.GetWidth(),
                G = this.GetHeight(),
                I = this.GetAngle();
            r.setWH(C - this._ox * J, F - this._oy * G, J, G);
            z && this.HasMesh() && this._ExpandBboxForMesh(r);
            0 === I ? B.setFromRect(r) : (r.offset(-C, -F), B.setFromRotatedRectPrecalc(r, this.GetSinAngle(), this.GetCosAngle()), B.offset(C, F), B.getBoundingBox(r));
            r.normalize()
        }
        _UpdateBbox() {
            const r = this._flags;
            0 !== (r & 2) && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0),
                this._flags = r & -3)
        }
        GetBoundingBox() {
            this._UpdateBbox();
            return this._boundingBox
        }
        GetBoundingQuad() {
            this._UpdateBbox();
            return this._boundingQuad
        }
        PixelRoundQuad(r) {
            var B = this.GetX(),
                z = this.GetY();
            B = Math.round(B) - B;
            z = Math.round(z) - z;
            if (0 === B && 0 === z) return r;
            e.copy(r);
            e.offset(B, z);
            return e
        }
        OverwriteBoundingBox(r) {
            this._boundingBox.copy(r);
            this._boundingQuad.setFromRect(this._boundingBox);
            this._flags &= -3;
            this._UpdateCollisionCell();
            this._UpdateRenderCell()
        }
        SetBboxChangeEventEnabled(r) {
            this._SetFlag(4, r)
        }
        IsBboxChangeEventEnabled() {
            return 0 !==
                (this._flags & 4)
        }
        IsInViewport(r, B) {
            return B && 0 !== this.GetDepth() ? this._IsInViewport_3D() : 0 === this.GetZElevation() ? r.intersectsRect(this.GetBoundingBox()) : this._IsInViewport_ZElevated()
        }
        _IsInViewport_ZElevated() {
            const r = this.GetLayer(),
                B = this.GetTotalZElevation();
            if (B >= r.GetCameraZ()) return !1;
            r.GetViewportForZ(B, c);
            return c.intersectsRect(this.GetBoundingBox())
        }
        _IsInViewport_3D() {
            var r = this.GetBoundingBox();
            const B = r.getLeft(),
                z = r.getRight(),
                C = r.getTop();
            r = r.getBottom();
            const F = this.GetTotalZElevation(),
                J = F + this.GetDepth();
            return this.GetLayer()._GetViewFrustum().ContainsAABB(B, C, F, z, r, J)
        }
        _ProjectToUnitViewport(r, B, z, C, F) {
            p[0] = NaN;
            p[1] = NaN;
            f.Gfx.Project(z, C, F, B, r, x, p);
            return [p[0], p[1]]
        }
        SetSourceCollisionPoly(r) {
            this._sourceCollisionPoly = r;
            this._DiscardTransformedCollisionPoly();
            this.HasMesh() && (this._meshInfo.meshPoly = null)
        }
        GetSourceCollisionPoly() {
            return this._sourceCollisionPoly
        }
        HasOwnCollisionPoly() {
            return null !== this._sourceCollisionPoly || this.HasMesh()
        }
        GetTransformedCollisionPoly() {
            return this._GetCustomTransformedCollisionPolyPrecalc(this.GetWidth(),
                this.GetHeight(), this.GetAngle(), this.GetSinAngle(), this.GetCosAngle())
        }
        GetCustomTransformedCollisionPoly(r, B, z) {
            let C = 0,
                F = 1;
            0 !== z && (C = Math.sin(z), F = Math.cos(z));
            return this._GetCustomTransformedCollisionPolyPrecalc(r, B, z, C, F)
        }
        _GetCustomTransformedCollisionPolyPrecalc(r, B, z, C, F) {
            let J = this._transformedPolyInfo;
            null === J && (this._transformedPolyInfo = J = {
                poly: f.New(f.CollisionPoly),
                width: NaN,
                height: NaN,
                angle: NaN
            });
            const G = J.poly;
            if (J.width === r && J.height === B && J.angle === z) return G;
            const I = this._sourceCollisionPoly;
            if (this.HasMesh()) {
                const L = this.GetOriginX(),
                    N = this.GetOriginY(),
                    S = this.GetSourceMesh();
                let X = this._meshInfo.meshPoly;
                X || (I ? (l.copy(I), l.offset(L, N)) : l.setDefaultPoints(), X = S.InsertPolyMeshVertices(l), this._meshInfo.meshPoly = X);
                S.TransformCollisionPoly(X, G);
                G.offset(-L, -N);
                G.transformPrecalc(r, B, C, F)
            } else I ? (G.copy(I), G.transformPrecalc(r, B, C, F)) : G.setFromQuad(this.GetBoundingQuad(), -this.GetX(), -this.GetY());
            J.width = r;
            J.height = B;
            J.angle = z;
            return G
        }
        _DiscardTransformedCollisionPoly() {
            this.SetPhysicsBodyChanged(!0);
            const r = this._transformedPolyInfo;
            null !== r && (r.width = NaN)
        }
        CreateMesh(r, B) {
            r = Math.floor(r);
            B = Math.floor(B);
            if (!this.GetInstance().GetPlugin().SupportsMesh()) throw Error("object does not support mesh");
            this.ReleaseMesh();
            this._meshInfo = {
                sourceMesh: f.New(f.Gfx.Mesh, r, B),
                transformedMesh: f.New(f.Gfx.Mesh, r, B),
                meshPoly: null
            }
        }
        HasMesh() {
            return null !== this._meshInfo
        }
        GetSourceMesh() {
            if (!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.sourceMesh
        }
        GetTransformedMesh() {
            if (!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.transformedMesh
        }
        SetMeshChanged(r) {
            this._SetFlag(65536, r)
        }
        IsMeshChanged() {
            return 0 !== (this._flags & 65536)
        }
        SetPhysicsBodyChanged(r) {
            this._SetFlag(131072, r)
        }
        IsPhysicsBodyChanged() {
            return 0 !== (this._flags & 131072)
        }
        _ExpandBboxForMesh(r) {
            var B = this._meshInfo.sourceMesh;
            const z = Math.min(B.GetMinX(), 0),
                C = Math.min(B.GetMinY(), 0),
                F = Math.max(B.GetMaxX(), 1);
            B = Math.max(B.GetMaxY(), 1);
            const J = r.width(),
                G = r.height();
            r.offsetLeft(z * J);
            r.offsetTop(C * G);
            r.offsetRight((F - 1) * J);
            r.offsetBottom((B -
                1) * G)
        }
        ReleaseMesh() {
            this._meshInfo && (this._meshInfo.sourceMesh.Release(), this._meshInfo.transformedMesh.Release(), this._meshInfo = null, this._DiscardTransformedCollisionPoly())
        }
        SetMeshPoint(r, B, z) {
            r = Math.floor(r);
            B = Math.floor(B);
            var C = z.mode || "absolute";
            if (!w.has(C)) throw Error("invalid mode");
            C = "relative" === C;
            let F = z.x,
                J = z.y;
            const G = z.zElevation;
            let I = "number" === typeof z.u ? z.u : C ? 0 : -1;
            z = "number" === typeof z.v ? z.v : C ? 0 : -1;
            if (!this.HasMesh()) return !1;
            const L = this.GetSourceMesh(),
                N = L.GetMeshPointAt(r, B);
            if (null === N) return !1;
            let S = !1;
            "number" === typeof G && N.GetZElevation() !== G && (N.SetZElevation(G), S = !0);
            C && (F += r / (L.GetHSize() - 1), J += B / (L.GetVSize() - 1)); - 1 !== I || C ? (C && (I += r / (L.GetHSize() - 1)), I = f.clamp(I, 0, 1)) : I = N.GetU(); - 1 !== z || C ? (C && (z += B / (L.GetVSize() - 1)), z = f.clamp(z, 0, 1)) : z = N.GetV();
            if (N.GetX() === F && N.GetY() === J && N.GetU() === I && N.GetV() === z) return S;
            N.SetX(F);
            N.SetY(J);
            N.SetU(I);
            N.SetV(z);
            this._DiscardTransformedCollisionPoly();
            return !0
        }
        HasTilemap() {
            return this._inst.HasTilemap()
        }
        ContainsPoint(r, B) {
            return this.GetBoundingBox().containsPoint(r,
                B) && this.GetBoundingQuad().containsPoint(r, B) ? this.HasTilemap() ? this._inst.GetSdkInstance().TestPointOverlapTile(r, B) : this.HasOwnCollisionPoly() ? this.GetTransformedCollisionPoly().containsPoint(r - this.GetX(), B - this.GetY()) : !0 : !1
        }
        _IsCollisionCellChanged() {
            return 0 !== (this._flags & 16)
        }
        _UpdateCollisionCell() {
            if (this._IsCollisionCellChanged() && this.IsCollisionEnabled() && 0 === (this._flags & 256)) {
                var r = this.GetBoundingBox(),
                    B = this._objectClass._GetCollisionCellGrid(),
                    z = this._collisionCells;
                c.set(B.XToCell(r.getLeft()),
                    B.YToCell(r.getTop()), B.XToCell(r.getRight()), B.YToCell(r.getBottom()));
                z.equals(c) || (r = this._inst, z === y ? (B.Update(r, null, c), this._collisionCells = f.New(f.Rect, c)) : (B.Update(r, z, c), z.copy(c)), this._flags &= -17)
            }
        }
        _RemoveFromCollisionCells() {
            const r = this._collisionCells;
            r !== y && (this._objectClass._GetCollisionCellGrid().Update(this._inst, r, null), this._collisionCells = y)
        }
        _UpdateRenderCell() {
            const r = this.GetLayer();
            if (r.UsesRenderCells() && 0 === (this._flags & 256)) {
                var B = r.GetRenderGrid(),
                    z = this.GetBoundingBox(),
                    C = this._renderCells;
                c.set(B.XToCell(z.getLeft()), B.YToCell(z.getTop()), B.XToCell(z.getRight()), B.YToCell(z.getBottom()));
                C.equals(c) || (z = this._inst, C === q ? (B.Update(z, null, c), this._renderCells = f.New(f.Rect, c)) : (B.Update(z, C, c), C.copy(c)), r.SetRenderListStale())
            }
        }
        _RemoveFromRenderCells() {
            const r = this._renderCells;
            r !== q && (this.GetLayer().GetRenderGrid().Update(this._inst, r, null), this._renderCells = q)
        }
        GetRenderCellRange() {
            return this._renderCells
        }
        ZOrderMoveToTop() {
            const r = this._inst,
                B = this._layer,
                z = B._GetInstances();
            z.length && z[z.length - 1] === r || (B._RemoveInstance(r, !1), B._AddInstance(r, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToBottom() {
            const r = this._inst,
                B = this._layer,
                z = B._GetInstances();
            z.length && z[0] === r || (B._RemoveInstance(r, !1), B._PrependInstance(r, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToLayer(r) {
            const B = this._inst,
                z = this._layer;
            if (z.GetLayout() !== r.GetLayout()) throw Error("layer from different layout");
            r !== z && (z._RemoveInstance(B, !0), this._SetLayer(r), r._AddInstance(B, !0), this._runtime.UpdateRender())
        }
        ZOrderMoveAdjacentToInstance(r,
            B) {
            const z = this._inst;
            let C = !1;
            const F = this._layer;
            if (r.GetUID() !== z.GetUID()) {
                var J = r.GetWorldInfo();
                if (!J) throw Error("expected world instance");
                J = J.GetLayer();
                F.GetIndex() !== J.GetIndex() && (F._RemoveInstance(z, !0), this._SetLayer(J), J._AddInstance(z, !0), C = !0);
                r = J.MoveInstanceAdjacent(z, r, !!B);
                (C || r) && this._runtime.UpdateRender()
            }
        }
        GetInstanceEffectList() {
            return this._instanceEffectList
        }
        _SetHasAnyActiveEffect(r) {
            this._SetFlag(64, r)
        }
        HasAnyActiveEffect() {
            return 0 !== (this._flags & 64)
        }
        _SaveToJson(r) {
            const B = {
                x: this.GetX(),
                y: this.GetY(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                l: this.GetLayer().GetSID(),
                zi: this.GetZIndex()
            };
            0 !== this.GetZElevation() && (B.ze = this.GetZElevation());
            0 !== this.GetAngle() && (B.a = this.GetAngle());
            this.HasDefaultColor() || (B.c = this._color.toJSON());
            .5 !== this.GetOriginX() && (B.oX = this.GetOriginX());
            .5 !== this.GetOriginY() && (B.oY = this.GetOriginY());
            0 !== this.GetBlendMode() && (B.bm = this.GetBlendMode());
            this.IsVisible() || (B.v = this.IsVisible());
            this.IsCollisionEnabled() || (B.ce = this.IsCollisionEnabled());
            this.IsBboxChangeEventEnabled() && (B.be = this.IsBboxChangeEventEnabled());
            this._instanceEffectList && (B.fx = this._instanceEffectList._SaveToJson());
            const z = 0 !== (this._flags & 32);
            z && (B.sfi = z);
            this._solidFilterTags && (B.sft = [...this._solidFilterTags].join(" "));
            this._sceneGraphInfo && "visual-state" !== r && (B.sgi = this._sceneGraphInfo._SaveToJson());
            this.HasMesh() && (B.mesh = this.GetSourceMesh().SaveToJson());
            return B
        }
        _OnBeforeLoad(r) {
            "visual-state" !== r && this._ResetAllSceneGraphState()
        }
        _LoadFromJson(r, B) {
            t = !1;
            this.SetX(r.x);
            this.SetY(r.y);
            this.SetWidth(r.w);
            this.SetHeight(r.h);
            this._SetZIndex(r.zi);
            this.SetZElevation(r.hasOwnProperty("ze") ? r.ze : 0);
            this.SetAngle(r.hasOwnProperty("a") ? r.a : 0);
            r.hasOwnProperty("c") ? h.setFromJSON(r.c) : r.hasOwnProperty("o") ? (h.copyRgb(this._color), h.a = r.o) : h.setRgba(1, 1, 1, 1);
            this._SetColor(h);
            this.SetOriginX(r.hasOwnProperty("oX") ? r.oX : .5);
            this.SetOriginY(r.hasOwnProperty("oY") ? r.oY : .5);
            this.SetBlendMode(r.hasOwnProperty("bm") ? r.bm : 0);
            this.SetVisible(r.hasOwnProperty("v") ? r.v : !0);
            this.SetCollisionEnabled(r.hasOwnProperty("ce") ?
                r.ce : !0);
            this.SetBboxChangeEventEnabled(r.hasOwnProperty("be") ? r.be : !1);
            this.SetSolidCollisionFilter(r.hasOwnProperty("sfi") ? r.sfi : !1, r.hasOwnProperty("sft") ? r.sft : "");
            this._instanceEffectList && r.hasOwnProperty("fx") && this._instanceEffectList._LoadFromJson(r.fx);
            if (r.hasOwnProperty("sgi") && "visual-state" !== B) {
                this._CreateSceneGraphInfo(null);
                const z = this._sceneGraphInfo,
                    C = r.sgi;
                z._LoadFromJson(C);
                const F = this.GetRuntime().Dispatcher(),
                    J = () => {
                        F.removeEventListener("afterload", J);
                        0 === (this._flags & 256) &&
                            z._OnAfterLoad(C)
                    };
                F.addEventListener("afterload", J)
            }
            r.hasOwnProperty("mesh") ? (r = r.mesh, this.CreateMesh(r.cols, r.rows), this.GetSourceMesh().LoadFromJson(r)) : this.ReleaseMesh();
            this.SetBboxChanged();
            t = !0;
            this._UpdateRendererStateGroup()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.BehaviorType = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            const d = b.GetRuntime(),
                c = d.GetPluginManager(),
                e = d.GetObjectReference(a[1]);
            c.HasBehaviorByConstructorFunction(e) || c.CreateBehavior(a);
            this._runtime = d;
            this._objectClass = b;
            this._behavior = c.GetBehaviorByConstructorFunction(e);
            this._sdkType = null;
            this._instSdkCtor = e.Instance;
            this._sid = a[2];
            this._name = a[0];
            this._jsPropName = this._runtime.GetJsPropName(a[3]);
            this._sdkType = f.New(e.Type, this);
            this.OnCreate()
        }
        static Create(b,
            a) {
            return f.New(f.BehaviorType, b, a)
        }
        Release() {
            this._behavior = this._runtime = null;
            this._sdkType.Release();
            this._instSdkCtor = this._sdkType = null
        }
        GetSdkType() {
            return this._sdkType
        }
        OnCreate() {
            this._sdkType.OnCreate()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehavior() {
            return this._behavior
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetJsPropName() {
            return this._jsPropName
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.IBehaviorInstance;
    f.BehaviorInstance = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._behaviorType = a.behaviorType;
            this._behavior = this._behaviorType.GetBehavior();
            this._inst = a.instance;
            this._index = a.index;
            this._iScriptInterface = this._sdkInst = null;
            this._behavior._AddInstance(this._inst)
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            this._behavior._RemoveInstance(this._inst);
            this._sdkInst.Release();
            this._inst = this._behavior = this._behaviorType = this._runtime = this._iScriptInterface = this._sdkInst = null
        }
        _CreateSdkInstance(a) {
            if (this._sdkInst) throw Error("already got sdk instance");
            this._sdkInst = f.New(this._behaviorType.GetInstanceSdkCtor(), this, a);
            this._InitScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetBehavior() {
            return this._behavior
        }
        _GetIndex() {
            return this._index
        }
        PostCreate() {
            this._sdkInst.PostCreate()
        }
        OnSpriteFrameChanged(a,
            d) {
            this._sdkInst.OnSpriteFrameChanged(a, d)
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson() {
            return this._sdkInst.SaveToJson()
        }
        LoadFromJson(a) {
            return this._sdkInst.LoadFromJson(a)
        }
        static SortByTickSequence(a, d) {
            var c = a.GetObjectInstance(),
                e = d.GetObjectInstance();
            const g = c.GetObjectClass().GetIndex(),
                h = e.GetObjectClass().GetIndex();
            if (g !== h) return g - h;
            c = c.GetPUID();
            e = e.GetPUID();
            return c !== e ? c - e : a.GetBehaviorInstance()._GetIndex() - d.GetBehaviorInstance()._GetIndex()
        }
        _InitScriptInterface() {
            const a =
                this._sdkInst.GetScriptInterfaceClass(),
                d = a || b;
            b._Init(this);
            this._iScriptInterface = new d;
            b._Init(null);
            if (a && !(this._iScriptInterface instanceof b)) throw new TypeError(`script interface class '${a.name}' does not extend the right base class '${b.name}'`);
        }
        GetScriptInterface() {
            return this._iScriptInterface
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.EffectList = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._owner = b;
            this._allEffectTypes = [];
            this._activeEffectTypes = [];
            this._effectTypesByName = new Map;
            this._effectParams = [];
            this._preservesOpaqueness = !0;
            for (const d of a) b = f.New(f.EffectType, this, d, this._allEffectTypes.length), this._allEffectTypes.push(b), this._effectTypesByName.set(b.GetName().toLowerCase(), b), 3 <= d.length && this._effectParams.push(this._LoadSingleEffectParameters(d[2]));
            this.GetRuntime()._AddEffectList(this)
        }
        Release() {
            f.clearArray(this._allEffectTypes);
            f.clearArray(this._activeEffectTypes);
            this._effectTypesByName.clear();
            f.clearArray(this._effectParams);
            this._owner = null
        }
        PrependEffectTypes(b) {
            if (b.length) {
                this._allEffectTypes = b.concat(this._allEffectTypes);
                for (const a of b) this._effectTypesByName.set(a.GetName().toLowerCase(), a);
                for (let a = 0, d = this._allEffectTypes.length; a < d; ++a) this._allEffectTypes[a]._SetIndex(a)
            }
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if (Array.isArray(c)) {
                    const e = f.New(f.Color);
                    e.setFromJSON(c);
                    b[a] = e
                }
            }
            return b
        }
        GetOwner() {
            return this._owner
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        UpdateActiveEffects() {
            f.clearArray(this._activeEffectTypes);
            let b = !0;
            for (const a of this._allEffectTypes) a.IsActive() && (this._activeEffectTypes.push(a), a.GetShaderProgram().PreservesOpaqueness() || (b = !1));
            this._preservesOpaqueness = b
        }
        GetAllEffectTypes() {
            return this._allEffectTypes
        }
        HasAnyEffectType() {
            return 0 < this._allEffectTypes.length
        }
        GetEffectTypeByName(b) {
            return this._effectTypesByName.get(b.toLowerCase()) ||
                null
        }
        GetEffectTypeByIndex(b) {
            b = Math.floor(+b);
            if (0 > b || b >= this._allEffectTypes.length) throw new RangeError("invalid effect type index");
            return this._allEffectTypes[b]
        }
        IsEffectIndexActive(b) {
            return this.GetEffectTypeByIndex(b).IsActive()
        }
        SetEffectIndexActive(b, a) {
            this.GetEffectTypeByIndex(b).SetActive(a)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        HasAnyActiveEffect() {
            return 0 < this._activeEffectTypes.length
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        static SaveFxParamToJson(b) {
            return b &&
                b instanceof f.Color ? {
                    t: "color",
                    v: b.toJSON()
                } : b
        }
        static LoadFxParamFromJson(b) {
            if ("object" === typeof b) {
                if ("color" === b.t) {
                    const a = f.New(f.Color);
                    a.setFromJSON(b.v);
                    return a
                }
                throw Error("invalid effect parameter type");
            }
            return b
        }
        static SaveFxParamsToJson(b) {
            return b.map(f.EffectList.SaveFxParamToJson)
        }
        static LoadFxParamsFromJson(b) {
            return b.map(f.EffectList.LoadFxParamFromJson)
        }
        SaveToJson() {
            return this._allEffectTypes.map(b => ({
                name: b.GetName(),
                active: b.IsActive(),
                params: f.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        LoadFromJson(b) {
            for (const a of b)
                if (b =
                    this.GetEffectTypeByName(a.name)) b.SetActive(a.active), this._effectParams[b.GetIndex()] = f.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.EffectType = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._effectList = b;
            this._id = a[0];
            this._name = a[1];
            this._index = d;
            this._shaderProgram = null;
            this._isActive = !0
        }
        Release() {
            this._shaderProgram = this._effectList = null
        }
        Clone(b) {
            b = f.New(f.EffectType, b, [this._id, this._name], -1);
            b._shaderProgram = this._shaderProgram;
            b._isActive = this._isActive;
            return b
        }
        _InitRenderer(b) {
            b = b.GetShaderProgramByName(this._id);
            if (!b) throw Error("failed to find shader program '" + this._id +
                "'");
            this._shaderProgram = b
        }
        GetEffectList() {
            return this._effectList
        }
        GetName() {
            return this._name
        }
        _SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        GetOwner() {
            return this._effectList.GetOwner()
        }
        GetRuntime() {
            return this._effectList.GetRuntime()
        }
        SetActive(b) {
            this._isActive = !!b
        }
        IsActive() {
            return this._isActive
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        GetDefaultParameterValues() {
            const b = [];
            for (let a = 0, d = this._shaderProgram.GetParameterCount(); a < d; ++a) {
                const c = this._shaderProgram.GetParameterType(a);
                if ("float" === c || "percent" === c) b.push(0);
                else if ("color" === c) b.push(f.New(f.Color, 1, 1, 1, 1));
                else throw new TypeError("unknown effect parameter type");
            }
            return b
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.InstanceEffectList = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._inst = b;
            this._wi = a;
            this._effectList = b.GetObjectClass().GetEffectList();
            this._activeEffectFlags = [];
            this._activeEffectTypes = [];
            this._preservesOpaqueness = !0;
            this._effectParams = [];
            for (const c of this._effectList.GetAllEffectTypes()) this._activeEffectFlags.push(!0);
            this.UpdateActiveEffects()
        }
        Release() {
            f.clearArray(this._activeEffectFlags);
            f.clearArray(this._activeEffectTypes);
            f.clearArray(this._effectParams);
            this._effectList = this._inst = null
        }
        _LoadEffectParameters(b) {
            for (const a of b) this._effectParams.push(this._LoadSingleEffectParameters(a))
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if (Array.isArray(c)) {
                    const e = f.New(f.Color);
                    e.setFromJSON(c);
                    b[a] = e
                }
            }
            return b
        }
        LoadDefaultEffectParameters() {
            for (const b of this._effectList.GetAllEffectTypes()) this._effectParams.push(b.GetDefaultParameterValues())
        }
        GetOwner() {
            return this._owner
        }
        GetEffectList() {
            return this._effectList
        }
        GetRuntime() {
            return this._inst.GetRuntime()
        }
        UpdateActiveEffects() {
            f.clearArray(this._activeEffectTypes);
            const b = this._effectList.GetAllEffectTypes(),
                a = this._activeEffectTypes,
                d = this._activeEffectFlags;
            let c = !0;
            for (let e = 0, g = b.length; e < g; ++e)
                if (d[e]) {
                    const h = b[e];
                    a.push(h);
                    h.GetShaderProgram().PreservesOpaqueness() || (c = !1)
                }
            this._preservesOpaqueness = c;
            this._wi._SetHasAnyActiveEffect(!!a.length)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        HasAnyActiveBackgroundBlendingEffect() {
            return this._activeEffectTypes.some(b =>
                b.GetShaderProgram().UsesDest())
        }
        IsEffectIndexActive(b) {
            return this._activeEffectFlags[b]
        }
        SetEffectIndexActive(b, a) {
            this._activeEffectFlags[b] = !!a
        }
        GetAllEffectTypes() {
            return this._effectList.GetAllEffectTypes()
        }
        _SaveToJson() {
            return this._effectList.GetAllEffectTypes().map(b => ({
                name: b.GetName(),
                active: this._activeEffectFlags[b.GetIndex()],
                params: f.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        _LoadFromJson(b) {
            for (const a of b)
                if (b = this._effectList.GetEffectTypeByName(a.name)) this._activeEffectFlags[b.GetIndex()] =
                    a.active, this._effectParams[b.GetIndex()] = f.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [],
        a = [],
        d = [],
        c = f.New(f.CollisionPoly),
        e = f.New(f.CollisionPoly),
        g = f.New(f.Quad),
        h = f.New(f.Rect),
        l = f.New(f.Rect);
    let n = null,
        q = null,
        y = null;
    f.CollisionEngine = class extends f.DefendedBase {
        constructor(w) {
            super();
            this._runtime = w;
            this._registeredCollisions = [];
            this._polyCheckSec = this._polyCheckCount = this._collisionCheckSec = this._collisionCheckCount = 0
        }
        Release() {
            this._runtime = null
        }
        _Update1sStats() {
            this._collisionCheckSec = this._collisionCheckCount;
            this._collisionCheckCount = 0;
            this._polyCheckSec =
                this._polyCheckCount;
            this._polyCheckCount = 0
        }
        Get1secCollisionChecks() {
            return this._collisionCheckSec
        }
        Get1secPolyChecks() {
            return this._polyCheckSec
        }
        RegisterCollision(w, u) {
            const p = w.GetWorldInfo(),
                x = u.GetWorldInfo();
            p && x && p.IsCollisionEnabled() && x.IsCollisionEnabled() && this._registeredCollisions.push([w, u])
        }
        AddRegisteredCollisionCandidates(w, u, p) {
            for (const [x, t] of this._registeredCollisions) {
                let r;
                if (w === x) r = t;
                else if (w === t) r = x;
                else continue;
                r.BelongsToObjectClass(u) && (p.includes(r) || p.push(r))
            }
        }
        CheckRegisteredCollision(w,
            u) {
            if (!this._registeredCollisions.length) return !1;
            for (const [p, x] of this._registeredCollisions)
                if (w === p && u === x || w === x && u === p) return !0;
            return !1
        }
        ClearRegisteredCollisions() {
            f.clearArray(this._registeredCollisions)
        }
        TestOverlap(w, u) {
            if (!w || !u || w === u) return !1;
            w = w.GetWorldInfo();
            u = u.GetWorldInfo();
            if (!w.IsCollisionEnabled() || !u.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            const p = w.GetLayer(),
                x = u.GetLayer();
            return p.IsTransformCompatibleWith(x) ? this._TestOverlap_SameLayers(w, u) : this._TestOverlap_DifferentLayers(w,
                u)
        }
        _TestOverlap_SameLayers(w, u) {
            if (!w.GetBoundingBox().intersectsRect(u.GetBoundingBox())) return !1;
            this._polyCheckCount++;
            if (!w.GetBoundingQuad().intersectsQuad(u.GetBoundingQuad()) || w.HasTilemap() && u.HasTilemap()) return !1;
            if (w.HasTilemap()) return this.TestTilemapOverlap(w, u);
            if (u.HasTilemap()) return this.TestTilemapOverlap(u, w);
            if (!w.HasOwnCollisionPoly() && !u.HasOwnCollisionPoly()) return !0;
            const p = w.GetTransformedCollisionPoly(),
                x = u.GetTransformedCollisionPoly();
            return p.intersectsPoly(x, u.GetX() -
                w.GetX(), u.GetY() - w.GetY())
        }
        _TestOverlap_DifferentLayers(w, u) {
            var p = w.HasTilemap(),
                x = u.HasTilemap();
            if (p && !x) return this.TestTilemapOverlapDifferentLayers(w, u);
            if (x && !p) return this.TestTilemapOverlapDifferentLayers(u, w);
            if (x || p) return !1;
            x = w.GetLayer();
            p = u.GetLayer();
            c.copy(w.GetTransformedCollisionPoly());
            e.copy(u.GetTransformedCollisionPoly());
            var t = c.pointsArr();
            for (let r = 0, B = t.length; r < B; r += 2) {
                const z = r + 1,
                    C = t[z],
                    [F, J] = x.LayerToCanvasCss(t[r] + w.GetX(), C + w.GetY());
                t[r] = F;
                t[z] = J
            }
            w = e.pointsArr();
            for (let r =
                    0, B = w.length; r < B; r += 2) {
                x = r + 1;
                t = w[x];
                const [z, C] = p.LayerToCanvasCss(w[r] + u.GetX(), t + u.GetY());
                w[r] = z;
                w[x] = C
            }
            c.setBboxChanged();
            e.setBboxChanged();
            this._polyCheckCount++;
            return c.intersectsPoly(e, 0, 0)
        }
        TestTilemapOverlapDifferentLayers(w, u) {
            var p = w.GetLayer(),
                x = u.GetLayer();
            n || (n = f.New(f.CollisionPoly));
            q || (q = f.New(f.Rect));
            y || (y = f.New(f.Quad));
            var t = u.GetX(),
                r = u.GetY();
            const [B, z] = x.LayerToCanvasCss(t, r), [C, F] = p.CanvasCssToLayer(B, z);
            p = t - C;
            r -= F;
            q.copy(u.GetBoundingBox());
            q.offset(p, r);
            if (!w.GetBoundingBox().intersectsRect(q)) return !1;
            y.copy(u.GetBoundingQuad());
            y.offset(p, r);
            this._polyCheckCount++;
            if (!w.GetBoundingQuad().intersectsQuad(y)) return !1;
            n.copy(u.GetTransformedCollisionPoly());
            x = n.pointsArr();
            for (let J = 0, G = x.length; J < G; J += 2) t = J + 1, x[J] += p, x[t] += r;
            return this.TestTilemapOverlap(w, u, C, F, n, q, y)
        }
        TestTilemapOverlap(w, u, p, x, t, r, B) {
            r = void 0 !== r ? r : u.GetBoundingBox();
            const z = w.GetX(),
                C = w.GetY();
            var F = w.GetInstance().GetSdkInstance();
            p = void 0 !== p ? p : u.GetX();
            x = void 0 !== x ? x : u.GetY();
            w = u.HasOwnCollisionPoly();
            B = void 0 !== B ? B : u.GetBoundingQuad();
            F.GetCollisionRectCandidates(r, a);
            for (let I = 0, L = a.length; I < L; ++I) {
                var J = a[I];
                F = J.GetRect();
                this._collisionCheckCount++;
                if (r.intersectsRectOffset(F, z, C) && (g.setFromRect(F), g.offset(z, C), g.intersectsQuad(B)))
                    if (w) {
                        var G = void 0 !== t ? t : u.GetTransformedCollisionPoly();
                        if (J = J.GetPoly()) {
                            if (this._polyCheckCount++, J.intersectsPoly(G, p - (z + F.getLeft()), x - (C + F.getTop()))) return f.clearArray(a), !0
                        } else if (c.setFromQuad(g, 0, 0), c.intersectsPoly(G, p, x)) return f.clearArray(a), !0
                    } else if (G = J.GetPoly()) {
                    if (c.setFromQuad(B,
                            0, 0), G.intersectsPoly(c, -(z + F.getLeft()), -(C + F.getTop()))) return f.clearArray(a), !0
                } else return f.clearArray(a), !0
            }
            f.clearArray(a);
            return !1
        }
        TestAndSelectCanvasPointOverlap(w, u, p, x) {
            const t = w.GetCurrentSol();
            var r = this._runtime.GetCurrentEvent();
            if (!r) throw Error("cannot call outside event");
            r = r.IsOrBlock();
            if (t.IsSelectAll()) {
                x || (t._SetSelectAll(!1), f.clearArray(t._GetOwnInstances()));
                for (var B of w.GetInstances()) {
                    var z = B.GetWorldInfo(),
                        C = z.GetLayer();
                    const [F, J] = C.CanvasCssToLayer(u, p, z.GetTotalZElevation());
                    if (z.ContainsPoint(F, J)) {
                        if (x) return !1;
                        t._PushInstance(B)
                    } else r && t._PushElseInstance(B)
                }
            } else {
                B = r ? t._GetOwnElseInstances() : t._GetOwnInstances();
                z = 0;
                for (let F = 0, J = B.length; F < J; ++F) {
                    C = B[F];
                    const G = C.GetWorldInfo(),
                        I = G.GetLayer(),
                        [L, N] = I.CanvasCssToLayer(u, p, G.GetTotalZElevation());
                    if (G.ContainsPoint(L, N)) {
                        if (x) return !1;
                        r ? t._PushInstance(C) : B[z++] = C
                    } else r && (B[z++] = C)
                }
                x || (B.length = z)
            }
            w.ApplySolToContainer();
            return x ? !0 : t.HasAnyInstances()
        }
        GetCollisionCandidates(w, u, p, x) {
            w = w ? 1 !== w.GetParallaxX() || 1 !==
                w.GetParallaxY() : !1;
            if (u.IsFamily())
                for (const t of u.GetFamilyMembers()) w || t.IsAnyInstanceParallaxed() ? f.appendArray(x, t.GetInstances()) : (t._UpdateAllCollisionCells(), t._GetCollisionCellGrid().QueryRange(p, x));
            else w || u.IsAnyInstanceParallaxed() ? f.appendArray(x, u.GetInstances()) : (u._UpdateAllCollisionCells(), u._GetCollisionCellGrid().QueryRange(p, x))
        }
        GetObjectClassesCollisionCandidates(w, u, p, x) {
            for (const t of u) this.GetCollisionCandidates(w, t, p, x)
        }
        GetSolidCollisionCandidates(w, u, p) {
            const x = this._runtime.GetSolidBehavior();
            x && this.GetObjectClassesCollisionCandidates(w, x.GetObjectClasses(), u, p)
        }
        GetJumpthruCollisionCandidates(w, u, p) {
            const x = this._runtime.GetJumpthruBehavior();
            x && this.GetObjectClassesCollisionCandidates(w, x.GetObjectClasses(), u, p)
        }
        IsSolidCollisionAllowed(w, u) {
            return w._IsSolidEnabled() && (!u || u.GetWorldInfo().IsSolidCollisionAllowed(w.GetSavedDataMap().get("solidTags")))
        }
        TestOverlapSolid(w) {
            const u = w.GetWorldInfo();
            this.GetSolidCollisionCandidates(u.GetLayer(), u.GetBoundingBox(), b);
            for (const p of b)
                if (this.IsSolidCollisionAllowed(p,
                        w) && this.TestOverlap(w, p)) return f.clearArray(b), p;
            f.clearArray(b);
            return null
        }
        TestRectOverlapSolid(w, u) {
            this.GetSolidCollisionCandidates(null, w, b);
            for (const p of b)
                if (this.IsSolidCollisionAllowed(p, u) && this.TestRectOverlap(w, p)) return f.clearArray(b), p;
            f.clearArray(b);
            return null
        }
        TestOverlapJumpthru(w, u) {
            let p = null;
            u && (p = d, f.clearArray(p));
            const x = w.GetWorldInfo();
            this.GetJumpthruCollisionCandidates(x.GetLayer(), x.GetBoundingBox(), b);
            for (const t of b)
                if (t._IsJumpthruEnabled() && this.TestOverlap(w,
                        t))
                    if (u) p.push(t);
                    else return f.clearArray(b), t;
            f.clearArray(b);
            return p
        }
        PushOut(w, u, p, x, t) {
            x = x || 50;
            const r = w.GetWorldInfo(),
                B = r.GetX(),
                z = r.GetY();
            for (let C = 0; C < x; ++C)
                if (r.SetXY(B + u * C, z + p * C), r.SetBboxChanged(), !this.TestOverlap(w, t)) return !0;
            r.SetXY(B, z);
            r.SetBboxChanged();
            return !1
        }
        PushOutSolid(w, u, p, x, t, r) {
            x = x || 50;
            const B = w.GetWorldInfo(),
                z = B.GetX(),
                C = B.GetY();
            let F = null,
                J = null;
            for (let G = 0; G < x; ++G)
                if (B.SetXY(z + u * G, C + p * G), B.SetBboxChanged(), !this.TestOverlap(w, F))
                    if (F = this.TestOverlapSolid(w)) J = F;
                    else if (t && (F = r ? this.TestOverlap(w, r) ? r : null : this.TestOverlapJumpthru(w)) && (J = F), !F) return J && this.PushInFractional(w, u, p, J, 16, !0), !0;
            B.SetXY(z, C);
            B.SetBboxChanged();
            return !1
        }
        PushOutSolidAxis(w, u, p, x) {
            x = x || 50;
            const t = w.GetWorldInfo(),
                r = t.GetX(),
                B = t.GetY();
            let z = null,
                C = null;
            for (let F = 0; F < x; ++F)
                for (let J = 0; 2 > J; ++J) {
                    const G = 2 * J - 1;
                    t.SetXY(r + u * F * G, B + p * F * G);
                    t.SetBboxChanged();
                    if (!this.TestOverlap(w, z))
                        if (z = this.TestOverlapSolid(w)) C = z;
                        else return C && this.PushInFractional(w, u * G, p * G, C, 16, !0), !0
                }
            t.SetXY(r,
                B);
            t.SetBboxChanged();
            return !1
        }
        PushInFractional(w, u, p, x, t, r) {
            let B = 2,
                z = !1;
            var C = !1;
            const F = w.GetWorldInfo();
            let J = F.GetX(),
                G = F.GetY();
            for (; B <= t;) C = 1 / B, B *= 2, F.OffsetXY(u * C * (z ? 1 : -1), p * C * (z ? 1 : -1)), F.SetBboxChanged(), this.TestOverlap(w, x) || r && this.TestOverlapSolid(w) ? C = z = !0 : (C = z = !1, J = F.GetX(), G = F.GetY());
            C && (F.SetXY(J, G), F.SetBboxChanged())
        }
        PushOutSolidNearest(w, u = 100) {
            let p = 0;
            const x = w.GetWorldInfo(),
                t = x.GetX(),
                r = x.GetY();
            let B = 0,
                z = this.TestOverlapSolid(w);
            if (!z) return !0;
            for (; p <= u;) {
                let C = 0,
                    F = 0;
                switch (B) {
                    case 0:
                        C =
                            0;
                        F = -1;
                        p++;
                        break;
                    case 1:
                        C = 1;
                        F = -1;
                        break;
                    case 2:
                        C = 1;
                        F = 0;
                        break;
                    case 3:
                        F = C = 1;
                        break;
                    case 4:
                        C = 0;
                        F = 1;
                        break;
                    case 5:
                        C = -1;
                        F = 1;
                        break;
                    case 6:
                        C = -1;
                        F = 0;
                        break;
                    case 7:
                        F = C = -1
                }
                B = (B + 1) % 8;
                x.SetXY(Math.floor(t + C * p), Math.floor(r + F * p));
                x.SetBboxChanged();
                if (!this.TestOverlap(w, z) && (z = this.TestOverlapSolid(w), !z)) return !0
            }
            x.SetXY(t, r);
            x.SetBboxChanged();
            return !1
        }
        CalculateBounceAngle(w, u, p, x) {
            const t = w.GetWorldInfo(),
                r = t.GetX(),
                B = t.GetY(),
                z = Math.max(10, f.distanceTo(u, p, r, B));
            var C = f.angleTo(u, p, r, B),
                F = x || this.TestOverlapSolid(w);
            if (!F) return f.clampAngle(C + Math.PI);
            let J = F;
            var G = 0,
                I = 0;
            const L = f.toRadians(5);
            let N;
            for (N = 1; 36 > N; ++N) {
                const S = C - N * L;
                t.SetXY(u + Math.cos(S) * z, p + Math.sin(S) * z);
                t.SetBboxChanged();
                if (!this.TestOverlap(w, J) && (J = x ? null : this.TestOverlapSolid(w), !J)) {
                    G = S;
                    break
                }
            }
            36 === N && (G = f.clampAngle(C + Math.PI));
            J = F;
            for (N = 1; 36 > N; ++N)
                if (F = C + N * L, t.SetXY(u + Math.cos(F) * z, p + Math.sin(F) * z), t.SetBboxChanged(), !this.TestOverlap(w, J) && (J = x ? null : this.TestOverlapSolid(w), !J)) {
                    I = F;
                    break
                }
            36 === N && (I = f.clampAngle(C + Math.PI));
            t.SetXY(r,
                B);
            t.SetBboxChanged();
            if (I === G) return I;
            w = f.angleDiff(I, G) / 2;
            w = f.angleClockwise(I, G) ? f.clampAngle(G + w + Math.PI) : f.clampAngle(I + w);
            G = Math.cos(C);
            C = Math.sin(C);
            I = Math.cos(w);
            w = Math.sin(w);
            u = G * I + C * w;
            return f.angleTo(0, 0, G - 2 * u * I, C - 2 * u * w)
        }
        TestSegmentOverlap(w, u, p, x, t) {
            if (!t) return !1;
            const r = t.GetWorldInfo();
            if (!r.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            h.set(Math.min(w, p), Math.min(u, x), Math.max(w, p), Math.max(u, x));
            if (!r.GetBoundingBox().intersectsRect(h)) return !1;
            if (t.HasTilemap()) return this._TestSegmentOverlapTilemap(w,
                u, p, x, t, r);
            this._polyCheckCount++;
            return r.GetBoundingQuad().intersectsSegment(w, u, p, x) ? r.HasOwnCollisionPoly() ? r.GetTransformedCollisionPoly().intersectsSegment(r.GetX(), r.GetY(), w, u, p, x) : !0 : !1
        }
        _TestSegmentOverlapTilemap(w, u, p, x, t, r) {
            const B = r.GetX();
            r = r.GetY();
            t = t.GetSdkInstance();
            l.set(w, u, p, x);
            l.normalize();
            t.GetCollisionRectCandidates(l, a);
            for (let C = 0, F = a.length; C < F; ++C) {
                var z = a[C];
                t = z.GetRect();
                this._collisionCheckCount++;
                if (h.intersectsRectOffset(t, B, r) && (g.setFromRect(t), g.offset(B, r), g.intersectsSegment(w,
                        u, p, x)))
                    if (z = z.GetPoly()) {
                        if (this._polyCheckCount++, z.intersectsSegment(B + t.getLeft(), r + t.getTop(), w, u, p, x)) return f.clearArray(a), !0
                    } else return f.clearArray(a), !0
            }
            f.clearArray(a);
            return !1
        }
        TestRectOverlap(w, u) {
            if (!u) return !1;
            const p = u.GetWorldInfo();
            if (!p.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            if (!p.GetBoundingBox().intersectsRect(w)) return !1;
            if (u.HasTilemap()) return this._TestRectOverlapTilemap(w, u, p);
            this._polyCheckCount++;
            g.setFromRect(w);
            if (!p.GetBoundingQuad().intersectsQuad(g)) return !1;
            if (!p.HasOwnCollisionPoly()) return !0;
            c.setFromRect(w, p.GetX(), p.GetY());
            w = p.GetTransformedCollisionPoly();
            return c.intersectsPoly(w, 0, 0)
        }
        _TestRectOverlapTilemap(w, u, p) {
            const x = p.GetX();
            p = p.GetY();
            u.GetSdkInstance().GetCollisionRectCandidates(w, a);
            for (let r = 0, B = a.length; r < B; ++r) {
                var t = a[r];
                u = t.GetRect();
                this._collisionCheckCount++;
                if (w.intersectsRectOffset(u, x, p))
                    if (t = t.GetPoly()) {
                        if (this._polyCheckCount++, c.setFromRect(w, 0, 0), t.intersectsPoly(c, -(x + u.getLeft()), -(p + u.getTop()))) return f.clearArray(a), !0
                    } else return f.clearArray(a), !0
            }
            f.clearArray(a);
            return !1
        }
        TestRayIntersectsInstance(w, u) {
            if (w) {
                var p = w.GetWorldInfo();
                p.IsCollisionEnabled() && (this._collisionCheckCount++, p.GetBoundingBox().intersectsRect(u.rect) && (w.HasTilemap() ? this._TestRayIntersectsTilemap(w, p, u) : (this._polyCheckCount++, p.HasOwnCollisionPoly() ? u.TestInstancePoly(w, p.GetX(), p.GetY(), p.GetTransformedCollisionPoly()) : u.TestInstanceQuad(w, p.GetBoundingQuad()))))
            }
        }
        _TestRayIntersectsTilemap(w, u, p) {
            const x = u.GetX(),
                t = u.GetY();
            w.GetSdkInstance().GetCollisionRectCandidates(p.rect,
                a);
            for (let B = 0, z = a.length; B < z; B++) {
                var r = a[B];
                const C = r.GetRect();
                this._collisionCheckCount++;
                p.rect.intersectsRectOffset(C, x, t) && (r = r.GetPoly(), this._polyCheckCount++, r ? p.TestInstancePoly(w, x + C.getLeft(), t + C.getTop(), r) : p.TestInstanceRect(w, u.GetX(), u.GetY(), C))
            }
            f.clearArray(a)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.SparseGrid = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = f.New(f.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = f.New(f.GridCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            b = Math.floor(b / this._cellWidth);
            return isFinite(b) ? b : 0
        }
        YToCell(b) {
            b = Math.floor(b / this._cellHeight);
            return isFinite(b) ? b : 0
        }
        Update(b, a, d) {
            if (a)
                for (let c = a.getLeft(),
                        e = a.getRight(); c <= e; ++c)
                    for (let g = a.getTop(), h = a.getBottom(); g <= h; ++g) {
                        if (d && d.containsPoint(c, g)) continue;
                        const l = this.GetCell(c, g, !1);
                        l && (l.Remove(b), l.IsEmpty() && this._cells.Delete(c, g))
                    }
            if (d)
                for (let c = d.getLeft(), e = d.getRight(); c <= e; ++c)
                    for (let g = d.getTop(), h = d.getBottom(); g <= h; ++g) a && a.containsPoint(c, g) || this.GetCell(c, g, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                e = this.XToCell(b.getRight());
            b = this.YToCell(b.getBottom());
            if (isFinite(e) && isFinite(b))
                for (; d <=
                    e; ++d)
                    for (let g = c; g <= b; ++g) {
                        const h = this.GetCell(d, g, !1);
                        h && h.Dump(a)
                    }
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.GridCell = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._grid = b;
            this._x = a;
            this._y = d;
            this._instances = f.New(f.ArraySet)
        }
        Release() {
            this._instances.Release();
            this._grid = this._instances = null
        }
        IsEmpty() {
            return this._instances.IsEmpty()
        }
        Insert(b) {
            this._instances.Add(b)
        }
        Remove(b) {
            this._instances.Delete(b)
        }
        Dump(b) {
            f.appendArray(b, this._instances.GetArray())
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Ray = class {
        constructor() {
            this.dy = this.dx = this.y2 = this.x2 = this.y1 = this.x1 = 0;
            this.rect = new f.Rect;
            this.hitFraction = 2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0
        }
        DidCollide() {
            return 1.000001 > this.hitFraction
        }
        Set(b, a, d, c) {
            this.x1 = b;
            this.y1 = a;
            this.x2 = d;
            this.y2 = c;
            this.dx = d - b;
            this.dy = c - a;
            this.rect.set(b, a, d, c);
            this.rect.normalize();
            this.hitFraction =
                2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0;
            return this
        }
        Complete() {
            if (!1 !== this.DidCollide()) {
                var b = this.dx * this.hitFraction,
                    a = this.dy * this.hitFraction,
                    d = Math.sqrt(b * b + a * a);
                b /= d;
                a /= d;
                this.distance = d - 1E-6;
                this.hitX = this.x1 + b * this.distance;
                this.hitY = this.y1 + a * this.distance;
                this.hitNormal = Math.atan2(this.hitNormalDy, this.hitNormalDx) + Math.PI / 2;
                this.normalX = Math.cos(this.hitNormal);
                this.normalY = Math.sin(this.hitNormal);
                d = b * this.normalX + a * this.normalY;
                this.reflectionX = b - 2 * this.normalX * d;
                this.reflectionY = a - 2 * this.normalY * d;
                0 < d && (this.hitNormal = f.clampAngle(this.hitNormal + Math.PI), this.normalX = -this.normalX, this.normalY = -this.normalY)
            }
        }
        TestInstanceSegment(b, a, d, c, e) {
            const g = f.rayIntersect(this.x1, this.y1, this.x2, this.y2, a, d, c, e);
            0 <= g && g < this.hitFraction && (this.hitFraction = g, this.hitUid = b.GetUID(), this.hitNormalDx = a - c, this.hitNormalDy = d - e)
        }
        TestInstanceRect(b, a, d, c) {
            const e = a + c.getLeft();
            a += c.getRight();
            const g = d + c.getTop();
            d += c.getBottom();
            this.TestInstanceSegment(b, e, g, a, g);
            this.TestInstanceSegment(b, a, g, a, d);
            this.TestInstanceSegment(b, a, d, e, d);
            this.TestInstanceSegment(b, e, d, e, g)
        }
        TestInstanceQuad(b, a) {
            const d = a.getTlx(),
                c = a.getTly(),
                e = a.getTrx(),
                g = a.getTry(),
                h = a.getBrx(),
                l = a.getBry(),
                n = a.getBlx();
            a = a.getBly();
            this.TestInstanceSegment(b, d, c, e, g);
            this.TestInstanceSegment(b, e, g, h, l);
            this.TestInstanceSegment(b, h, l, n, a);
            this.TestInstanceSegment(b, n, a, d, c)
        }
        TestInstancePoly(b, a, d, c) {
            c =
                c.pointsArr();
            for (let e = 0, g = c.length; e < g; e += 2) {
                const h = (e + 2) % g;
                this.TestInstanceSegment(b, c[e] + a, c[e + 1] + d, c[h] + a, c[h + 1] + d)
            }
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new Set("off crop scale-inner scale-outer letterbox-scale letterbox-integer-scale".split(" ")),
        a = new Set(["high", "low"]),
        d = f.New(f.Quad),
        c = f.New(f.Rect);
    f.CanvasManager = class extends f.DefendedBase {
        constructor(e) {
            super();
            this._runtime = e;
            this._canvas = null;
            this._isWebGPUEnabled = !1;
            this._webgpuRenderer = this._webglRenderer = null;
            this._gpuPreference = "high-performance";
            this._canvasCssOffsetY = this._canvasCssOffsetX = this._canvasDeviceHeight = this._canvasDeviceWidth = this._canvasCssHeight =
                this._canvasCssWidth = this._windowInnerHeight = this._windowInnerWidth = 0;
            this._enableMipmaps = !0;
            this._drawHeight = this._drawWidth = this._textureAnisotropy = 0;
            this._documentFullscreenMode = this._fullscreenMode = "letterbox-scale";
            this._deviceTransformOffY = this._deviceTransformOffX = 0;
            this._fullscreenScalingQuality = this._wantFullscreenScalingQuality = "high";
            this._isDocumentFullscreen = !1;
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets = new Set;
            this._shaderData = null;
            this._gpuLastUtilisation =
                this._gpuTimeEndFrame = this._gpuTimeStartFrame = 0;
            this._gpuFrameTimingsBuffer = null;
            this._layersGpuProfile = new Map;
            this._gpuCurUtilisation = NaN;
            this._webgpuFrameTimings = new Map;
            this._snapshotFormat = "";
            this._snapshotQuality = 1;
            this._snapshotArea = f.New(f.Rect);
            this._snapshotUrl = "";
            this._snapshotResolve = this._snapshotPromise = null;
            this._loaderStartTime = this._isPastingToDrawingCanvas = 0;
            this._rafId = -1;
            this._loadingProgress = 0;
            this._loadingprogress_handler = g => this._loadingProgress = g.progress;
            this._percentText =
                null;
            this._splashTextures = {
                logo: null,
                powered: null,
                website: null
            };
            this._splashFadeOutStartTime = this._splashFadeInFinishTime = this._splashFrameNumber = 0;
            this._splashState = "fade-in";
            this._splashDoneResolve = null;
            this._splashDonePromise = new Promise(g => this._splashDoneResolve = g)
        }
        _SetGPUPowerPreference(e) {
            this._gpuPreference = e
        }
        _SetWebGPUEnabled(e) {
            this._isWebGPUEnabled = !!e
        }
        async CreateCanvas(e) {
            this._canvas = e.canvas;
            this._runtime.AddDOMComponentMessageHandler("runtime", "window-resize", g => this._OnWindowResize(g));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenchange", g => this._OnFullscreenChange(g));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenerror", g => this._OnFullscreenError(g));
            this._isDocumentFullscreen = !!e.isFullscreen;
            if (this._isWebGPUEnabled)
                if (navigator.gpu) try {
                    await this._InitWebGPU(e)
                } catch (g) {
                    this._webgpuRenderer = null, console.error("Failed to initialise WebGPU, switching to WebGL: ", g)
                } else console.warn("WebGPU was enabled but is not supported, falling back to WebGL");
            this._webgpuRenderer || await this._InitWebGL(e)
        }
        async _InitWebGPU(e) {
            const g = {
                powerPreference: this._gpuPreference,
                depth: this._runtime.Uses3DFeatures()
            };
            this._webgpuRenderer = f.New(f.Gfx.WebGPURenderer);
            await this._webgpuRenderer.Create(this._canvas, g);
            this._webgpuRenderer.SupportsGPUProfiling() || (this._gpuLastUtilisation = NaN);
            this.SetSize(e.windowInnerWidth, e.windowInnerHeight, !0)
        }
        async _InitWebGL(e) {
            this._canvas.addEventListener("webglcontextlost", h => this._OnWebGLContextLost(h));
            this._canvas.addEventListener("webglcontextrestored",
                h => this._OnWebGLContextRestored(h));
            const g = {
                powerPreference: this._gpuPreference,
                enableGpuProfiling: !0,
                depth: this._runtime.Uses3DFeatures()
            };
            "Android" === f.Platform.OS && "Chromium" === f.Platform.BrowserEngine && 75 > f.Platform.BrowserVersionNumber && (console.warn("[Construct 3] Disabling WebGL 2 because this device appears to be affected by crbug.com/934823. Install software updates to avoid this."), g.maxWebGLVersion = 1);
            "standard" === this._runtime.GetCompositingMode() ? g.alpha = !0 : (g.alpha = !1, g.lowLatency = !0);
            this._webglRenderer = f.New(f.Gfx.WebGLRenderer, this._canvas, g);
            await this._webglRenderer.InitState();
            this._webglRenderer.SupportsGPUProfiling() || (this._gpuLastUtilisation = NaN);
            this.SetSize(e.windowInnerWidth, e.windowInnerHeight, !0);
            this._shaderData = self.C3_Shaders;
            await this._LoadShaderPrograms();
            e = !1;
            for (const h of this._runtime._GetAllEffectLists()) {
                for (const l of h.GetAllEffectTypes()) l._InitRenderer(this._webglRenderer), l.GetShaderProgram().UsesDest() && (e = !0);
                h.UpdateActiveEffects()
            }
            this._runtime._SetUsesAnyBackgroundBlending(e);
            this._webglRenderer.SupportsGPUProfiling() && (this._gpuFrameTimingsBuffer = f.New(f.Gfx.WebGLQueryResultBuffer, this._webglRenderer));
            this._webglRenderer.SetMipmapsEnabled(this._enableMipmaps)
        }
        async _LoadShaderPrograms() {
            if (this._shaderData) {
                var e = [];
                for (const [g, h] of Object.entries(this._shaderData)) {
                    const l = f.Gfx.WebGLShaderProgram.GetDefaultVertexShaderSource();
                    e.push(this._webglRenderer.CreateShaderProgram(h, l, g))
                }
                await Promise.all(e);
                this._webglRenderer.ResetLastProgram();
                this._webglRenderer.SetTextureFillMode()
            }
        }
        Release() {
            this._canvas =
                this._webglRenderer = this._runtime = null
        }
        _OnWindowResize(e) {
            const g = this._runtime,
                h = e.devicePixelRatio;
            g.IsInWorker() && (self.devicePixelRatio = h);
            g._SetDevicePixelRatio(h);
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.innerWidth, e.innerHeight);
            g.UpdateRender();
            g.IsDebug() && (g.HitBreakpoint() || self.C3Debugger.IsDebuggerPaused()) && g.Render()
        }
        _OnFullscreenChange(e) {
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.innerWidth, e.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        _OnFullscreenError(e) {
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.innerWidth, e.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        SetSize(e, g, h = !1) {
            e = Math.floor(e);
            g = Math.floor(g);
            if (0 >= e || 0 >= g) throw Error("invalid size");
            if (this._windowInnerWidth !== e || this._windowInnerHeight !== g || h) {
                this._windowInnerWidth = e;
                this._windowInnerHeight = g;
                h = this.GetCurrentFullscreenMode();
                "letterbox-scale" === h ? this._CalculateLetterboxScale(e, g) : "letterbox-integer-scale" === h ? this._CalculateLetterboxIntegerScale(e, g) : "off" === h ? this._CalculateFixedSizeCanvas(e,
                    g) : this._CalculateFullsizeCanvas(e, g);
                this._UpdateFullscreenScalingQuality(h);
                this._canvas.width = this._canvasDeviceWidth;
                this._canvas.height = this._canvasDeviceHeight;
                this._runtime.PostComponentMessageToDOM("canvas", "update-size", {
                    marginLeft: this._canvasCssOffsetX,
                    marginTop: this._canvasCssOffsetY,
                    styleWidth: this._canvasCssWidth,
                    styleHeight: this._canvasCssHeight
                });
                e = this.GetRenderer();
                e.SetSize(this._canvasDeviceWidth, this._canvasDeviceHeight, !0);
                for (var l of this._availableAdditionalRenderTargets) e.DeleteRenderTarget(l);
                f.clearArray(this._availableAdditionalRenderTargets);
                l = this._runtime.GetLayoutManager();
                l.SetAllLayerProjectionChanged();
                l.SetAllLayerMVChanged()
            }
        }
        _CalculateLetterboxScale(e, g) {
            const h = this._runtime.GetDevicePixelRatio(),
                l = this._runtime.GetOriginalViewportWidth(),
                n = this._runtime.GetOriginalViewportHeight(),
                q = l / n;
            e / g > q ? (this._canvasCssWidth = Math.round(g * q), this._canvasCssHeight = g, this._canvasCssOffsetX = Math.floor((e - this._canvasCssWidth) / 2), this._canvasCssOffsetY = 0) : (this._canvasCssWidth = e, this._canvasCssHeight =
                Math.round(e / q), this._canvasCssOffsetX = 0, this._canvasCssOffsetY = Math.floor((g - this._canvasCssHeight) / 2));
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * h);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * h);
            this._runtime.SetViewportSize(l, n)
        }
        _CalculateLetterboxIntegerScale(e, g) {
            const h = this._runtime.GetDevicePixelRatio();
            1 !== h && (e += 1, g += 1);
            const l = this._runtime.GetOriginalViewportWidth(),
                n = this._runtime.GetOriginalViewportHeight();
            var q = l / n;
            q = e / g > q ? g * q * h / l : e / q * h / n;
            1 < q ? q = Math.floor(q) :
                1 > q && (q = 1 / Math.ceil(1 / q));
            this._canvasDeviceWidth = Math.round(l * q);
            this._canvasDeviceHeight = Math.round(n * q);
            this._canvasCssWidth = this._canvasDeviceWidth / h;
            this._canvasCssHeight = this._canvasDeviceHeight / h;
            this._canvasCssOffsetX = Math.max(Math.floor((e - this._canvasCssWidth) / 2), 0);
            this._canvasCssOffsetY = Math.max(Math.floor((g - this._canvasCssHeight) / 2), 0);
            this._runtime.SetViewportSize(l, n)
        }
        _CalculateFullsizeCanvas(e, g) {
            const h = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = e;
            this._canvasCssHeight =
                g;
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * h);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * h);
            this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            e = this.GetDisplayScale();
            this._runtime.SetViewportSize(this._canvasCssWidth / e, this._canvasCssHeight / e)
        }
        _CalculateFixedSizeCanvas(e, g) {
            const h = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = this._runtime.GetViewportWidth();
            this._canvasCssHeight = this._runtime.GetViewportHeight();
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth *
                h);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * h);
            this.IsDocumentFullscreen() ? (this._canvasCssOffsetX = Math.floor((e - this._canvasCssWidth) / 2), this._canvasCssOffsetY = Math.floor((g - this._canvasCssHeight) / 2)) : this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            this._runtime.SetViewportSize(this._runtime.GetViewportWidth(), this._runtime.GetViewportHeight())
        }
        _UpdateFullscreenScalingQuality(e) {
            if ("high" === this._wantFullscreenScalingQuality) this._drawWidth = this._canvasDeviceWidth, this._drawHeight =
                this._canvasDeviceHeight, this._fullscreenScalingQuality = "high";
            else {
                let h;
                if ("off" === this.GetCurrentFullscreenMode()) {
                    var g = this._runtime.GetViewportWidth();
                    h = this._runtime.GetViewportHeight()
                } else g = this._runtime.GetOriginalViewportWidth(), h = this._runtime.GetOriginalViewportHeight();
                this._canvasDeviceWidth < g && this._canvasDeviceHeight < h ? (this._drawWidth = this._canvasDeviceWidth, this._drawHeight = this._canvasDeviceHeight, this._fullscreenScalingQuality = "high") : (this._drawWidth = g, this._drawHeight = h, this._fullscreenScalingQuality =
                    "low", "scale-inner" === e ? (e = g / h, g = this._windowInnerWidth / this._windowInnerHeight, g < e ? this._drawWidth = this._drawHeight * g : g > e && (this._drawHeight = this._drawWidth / g)) : "scale-outer" === e && (e = g / h, g = this._windowInnerWidth / this._windowInnerHeight, g > e ? this._drawWidth = this._drawHeight * g : g < e && (this._drawHeight = this._drawWidth / g)))
            }
        }
        IsDocumentFullscreen() {
            return this._isDocumentFullscreen
        }
        SetFullscreenMode(e) {
            if (!b.has(e)) throw Error("invalid fullscreen mode");
            this._fullscreenMode = e;
            e = this._runtime.GetLayoutManager();
            e.SetAllLayerProjectionChanged();
            e.SetAllLayerMVChanged()
        }
        GetFullscreenMode() {
            return this._fullscreenMode
        }
        SetDocumentFullscreenMode(e) {
            if (!b.has(e)) throw Error("invalid fullscreen mode");
            this._documentFullscreenMode = e;
            e = this._runtime.GetLayoutManager();
            e.SetAllLayerProjectionChanged();
            e.SetAllLayerMVChanged()
        }
        GetDocumentFullscreenMode() {
            return this._documentFullscreenMode
        }
        GetCurrentFullscreenMode() {
            return this.IsDocumentFullscreen() ? this.GetDocumentFullscreenMode() : this.GetFullscreenMode()
        }
        SetFullscreenScalingQuality(e) {
            if (!a.has(e)) throw Error("invalid fullscreen scaling quality");
            this._wantFullscreenScalingQuality = e;
            this._runtime.GetLayoutManager().SetAllLayerProjectionChanged()
        }
        GetSetFullscreenScalingQuality() {
            return this._wantFullscreenScalingQuality
        }
        GetCurrentFullscreenScalingQuality() {
            return this._fullscreenScalingQuality
        }
        static _FullscreenModeNumberToString(e) {
            switch (e) {
                case 0:
                    return "off";
                case 1:
                    return "crop";
                case 2:
                    return "scale-inner";
                case 3:
                    return "scale-outer";
                case 4:
                    return "letterbox-scale";
                case 5:
                    return "letterbox-integer-scale";
                default:
                    throw Error("invalid fullscreen mode");
            }
        }
        GetLastWidth() {
            return this._windowInnerWidth
        }
        GetLastHeight() {
            return this._windowInnerHeight
        }
        GetDrawWidth() {
            return this._drawWidth
        }
        GetDrawHeight() {
            return this._drawHeight
        }
        SetMipmapsEnabled(e) {
            this._enableMipmaps = !!e
        }
        _SetTextureAnisotropy(e) {
            this._textureAnisotropy = e
        }
        GetTextureAnisotropy() {
            return this._textureAnisotropy
        }
        IsRendererContextLost() {
            return this.GetRenderer().IsContextLost()
        }
        _OnWebGLContextLost(e) {
            console.log("[Construct 3] WebGL context lost");
            e.preventDefault();
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets.clear();
            this._webglRenderer.OnContextLost();
            this._runtime._OnWebGLContextLost()
        }
        async _OnWebGLContextRestored(e) {
            await this._webglRenderer.OnContextRestored();
            await this._LoadShaderPrograms();
            for (const g of this._runtime._GetAllEffectLists())
                for (const h of g.GetAllEffectTypes()) h._InitRenderer(this._webglRenderer);
            await this._runtime._OnWebGLContextRestored();
            console.log("[Construct 3] WebGL context restored")
        }
        GetWebGLRenderer() {
            return this._webglRenderer
        }
        GetWebGPURenderer() {
            return this._webgpuRenderer
        }
        GetRenderer() {
            return this._webgpuRenderer ||
                this._webglRenderer
        }
        GetRenderScale() {
            return "low" === this._fullscreenScalingQuality ? 1 / this._runtime.GetDevicePixelRatio() : this.GetDisplayScale()
        }
        GetDisplayScale() {
            const e = this.GetCurrentFullscreenMode();
            if ("off" === e || "crop" === e) return 1;
            const g = this._runtime.GetOriginalViewportWidth(),
                h = this._runtime.GetOriginalViewportHeight(),
                l = g / h,
                n = this._canvasDeviceWidth / this._canvasDeviceHeight;
            return "scale-inner" !== e && n > l || "scale-inner" === e && n < l ? this._canvasCssHeight / h : this._canvasCssWidth / g
        }
        SetDeviceTransformOffset(e,
            g) {
            this._deviceTransformOffX = e;
            this._deviceTransformOffY = g
        }
        SetDeviceTransform(e, g, h) {
            g = (g || this._drawWidth) / 2 + this._deviceTransformOffX;
            const l = (h || this._drawHeight) / 2 + this._deviceTransformOffY;
            h = e.CalculateLookAtModelView2(g, l, e.GetDefaultCameraZ() * this._runtime.GetDevicePixelRatio(), g, l, 0, h || this._drawHeight);
            e.SetModelViewMatrix(h)
        }
        SetCssTransform(e) {
            var g = this._canvasCssWidth / 2;
            const h = this._canvasCssHeight / 2;
            g = e.CalculateLookAtModelView2(g, h, e.GetDefaultCameraZ(), g, h, 0);
            e.SetModelViewMatrix(g)
        }
        GetDeviceWidth() {
            return this._canvasDeviceWidth
        }
        GetDeviceHeight() {
            return this._canvasDeviceHeight
        }
        GetCssWidth() {
            return this._canvasCssWidth
        }
        GetCssHeight() {
            return this._canvasCssHeight
        }
        GetCanvasClientX() {
            return this._canvasCssOffsetX
        }
        GetCanvasClientY() {
            return this._canvasCssOffsetY
        }
        GetAdditionalRenderTarget(e) {
            e.depth =
                this._runtime.Uses3DFeatures();
            const g = this._availableAdditionalRenderTargets,
                h = g.findIndex(n => n.IsCompatibleWithOptions(e));
            let l; - 1 !== h ? (l = g[h], g.splice(h, 1)) : l = this.GetRenderer().CreateRenderTarget(e);
            this._usedAdditionalRenderTargets.add(l);
            return l
        }
        ReleaseAdditionalRenderTarget(e) {
            if (!this._usedAdditionalRenderTargets.has(e)) throw Error("render target not in use");
            this._usedAdditionalRenderTargets.delete(e);
            this._availableAdditionalRenderTargets.push(e)
        }* activeLayersGpuProfiles() {
            for (const e of this._runtime.GetLayoutManager().runningLayouts())
                for (const g of e.GetLayers()) {
                    const h =
                        this._layersGpuProfile.get(g);
                    h && (yield h)
                }
        }
        GetLayerTimingsBuffer(e) {
            if (!this.GetRenderer().SupportsGPUProfiling()) return null;
            let g = this._layersGpuProfile.get(e);
            g || (g = {
                name: e.GetName(),
                timingsBuffer: f.New(f.Gfx.WebGLQueryResultBuffer, this._webglRenderer),
                curUtilisation: 0,
                lastUtilisation: 0
            }, this._layersGpuProfile.set(e, g));
            return g.timingsBuffer
        }
        _Update1sFrameRange() {
            const e = this.GetRenderer();
            if (e.SupportsGPUProfiling() && 0 === this._gpuTimeEndFrame) {
                this._gpuTimeEndFrame = e.GetFrameNumber();
                this._gpuCurUtilisation =
                    NaN;
                for (const g of this.activeLayersGpuProfiles()) g.curUtilisation = NaN
            }
        }
        _UpdateTick() {
            this._webglRenderer && this._webglRenderer.SupportsGPUProfiling() && this._UpdateTick_WebGL();
            this._webgpuRenderer && this._webgpuRenderer.SupportsGPUProfiling() && this._UpdateTick_WebGPU()
        }
        _UpdateTick_WebGL() {
            if (isNaN(this._gpuCurUtilisation) && (this._gpuCurUtilisation = this._gpuFrameTimingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), !isNaN(this._gpuCurUtilisation))) {
                if (this._runtime.IsDebug())
                    for (const e of this.activeLayersGpuProfiles())
                        if (e.curUtilisation =
                            e.timingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), isNaN(e.curUtilisation)) return;
                this._gpuFrameTimingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame);
                this._gpuLastUtilisation = Math.min(this._gpuCurUtilisation, 1);
                if (this._runtime.IsDebug()) {
                    for (const e of this.activeLayersGpuProfiles()) e.timingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame), e.lastUtilisation = Math.min(e.curUtilisation, 1);
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, [...this.activeLayersGpuProfiles()])
                }
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        GetGPUFrameTimingsBuffer() {
            return this._gpuFrameTimingsBuffer
        }
        _UpdateTick_WebGPU() {
            if (0 !== this._gpuTimeEndFrame) {
                for (var e = this._gpuTimeStartFrame; e < this._gpuTimeEndFrame; ++e) {
                    var g = this._webgpuFrameTimings.get(e);
                    if (g && !g.HasResult()) return
                }
                g = this._runtime.GetMainRunningLayout();
                e = f.MakeFilledArray(g.GetLayerCount() + 1, 0);
                for (var h = this._gpuTimeStartFrame; h < this._gpuTimeEndFrame; ++h) {
                    var l =
                        this._webgpuFrameTimings.get(h);
                    if (l) {
                        l = l.GetResult();
                        for (let n = 0, q = Math.min(e.length, l.length / 2); n < q; ++n) {
                            const y = l[2 * n],
                                w = l[2 * n + 1];
                            e[n] = 0 === Number(y) || 0 === Number(w) ? NaN : e[n] + Number(w - y) / 1E9
                        }
                    }
                }
                this._gpuLastUtilisation = f.clamp(e[0], 0, 1);
                if (this._runtime.IsDebug()) {
                    h = [];
                    g = g.GetLayers();
                    for (let n = 0, q = Math.min(g.length, e.length - 1); n < q; ++n) h.push({
                        name: g[n].GetName(),
                        lastUtilisation: f.clamp(e[n + 1], 0, 1)
                    });
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, h)
                }
                for (e = this._gpuTimeStartFrame; e < this._gpuTimeEndFrame; ++e) this._webgpuFrameTimings.delete(e);
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        _AddWebGPUFrameTiming(e) {
            this._webgpuFrameTimings.set(this._webgpuRenderer.GetFrameNumber(), e)
        }
        GetGPUUtilisation() {
            return this._gpuLastUtilisation
        }
        SnapshotCanvas(e, g, h, l, n, q) {
            this._snapshotFormat = e;
            this._snapshotQuality = g;
            this._snapshotArea.setWH(h, l, n, q);
            return this._snapshotPromise ? this._snapshotPromise : this._snapshotPromise = new Promise(y => {
                this._snapshotResolve = y
            })
        }
        _MaybeTakeSnapshot() {
            if (this._snapshotFormat) {
                var e = this._canvas,
                    g = this._snapshotArea,
                    h = f.clamp(Math.floor(g.getLeft()), 0, e.width),
                    l = f.clamp(Math.floor(g.getTop()), 0, e.height),
                    n = g.width();
                n = 0 === n ? e.width - h : f.clamp(Math.floor(n), 0, e.width - h);
                g = g.height();
                g = 0 === g ? e.height - l : f.clamp(Math.floor(g), 0, e.height - l);
                (0 !== h || 0 !== l || n !== e.width || g !== e.height) && 0 < n && 0 < g && (e = f.CreateCanvas(n, g), e.getContext("2d").drawImage(this._canvas, h, l, n, g, 0, 0, n, g));
                f.CanvasToBlob(e, this._snapshotFormat, this._snapshotQuality).then(q => {
                    this._snapshotUrl = URL.createObjectURL(q);
                    this._snapshotPromise =
                        null;
                    this._snapshotResolve(this._snapshotUrl)
                });
                this._snapshotFormat = "";
                this._snapshotQuality = 1
            }
        }
        GetCanvasSnapshotUrl() {
            return this._snapshotUrl
        }
        SetIsPastingToDrawingCanvas(e) {
            e ? this._isPastingToDrawingCanvas++ : this._isPastingToDrawingCanvas--
        }
        IsPastingToDrawingCanvas() {
            return 0 < this._isPastingToDrawingCanvas
        }
        InitLoadingScreen(e) {
            this._webglRenderer && (2 === e ? (this._percentText = f.New(f.Gfx.RendererText, this.GetRenderer()), this._percentText.SetIsAsync(!1), this._percentText.SetFontName("Arial"), this._percentText.SetFontSize(16),
                this._percentText.SetHorizontalAlignment("center"), this._percentText.SetVerticalAlignment("center"), this._percentText.SetSize(300, 200)) : 0 === e ? (e = this._runtime.GetLoadingLogoAsset()) && e.LoadStaticTexture(this._webglRenderer).catch(g => console.warn("[C3 runtime] Failed to create texture for loading logo: ", g)) : 4 === e && (this._LoadSvgSplashImage("splash-images/splash-logo.svg").then(g => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(g) : this._splashTextures.logo = g
            }).catch(g => console.warn("Failed to load splash image: ",
                g)), this._LoadBitmapSplashImage("splash-images/splash-poweredby-512.png").then(g => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(g) : this._splashTextures.powered = g
            }).catch(g => console.warn("Failed to load splash image: ", g)), this._LoadBitmapSplashImage("splash-images/splash-website-512.png").then(g => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(g) : this._splashTextures.website = g
            }).catch(g => console.warn("Failed to load splash image: ", g))))
        }
        async _LoadSvgSplashImage(e) {
            e =
                (new URL(e, this._runtime.GetBaseURL())).toString();
            e = await f.FetchBlob(e);
            e = await this._runtime.RasterSvgImage(e, 2048, 2048);
            return await this._webglRenderer.CreateStaticTextureAsync(e, {
                mipMapQuality: "high"
            })
        }
        async _LoadBitmapSplashImage(e) {
            e = (new URL(e, this._runtime.GetBaseURL())).toString();
            e = await f.FetchBlob(e);
            return await this._webglRenderer.CreateStaticTextureAsync(e, {
                mipMapQuality: "high"
            })
        }
        HideCordovaSplashScreen() {
            this._runtime.PostComponentMessageToDOM("runtime", "hide-cordova-splash")
        }
        StartLoadingScreen() {
            this._loaderStartTime =
                Date.now();
            this._runtime.Dispatcher().addEventListener("loadingprogress", this._loadingprogress_handler);
            this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen());
            3 !== this._runtime.GetLoaderStyle() && this.HideCordovaSplashScreen()
        }
        async EndLoadingScreen() {
            if (this._webglRenderer) {
                this._loadingProgress = 1;
                var e = this._runtime.GetLoaderStyle();
                4 === e && await this._splashDonePromise;
                this._splashDonePromise = this._splashDoneResolve = null; - 1 !== this._rafId && (cancelAnimationFrame(this._rafId), this._rafId = -1);
                this._runtime.Dispatcher().removeEventListener("loadingprogress", this._loadingprogress_handler);
                this._loadingprogress_handler = null;
                this._percentText && (this._percentText.Release(), this._percentText = null);
                this._runtime.ReleaseLoadingLogoAsset();
                this._webglRenderer.Start();
                this._splashTextures.logo && (this._webglRenderer.DeleteTexture(this._splashTextures.logo), this._splashTextures.logo = null);
                this._splashTextures.powered && (this._webglRenderer.DeleteTexture(this._splashTextures.powered), this._splashTextures.powered =
                    null);
                this._splashTextures.website && (this._webglRenderer.DeleteTexture(this._splashTextures.website), this._splashTextures.website = null);
                this._webglRenderer.ClearRgba(0, 0, 0, 0);
                this._webglRenderer.Finish();
                this._splashState = "done";
                this._gpuTimeStartFrame = this._webglRenderer.GetFrameNumber();
                3 === e && this.HideCordovaSplashScreen()
            }
        }
        _DrawLoadingScreen() {
            if (-1 !== this._rafId) {
                var e = this._webglRenderer;
                if (e) {
                    e.Start();
                    this._rafId = -1;
                    var g = this._runtime.GetAssetManager().HasHadErrorLoading(),
                        h = this._runtime.GetLoaderStyle();
                    3 !== h && (this.SetCssTransform(e), e.ClearRgba(0, 0, 0, 0), e.ResetColor(), e.SetTextureFillMode(), e.SetTexture(null));
                    if (0 === h) this._DrawProgressBarAndLogoLoadingScreen(g);
                    else if (1 === h) this._DrawProgressBarLoadingScreen(g, 120, 0);
                    else if (2 === h) this._DrawPercentTextLoadingScreen(g);
                    else if (3 === h) f.noop();
                    else if (4 === h) this._DrawSplashLoadingScreen(g);
                    else throw Error("invalid loader style");
                    e.Finish();
                    this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen())
                }
            }
        }
        _DrawPercentTextLoadingScreen(e) {
            e ? this._percentText.SetColorRgb(1,
                0, 0) : this._percentText.SetColorRgb(.6, .6, .6);
            this._percentText.SetText(Math.round(100 * this._loadingProgress) + "%");
            e = this._canvasCssWidth / 2;
            const g = this._canvasCssHeight / 2;
            d.setRect(e - 150, g - 100, e + 150, g + 100);
            this._webglRenderer.SetTexture(this._percentText.GetTexture());
            this._webglRenderer.Quad3(d, this._percentText.GetTexRect())
        }
        _DrawProgressBarLoadingScreen(e, g, h) {
            const l = this._webglRenderer;
            l.SetColorFillMode();
            e ? l.SetColorRgba(1, 0, 0, 1) : l.SetColorRgba(.118, .565, 1, 1);
            e = this._canvasCssWidth / 2;
            const n =
                this._canvasCssHeight / 2,
                q = g / 2;
            c.setWH(e - q, n - 4 + h, Math.floor(g * this._loadingProgress), 8);
            l.Rect(c);
            c.setWH(e - q, n - 4 + h, g, 8);
            c.offset(-.5, -.5);
            c.inflate(.5, .5);
            l.SetColorRgba(0, 0, 0, 1);
            l.LineRect2(c);
            c.inflate(1, 1);
            l.SetColorRgba(1, 1, 1, 1);
            l.LineRect2(c)
        }
        _DrawProgressBarAndLogoLoadingScreen(e) {
            var g = this._runtime.GetLoadingLogoAsset();
            if (g)
                if (g = g.GetTexture()) {
                    var h = g.GetWidth(),
                        l = g.GetHeight(),
                        n = this._canvasCssWidth / 2,
                        q = this._canvasCssHeight / 2,
                        y = h / 2;
                    l /= 2;
                    d.setRect(n - y, q - l, n + y, q + l);
                    this._webglRenderer.SetTexture(g);
                    this._webglRenderer.Quad(d);
                    this._DrawProgressBarLoadingScreen(e, h, l + 16)
                } else this._DrawProgressBarLoadingScreen(e, 120, 0);
            else this._DrawProgressBarLoadingScreen(e, 120, 0)
        }
        _DrawSplashLoadingScreen(e) {
            const g = this._webglRenderer,
                h = this._splashTextures.logo,
                l = this._splashTextures.powered,
                n = this._splashTextures.website,
                q = Date.now();
            0 === this._splashFrameNumber && (this._loaderStartTime = q);
            const y = this._runtime.IsPreview() || this._runtime.IsFBInstantAvailable() && !this._runtime.IsCordova(),
                w = y ? 0 : 200,
                u = y ? 0 :
                3E3;
            let p = 1;
            "fade-in" === this._splashState ? p = Math.min((q - this._loaderStartTime) / 300, 1) : "fade-out" === this._splashState && (p = Math.max(1 - (q - this._splashFadeOutStartTime) / 300, 0));
            g.SetColorFillMode();
            g.SetColorRgba(.231 * p, .251 * p, .271 * p, p);
            c.set(0, 0, this._canvasCssWidth, this._canvasCssHeight);
            g.Rect(c);
            const x = Math.ceil(this._canvasCssWidth),
                t = Math.ceil(this._canvasCssHeight);
            let r;
            256 < this._canvasCssHeight ? (g.SetColorRgba(.302 * p, .334 * p, .365 * p, p), r = Math.max(.005 * t, 2), c.setWH(0, .8 * t - r / 2, x, r), g.Rect(c), e ?
                g.SetColorRgba(p, 0, 0, p) : g.SetColorRgba(.161 * p, .953 * p, .816 * p, p), e = x * this._loadingProgress, c.setWH(.5 * x - e / 2, .8 * t - r / 2, e, r), g.Rect(c), g.SetColorRgba(p, p, p, p), g.SetTextureFillMode(), l && (e = 1.5 * f.clamp(.22 * t, 105, .6 * x), r = e / 8, c.setWH(.5 * x - e / 2, .2 * t - r / 2, e, r), g.SetTexture(l), g.Rect(c)), h && (r = e = Math.min(.395 * t, .95 * x), c.setWH(.5 * x - e / 2, .485 * t - r / 2, e, r), g.SetTexture(h), g.Rect(c)), n && (e = 1.5 * f.clamp(.22 * t, 105, .6 * x), r = e / 8, c.setWH(.5 * x - e / 2, .868 * t - r / 2, e, r), g.SetTexture(n), g.Rect(c))) : (g.SetColorRgba(.302 * p, .334 * p, .365 *
                p, p), r = Math.max(.005 * t, 2), c.setWH(0, .85 * t - r / 2, x, r), g.Rect(c), e ? g.SetColorRgba(p, 0, 0, p) : g.SetColorRgba(.161 * p, .953 * p, .816 * p, p), e = x * this._loadingProgress, c.setWH(.5 * x - e / 2, .85 * t - r / 2, e, r), g.Rect(c), g.SetColorRgba(p, p, p, p), g.SetTextureFillMode(), h && (r = e = .55 * t, c.setWH(.5 * x - e / 2, .45 * t - r / 2, e, r), g.SetTexture(h), g.Rect(c)));
            this._splashFrameNumber++;
            "fade-in" === this._splashState && 300 <= q - this._loaderStartTime && 2 <= this._splashFrameNumber && (this._splashState = "wait", this._splashFadeInFinishTime = q);
            "wait" === this._splashState &&
                q - this._splashFadeInFinishTime >= u && 1 <= this._loadingProgress && (this._splashState = "fade-out", this._splashFadeOutStartTime = q);
            ("fade-out" === this._splashState && q - this._splashFadeOutStartTime >= 300 + w || y && 1 <= this._loadingProgress && 500 > q - this._loaderStartTime) && this._splashDoneResolve()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3Debugger,
        a = {
            messagePort: null,
            baseUrl: "",
            headless: !1,
            hasDom: !0,
            isInWorker: !1,
            useAudio: !0,
            projectData: "",
            exportType: ""
        };
    let d = !0;
    f.Runtime = class extends f.DefendedBase {
        constructor(c) {
            c = Object.assign({}, a, c);
            super();
            this._messagePort = c.messagePort;
            this._baseUrl = c.baseUrl;
            this._isHeadless = !!c.headless;
            this._hasDom = !!c.hasDom;
            this._isInWorker = !!c.isInWorker;
            d = c.ife;
            this._useAudio = !!c.useAudio;
            this._exportType = c.exportType;
            this._isiOSCordova = !!c.isiOSCordova;
            this._isiOSWebView = !!c.isiOSWebView;
            this._isFBInstantAvailable = !!c.isFBInstantAvailable;
            this._opusWasmScriptUrl = c.opusWasmScriptUrl;
            this._opusWasmBinaryUrl = c.opusWasmBinaryUrl;
            this._isDebugging = this._breakpointsEnabled = this._isDebug = !("preview" !== this._exportType || !c.isDebug);
            this._debuggingDisabled = 0;
            this._additionalLoadPromises = [];
            this._additionalCreatePromises = [];
            this._isUsingCreatePromises = !1;
            this._appId = this._projectUniqueId = this._projectVersion = this._projectName = "";
            this._originalViewportHeight = this._originalViewportWidth =
                0;
            this._devicePixelRatio = self.devicePixelRatio;
            this._loaderStyle = this._viewportHeight = this._viewportWidth = this._parallaxYorigin = this._parallaxXorigin = 0;
            this._usesLoaderLayout = !1;
            this._isLoading = !0;
            this._usesAnyBackgroundBlending = !1;
            this._loadingLogoAsset = null;
            this._assetManager = f.New(f.AssetManager, this, c);
            this._layoutManager = f.New(f.LayoutManager, this);
            this._eventSheetManager = f.New(f.EventSheetManager, this);
            this._pluginManager = f.New(f.PluginManager, this);
            this._collisionEngine = f.New(f.CollisionEngine,
                this);
            this._timelineManager = f.New(f.TimelineManager, this);
            this._transitionManager = f.New(f.TransitionManager, this);
            this._allObjectClasses = [];
            this._objectClassesByName = new Map;
            this._objectClassesBySid = new Map;
            this._familyCount = 0;
            this._allContainers = [];
            this._allEffectLists = [];
            this._currentLayoutStack = [];
            this._instancesPendingCreate = [];
            this._instancesPendingDestroy = new Map;
            this._isFlushingPendingInstances = this._hasPendingInstances = !1;
            this._nextUid = this._objectCount = 0;
            this._instancesByUid = new Map;
            this._instancesToReleaseAtEndOfTick =
                new Set;
            this._instancesToReleaseAffectedObjectClasses = new Set;
            this._objectReferenceTable = [];
            this._jsPropNameTable = [];
            this._canvasManager = null;
            this._uses3dFeatures = !1;
            this._framerateMode = "vsync";
            this._compositingMode = "standard";
            this._sampling = "trilinear";
            this._isPixelRoundingEnabled = !1;
            this._needRender = !0;
            this._isPausedOnBlur = this._pauseOnBlur = !1;
            this._tickCallbacks = {
                normal: e => {
                    this._ruafId = this._rafId = -1;
                    this.Tick(e)
                },
                tickOnly: e => {
                    this._ruafId = -1;
                    this.Tick(e, !1, "skip-render")
                },
                renderOnly: () => {
                    this._rafId = -1;
                    this.Render()
                }
            };
            this._ruafId = this._rafId = -1;
            this._execCount = this._tickCountNoSave = this._tickCount = 0;
            this._hasStartedTicking = this._isInTick = this._hasStarted = !1;
            this._isLayoutFirstTick = !0;
            this._suspendCount = 0;
            this._scheduleTriggersThrottle = new f.PromiseThrottle(1);
            this._randomNumberCallback = () => Math.random();
            this._dt = this._dt1 = this._lastTickTime = this._startTime = 0;
            this._timeScale = 1;
            this._minimumFramerate = 30;
            this._gameTime = f.New(f.KahanSum);
            this._gameTimeRaw = f.New(f.KahanSum);
            this._wallTime = f.New(f.KahanSum);
            this._fpsFrameCount = -1;
            this._mainThreadTime = this._mainThreadTimeCounter = this._fps = this._fpsLastTime = 0;
            this._isLoadingState = !1;
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null;
            this._lastSaveJson = "";
            this._savegamesStorage = this._projectStorage = null;
            this._dispatcher = f.New(f.Event.Dispatcher);
            this._domEventHandlers = new Map;
            this._pendingResponsePromises = new Map;
            this._nextDomResponseId = 0;
            this._isReadyToHandleEvents = this._didRequestDeviceMotionEvent = this._didRequestDeviceOrientationEvent = !1;
            this._waitingToHandleEvents = [];
            this._eventObjects = {
                pretick: f.New(f.Event, "pretick", !1),
                tick: f.New(f.Event, "tick", !1),
                tick2: f.New(f.Event, "tick2", !1),
                instancedestroy: f.New(f.Event, "instancedestroy", !1),
                beforelayoutchange: f.New(f.Event, "beforelayoutchange", !1),
                layoutchange: f.New(f.Event, "layoutchange", !1)
            };
            this._eventObjects.instancedestroy.instance = null;
            this._userScriptDispatcher = f.New(f.Event.Dispatcher);
            this._userScriptEventObjects = null;
            this._behInstsToTick = f.New(f.RedBlackSet, f.BehaviorInstance.SortByTickSequence);
            this._behInstsToPostTick = f.New(f.RedBlackSet, f.BehaviorInstance.SortByTickSequence);
            this._behInstsToTick2 = f.New(f.RedBlackSet, f.BehaviorInstance.SortByTickSequence);
            this._jobScheduler = f.New(f.JobSchedulerRuntime, this, c.jobScheduler);
            c.canvas && (this._canvasManager = f.New(f.CanvasManager, this));
            this._messagePort.onmessage = e => this._OnMessageFromDOM(e.data);
            this.AddDOMComponentMessageHandler("runtime", "visibilitychange", e => this._OnVisibilityChange(e));
            this.AddDOMComponentMessageHandler("runtime", "opus-decode",
                e => this._WasmDecodeWebMOpus(e.arrayBuffer));
            this.AddDOMComponentMessageHandler("runtime", "get-remote-preview-status-info", () => this._GetRemotePreviewStatusInfo());
            this.AddDOMComponentMessageHandler("runtime", "js-invoke-function", e => this._InvokeFunctionFromJS(e));
            this.AddDOMComponentMessageHandler("runtime", "go-to-last-error-script", self.goToLastErrorScript);
            this._dispatcher.addEventListener("window-blur", e => this._OnWindowBlur(e));
            this._dispatcher.addEventListener("window-focus", () => this._OnWindowFocus());
            this._timelineManager.AddRuntimeListeners();
            this._iRuntime = null;
            this._interfaceMap = new WeakMap;
            this._commonScriptInterfaces = {
                keyboard: null,
                mouse: null,
                touch: null
            }
        }
        static Create(c) {
            return f.New(f.Runtime, c)
        }
        Release() {
            f.clearArray(this._allObjectClasses);
            this._objectClassesByName.clear();
            this._objectClassesBySid.clear();
            this._layoutManager.Release();
            this._layoutManager = null;
            this._eventSheetManager.Release();
            this._eventSheetManager = null;
            this._pluginManager.Release();
            this._pluginManager = null;
            this._assetManager.Release();
            this._assetManager = null;
            this._collisionEngine.Release();
            this._collisionEngine = null;
            this._timelineManager.Release();
            this._timelineManager = null;
            this._transitionManager.Release();
            this._transitionManager = null;
            this._canvasManager && (this._canvasManager.Release(), this._canvasManager = null);
            this._dispatcher.Release();
            this._tickEvent = this._dispatcher = null
        }["_OnMessageFromDOM"](c) {
            const e = c.type;
            if ("event" === e) this._OnEventFromDOM(c);
            else if ("result" === e) this._OnResultFromDOM(c);
            else throw Error(`unknown message '${e}'`);
        }
        _OnEventFromDOM(c) {
            if (this._isReadyToHandleEvents) {
                var e = c.component,
                    g = c.handler,
                    h = c.data,
                    l = c.dispatchOpts,
                    n = !(!l || !l.dispatchRuntimeEvent);
                l = !(!l || !l.dispatchUserScriptEvent);
                var q = c.responseId;
                if ("runtime" === e && (n && (c = new f.Event(g), c.data = h, this._dispatcher.dispatchEventAndWaitAsyncSequential(c)), l)) {
                    c = new f.Event(g, !0);
                    for (const [y, w] of Object.entries(h)) c[y] = w;
                    this.DispatchUserScriptEvent(c)
                }
                if (c = this._domEventHandlers.get(e))
                    if (c = c.get(g)) {
                        n = null;
                        try {
                            n = c(h)
                        } catch (y) {
                            console.error(`Exception in '${e}' handler '${g}':`,
                                y);
                            null !== q && this._PostResultToDOM(q, !1, "" + y);
                            return
                        }
                        null !== q && (n && n.then ? n.then(y => this._PostResultToDOM(q, !0, y)).catch(y => {
                            console.error(`Rejection from '${e}' handler '${g}':`, y);
                            this._PostResultToDOM(q, !1, "" + y)
                        }) : this._PostResultToDOM(q, !0, n))
                    } else n || l || console.warn(`[Runtime] No DOM handler '${g}' for component '${e}'`);
                else n || l || console.warn(`[Runtime] No DOM event handlers for component '${e}'`)
            } else this._waitingToHandleEvents.push(c)
        }
        _PostResultToDOM(c, e, g) {
            this._messagePort.postMessage({
                type: "result",
                responseId: c,
                isOk: e,
                result: g
            })
        }
        _OnResultFromDOM(c) {
            const e = c.responseId,
                g = c.isOk;
            c = c.result;
            const h = this._pendingResponsePromises.get(e);
            g ? h.resolve(c) : h.reject(c);
            this._pendingResponsePromises.delete(e)
        }
        AddDOMComponentMessageHandler(c, e, g) {
            let h = this._domEventHandlers.get(c);
            h || (h = new Map, this._domEventHandlers.set(c, h));
            if (h.has(e)) throw Error(`[Runtime] Component '${c}' already has handler '${e}'`);
            h.set(e, g)
        }
        PostComponentMessageToDOM(c, e, g) {
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: e,
                data: g,
                responseId: null
            })
        }
        PostComponentMessageToDOMAsync(c, e, g) {
            const h = this._nextDomResponseId++,
                l = new Promise((n, q) => {
                    this._pendingResponsePromises.set(h, {
                        resolve: n,
                        reject: q
                    })
                });
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: e,
                data: g,
                responseId: h
            });
            return l
        }
        PostToDebugger(c) {
            if (!this.IsDebug()) throw Error("not in debug mode");
            this.PostComponentMessageToDOM("runtime", "post-to-debugger", c)
        }
        async Init(c) {
            this.IsDebug() ? await b.Init(this) : self.C3Debugger && self.C3Debugger.InitPreview(this);
            var [e] = await Promise.all([this._assetManager.FetchJson("data.json"), this._MaybeLoadOpusDecoder(), this._jobScheduler.Init()]);
            this._LoadDataJson(e);
            await this._InitialiseCanvas(c);
            this.IsPreview() || console.info("Made with Construct 3, the game and app creator :: https://www.construct.net");
            this.GetWebGLRenderer() ? (e = this.GetWebGLRenderer(), console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with WebGL ${e.GetWebGLVersionNumber()} [${e.GetUnmaskedRenderer()}] (${e.IsDesynchronized()?
"desynchronized":"standard"} compositing)`), e.HasMajorPerformanceCaveat() && console.warn("[C3 runtime] WebGL indicates a major performance caveat. Software rendering may be in use. This can result in significantly degraded performance.")) : this.GetWebGPURenderer() && console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with experimental WebGPU`);
            this._isReadyToHandleEvents = !0;
            for (const g of this._waitingToHandleEvents) this._OnEventFromDOM(g);
            f.clearArray(this._waitingToHandleEvents);
            this._canvasManager && this._canvasManager.StartLoadingScreen();
            for (const g of c.runOnStartupFunctions) this._additionalLoadPromises.push(this._RunOnStartupFunction(g));
            await Promise.all([this._assetManager.WaitForAllToLoad(), ...this._additionalLoadPromises]);
            f.clearArray(this._additionalLoadPromises);
            if (this._assetManager.HasHadErrorLoading()) this._canvasManager && this._canvasManager.HideCordovaSplashScreen();
            else return this._canvasManager && await this._canvasManager.EndLoadingScreen(), await this._dispatcher.dispatchEventAndWaitAsync(new f.Event("beforeruntimestart")),
                await this.Start(), this._messagePort.postMessage({
                    type: "runtime-ready"
                }), this
        }
        async _RunOnStartupFunction(c) {
            try {
                await c(this._iRuntime)
            } catch (e) {
                console.error("[C3 runtime] Error in runOnStartup function: ", e)
            }
        }
        _LoadDataJson(c) {
            c = c.project;
            this._projectName = c[0];
            this._projectVersion = c[16];
            this._projectUniqueId = c[31];
            this._appId = c[38];
            const e = c[39] || "loading-logo.png";
            this._isPixelRoundingEnabled = !!c[9];
            this._originalViewportWidth = this._viewportWidth = c[10];
            this._originalViewportHeight = this._viewportHeight =
                c[11];
            this._parallaxXorigin = this._originalViewportWidth / 2;
            this._parallaxYorigin = this._originalViewportHeight / 2;
            this._compositingMode = c[36];
            this._framerateMode = c[37];
            "low-latency" === this._compositingMode && this.IsAndroidWebView() && 77 >= f.Platform.BrowserVersionNumber && (console.warn("[C3 runtime] Desynchronized (low-latency) compositing is enabled, but is disabled in the Android WebView <=77 due to crbug.com/1008842. Reverting to synchronized (standard) compositing."), this._compositingMode = "standard");
            this._uses3dFeatures = !!c[40];
            this._sampling = c[14];
            this._usesLoaderLayout = !!c[18];
            this._loaderStyle = c[19];
            this._nextUid = c[21];
            this._pauseOnBlur = c[22];
            const g = this._assetManager;
            g._SetAudioFiles(c[7], c[25]);
            g._SetMediaSubfolder(c[8]);
            g._SetFontsSubfolder(c[32]);
            g._SetIconsSubfolder(c[28]);
            g._SetWebFonts(c[29]);
            if (0 === this._loaderStyle) {
                let y = "";
                this.IsPreview() ? g._HasLocalUrlBlob(e) && (y = g.GetLocalUrlAsBlobUrl(e)) : y = g.GetIconsSubfolder() + e;
                y && (this._loadingLogoAsset = g.LoadImage({
                    url: y
                }))
            }
            this._canvasManager &&
                (this._canvasManager.SetFullscreenMode(f.CanvasManager._FullscreenModeNumberToString(c[12])), this._canvasManager.SetFullscreenScalingQuality(c[23] ? "high" : "low"), this._canvasManager.SetMipmapsEnabled(0 !== c[24]), this._canvasManager._SetGPUPowerPreference(c[34]), this._canvasManager._SetTextureAnisotropy(c[41]), this._canvasManager._SetWebGPUEnabled(c[13]));
            this._pluginManager.CreateSystemPlugin();
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            for (var h of c[2]) this._pluginManager.CreatePlugin(h);
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            this._LoadJsPropNameTable();
            for (var l of c[3]) h = f.ObjectClass.Create(this, this._allObjectClasses.length, l), this._allObjectClasses.push(h), this._objectClassesByName.set(h.GetName().toLowerCase(), h), this._objectClassesBySid.set(h.GetSID(), h);
            for (const y of c[4]) this._allObjectClasses[y[0]]._LoadFamily(y);
            for (var n of c[27]) l = n.map(y => this._allObjectClasses[y]), this._allContainers.push(f.New(f.Container, this, l));
            for (const y of this._allObjectClasses) y._OnAfterCreate();
            for (const y of c[5]) this._layoutManager.Create(y);
            (n = c[1]) && (n = this._layoutManager.GetLayoutByName(n)) && this._layoutManager.SetFirstLayout(n);
            for (var q of c[33]) this._timelineManager.Create(q);
            for (const y of c[35]) this._transitionManager.Create(y);
            this._InitScriptInterfaces();
            for (const y of c[6]) this._eventSheetManager.Create(y);
            this._eventSheetManager._PostInit();
            this._InitGlobalVariableScriptInterface();
            f.clearArray(this._objectReferenceTable);
            this.FlushPendingInstances();
            q = "any";
            c = c[20];
            1 === c ?
                q = "portrait" : 2 === c && (q = "landscape");
            this.PostComponentMessageToDOM("runtime", "set-target-orientation", {
                targetOrientation: q
            })
        }
        GetLoaderStyle() {
            return this._loaderStyle
        }
        IsFBInstantAvailable() {
            return this._isFBInstantAvailable
        }
        IsLoading() {
            return this._isLoading
        }
        AddLoadPromise(c) {
            this._additionalLoadPromises.push(c)
        }
        SetUsingCreatePromises(c) {
            this._isUsingCreatePromises = !!c
        }
        AddCreatePromise(c) {
            this._isUsingCreatePromises && this._additionalCreatePromises.push(c)
        }
        GetCreatePromises() {
            return this._additionalCreatePromises
        }
        _GetNextFamilyIndex() {
            return this._familyCount++
        }
        GetFamilyCount() {
            return this._familyCount
        }
        _AddEffectList(c) {
            this._allEffectLists.push(c)
        }
        _GetAllEffectLists() {
            return this._allEffectLists
        }
        async _InitialiseCanvas(c) {
            this._canvasManager &&
                (await this._canvasManager.CreateCanvas(c), this._canvasManager.InitLoadingScreen(this._loaderStyle))
        }
        async _MaybeLoadOpusDecoder() {
            if (!this._assetManager.IsAudioFormatSupported("audio/webm; codecs=opus")) {
                var c = null;
                try {
                    c = this.IsiOSCordova() && this._assetManager.IsFileProtocol() ? await this._assetManager.CordovaFetchLocalFileAsArrayBuffer(this._opusWasmBinaryUrl) : await this._assetManager.FetchArrayBuffer(this._opusWasmBinaryUrl)
                } catch (e) {
                    console.info("Failed to fetch Opus decoder WASM; assuming project has no Opus audio.",
                        e);
                    return
                }
                c ? this.AddJobWorkerBuffer(c, "opus-decoder-wasm") : this.AddJobWorkerBlob(null, "opus-decoder-wasm");
                await this.AddJobWorkerScripts([this._opusWasmScriptUrl])
            }
        }
        async _WasmDecodeWebMOpus(c) {
            return await this.AddJob("OpusDecode", {
                arrayBuffer: c
            }, [c])
        }
        async Start() {
            this._hasStarted = !0;
            this._startTime = Date.now();
            if (this._usesLoaderLayout) {
                for (var c of this._allObjectClasses) c.IsFamily() || c.IsOnLoaderLayout() || !c.IsWorldType() || c.OnCreate();
                this._assetManager.WaitForAllToLoad().then(() => {
                    this._isLoading = !1;
                    this._OnLoadFinished()
                })
            } else this._isLoading = !1;
            this._assetManager.SetInitialLoadFinished();
            this.IsDebug() && b.RuntimeInit(d);
            for (const e of this._layoutManager.GetAllLayouts()) e._CreateGlobalNonWorlds();
            c = this._layoutManager.GetFirstLayout();
            await c._Load(null, this.GetRenderer());
            await c._StartRunning(!0);
            this._fpsLastTime = performance.now();
            this._usesLoaderLayout || this._OnLoadFinished();
            (await this.PostComponentMessageToDOMAsync("runtime", "before-start-ticking")).isSuspended ? this._suspendCount++ :
                this.Tick()
        }
        _OnLoadFinished() {
            this.Trigger(f.Plugins.System.Cnds.OnLoadFinished, null, null);
            this.PostComponentMessageToDOM("runtime", "register-sw")
        }
        GetObjectReference(c) {
            c = Math.floor(c);
            const e = this._objectReferenceTable;
            if (0 > c || c >= e.length) throw Error("invalid object reference");
            return e[c]
        }
        _LoadJsPropNameTable() {
            for (const c of self.C3_JsPropNameTable) {
                const e = f.first(Object.keys(c));
                this._jsPropNameTable.push(e)
            }
        }
        GetJsPropName(c) {
            c = Math.floor(c);
            const e = this._jsPropNameTable;
            if (0 > c || c >= e.length) throw Error("invalid prop reference");
            return e[c]
        }
        HasDOM() {
            return this._hasDom
        }
        IsHeadless() {
            return this._isHeadless
        }
        IsInWorker() {
            return this._isInWorker
        }
        GetBaseURL() {
            return this._baseUrl
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetEventStack() {
            return this._eventSheetManager.GetEventStack()
        }
        GetCurrentEventStackFrame() {
            return this._eventSheetManager.GetCurrentEventStackFrame()
        }
        GetCurrentEvent() {
            return this._eventSheetManager.GetCurrentEvent()
        }
        GetCurrentCondition() {
            return this._eventSheetManager.GetCurrentCondition()
        }
        IsCurrentConditionFirst() {
            return 0 ===
                this.GetCurrentEventStackFrame().GetConditionIndex()
        }
        GetCurrentAction() {
            return this._eventSheetManager.GetCurrentAction()
        }
        GetPluginManager() {
            return this._pluginManager
        }
        GetSystemPlugin() {
            return this._pluginManager.GetSystemPlugin()
        }
        GetObjectClassByIndex(c) {
            c = Math.floor(c);
            if (0 > c || c >= this._allObjectClasses.length) throw new RangeError("invalid index");
            return this._allObjectClasses[c]
        }
        GetObjectClassByName(c) {
            return this._objectClassesByName.get(c.toLowerCase()) || null
        }
        GetObjectClassBySID(c) {
            return this._objectClassesBySid.get(c) ||
                null
        }
        GetSingleGlobalObjectClassByCtor(c) {
            return (c = this._pluginManager.GetPluginByConstructorFunction(c)) ? c.GetSingleGlobalObjectClass() : null
        }
        GetAllObjectClasses() {
            return this._allObjectClasses
        }* allInstances() {
            for (const c of this._allObjectClasses) c.IsFamily() || (yield* c.instances())
        }
        Dispatcher() {
            return this._dispatcher
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(c) {
            c.runtime = this.GetIRuntime();
            const e = this.IsDebug() && !this._eventSheetManager.IsInEventEngine();
            e &&
                b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(c);
            e && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(c) {
            c.runtime = this.GetIRuntime();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(c)
        }
        GetOriginalViewportWidth() {
            return this._originalViewportWidth
        }
        GetOriginalViewportHeight() {
            return this._originalViewportHeight
        }
        SetOriginalViewportSize(c, e) {
            if (this._originalViewportWidth !== c || this._originalViewportHeight !== e) this._originalViewportWidth = c, this._originalViewportHeight =
                e, c = this.GetLayoutManager(), c.SetAllLayerProjectionChanged(), c.SetAllLayerMVChanged()
        }
        GetViewportWidth() {
            return this._viewportWidth
        }
        GetViewportHeight() {
            return this._viewportHeight
        }
        SetViewportSize(c, e) {
            if (this._viewportWidth !== c || this._viewportHeight !== e) this._viewportWidth = c, this._viewportHeight = e, c = this.GetLayoutManager(), c.SetAllLayerProjectionChanged(), c.SetAllLayerMVChanged()
        }
        _SetDevicePixelRatio(c) {
            this._devicePixelRatio = c
        }
        GetDevicePixelRatio() {
            return this._devicePixelRatio
        }
        GetParallaxXOrigin() {
            return this._parallaxXorigin
        }
        GetParallaxYOrigin() {
            return this._parallaxYorigin
        }
        GetCanvasManager() {
            return this._canvasManager
        }
        GetDrawWidth() {
            return this._canvasManager ?
                this._canvasManager.GetDrawWidth() : this._viewportWidth
        }
        GetDrawHeight() {
            return this._canvasManager ? this._canvasManager.GetDrawHeight() : this._viewportHeight
        }
        GetRenderScale() {
            return this._canvasManager ? this._canvasManager.GetRenderScale() : 1
        }
        GetDisplayScale() {
            return this._canvasManager ? this._canvasManager.GetDisplayScale() : 1
        }
        GetCanvasClientX() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientX() : 0
        }
        GetCanvasClientY() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientY() : 0
        }
        GetCanvasCssWidth() {
            return this._canvasManager ?
                this._canvasManager.GetCssWidth() : 0
        }
        GetCanvasCssHeight() {
            return this._canvasManager ? this._canvasManager.GetCssHeight() : 0
        }
        GetFullscreenMode() {
            return this._canvasManager ? this._canvasManager.GetFullscreenMode() : "off"
        }
        GetAdditionalRenderTarget(c) {
            return this._canvasManager ? this._canvasManager.GetAdditionalRenderTarget(c) : null
        }
        ReleaseAdditionalRenderTarget(c) {
            this._canvasManager && this._canvasManager.ReleaseAdditionalRenderTarget(c)
        }
        _SetUsesAnyBackgroundBlending(c) {
            this._usesAnyBackgroundBlending = !!c
        }
        UsesAnyBackgroundBlending() {
            return this._usesAnyBackgroundBlending
        }
        GetGPUUtilisation() {
            return this._canvasManager ?
                this._canvasManager.GetGPUUtilisation() : NaN
        }
        IsLinearSampling() {
            return "nearest" !== this.GetSampling()
        }
        GetFramerateMode() {
            return this._framerateMode
        }
        GetCompositingMode() {
            return this._compositingMode
        }
        GetSampling() {
            return this._sampling
        }
        UsesLoaderLayout() {
            return this._usesLoaderLayout
        }
        GetLoadingLogoAsset() {
            return this._loadingLogoAsset
        }
        ReleaseLoadingLogoAsset() {
            this._loadingLogoAsset && (this._loadingLogoAsset.Release(), this._loadingLogoAsset = null)
        }
        GetLayoutManager() {
            return this._layoutManager
        }
        GetMainRunningLayout() {
            return this._layoutManager.GetMainRunningLayout()
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetTransitionManager() {
            return this._transitionManager
        }
        GetAssetManager() {
            return this._assetManager
        }
        LoadImage(c) {
            return this._assetManager.LoadImage(c)
        }
        CreateInstance(c,
            e, g, h, l) {
            return this.CreateInstanceFromData(c, e, !1, g, h, !1, l)
        }
        CreateInstanceFromData(c, e, g, h, l, n, q) {
            var y = null;
            let w = null;
            if (c instanceof f.ObjectClass) {
                w = c;
                if (w.IsFamily()) {
                    c = w.GetFamilyMembers();
                    var u = Math.floor(this.Random() * c.length);
                    w = c[u]
                }
                y = w.GetDefaultInstanceData()
            } else y = c, w = this.GetObjectClassByIndex(y[1]);
            var p = w.GetPlugin().IsWorldType();
            if (this._isLoading && p && !w.IsOnLoaderLayout()) return null;
            const x = e;
            p || (e = null);
            var t = g && !n && y && !this._instancesByUid.has(y[2]) ? y[2] : this._nextUid++;
            u =
                y ? y[0] : null;
            c = f.New(f.Instance, {
                runtime: this,
                objectType: w,
                layer: e,
                worldData: u,
                instVarData: y ? y[3] : null,
                uid: t
            });
            this._instancesByUid.set(t, c);
            t = null;
            p && (t = c.GetWorldInfo(), "undefined" !== typeof h && "undefined" !== typeof l && (t.SetX(h), t.SetY(l)), w._SetAnyCollisionCellChanged(!0));
            e && (q || e._AddInstance(c, !0), 1 === e.GetParallaxX() && 1 === e.GetParallaxY() || w._SetAnyInstanceParallaxed(!0), e.GetLayout().MaybeLoadTexturesFor(w));
            this._objectCount++;
            if (w.IsInContainer() && !g && !n) {
                for (var r of w.GetContainer().objectTypes()) {
                    if (r ===
                        w) continue;
                    const C = this.CreateInstanceFromData(r, x, !1, t ? t.GetX() : h, t ? t.GetY() : l, !0, !1);
                    c._AddSibling(C)
                }
                for (var B of c.siblings()) {
                    B._AddSibling(c);
                    for (var z of c.siblings()) B !== z && B._AddSibling(z)
                }
            }
            p && !g && q && this._CreateChildInstancesFromData(c, u, t, e, h, l);
            if (w.IsInContainer() && !g && !n && q)
                for (const C of c.siblings())
                    if (r = C.GetWorldInfo()) B = C.GetPlugin(), z = C.GetObjectClass().GetDefaultInstanceData()[0], B.IsWorldType() ? this._CreateChildInstancesFromData(C, z, r, e, r.GetX(), r.GetY()) : this._CreateChildInstancesFromData(C,
                        z, r, e);
            if (q && !n && !g && c.IsInContainer())
                for (const C of c.siblings())
                    for (const F of C.siblings()) c === F && x._RemoveInstance(C, !0);
            !n && q && ("undefined" === typeof h && (h = u[0]), "undefined" === typeof l && (l = u[1]), e = t.GetTopParent(), h = h - t.GetX() + e.GetX(), l = l - t.GetY() + e.GetY(), e.SetXY(h, l));
            w._SetIIDsStale();
            l = y ? f.cloneArray(y[5]) : null;
            y = y ? y[4].map(C => f.cloneArray(C)) : null;
            (p = p && u && u[13]) && c._SetHasTilemap();
            c._CreateSdkInstance(l, y);
            p && (u = u[13], c.GetSdkInstance().LoadTilemapData(u[2], u[0], u[1]));
            this._instancesPendingCreate.push(c);
            this._hasPendingInstances = !0;
            this.IsDebug() && b.InstanceCreated(c);
            return c
        }
        _CreateChildInstancesFromData(c, e, g, h, l, n) {
            var q = g.GetSceneGraphZIndexExportData(),
                y = g.GetSceneGraphChildrenExportData();
            c.GetWorldInfo().SetSceneGraphZIndex(q);
            if (y) {
                "undefined" === typeof l && (l = e[0]);
                "undefined" === typeof n && (n = e[1]);
                q = new Set;
                g = e[0];
                e = e[1];
                for (const t of y) {
                    var w = t[1],
                        u = t[2];
                    y = t[3];
                    var p = !!t[4];
                    const r = t[5];
                    u = this._layoutManager.GetLayoutBySID(t[0]).GetLayer(w).GetInitialInstanceData(u);
                    w = this.GetObjectClassByIndex(u[1]);
                    var x = c.HasSibling(w);
                    const B = q.has(w);
                    x && !B && p ? (p = c.GetSibling(w), x = l + u[0][0] - g, u = n + u[0][1] - e, p.GetWorldInfo().SetXY(x, u), p.GetWorldInfo().SetSceneGraphZIndex(r), c.AddChild(p, {
                        transformX: !!(y >> 0 & 1),
                        transformY: !!(y >> 1 & 1),
                        transformWidth: !!(y >> 2 & 1),
                        transformHeight: !!(y >> 3 & 1),
                        transformAngle: !!(y >> 4 & 1),
                        destroyWithParent: !!(y >> 5 & 1),
                        transformZElevation: !!(y >> 6 & 1)
                    }), q.add(w)) : (w = this.CreateInstanceFromData(u, h, !1, l + u[0][0] - g, n + u[0][1] - e, !1, !0), w.GetWorldInfo().SetSceneGraphZIndex(r), c.AddChild(w, {
                        transformX: !!(y >>
                            0 & 1),
                        transformY: !!(y >> 1 & 1),
                        transformWidth: !!(y >> 2 & 1),
                        transformHeight: !!(y >> 3 & 1),
                        transformAngle: !!(y >> 4 & 1),
                        destroyWithParent: !!(y >> 5 & 1),
                        transformZElevation: !!(y >> 6 & 1)
                    }))
                }
            }
        }
        DestroyInstance(c) {
            if (!this._instancesToReleaseAtEndOfTick.has(c)) {
                var e = c.GetObjectClass(),
                    g = this._instancesPendingDestroy.get(e);
                if (g) {
                    if (g.has(c)) return;
                    g.add(c)
                } else g = new Set, g.add(c), this._instancesPendingDestroy.set(e, g);
                this.IsDebug() && b.InstanceDestroyed(c);
                c._MarkDestroyed();
                this._hasPendingInstances = !0;
                if (c.IsInContainer())
                    for (const h of c.siblings()) this.DestroyInstance(h);
                for (const h of c.children()) h.GetDestroyWithParent() && this.DestroyInstance(h);
                this._layoutManager.IsEndingLayout() || this._isLoadingState || (e = this.GetEventSheetManager(), e.BlockFlushingInstances(!0), c._TriggerOnDestroyed(), e.BlockFlushingInstances(!1));
                c._FireDestroyedScriptEvents(this._layoutManager.IsEndingLayout())
            }
        }
        FlushPendingInstances() {
            this._hasPendingInstances && (this._isFlushingPendingInstances = !0, this._FlushInstancesPendingCreate(), this._FlushInstancesPendingDestroy(), this._hasPendingInstances =
                this._isFlushingPendingInstances = !1, this.UpdateRender())
        }
        _FlushInstancesPendingCreate() {
            for (const c of this._instancesPendingCreate) {
                const e = c.GetObjectClass();
                e._AddInstance(c);
                for (const g of e.GetFamilies()) g._AddInstance(c), g._SetIIDsStale()
            }
            f.clearArray(this._instancesPendingCreate)
        }
        _FlushInstancesPendingDestroy() {
            this._dispatcher.SetDelayRemoveEventsEnabled(!0);
            for (const [c, e] of this._instancesPendingDestroy.entries()) this._FlushInstancesPendingDestroyForObjectClass(c, e), e.clear();
            this._instancesPendingDestroy.clear();
            this._dispatcher.SetDelayRemoveEventsEnabled(!1)
        }
        _FlushInstancesPendingDestroyForObjectClass(c, e) {
            for (const h of e) {
                var g = this._eventObjects.instancedestroy;
                g.instance = h;
                this._dispatcher.dispatchEvent(g);
                this._instancesByUid.delete(h.GetUID());
                if (g = h.GetWorldInfo()) g._RemoveFromCollisionCells(), g._RemoveFromRenderCells(), g._MarkDestroyed();
                this._instancesToReleaseAtEndOfTick.add(h);
                this._objectCount--
            }
            f.arrayRemoveAllInSet(c.GetInstances(), e);
            c._SetIIDsStale();
            this._instancesToReleaseAffectedObjectClasses.add(c);
            0 === c.GetInstances().length && c._SetAnyInstanceParallaxed(!1);
            for (const h of c.GetFamilies()) f.arrayRemoveAllInSet(h.GetInstances(), e), h._SetIIDsStale(), this._instancesToReleaseAffectedObjectClasses.add(h);
            if (c.GetPlugin().IsWorldType()) {
                c = new Set([...e].map(h => h.GetWorldInfo().GetLayer()));
                for (const h of c) h._RemoveAllInstancesInSet(e)
            }
        }
        _GetInstancesPendingCreate() {
            return this._instancesPendingCreate
        }* instancesPendingCreateForObjectClass(c) {
            for (const e of this._GetInstancesPendingCreate()) c.IsFamily() ?
                e.GetObjectClass().BelongsToFamily(c) && (yield e) : e.GetObjectClass() === c && (yield e)
        }
        _GetNewUID() {
            return this._nextUid++
        }
        _MapInstanceByUID(c, e) {
            this._instancesByUid.set(c, e)
        }
        _OnWebGLContextLost() {
            this._dispatcher.dispatchEvent(f.New(f.Event, "webglcontextlost"));
            this.SetSuspended(!0);
            for (var c of this._allObjectClasses) !c.IsFamily() && c.HasLoadedTextures() && c.ReleaseTextures();
            (c = this.GetMainRunningLayout()) && c._OnWebGLContextLost();
            f.ImageInfo.OnWebGLContextLost();
            f.ImageAsset.OnWebGLContextLost()
        }
        async _OnWebGLContextRestored() {
            await this.GetMainRunningLayout()._Load(null,
                this.GetWebGLRenderer());
            this._dispatcher.dispatchEvent(f.New(f.Event, "webglcontextrestored"));
            this.SetSuspended(!1);
            this.UpdateRender()
        }
        _OnVisibilityChange(c) {
            this.SetSuspended(c.hidden)
        }
        _OnWindowBlur(c) {
            this.IsPreview() && this._pauseOnBlur && !f.Platform.IsMobile && !c.data.parentHasFocus && (this.SetSuspended(!0), this._isPausedOnBlur = !0)
        }
        _OnWindowFocus() {
            this._isPausedOnBlur && (this.SetSuspended(!1), this._isPausedOnBlur = !1)
        }
        _RequestAnimationFrame() {
            const c = this._tickCallbacks;
            "vsync" === this._framerateMode ?
                -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.normal)) : "unlimited-tick" === this._framerateMode ? (-1 === this._ruafId && (this._ruafId = f.RequestUnlimitedAnimationFrame(c.tickOnly)), -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.renderOnly))) : -1 === this._ruafId && (this._ruafId = f.RequestUnlimitedAnimationFrame(c.normal))
        }
        _CancelAnimationFrame() {
            -1 !== this._rafId && (self.cancelAnimationFrame(this._rafId), this._rafId = -1); - 1 !== this._ruafId && (f.CancelUnlimitedAnimationFrame(this._ruafId),
                this._ruafId = -1)
        }
        IsSuspended() {
            return 0 < this._suspendCount
        }
        SetSuspended(c) {
            var e = this.IsSuspended();
            this._suspendCount += c ? 1 : -1;
            0 > this._suspendCount && (this._suspendCount = 0);
            c = this.IsSuspended();
            !e && c ? (console.log("[Construct 3] Suspending"), this._CancelAnimationFrame(), this._dispatcher.dispatchEvent(f.New(f.Event, "suspend")), this.Trigger(f.Plugins.System.Cnds.OnSuspend, null, null)) : e && !c && (console.log("[Construct 3] Resuming"), this._fpsLastTime = this._lastTickTime = e = performance.now(), this._mainThreadTimeCounter =
                this._mainThreadTime = this._fps = this._fpsFrameCount = 0, this._dispatcher.dispatchEvent(f.New(f.Event, "resume")), this.Trigger(f.Plugins.System.Cnds.OnResume, null, null), this.HitBreakpoint() || this.Tick(e))
        }
        _AddBehInstToTick(c) {
            this._behInstsToTick.Add(c)
        }
        _AddBehInstToPostTick(c) {
            this._behInstsToPostTick.Add(c)
        }
        _AddBehInstToTick2(c) {
            this._behInstsToTick2.Add(c)
        }
        _RemoveBehInstToTick(c) {
            this._behInstsToTick.Remove(c)
        }
        _RemoveBehInstToPostTick(c) {
            this._behInstsToPostTick.Remove(c)
        }
        _RemoveBehInstToTick2(c) {
            this._behInstsToTick2.Remove(c)
        }
        _BehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick) c.Tick();
            this._behInstsToTick.SetQueueingEnabled(!1)
        }
        _BehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToPostTick) c.PostTick();
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }
        _BehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick2) c.Tick2();
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick) {
                const e =
                    c.Tick();
                f.IsIterator(e) && (yield* e)
            }
            this._behInstsToTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToPostTick) {
                const e = c.PostTick();
                f.IsIterator(e) && (yield* e)
            }
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick2) {
                const e = c.Tick2();
                f.IsIterator(e) && (yield* e)
            }
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }
        async Tick(c, e,
            g) {
            this._hasStartedTicking = !0;
            const h = "background-wake" === g;
            g = "background-wake" !== g && "skip-render" !== g;
            this._hasStarted && (!this.IsSuspended() || e || h) && (e = performance.now(), this._isInTick = !0, this._MeasureDt(c || 0), c = this.Step_BeforePreTick(), this.IsDebugging() && await c, c = this._dispatcher.dispatchEventAndWait_AsyncOptional(this._eventObjects.pretick), c instanceof Promise && await c, c = this.Step_AfterPreTick(), this.IsDebugging() && await c, this._NeedsHandleSaveOrLoad() && await this._HandleSaveOrLoad(), this.GetLayoutManager().IsPendingChangeMainLayout() &&
                await this._MaybeChangeLayout(), c = this.Step_RunEventsEtc(), this.IsDebugging() && await c, g && this.Render(), this.IsSuspended() || h || this._RequestAnimationFrame(), this._tickCount++, this._tickCountNoSave++, this._execCount++, this._isInTick = !1, this._mainThreadTimeCounter += performance.now() - e)
        }
        async Step_BeforePreTick() {
            const c = this._eventSheetManager,
                e = this.IsDebug();
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0);
            this.PushCurrentLayout(this.GetMainRunningLayout());
            e && b.StartMeasuringTime();
            this.IsDebugging() ?
                await c.DebugRunScheduledWaits() : c.RunScheduledWaits();
            e && b.AddEventsTime();
            this.PopCurrentLayout();
            c.BlockFlushingInstances(!1);
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0)
        }
        async Step_AfterPreTick() {
            const c = this.IsDebug(),
                e = this.IsDebugging(),
                g = this._dispatcher,
                h = this._eventObjects,
                l = this._userScriptEventObjects;
            c && b.StartMeasuringTime();
            e ? await this.DebugIterateAndBreak(this._DebugBehaviorTick()) : this._BehaviorTick();
            e ? await this.DebugIterateAndBreak(this._DebugBehaviorPostTick()) :
                this._BehaviorPostTick();
            c && b.AddBehaviorTickTime();
            c && b.StartMeasuringTime();
            e ? await this.DebugFireGeneratorEventAndBreak(h.tick) : g.dispatchEvent(h.tick);
            c && b.AddPluginTickTime();
            this._eventSheetManager.BlockFlushingInstances(!1);
            this.DispatchUserScriptEvent(l.tick)
        }
        async Step_RunEventsEtc() {
            const c = this._eventSheetManager,
                e = this._dispatcher,
                g = this._eventObjects,
                h = this.IsDebug(),
                l = this.IsDebugging();
            h && b.StartMeasuringTime();
            l ? await c.DebugRunEvents(this._layoutManager) : c.RunEvents(this._layoutManager);
            h && b.AddEventsTime();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            this._isLayoutFirstTick = !1;
            c.BlockFlushingInstances(!0);
            h && b.StartMeasuringTime();
            l ? await this.DebugIterateAndBreak(this._DebugBehaviorTick2()) : this._BehaviorTick2();
            h && b.AddBehaviorTickTime();
            h && b.StartMeasuringTime();
            l ? await this.DebugFireGeneratorEventAndBreak(g.tick2) : e.dispatchEvent(g.tick2);
            h && b.AddPluginTickTime();
            c.BlockFlushingInstances(!1);
            l && await c.RunQueuedDebugTriggersAsync()
        }
        _ReleaseInstancesAtEndOfTick() {
            if (0 !==
                this._instancesToReleaseAtEndOfTick.size) {
                var c = this._dispatcher;
                c.SetDelayRemoveEventsEnabled(!0);
                for (const e of this._instancesToReleaseAffectedObjectClasses) e.GetSolStack().RemoveInstances(this._instancesToReleaseAtEndOfTick);
                this._instancesToReleaseAffectedObjectClasses.clear();
                this._eventSheetManager.RemoveInstancesFromScheduledWaits(this._instancesToReleaseAtEndOfTick);
                for (const e of this._instancesToReleaseAtEndOfTick) e.Release();
                this._instancesToReleaseAtEndOfTick.clear();
                c.SetDelayRemoveEventsEnabled(!1)
            }
        }
        async _MaybeChangeLayout() {
            const c =
                this.GetLayoutManager();
            let e = 0;
            for (; c.IsPendingChangeMainLayout() && 10 > e++;) await this._DoChangeLayout(c.GetPendingChangeMainLayout())
        }
        _MeasureDt(c) {
            let e = 0;
            0 !== this._lastTickTime && (e = Math.max(c - this._lastTickTime, 0) / 1E3, .5 < e && (e = 0), this._dt1 = Math.min(e, 1 / this._minimumFramerate));
            this._lastTickTime = c;
            this._dt = this._dt1 * this._timeScale;
            this._gameTime.Add(this._dt);
            this._gameTimeRaw.Add(e * this._timeScale);
            this._wallTime.Add(this._dt1);
            this._canvasManager && this._canvasManager._UpdateTick();
            1E3 <= c - this._fpsLastTime &&
                (this._fpsLastTime += 1E3, 1E3 <= c - this._fpsLastTime && (this._fpsLastTime = c), this._fps = this._fpsFrameCount, this._fpsFrameCount = 0, this._mainThreadTime = Math.min(this._mainThreadTimeCounter / 1E3, 1), this._mainThreadTimeCounter = 0, this._canvasManager && this._canvasManager._Update1sFrameRange(), this._collisionEngine._Update1sStats(), this.IsDebug() && b.Update1sPerfStats());
            this._fpsFrameCount++
        }
        async _DoChangeLayout(c) {
            const e = this._dispatcher,
                g = this.GetLayoutManager().GetMainRunningLayout();
            await g._StopRunning();
            g._Unload(c, this.GetRenderer());
            g === c && this._eventSheetManager.ClearAllScheduledWaits();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            e.dispatchEvent(this._eventObjects.beforelayoutchange);
            f.Asyncify.SetHighThroughputMode(!0);
            await c._Load(g, this.GetRenderer());
            f.Asyncify.SetHighThroughputMode(!1);
            await c._StartRunning(!1);
            e.dispatchEvent(this._eventObjects.layoutchange);
            this.UpdateRender();
            this._isLayoutFirstTick = !0;
            this.FlushPendingInstances()
        }
        UpdateRender() {
            this._needRender = !0
        }
        GetWebGLRenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGLRenderer() : null
        }
        GetWebGPURenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGPURenderer() : null
        }
        GetRenderer() {
            return this._canvasManager ? this._canvasManager.GetRenderer() : null
        }
        Render() {
            const c = this._canvasManager;
            if (c && !c.IsRendererContextLost()) {
                var e = this.GetRenderer(),
                    g = e.SupportsGPUProfiling(),
                    h = g && e.IsWebGL();
                g = g && e.IsWebGPU();
                h && e.CheckForQueryResults();
                if (this._needRender) {
                    var l = this._layoutManager.GetMainRunningLayout();
                    e.Start();
                    var n = this.IsDebug();
                    n && b.StartMeasuringTime();
                    this._needRender = !1;
                    var q = null;
                    h && (q = c.GetGPUFrameTimingsBuffer().AddTimeElapsedQuery(), e.StartQuery(q));
                    h = null;
                    g && (h = e.StartFrameTiming(2 * (1 + l.GetLayerCount())), e.WriteTimestamp(0));
                    this.Uses3DFeatures() && "low" === c.GetCurrentFullscreenScalingQuality() ? e.SetFixedSizeDepthBuffer(c.GetDrawWidth(), c.GetDrawHeight()) : e.SetAutoSizeDepthBuffer();
                    this._Render(this.GetRenderer(), l);
                    q && e.EndQuery(q);
                    g && (e.WriteTimestamp(1), this._canvasManager._AddWebGPUFrameTiming(h));
                    e.Finish();
                    n && (b.AddDrawCallsTime(), b.UpdateInspectHighlight());
                    c && c._MaybeTakeSnapshot()
                } else e.IncrementFrameNumber()
            }
        }
        _Render(c, e) {
            c.SetTextureFillMode();
            c.SetAlphaBlend();
            c.SetColorRgba(1, 1, 1, 1);
            c.SetRenderTarget(null);
            c.SetTexture(null);
            c.SetDepthEnabled(this.Uses3DFeatures());
            e.Draw(c)
        }
        Trigger(c, e, g) {
            if (!this._hasStarted) return !1;
            var h = !this._isInTick && !this._eventSheetManager.IsInTrigger();
            let l = 0;
            h && (l = performance.now());
            const n = this.IsDebug();
            n && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._Trigger(this._layoutManager,
                c, e, g);
            h && (h = performance.now() - l, this._mainThreadTimeCounter += h, n && b.AddTriggersTime(h));
            n && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugTrigger(c, e, g) {
            if (!this.IsDebug()) return this.Trigger(c, e, g);
            if (this.HitBreakpoint()) throw Error("called DebugTrigger() while stopped on breakpoint");
            if (!this._isInTick && !this._eventSheetManager.IsInTrigger()) throw Error("called DebugTrigger() outside of event code - use TriggerAsync() instead");
            return this._eventSheetManager._DebugTrigger(this._layoutManager, c, e,
                g)
        }
        async TriggerAsync(c, e, g) {
            if (!this.IsDebugging()) return this.Trigger(c, e, g);
            if (!this._hasStarted) return !1;
            if (this.HitBreakpoint()) return this._eventSheetManager.QueueDebugTrigger(c, e, g);
            if (!this.GetMainRunningLayout()) return this._eventSheetManager.QueueTrigger(c, e, g);
            const h = performance.now();
            c = this._eventSheetManager._DebugTrigger(this._layoutManager, c, e, g);
            for (e = c.next(); !e.done;) await this.DebugBreak(e.value), e = c.next();
            this.IsSuspended() || this._eventSheetManager.IsInTrigger() || (await this._eventSheetManager.RunQueuedDebugTriggersAsync(),
                this._hasStartedTicking && !this._isInTick && this._RequestAnimationFrame());
            this._mainThreadTimeCounter += performance.now() - h;
            return e.value
        }
        FastTrigger(c, e, g) {
            const h = this.IsDebug();
            h && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._FastTrigger(this._layoutManager, c, e, g);
            h && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugFastTrigger(c, e, g) {
            return this._eventSheetManager._DebugFastTrigger(this._layoutManager, c, e, g)
        }
        ScheduleTriggers(c) {
            return this._scheduleTriggersThrottle.Add(c)
        }
        PushCurrentLayout(c) {
            this._currentLayoutStack.push(c)
        }
        PopCurrentLayout() {
            if (!this._currentLayoutStack.length) throw Error("layout stack empty");
            this._currentLayoutStack.pop()
        }
        GetCurrentLayout() {
            return this._currentLayoutStack.length ? this._currentLayoutStack[this._currentLayoutStack.length - 1] : this.GetMainRunningLayout()
        }
        GetDt(c) {
            return c && -1 !== c.GetTimeScale() ? this._dt1 * c.GetTimeScale() : this._dt
        }
        _GetDtFast() {
            return this._dt
        }
        GetDt1() {
            return this._dt1
        }
        GetTimeScale() {
            return this._timeScale
        }
        SetTimeScale(c) {
            if (isNaN(c) || 0 > c) c = 0;
            this._timeScale = c
        }
        SetMinimumFramerate(c) {
            this._minimumFramerate = f.clamp(c, 1, 120)
        }
        GetMinimumFramerate() {
            return this._minimumFramerate
        }
        GetFPS() {
            return this._fps
        }
        GetMainThreadTime() {
            return this._mainThreadTime
        }
        GetStartTime() {
            return this._startTime
        }
        GetGameTime() {
            return this._gameTime.Get()
        }
        GetGameTimeRaw() {
            return this._gameTimeRaw.Get()
        }
        GetWallTime() {
            return this._wallTime.Get()
        }
        GetTickCount() {
            return this._tickCount
        }
        GetTickCountNoSave() {
            return this._tickCountNoSave
        }
        IncrementExecCount() {
            ++this._execCount
        }
        GetExecCount() {
            return this._execCount
        }
        GetObjectCount() {
            return this._objectCount
        }
        GetProjectName() {
            return this._projectName
        }
        GetProjectVersion() {
            return this._projectVersion
        }
        GetProjectUniqueId() {
            return this._projectUniqueId
        }
        GetAppId() {
            return this._appId
        }
        GetInstanceByUID(c) {
            if (this._isLoadingState) throw Error("cannot call while loading state - wait until afterload event");
            return this._instancesByUid.get(c) || null
        }
        _RefreshUidMap() {
            this._instancesByUid.clear();
            for (const c of this._allObjectClasses)
                if (!c.IsFamily())
                    for (const e of c.GetInstances()) this._instancesByUid.set(e.GetUID(), e)
        }
        IsPreview() {
            return "preview" === this._exportType
        }
        IsDebug() {
            return this._isDebug
        }
        GetExportType() {
            return this._exportType
        }
        IsCordova() {
            return "cordova" === this._exportType
        }
        IsAndroidWebView() {
            return "Android" === f.Platform.OS && ("cordova" === this._exportType || "playable-ad" === this._exportType || "instant-games" ===
                this._exportType)
        }
        IsiOSCordova() {
            return this._isiOSCordova
        }
        IsiOSWebView() {
            return this._isiOSWebView
        }
        GetCollisionEngine() {
            return this._collisionEngine
        }
        GetSolidBehavior() {
            return this._pluginManager.GetSolidBehavior()
        }
        GetJumpthruBehavior() {
            return this._pluginManager.GetJumpthruBehavior()
        }
        Uses3DFeatures() {
            return this._uses3dFeatures
        }
        IsLayoutFirstTick() {
            return this._isLayoutFirstTick
        }
        SetPixelRoundingEnabled(c) {
            c = !!c;
            this._isPixelRoundingEnabled !== c && (this._isPixelRoundingEnabled = c, this.GetLayoutManager().SetAllLayerMVChanged(),
                this.UpdateRender())
        }
        IsPixelRoundingEnabled() {
            return this._isPixelRoundingEnabled
        }
        SaveToSlot(c) {
            this._saveToSlotName = c
        }
        LoadFromSlot(c) {
            this._loadFromSlotName = c
        }
        LoadFromJsonString(c) {
            this._loadFromJson = c
        }
        GetLastSaveJsonString() {
            return this._lastSaveJson
        }
        _NeedsHandleSaveOrLoad() {
            return !(!this._saveToSlotName && !this._loadFromSlotName && null === this._loadFromJson)
        }
        async _HandleSaveOrLoad() {
            this._saveToSlotName && (this.FlushPendingInstances(), await this._DoSaveToSlot(this._saveToSlotName), this._ClearSaveOrLoad());
            this._loadFromSlotName && (await this._DoLoadFromSlot(this._loadFromSlotName), this._ClearSaveOrLoad(), this.IsDebug() && b.StepIfPausedInDebugger());
            if (null !== this._loadFromJson) {
                this.FlushPendingInstances();
                try {
                    await this._DoLoadFromJsonString(this._loadFromJson), this._lastSaveJson = this._loadFromJson, await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadComplete, null), this._lastSaveJson = ""
                } catch (c) {
                    console.error("[Construct 3] Failed to load state from JSON string: ", c), await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadFailed,
                        null)
                }
                this._ClearSaveOrLoad()
            }
        }
        _ClearSaveOrLoad() {
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null
        }
        _GetProjectStorage() {
            this._projectStorage || (this._projectStorage = localforage.createInstance({
                name: "c3-localstorage-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._projectStorage
        }
        _GetSavegamesStorage() {
            this._savegamesStorage || (this._savegamesStorage = localforage.createInstance({
                name: "c3-savegames-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._savegamesStorage
        }
        async _DoSaveToSlot(c) {
            const e = await this._SaveToJsonString();
            try {
                await this._GetSavegamesStorage().setItem(c, e), console.log("[Construct 3] Saved state to storage (" + e.length + " chars)"), this._lastSaveJson = e, await this.TriggerAsync(f.Plugins.System.Cnds.OnSaveComplete, null), this._lastSaveJson = ""
            } catch (g) {
                console.error("[Construct 3] Failed to save state to storage: ", g), await this.TriggerAsync(f.Plugins.System.Cnds.OnSaveFailed, null)
            }
        }
        async _DoLoadFromSlot(c) {
            try {
                const e =
                    await this._GetSavegamesStorage().getItem(c);
                if (!e) throw Error("empty slot");
                console.log("[Construct 3] Loaded state from storage (" + e.length + " chars)");
                await this._DoLoadFromJsonString(e);
                this._lastSaveJson = e;
                await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadComplete, null);
                this._lastSaveJson = ""
            } catch (e) {
                console.error("[Construct 3] Failed to load state from storage: ", e), await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadFailed, null)
            }
        }
        async _SaveToJsonString() {
            const c = {
                c3save: !0,
                version: 1,
                rt: {
                    time: this.GetGameTime(),
                    timeRaw: this.GetGameTimeRaw(),
                    walltime: this.GetWallTime(),
                    timescale: this.GetTimeScale(),
                    tickcount: this.GetTickCount(),
                    execcount: this.GetExecCount(),
                    next_uid: this._nextUid,
                    running_layout: this.GetMainRunningLayout().GetSID(),
                    start_time_offset: Date.now() - this._startTime
                },
                types: {},
                layouts: {},
                events: this._eventSheetManager._SaveToJson(),
                timelines: this._timelineManager._SaveToJson(),
                user_script_data: null
            };
            for (var e of this._allObjectClasses) e.IsFamily() || e.HasNoSaveBehavior() || (c.types[e.GetSID().toString()] =
                e._SaveToJson());
            for (const g of this._layoutManager.GetAllLayouts()) c.layouts[g.GetSID().toString()] = g._SaveToJson();
            e = this._CreateUserScriptEvent("save");
            e.saveData = null;
            await this.DispatchUserScriptEventAsyncWait(e);
            c.user_script_data = e.saveData;
            return JSON.stringify(c)
        }
        IsLoadingState() {
            return this._isLoadingState
        }
        async _DoLoadFromJsonString(c) {
            var e = this.GetLayoutManager();
            c = JSON.parse(c);
            if (c.c2save) throw Error("C2 saves are incompatible with C3 runtime");
            if (!c.c3save) throw Error("not valid C3 save data");
            if (1 < c.version) throw Error("C3 save data from future version");
            this._dispatcher.dispatchEvent(f.New(f.Event, "beforeload"));
            for (var g of this.allInstances()) g._OnBeforeLoad();
            this._isLoadingState = !0;
            g = c.rt;
            this._gameTime.Set(g.time);
            g.hasOwnProperty("timeRaw") && this._gameTimeRaw.Set(g.timeRaw);
            this._wallTime.Set(g.walltime);
            this._timeScale = g.timescale;
            this._tickCount = g.tickcount;
            this._execCount = g.execcount;
            this._startTime = Date.now() - g.start_time_offset;
            var h = g.running_layout;
            if (h !== this.GetMainRunningLayout().GetSID())
                if (h =
                    e.GetLayoutBySID(h)) await this._DoChangeLayout(h);
                else return;
            for (const [l, n] of Object.entries(c.types)) h = parseInt(l, 10), h = this.GetObjectClassBySID(h), !h || h.IsFamily() || h.HasNoSaveBehavior() || h._LoadFromJson(n);
            this.FlushPendingInstances();
            this._RefreshUidMap();
            this._isLoadingState = !1;
            this._nextUid = g.next_uid;
            for (const [l, n] of Object.entries(c.layouts)) g = parseInt(l, 10), (g = e.GetLayoutBySID(g)) && g._LoadFromJson(n);
            this._eventSheetManager._LoadFromJson(c.events);
            for (const l of this._allObjectClasses)
                if (!l.IsFamily() &&
                    l.IsInContainer())
                    for (const n of l.GetInstances()) {
                        g = n.GetIID();
                        for (const q of l.GetContainer().objectTypes())
                            if (q !== l) {
                                h = q.GetInstances();
                                if (0 > g || g >= h.length) throw Error("missing sibling instance");
                                n._AddSibling(h[g])
                            }
                    }
            this._timelineManager._LoadFromJson(c.timelines);
            e.SetAllLayerProjectionChanged();
            e.SetAllLayerMVChanged();
            this._dispatcher.dispatchEvent(f.New(f.Event, "afterload"));
            e = this._CreateUserScriptEvent("load");
            e.saveData = c.user_script_data;
            await this.DispatchUserScriptEventAsyncWait(e);
            this.UpdateRender()
        }
        async AddJobWorkerScripts(c) {
            c = (await Promise.all(c.map(e => this._assetManager.FetchBlob(e)))).map(e => URL.createObjectURL(e));
            this._jobScheduler.ImportScriptsToJobWorkers(c)
        }
        AddJobWorkerBlob(c, e) {
            this._jobScheduler.SendBlobToJobWorkers(c, e)
        }
        AddJobWorkerBuffer(c, e) {
            this._jobScheduler.SendBufferToJobWorkers(c, e)
        }
        AddJob(c, e, g) {
            return this._jobScheduler.AddJob(c, e, g)
        }
        BroadcastJob(c, e, g) {
            return this._jobScheduler.BroadcastJob(c, e, g)
        }
        InvokeDownload(c, e) {
            this.PostComponentMessageToDOM("runtime",
                "invoke-download", {
                    url: c,
                    filename: e
                })
        }
        async RasterSvgImage(c, e, g, h, l, n) {
            h = h || e;
            l = l || g;
            if (this.IsInWorker()) return (await this.PostComponentMessageToDOMAsync("runtime", "raster-svg-image", {
                blob: c,
                imageWidth: e,
                imageHeight: g,
                surfaceWidth: h,
                surfaceHeight: l,
                imageBitmapOpts: n
            })).imageBitmap;
            c = await self.C3_RasterSvgImageBlob(c, e, g, h, l);
            return n ? await self.createImageBitmap(c, n) : c
        }
        async GetSvgImageSize(c) {
            return this.IsInWorker() ? await this.PostComponentMessageToDOMAsync("runtime", "get-svg-image-size", {
                    blob: c
                }) :
                await self.C3_GetSvgImageSize(c)
        }
        RequestDeviceOrientationEvent() {
            this._didRequestDeviceOrientationEvent || (this._didRequestDeviceOrientationEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-orientation"))
        }
        RequestDeviceMotionEvent() {
            this._didRequestDeviceMotionEvent || (this._didRequestDeviceMotionEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-motion"))
        }
        Random() {
            return this._randomNumberCallback()
        }
        SetRandomNumberGeneratorCallback(c) {
            this._randomNumberCallback = c
        }
        _GetRemotePreviewStatusInfo() {
            const c =
                this.GetWebGLRenderer();
            return {
                fps: this.GetFPS(),
                cpu: this.GetMainThreadTime(),
                gpu: this.GetGPUUtilisation(),
                layout: this.GetMainRunningLayout() ? this.GetMainRunningLayout().GetName() : "",
                renderer: c ? c.GetUnmaskedRenderer() : "<unavailable>"
            }
        }
        HitBreakpoint() {
            return this.IsDebug() ? b.HitBreakpoint() : !1
        }
        DebugBreak(c) {
            return this.IsDebugging() ? b.DebugBreak(c) : Promise.resolve()
        }
        DebugBreakNext() {
            return this.IsDebugging() ? b.BreakNext() : !1
        }
        SetDebugBreakpointsEnabled(c) {
            this._breakpointsEnabled = !!c;
            this._UpdateDebuggingFlag()
        }
        AreDebugBreakpointsEnabled() {
            return this._breakpointsEnabled
        }
        IsDebugging() {
            return this._isDebugging
        }
        SetDebuggingEnabled(c) {
            c ?
                this._debuggingDisabled-- : this._debuggingDisabled++;
            this._UpdateDebuggingFlag()
        }
        _UpdateDebuggingFlag() {
            this._isDebugging = this.IsDebug() && this._breakpointsEnabled && 0 === this._debuggingDisabled
        }
        IsCPUProfiling() {
            return this.IsDebug() && b.IsCPUProfiling()
        }
        IsGPUProfiling() {
            return this.IsDebug() && this.GetRenderer().SupportsGPUProfiling() && b.IsGPUProfiling()
        }
        async DebugIterateAndBreak(c) {
            if (c)
                for (const e of c) await this.DebugBreak(e)
        }
        DebugFireGeneratorEventAndBreak(c) {
            return this.DebugIterateAndBreak(this._dispatcher.dispatchGeneratorEvent(c))
        }
        _InvokeFunctionFromJS(c) {
            return this._eventSheetManager._InvokeFunctionFromJS(c.name,
                c.params)
        }
        GetIRuntime() {
            return this._iRuntime
        }
        _CreateUserScriptEvent(c) {
            c = f.New(f.Event, c, !1);
            c.runtime = this._iRuntime;
            return c
        }
        _InitScriptInterfaces() {
            var c = {};
            for (const e of this._allObjectClasses) c[e.GetJsPropName()] = {
                value: e.GetIObjectClass(),
                enumerable: !0,
                writable: !1
            };
            c = Object.create(Object.prototype, c);
            this._iRuntime = new self.IRuntime(this, c);
            this._userScriptEventObjects = {
                tick: this._CreateUserScriptEvent("tick")
            }
        }
        _InitGlobalVariableScriptInterface() {
            const c = {};
            for (const e of this.GetEventSheetManager().GetAllGlobalVariables()) c[e.GetJsPropName()] =
                e._GetScriptInterfaceDescriptor();
            this._iRuntime._InitGlobalVars(c)
        }
        _GetCommonScriptInterfaces() {
            return this._commonScriptInterfaces
        }
        _MapScriptInterface(c, e) {
            this._interfaceMap.set(c, e)
        }
        _UnwrapScriptInterface(c) {
            return this._interfaceMap.get(c)
        }
        _UnwrapIObjectClass(c) {
            if (!(c instanceof self.IObjectClass)) throw new TypeError("expected IObjectClass");
            c = this._UnwrapScriptInterface(c);
            if (!(c && c instanceof f.ObjectClass)) throw Error("invalid IObjectClass");
            return c
        }
        _UnwrapIWorldInstance(c) {
            if (!(c instanceof self.IWorldInstance)) throw new TypeError("expected IWorldInstance");
            c = this._UnwrapScriptInterface(c);
            if (!(c && c instanceof f.Instance)) throw Error("invalid IInstance");
            return c
        }
    };
    self.C3_CreateRuntime = f.Runtime.Create;
    self.C3_InitRuntime = (c, e) => c.Init(e)
} {
    "use strict";
    const f = self.C3;
    f.JobSchedulerRuntime = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._jobPromises = new Map;
            this._nextJobId = 0;
            this._inputPort = a.inputPort;
            a.outputPort.onmessage = d => this._OnJobWorkerMessage(d);
            this._maxNumWorkers = a.maxNumWorkers;
            this._jobWorkerCount = 1;
            this._hadErrorCreatingWorker = this._isCreatingWorker = !1
        }
        async Init() {}
        ImportScriptsToJobWorkers(b) {
            this._inputPort.postMessage({
                type: "_import_scripts",
                scripts: b
            })
        }
        SendBlobToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_blob",
                blob: b,
                id: a
            })
        }
        SendBufferToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_buffer",
                buffer: b,
                id: a
            }, [b])
        }
        AddJob(b, a, d, c, e) {
            d || (d = []);
            const g = this._nextJobId++;
            b = {
                type: b,
                isBroadcast: !1,
                jobId: g,
                params: a,
                transferables: d
            };
            a = new Promise((h, l) => {
                this._jobPromises.set(g, {
                    resolve: h,
                    progress: c,
                    reject: l,
                    cancelled: !1
                })
            });
            e && e.SetAction(() => this._CancelJob(g));
            this._inputPort.postMessage(b, d);
            this._MaybeCreateExtraWorker();
            return a
        }
        BroadcastJob(b, a, d) {
            d || (d = []);
            const c = this._nextJobId++;
            this._inputPort.postMessage({
                type: b,
                isBroadcast: !0,
                jobId: c,
                params: a,
                transferables: d
            }, d)
        }
        _CancelJob(b) {
            const a = this._jobPromises.get(b);
            a && (a.cancelled = !0, a.resolve = null, a.progress = null, a.reject = null, this._inputPort.postMessage({
                type: "_cancel",
                jobId: b
            }))
        }
        _OnJobWorkerMessage(b) {
            b = b.data;
            const a = b.type,
                d = b.jobId;
            switch (a) {
                case "result":
                    this._OnJobResult(d, b.result);
                    break;
                case "progress":
                    this._OnJobProgress(d, b.progress);
                    break;
                case "error":
                    this._OnJobError(d, b.error);
                    break;
                case "ready":
                    this._OnJobWorkerReady();
                    break;
                default:
                    throw Error(`unknown message from worker '${a}'`);
            }
        }
        _OnJobResult(b, a) {
            const d = this._jobPromises.get(b);
            if (!d) throw Error("invalid job ID");
            d.cancelled || d.resolve(a);
            this._jobPromises.delete(b)
        }
        _OnJobProgress(b, a) {
            b = this._jobPromises.get(b);
            if (!b) throw Error("invalid job ID");
            !b.cancelled && b.progress && b.progress(a)
        }
        _OnJobError(b, a) {
            const d = this._jobPromises.get(b);
            if (!d) throw Error("invalid job ID");
            d.cancelled || d.reject(a);
            this._jobPromises.delete(b)
        }
        _OnJobWorkerReady() {
            this._isCreatingWorker && (this._isCreatingWorker = !1, this._jobWorkerCount++, this._jobWorkerCount <
                this._maxNumWorkers ? this._MaybeCreateExtraWorker() : this._inputPort.postMessage({
                    type: "_no_more_workers"
                }))
        }
        async _MaybeCreateExtraWorker() {
            if (!(this._jobWorkerCount >= this._maxNumWorkers || this._isCreatingWorker || this._hadErrorCreatingWorker || this._jobPromises.size <= this._jobWorkerCount)) try {
                this._isCreatingWorker = !0, (await this._runtime.PostComponentMessageToDOMAsync("runtime", "create-job-worker")).outputPort.onmessage = b => this._OnJobWorkerMessage(b)
            } catch (b) {
                this._hadErrorCreatingWorker = !0, this._isCreatingWorker = !1, console.error(`[Construct 3] Failed to create job worker; stopping creating any more (created ${this._jobWorkerCount} so far)`, b)
            }
        }
    }
}
self.C3_Shaders = {}; {
    "use strict";
    const f = self.C3;
    let b = null,
        a = "",
        d = "",
        c = [],
        e = "",
        g = "",
        h = "";
    const l = f.New(f.ArrayStack);

    function n(q, y) {
        q = q[1];
        y = y[1];
        if ("number" === typeof q && "number" === typeof y) return q - y;
        q = "" + q;
        y = "" + y;
        return q < y ? -1 : q > y ? 1 : 0
    }
    f.Plugins.System = class extends f.SDKPluginBase {
        constructor(q) {
            super(q);
            this._loopStack = this._runtime.GetEventSheetManager().GetLoopStack();
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._imagesLoadingComplete = this._imagesLoadingTotal = 0;
            this._functionMaps =
                new Map
        }
        Release() {
            super.Release()
        }
        UpdateRender() {
            this._runtime.UpdateRender()
        }
        Trigger(q) {
            this._runtime.Trigger(q, null, null)
        }
        GetRegex(q, y) {
            b && q === a && y === d || (b = new RegExp(q, y), a = q, d = y);
            b.lastIndex = 0;
            return b
        }
        GetRegexMatches(q, y, w) {
            if (q === e && y === g && w === h) return c;
            const u = this.GetRegex(y, w);
            c = q.match(u);
            e = q;
            g = y;
            h = w;
            return c
        }
        async _LoadTexturesForObjectClasses(q, y) {
            if (y.length) {
                this._imagesLoadingTotal += y.length;
                var w = [];
                for (const u of y) w.push(q.MaybeLoadTexturesFor(u));
                await f.PromiseAllWithProgress(w,
                    () => {
                        this._imagesLoadingComplete++
                    });
                this._imagesLoadingComplete++;
                this._imagesLoadingComplete === this._imagesLoadingTotal && (this._runtime.Trigger(f.Plugins.System.Cnds.OnImageLoadingComplete, null, null), this._imagesLoadingTotal = this._imagesLoadingComplete = 0)
            }
        }
        _UnloadTexturesForObjectClasses(q, y) {
            for (const w of y) 0 === w.GetInstanceCount() && q.MaybeUnloadTexturesFor(w)
        }
        _GetForEachStack() {
            return l
        }
        _Repeat(q) {
            var y = this._runtime.GetEventSheetManager();
            const w = y.GetEventStack(),
                u = w.GetCurrentStackFrame(),
                p = u.GetCurrentEvent(),
                x = p.GetSolModifiers();
            var t = u.IsSolModifierAfterCnds();
            const r = w.Push(p),
                B = y.GetLoopStack(),
                z = B.Push();
            z.SetEnd(q);
            if (t)
                for (t = 0; t < q && !z.IsStopped(); ++t) y.PushCopySol(x), z.SetIndex(t), p.Retrigger(u, r), y.PopSol(x);
            else
                for (y = 0; y < q && !z.IsStopped(); ++y) z.SetIndex(y), p.Retrigger(u, r);
            w.Pop();
            B.Pop();
            return !1
        }* _DebugRepeat(q) {
            var y = this._runtime.GetEventSheetManager();
            const w = y.GetEventStack(),
                u = w.GetCurrentStackFrame(),
                p = u.GetCurrentEvent(),
                x = p.GetSolModifiers();
            var t = u.IsSolModifierAfterCnds();
            const r = w.Push(p),
                B = y.GetLoopStack(),
                z = B.Push();
            z.SetEnd(q);
            if (t)
                for (t = 0; t < q && !z.IsStopped(); ++t) y.PushCopySol(x), z.SetIndex(t), yield* p.DebugRetrigger(u, r), y.PopSol(x);
            else
                for (y = 0; y < q && !z.IsStopped(); ++y) z.SetIndex(y), yield* p.DebugRetrigger(u, r);
            w.Pop();
            B.Pop();
            return !1
        }
        _While() {
            var q = this._runtime.GetEventSheetManager();
            const y = q.GetEventStack(),
                w = y.GetCurrentStackFrame(),
                u = w.GetCurrentEvent(),
                p = u.GetSolModifiers();
            var x = w.IsSolModifierAfterCnds();
            const t = y.Push(u),
                r = q.GetLoopStack(),
                B = r.Push();
            if (x)
                for (x = 0; !B.IsStopped(); ++x) q.PushCopySol(p), B.SetIndex(x), u.Retrigger(w, t) || B.Stop(), q.PopSol(p);
            else
                for (q = 0; !B.IsStopped(); ++q) B.SetIndex(q), u.Retrigger(w, t) || B.Stop();
            y.Pop();
            r.Pop();
            return !1
        }* _DebugWhile() {
            var q = this._runtime.GetEventSheetManager();
            const y = q.GetEventStack(),
                w = y.GetCurrentStackFrame(),
                u = w.GetCurrentEvent(),
                p = u.GetSolModifiers();
            var x = w.IsSolModifierAfterCnds();
            const t = y.Push(u),
                r = q.GetLoopStack(),
                B = r.Push();
            if (x)
                for (x = 0; !B.IsStopped(); ++x) q.PushCopySol(p), B.SetIndex(x), (yield* u.DebugRetrigger(w,
                    t)) || B.Stop(), q.PopSol(p);
            else
                for (q = 0; !B.IsStopped(); ++q) B.SetIndex(q), (yield* u.DebugRetrigger(w, t)) || B.Stop();
            y.Pop();
            r.Pop();
            return !1
        }
        _For(q, y, w) {
            var u = this._runtime.GetEventSheetManager();
            const p = u.GetEventStack(),
                x = p.GetCurrentStackFrame(),
                t = x.GetCurrentEvent(),
                r = t.GetSolModifiers(),
                B = x.IsSolModifierAfterCnds(),
                z = p.Push(t),
                C = u.GetLoopStack(),
                F = C.Push();
            F.SetName(q);
            F.SetEnd(w);
            if (w < y)
                if (B)
                    for (q = y; q >= w && !F.IsStopped(); --q) u.PushCopySol(r), F.SetIndex(q), t.Retrigger(x, z), u.PopSol(r);
                else
                    for (u =
                        y; u >= w && !F.IsStopped(); --u) F.SetIndex(u), t.Retrigger(x, z);
            else if (B)
                for (q = y; q <= w && !F.IsStopped(); ++q) u.PushCopySol(r), F.SetIndex(q), t.Retrigger(x, z), u.PopSol(r);
            else
                for (u = y; u <= w && !F.IsStopped(); ++u) F.SetIndex(u), t.Retrigger(x, z);
            p.Pop();
            C.Pop();
            return !1
        }* _DebugFor(q, y, w) {
            var u = this._runtime.GetEventSheetManager();
            const p = u.GetEventStack(),
                x = p.GetCurrentStackFrame(),
                t = x.GetCurrentEvent(),
                r = t.GetSolModifiers(),
                B = x.IsSolModifierAfterCnds(),
                z = p.Push(t),
                C = u.GetLoopStack(),
                F = C.Push();
            F.SetName(q);
            F.SetEnd(w);
            if (w < y)
                if (B)
                    for (q = y; q >= w && !F.IsStopped(); --q) u.PushCopySol(r), F.SetIndex(q), yield* t.DebugRetrigger(x, z), u.PopSol(r);
                else
                    for (u = y; u >= w && !F.IsStopped(); --u) F.SetIndex(u), yield* t.DebugRetrigger(x, z);
            else if (B)
                for (q = y; q <= w && !F.IsStopped(); ++q) u.PushCopySol(r), F.SetIndex(q), yield* t.DebugRetrigger(x, z), u.PopSol(r);
            else
                for (u = y; u <= w && !F.IsStopped(); ++u) F.SetIndex(u), yield* t.DebugRetrigger(x, z);
            p.Pop();
            C.Pop();
            return !1
        }
        _ForEach(q) {
            var y = this._runtime.GetEventSheetManager();
            const w = y.GetEventStack(),
                u = w.GetCurrentStackFrame(),
                p = u.GetCurrentEvent(),
                x = p.GetSolModifiers();
            var t = u.IsSolModifierAfterCnds();
            const r = w.Push(p),
                B = y.GetLoopStack(),
                z = B.Push(),
                C = q.IsInContainer(),
                F = q.GetCurrentSol(),
                J = l.Push();
            f.shallowAssignArray(J, F.GetInstances());
            z.SetEnd(J.length);
            if (t)
                for (let G = 0, I = J.length; G < I && !z.IsStopped(); ++G) y.PushCopySol(x), t = J[G], q.GetCurrentSol().SetSinglePicked(t), C && t.SetSiblingsSinglePicked(), z.SetIndex(G), p.Retrigger(u, r), y.PopSol(x);
            else {
                F._SetSelectAll(!1);
                q = F._GetOwnInstances();
                f.clearArray(q);
                q.push(null);
                for (let G =
                        0, I = J.length; G < I && !z.IsStopped(); ++G) y = J[G], q[0] = y, C && y.SetSiblingsSinglePicked(), z.SetIndex(G), p.Retrigger(u, r)
            }
            w.Pop();
            B.Pop();
            f.clearArray(J);
            l.Pop();
            return !1
        }* _DebugForEach(q) {
            var y = this._runtime.GetEventSheetManager();
            const w = y.GetEventStack(),
                u = w.GetCurrentStackFrame(),
                p = u.GetCurrentEvent(),
                x = p.GetSolModifiers();
            var t = u.IsSolModifierAfterCnds();
            const r = w.Push(p),
                B = y.GetLoopStack(),
                z = B.Push(),
                C = q.IsInContainer(),
                F = q.GetCurrentSol(),
                J = l.Push();
            f.shallowAssignArray(J, F.GetInstances());
            z.SetEnd(J.length);
            if (t)
                for (let G = 0, I = J.length; G < I && !z.IsStopped(); ++G) y.PushCopySol(x), t = J[G], q.GetCurrentSol().SetSinglePicked(t), C && t.SetSiblingsSinglePicked(), z.SetIndex(G), yield* p.DebugRetrigger(u, r), y.PopSol(x);
            else {
                F._SetSelectAll(!1);
                q = F._GetOwnInstances();
                f.clearArray(q);
                q.push(null);
                for (let G = 0, I = J.length; G < I && !z.IsStopped(); ++G) y = J[G], q[0] = y, C && y.SetSiblingsSinglePicked(), z.SetIndex(G), yield* p.DebugRetrigger(u, r)
            }
            w.Pop();
            B.Pop();
            f.clearArray(J);
            l.Pop();
            return !1
        }
        _ForEachOrdered(q, y) {
            var w = this._runtime.GetEventSheetManager();
            const u = w.GetEventStack(),
                p = w.GetCurrentCondition(),
                x = u.GetCurrentStackFrame(),
                t = x.GetCurrentEvent(),
                r = t.GetSolModifiers(),
                B = x.IsSolModifierAfterCnds(),
                z = u.Push(t),
                C = w.GetLoopStack(),
                F = C.Push(),
                J = q.IsInContainer(),
                G = q.GetCurrentSol(),
                I = l.Push();
            f.clearArray(I);
            const L = G.GetInstances();
            F.SetEnd(L.length);
            for (let N = 0, S = L.length; N < S; ++N) I.push([L[N], p.ReevaluateParameter(1, N)]);
            I.sort(n);
            1 === y && I.reverse();
            if (B)
                for (let N = 0, S = I.length; N < S && !F.IsStopped(); ++N) w.PushCopySol(r), y = I[N][0], q.GetCurrentSol().SetSinglePicked(y),
                    J && y.SetSiblingsSinglePicked(), F.SetIndex(N), t.Retrigger(x, z), w.PopSol(r);
            else {
                G._SetSelectAll(!1);
                q = G._GetOwnInstances();
                f.clearArray(q);
                q.push(null);
                for (let N = 0, S = I.length; N < S && !F.IsStopped(); ++N) w = I[N][0], q[0] = w, J && w.SetSiblingsSinglePicked(), F.SetIndex(N), t.Retrigger(x, z)
            }
            u.Pop();
            C.Pop();
            f.clearArray(I);
            l.Pop();
            return !1
        }* _DebugForEachOrdered(q, y) {
            var w = this._runtime.GetEventSheetManager();
            const u = w.GetEventStack(),
                p = w.GetCurrentCondition(),
                x = u.GetCurrentStackFrame(),
                t = x.GetCurrentEvent(),
                r = t.GetSolModifiers(),
                B = x.IsSolModifierAfterCnds(),
                z = u.Push(t),
                C = w.GetLoopStack(),
                F = C.Push(),
                J = q.IsInContainer(),
                G = q.GetCurrentSol(),
                I = l.Push();
            f.clearArray(I);
            const L = G.GetInstances();
            F.SetEnd(L.length);
            for (let N = 0, S = L.length; N < S; ++N) I.push([L[N], p.ReevaluateParameter(1, N)]);
            I.sort(n);
            1 === y && I.reverse();
            if (B)
                for (let N = 0, S = I.length; N < S && !F.IsStopped(); ++N) w.PushCopySol(r), y = I[N][0], q.GetCurrentSol().SetSinglePicked(y), J && y.SetSiblingsSinglePicked(), F.SetIndex(N), yield* t.DebugRetrigger(x, z), w.PopSol(r);
            else {
                G._SetSelectAll(!1);
                q = G._GetOwnInstances();
                f.clearArray(q);
                q.push(null);
                for (let N = 0, S = I.length; N < S && !F.IsStopped(); ++N) w = I[N][0], q[0] = w, J && w.SetSiblingsSinglePicked(), F.SetIndex(N), yield* t.DebugRetrigger(x, z)
            }
            u.Pop();
            C.Pop();
            f.clearArray(I);
            l.Pop();
            return !1
        }
        _GetFunctionMap(q, y) {
            let w = this._functionMaps.get(q);
            if (w) return w;
            if (!y) return null;
            w = {
                defaultFunc: null,
                strMap: new Map
            };
            this._functionMaps.set(q, w);
            return w
        }
        _DoCallMappedFunction(q, y, w, u, p) {
            y.GetEventBlock().RunAsMappedFunctionCall(w);
            u && q.PopSol(p)
        }* _DebugDoCallMappedFunction(q,
            y, w, u, p) {
            yield* y.GetEventBlock().DebugRunAsMappedFunctionCall(w);
            u && q.PopSol(p)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.System.Type = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        OnCreate() {}
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.System.Instance = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._runtime = this._inst.GetRuntime()
        }
        Release() {
            this._runtime = this._sdkType = this._objectClass = this._inst = null
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [];
    f.Plugins.System.Cnds = {
        EveryTick() {
            return !0
        },
        OnLayoutStart() {
            return !0
        },
        OnLayoutEnd() {
            return !0
        },
        OnSuspend() {
            return !0
        },
        OnResume() {
            return !0
        },
        IsSuspended() {
            return this._runtime.IsSuspended()
        },
        Else() {
            const a = this._runtime.GetCurrentEventStackFrame();
            return a.GetElseBranchRan() ? !1 : !a.GetLastEventTrue()
        },
        TriggerOnce() {
            const a = this._runtime.GetCurrentCondition().GetSavedDataMap();
            let d = a.get("TriggerOnce_lastTick");
            "undefined" === typeof d && (d = -1, a.set("TriggerOnce_lastTick", -1));
            const c = this._runtime.GetTickCount();
            a.set("TriggerOnce_lastTick", c);
            return this._runtime.IsLayoutFirstTick() || d !== c - 1
        },
        Every(a) {
            const d = this._runtime.GetCurrentCondition().GetSavedDataMap(),
                c = d.get("Every_lastTime") || 0,
                e = this._runtime.GetGameTime();
            d.has("Every_seconds") || d.set("Every_seconds", a);
            const g = d.get("Every_seconds");
            if (e >= c + g) return d.set("Every_lastTime", c + g), e >= d.get("Every_lastTime") + .04 && d.set("Every_lastTime", e), d.set("Every_seconds", a), !0;
            e < c - .1 && d.set("Every_lastTime", e);
            return !1
        },
        IsGroupActive(a) {
            return (a = this._runtime.GetEventSheetManager().GetEventGroupByName(a)) && a.IsGroupActive()
        },
        IsPreview() {
            return this._runtime.IsPreview()
        },
        IsMobile() {
            return f.Platform.IsMobile
        },
        OnLoadFinished() {
            return !0
        },
        OnCanvasSnapshot() {
            return !0
        },
        EffectsSupported() {
            return !0
        },
        OnSaveComplete() {
            return !0
        },
        OnSaveFailed() {
            return !0
        },
        OnLoadComplete() {
            return !0
        },
        OnLoadFailed() {
            return !0
        },
        ObjectUIDExists(a) {
            return !!this._runtime.GetInstanceByUID(a)
        },
        IsOnPlatform(a) {
            switch (a) {
                case 0:
                    return "browser" === f.Platform.Context;
                case 1:
                    return "iOS" === f.Platform.OS;
                case 2:
                    return "Android" === f.Platform.OS;
                case 8:
                    return "cordova" === f.Platform.Context;
                case 9:
                    return "scirra-arcade" === this._runtime.GetExportType();
                case 10:
                    return "nwjs" === f.Platform.Context;
                case 13:
                    return "windows-uwp" === this._runtime.GetExportType();
                default:
                    return !1
            }
        },
        RegexTest(a, d, c) {
            return this.GetRegex(d, c).test(a)
        },
        Compare(a, d, c) {
            return f.compare(a, d, c)
        },
        CompareBetween(a, d, c) {
            return a >= d && a <= c
        },
        CompareVar(a, d, c) {
            return f.compare(a.GetValue(), d, c)
        },
        CompareBoolVar(a) {
            return !!a.GetValue()
        },
        CompareTime(a, d) {
            const c = this._runtime.GetGameTime();
            return 0 === a ? (a = this._runtime.GetCurrentCondition().GetSavedDataMap(), !a.get("CompareTime_executed") && c >= d ? (a.set("CompareTime_executed", !0), !0) : !1) : f.compare(c, a, d)
        },
        IsNaN(a) {
            return isNaN(a)
        },
        AngleWithin(a, d, c) {
            return f.angleDiff(f.toRadians(a), f.toRadians(c)) <= f.toRadians(d)
        },
        IsClockwiseFrom(a, d) {
            return f.angleClockwise(f.toRadians(a), f.toRadians(d))
        },
        IsBetweenAngles(a, d, c) {
            a = f.toRadians(a);
            d = f.toRadians(d);
            c = f.toRadians(c);
            return f.angleClockwise(c,
                d) ? f.angleClockwise(a, d) && !f.angleClockwise(a, c) : !(!f.angleClockwise(a, d) && f.angleClockwise(a, c))
        },
        IsValueType(a, d) {
            return "number" === typeof a ? 0 === d : 1 === d
        },
        EvaluateExpression(a) {
            return !!a
        },
        PickByComparison(a, d, c, e) {
            if (!a) return !1;
            const g = this._GetForEachStack(),
                h = g.Push(),
                l = a.GetCurrentSol();
            f.shallowAssignArray(h, l.GetInstances());
            l.IsSelectAll() && f.clearArray(l._GetOwnElseInstances());
            const n = this._runtime.GetCurrentCondition();
            let q = 0;
            for (let y = 0, w = h.length; y < w; ++y) {
                const u = h[y];
                h[q] = u;
                d = n.ReevaluateParameter(1,
                    y);
                e = n.ReevaluateParameter(3, y);
                f.compare(d, c, e) ? ++q : l._PushElseInstance(u)
            }
            f.truncateArray(h, q);
            l.SetArrayPicked(h);
            d = !!h.length;
            f.clearArray(h);
            g.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickByEvaluate(a, d) {
            if (!a) return !1;
            const c = this._GetForEachStack(),
                e = c.Push(),
                g = a.GetCurrentSol();
            f.shallowAssignArray(e, g.GetInstances());
            g.IsSelectAll() && f.clearArray(g._GetOwnElseInstances());
            const h = this._runtime.GetCurrentCondition();
            let l = 0;
            for (let n = 0, q = e.length; n < q; ++n) {
                const y = e[n];
                e[l] = y;
                (d = h.ReevaluateParameter(1,
                    n)) ? ++l: g._PushElseInstance(y)
            }
            f.truncateArray(e, l);
            g.SetArrayPicked(e);
            d = !!e.length;
            f.clearArray(e);
            c.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickNth(a, d) {
            if (!a) return !1;
            const c = a.GetCurrentSol(),
                e = c.GetInstances();
            d = Math.floor(d);
            if (d >= e.length) return !1;
            c.PickOne(e[d]);
            a.ApplySolToContainer();
            return !0
        },
        PickRandom(a) {
            if (!a) return !1;
            const d = a.GetCurrentSol(),
                c = d.GetInstances(),
                e = Math.floor(this._runtime.Random() * c.length);
            if (e >= c.length) return !1;
            d.PickOne(c[e]);
            a.ApplySolToContainer();
            return !0
        },
        PickAll(a) {
            if (!a ||
                !a.GetInstanceCount()) return !1;
            a.GetCurrentSol()._SetSelectAll(!0);
            a.ApplySolToContainer();
            return !0
        },
        PickOverlappingPoint(a, d, c) {
            if (!a) return !1;
            const e = a.GetCurrentSol();
            var g = e.GetInstances();
            const h = this._runtime.GetCurrentEvent().IsOrBlock(),
                l = this._runtime.GetCurrentCondition().IsInverted();
            e.IsSelectAll() ? (f.shallowAssignArray(b, g), e.ClearArrays(), e._SetSelectAll(!1)) : h ? (f.shallowAssignArray(b, e._GetOwnElseInstances()), f.clearArray(e._GetOwnElseInstances())) : (f.shallowAssignArray(b, e._GetOwnInstances()),
                f.clearArray(e._GetOwnInstances()));
            for (let n = 0, q = b.length; n < q; ++n) g = b[n], f.xor(g.GetWorldInfo().ContainsPoint(d, c), l) ? e._PushInstance(g) : e._PushElseInstance(g);
            a.ApplySolToContainer();
            return f.xor(!!e._GetOwnInstances().length, l)
        },
        PickLastCreated(a) {
            if (!a) return !1;
            var d = a.IsFamily();
            let c = null;
            const e = this._runtime._GetInstancesPendingCreate();
            for (let g = e.length - 1; 0 <= g; --g) {
                const h = e[g];
                if (d) {
                    if (h.GetObjectClass().BelongsToFamily(a)) {
                        c = h;
                        break
                    }
                } else if (h.GetObjectClass() === a) {
                    c = h;
                    break
                }
            }
            c || (d = a.GetInstances(),
                d.length && (c = d[d.length - 1]));
            if (!c) return !1;
            a.GetCurrentSol().PickOne(c);
            a.ApplySolToContainer();
            return !0
        },
        Repeat(a) {
            return this._runtime.IsDebugging() ? this._DebugRepeat(a) : this._Repeat(a)
        },
        While() {
            return this._runtime.IsDebugging() ? this._DebugWhile() : this._While()
        },
        For(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugFor(a, d, c) : this._For(a, d, c)
        },
        ForEach(a) {
            return this._runtime.IsDebugging() ? this._DebugForEach(a) : this._ForEach(a)
        },
        ForEachOrdered(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugForEachOrdered(a,
                c) : this._ForEachOrdered(a, c)
        },
        LayerVisible(a) {
            return a ? a.IsVisible() : !1
        },
        LayerEmpty(a) {
            return a ? !a.GetInstanceCount() : !1
        },
        LayerCmpOpacity(a, d, c) {
            return a ? f.compare(100 * a.GetOpacity(), d, c) : !1
        },
        OnImageLoadingComplete() {
            return !0
        },
        IsLoadingImages() {
            return 0 < this._imagesLoadingTotal
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(h, l) {
        const n = h[0] - l[0];
        return 0 !== n ? n : h[1] - l[1]
    }

    function a(h, l) {
        return h[1] - l[1]
    }
    const d = [],
        c = [],
        e = f.New(f.Rect),
        g = f.New(f.Color);
    f.Plugins.System.Acts = {
        SetVar(h, l) {
            h.SetValue(l)
        },
        AddVar(h, l) {
            h.IsNumber() && "number" !== typeof l && (l = parseFloat(l));
            h.SetValue(h.GetValue() + l)
        },
        SubVar(h, l) {
            h.IsNumber() && h.SetValue(h.GetValue() - l)
        },
        SetBoolVar(h, l) {
            h.SetValue(!!l)
        },
        ToggleBoolVar(h) {
            h.SetValue(!h.GetValue())
        },
        ResetGlobals() {
            this._runtime.GetEventSheetManager().ResetAllGlobalsToInitialValue()
        },
        CreateObject(h, l, n, q, y) {
            h && l && (n = this._runtime.CreateInstance(h, l, n, q, y)) && (y && l.SortAndAddSceneGraphInstancesByZIndex(n), l = this._runtime.GetEventSheetManager(), l.BlockFlushingInstances(!0), n._TriggerOnCreatedOnSelfAndRelated(), l.BlockFlushingInstances(!1), h.GetCurrentSol().SetSinglePicked(n), n.IsInContainer() && n.SetSiblingsSinglePicked())
        },
        CreateObjectByName(h, l, n, q, y) {
            h && l && (h = this._runtime.GetObjectClassByName(h)) && f.Plugins.System.Acts.CreateObject.call(this, h, l, n, q, y)
        },
        RecreateInitialObjects(h,
            l, n, q, y, w, u, p, x, t) {
            if (h) {
                var r = this._runtime.GetCurrentLayout();
                if (w && (r = this._runtime.GetLayoutManager().GetLayoutByName(w), !r)) return;
                w = null;
                if ("number" !== typeof u || 0 <= u)
                    if (w = r.GetLayer(u), !w) return;
                e.set(l, n, q, y);
                l = r.RecreateInitialObjects(h, e, w, p, x, t);
                h.GetCurrentSol().SetArrayPicked(l);
                h.ApplySolToContainer()
            }
        },
        StopLoop() {
            const h = this._loopStack;
            h.IsInLoop() && h.GetCurrent().Stop()
        },
        SetGroupActive(h, l) {
            (h = this._runtime.GetEventSheetManager().GetEventGroupByName(h)) && (0 === l ? h.SetGroupActive(!1) :
                1 === l ? h.SetGroupActive(!0) : h.SetGroupActive(!h.IsGroupActive()))
        },
        SetTimescale(h) {
            this._runtime.SetTimeScale(h)
        },
        SetObjectTimescale(h, l) {
            0 > l && (l = 0);
            if (h) {
                h = h.GetCurrentSol().GetInstances();
                for (const n of h) n.SetTimeScale(l)
            }
        },
        RestoreObjectTimescale(h) {
            if (h) {
                h = h.GetCurrentSol().GetInstances();
                for (const l of h) l.RestoreTimeScale()
            }
        },
        Wait(h) {
            if (!(0 > h)) return this._runtime.GetEventSheetManager().AddScheduledWait().InitTimer(h), !0
        },
        WaitForSignal(h) {
            this._runtime.GetEventSheetManager().AddScheduledWait().InitSignal(h);
            return !0
        },
        WaitForPreviousActions() {
            const h = this._runtime.GetEventSheetManager();
            h.AddScheduledWait().InitPromise(h.GetPromiseForAllAsyncActions());
            return !0
        },
        Signal(h) {
            h = h.toLowerCase();
            for (const l of this._runtime.GetEventSheetManager().scheduledWaits()) l.IsSignal() && l.GetSignalTag() === h && l.SetSignalled()
        },
        async SnapshotCanvas(h, l, n, q, y, w) {
            const u = this._runtime.GetCanvasManager();
            u && (this.UpdateRender(), await u.SnapshotCanvas(0 === h ? "image/png" : "image/jpeg", l / 100, n, q, y, w), await this._runtime.TriggerAsync(f.Plugins.System.Cnds.OnCanvasSnapshot,
                null))
        },
        SetCanvasSize(h, l) {
            if (!(0 >= h || 0 >= l)) {
                this._runtime.SetViewportSize(h, l);
                var n = this._runtime.GetCurrentLayout();
                n.BoundScrolling();
                for (const q of n.GetLayers()) q.UpdateViewport();
                if (n = this._runtime.GetCanvasManager()) "off" !== n.GetCurrentFullscreenMode() && this._runtime.SetOriginalViewportSize(h, l), n.SetSize(n.GetLastWidth(), n.GetLastHeight(), !0), this._runtime.UpdateRender()
            }
        },
        SetFullscreenQuality(h) {
            const l = this._runtime.GetCanvasManager();
            l && "off" !== l.GetCurrentFullscreenMode() && (l.SetFullscreenScalingQuality(0 !==
                h ? "high" : "low"), l.SetSize(l.GetLastWidth(), l.GetLastHeight(), !0))
        },
        SaveState(h) {
            this._runtime.SaveToSlot(h)
        },
        LoadState(h) {
            this._runtime.LoadFromSlot(h)
        },
        LoadStateJSON(h) {
            this._runtime.LoadFromJsonString(h)
        },
        SetHalfFramerateMode(h) {},
        ResetPersisted() {
            for (const h of this._runtime.GetLayoutManager().GetAllLayouts()) h.ResetPersistData()
        },
        SetPixelRounding(h) {
            this._runtime.SetPixelRoundingEnabled(0 !== h)
        },
        SetMinimumFramerate(h) {
            this._runtime.SetMinimumFramerate(h)
        },
        SortZOrderByInstVar(h, l) {
            if (h) {
                var n = h.GetCurrentSol().GetInstances(),
                    q = this._runtime.GetCurrentLayout(),
                    y = h.IsFamily();
                h = h.GetFamilyIndex();
                for (let u = 0, p = n.length; u < p; ++u) {
                    var w = n[u];
                    const x = w.GetWorldInfo();
                    if (!x) continue;
                    let t;
                    t = y ? w.GetInstanceVariableValue(l + w.GetObjectClass().GetFamilyInstanceVariableOffset(h)) : w.GetInstanceVariableValue(l);
                    d.push([x.GetLayer().GetIndex(), x.GetZIndex()]);
                    c.push([w, t])
                }
                if (d.length) {
                    d.sort(b);
                    c.sort(a);
                    l = !1;
                    for (let u = 0, p = d.length; u < p; ++u) n = c[u][0], y = q.GetLayerByIndex(d[u][0]), h = d[u][1], w = y._GetInstances(), w[h] !== n && (w[h] = n, n.GetWorldInfo()._SetLayer(y),
                        y.SetZIndicesChanged(), l = !0);
                    l && this._runtime.UpdateRender();
                    f.clearArray(d);
                    f.clearArray(c)
                }
            }
        },
        GoToLayout(h) {
            if (!this._runtime.IsLoading()) {
                var l = this._runtime.GetLayoutManager();
                l.IsPendingChangeMainLayout() || l.ChangeMainLayout(h)
            }
        },
        GoToLayoutByName(h) {
            if (!this._runtime.IsLoading()) {
                var l = this._runtime.GetLayoutManager();
                l.IsPendingChangeMainLayout() || (h = l.GetLayoutByName(h)) && l.ChangeMainLayout(h)
            }
        },
        NextPrevLayout(h) {
            if (!this._runtime.IsLoading()) {
                var l = this._runtime.GetLayoutManager();
                if (!l.IsPendingChangeMainLayout()) {
                    var n =
                        l.GetAllLayouts(),
                        q = n.indexOf(l.GetMainRunningLayout());
                    h && 0 === q || (h || q !== n.length - 1) && l.ChangeMainLayout(n[q + (h ? -1 : 1)])
                }
            }
        },
        RestartLayout() {
            if (!this._runtime.IsLoading()) {
                var h = this._runtime.GetLayoutManager();
                h.IsPendingChangeMainLayout() || (h.ChangeMainLayout(h.GetMainRunningLayout()), this._runtime.GetEventSheetManager().ResetAllGroupsInitialActivation())
            }
        },
        SetLayerVisible(h, l) {
            h && h.SetVisible(l)
        },
        SetLayerOpacity(h, l) {
            h && h.SetOpacity(l / 100)
        },
        SetLayerScale(h, l) {
            h && h.SetOwnScale(l)
        },
        SetLayerScaleRate(h,
            l) {
            h && h.SetScaleRate(l)
        },
        SetLayerAngle(h, l) {
            h && h.SetAngle(f.toRadians(+l))
        },
        SetLayerScroll(h, l, n) {
            h && (h.SetOwnScrollPositionEnabled(!0), h.SetScrollX(l), h.SetScrollY(n))
        },
        RestoreLayerScroll(h) {
            h && h.SetOwnScrollPositionEnabled(!1)
        },
        SetLayerParallax(h, l, n) {
            h && h.SetParallax(l / 100, n / 100)
        },
        SetLayerZElevation(h, l) {
            h && h.SetZElevation(+l)
        },
        SetLayerBackground(h, l) {
            h && (g.setFromRgbValue(l), g.clamp(), h = h.GetBackgroundColor(), h.equalsIgnoringAlpha(g) || (h.copyRgb(g), this.UpdateRender()))
        },
        SetLayerTransparent(h,
            l) {
            h && h.SetTransparent(l)
        },
        SetLayerBlendMode(h, l) {
            h && h.SetBlendMode(l)
        },
        SetLayerEffectEnabled(h, l, n) {
            h && (h = h.GetEffectList(), n = h.GetEffectTypeByName(n)) && (l = 1 === l, n.IsActive() !== l && (n.SetActive(l), h.UpdateActiveEffects(), this._runtime.UpdateRender()))
        },
        SetLayerEffectParam(h, l, n, q) {
            if (h && (h = h.GetEffectList(), l = h.GetEffectTypeByName(l))) {
                var y = l.GetIndex();
                h = h.GetEffectParametersForIndex(y);
                n = Math.floor(n);
                if (!(0 > n || n >= h.length)) {
                    y = l.GetShaderProgram().GetParameterType(n);
                    if ("color" === y) {
                        g.setFromRgbValue(q);
                        n = h[n];
                        if (g.equalsIgnoringAlpha(n)) return;
                        n.copyRgb(g)
                    } else {
                        "percent" === y && (q /= 100);
                        if (h[n] === q) return;
                        h[n] = q
                    }
                    l.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayerForceOwnTexture(h, l) {
            h && h.SetForceOwnTexture(l)
        },
        SetLayoutScale(h) {
            this._runtime.GetCurrentLayout().SetScale(+h)
        },
        SetLayoutAngle(h) {
            this._runtime.GetCurrentLayout().SetAngle(f.toRadians(+h))
        },
        SetLayoutEffectEnabled(h, l) {
            const n = this._runtime.GetCurrentLayout().GetEffectList();
            if (l = n.GetEffectTypeByName(l)) h = 1 === h, l.IsActive() !== h && (l.SetActive(h),
                n.UpdateActiveEffects(), this._runtime.UpdateRender())
        },
        SetLayoutEffectParam(h, l, n) {
            var q = this._runtime.GetCurrentLayout().GetEffectList();
            if (h = q.GetEffectTypeByName(h)) {
                var y = h.GetIndex();
                q = q.GetEffectParametersForIndex(y);
                l = Math.floor(l);
                if (!(0 > l || l >= q.length)) {
                    y = h.GetShaderProgram().GetParameterType(l);
                    if ("color" === y) {
                        g.setFromRgbValue(n);
                        l = q[l];
                        if (g.equalsIgnoringAlpha(l)) return;
                        l.copyRgb(g)
                    } else {
                        "percent" === y && (n /= 100);
                        if (q[l] === n) return;
                        q[l] = n
                    }
                    h.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayoutVanishingPoint(h,
            l) {
            this._runtime.GetCurrentLayout().SetVanishingPointXY(h / 100, l / 100)
        },
        ScrollX(h) {
            this._runtime.GetCurrentLayout().SetScrollX(h)
        },
        ScrollY(h) {
            this._runtime.GetCurrentLayout().SetScrollY(h)
        },
        Scroll(h, l) {
            const n = this._runtime.GetCurrentLayout();
            n.SetScrollX(h);
            n.SetScrollY(l)
        },
        ScrollToObject(h) {
            if (h && (h = h.GetFirstPicked()) && (h = h.GetWorldInfo())) {
                var l = this._runtime.GetCurrentLayout();
                l.SetScrollX(h.GetX());
                l.SetScrollY(h.GetY())
            }
        },
        async LoadObjectTextures(h) {
            const l = this._runtime.GetMainRunningLayout();
            l && h && !this._runtime.IsLoading() && (h = h.IsFamily() ? h.GetFamilyMembers() : [h], await this._LoadTexturesForObjectClasses(l, h))
        },
        async LoadObjectTexturesByName(h) {
            await f.Plugins.System.Acts.LoadObjectTextures.call(this, this._runtime.GetObjectClassByName(h))
        },
        UnloadObjectTextures(h) {
            const l = this._runtime.GetMainRunningLayout();
            l && h && (h = h.IsFamily() ? h.GetFamilyMembers() : [h], this._UnloadTexturesForObjectClasses(l, h))
        },
        UnloadObjectTexturesByName(h) {
            f.Plugins.System.Acts.UnloadObjectTexturesByName.call(this,
                this._runtime.GetObjectClassByName(h))
        },
        UnloadUnusedTextures() {
            const h = this._runtime.GetMainRunningLayout();
            if (h) {
                var l = h._GetTextureLoadedObjectTypes();
                this._UnloadTexturesForObjectClasses(h, l)
            }
        },
        async LoadLayoutTextures(h) {
            const l = this._runtime.GetMainRunningLayout();
            h && l && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(l, h._GetInitialObjectClasses())
        },
        async LoadLayoutTexturesByName(h) {
            const l = this._runtime.GetMainRunningLayout();
            (h = this._runtime.GetLayoutManager().GetLayoutByName(h)) &&
            l && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(l, h._GetInitialObjectClasses())
        },
        SetFunctionReturnValue(h) {
            const l = this._eventStack.GetCurrentExpFuncStackFrame();
            if (l) switch (l.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof h && l.SetFunctionReturnValue(h);
                    break;
                case 2:
                    "string" === typeof h && l.SetFunctionReturnValue(h);
                    break;
                case 3:
                    l.SetFunctionReturnValue(h)
            }
        },
        MapFunction(h, l, n) {
            var q = this._GetFunctionMap(h.toLowerCase(), !0);
            const y = q.strMap,
                w = l.toLowerCase();
            y.has(w) && console.warn(`[Construct 3] Function map '${h}' string '${l}' already in map; overwriting entry`);
            if (q = f.first(y.values()) || q.defaultFunc) {
                q = 0 !== q.GetReturnType();
                const u = 0 !== n.GetReturnType();
                if (q !== u) {
                    console.error(`[Construct 3] Function map '${h}' string '${l}' function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            y.set(w, n)
        },
        MapFunctionDefault(h, l) {
            const n = this._GetFunctionMap(h.toLowerCase(), !0);
            n.defaultFunc && console.warn(`[Construct 3] Function map '${h}' already has a default; overwriting entry`);
            var q = f.first(n.strMap.values()) || n.defaultFunc;
            if (q) {
                q =
                    0 !== q.GetReturnType();
                const y = 0 !== l.GetReturnType();
                if (q !== y) {
                    console.error(`[Construct 3] Function map '${h}' default: function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            n.defaultFunc = l
        },
        CallMappedFunction(h, l, n) {
            n = Math.floor(n);
            var q = this._GetFunctionMap(h.toLowerCase(), !1);
            if (q) {
                var y = q.strMap.get(l.toLowerCase());
                if (!y)
                    if (q.defaultFunc) y = q.defaultFunc, n = 0;
                    else {
                        console.warn(`[Construct 3] Call mapped function: no function associated with map '${h}' string '${l}'; call ignored (consider setting a default)`);
                        return
                    }
                if (y.IsEnabled())
                    if (0 !== y.GetReturnType()) console.warn(`[Construct 3] Call mapped function: map '${h}' string '${l}' has a return type so cannot be called`);
                    else {
                        h = this._runtime;
                        l = h.GetEventSheetManager();
                        var w = l.GetCurrentEvent();
                        q = w.GetSolModifiersIncludingParents();
                        var u = 0 < q.length;
                        u && l.PushCleanSol(q);
                        var p = [];
                        if (w = l.FindFirstFunctionBlockParent(w)) {
                            w = w.GetFunctionParameters();
                            for (let x = n, t = w.length; x < t; ++x) p.push(w[x].GetValue())
                        }
                        n = y.GetFunctionParameters();
                        for (let x = p.length, t = n.length; x <
                            t; ++x) p.push(n[x].GetInitialValue());
                        return h.IsDebugging() ? this._DebugDoCallMappedFunction(l, y, p, u, q) : this._DoCallMappedFunction(l, y, p, u, q)
                    }
            } else console.warn(`[Construct 3] Call mapped function: map name '${h}' not found; call ignored`)
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.System.Exps = {
        int: function(b) {
            "string" === typeof b && (b = parseInt(b, 10), isNaN(b) && (b = 0));
            return Math.floor(b)
        },
        float: function(b) {
            "string" === typeof b && (b = parseFloat(b), isNaN(b) && (b = 0));
            return b
        },
        str(b) {
            return b.toString()
        },
        len(b) {
            return "string" === typeof b ? b.length : 0
        },
        random(b, a) {
            return "undefined" === typeof a ? this._runtime.Random() * b : this._runtime.Random() * (a - b) + b
        },
        choose(...b) {
            const a = Math.floor(this._runtime.Random() * b.length);
            return b[a]
        },
        pi() {
            return Math.PI
        },
        infinity() {
            return Infinity
        },
        sqrt(b) {
            return Math.sqrt(b)
        },
        abs(b) {
            return Math.abs(b)
        },
        round(b) {
            return Math.round(b)
        },
        roundtodp(b, a) {
            a = Math.max(Math.floor(a), 0);
            a = Math.pow(10, a);
            return Math.round((b + Number.EPSILON) * a) / a
        },
        floor(b) {
            return Math.floor(b)
        },
        ceil(b) {
            return Math.ceil(b)
        },
        sign(b) {
            return Math.sign(b)
        },
        sin(b) {
            return Math.sin(f.toRadians(b))
        },
        cos(b) {
            return Math.cos(f.toRadians(b))
        },
        tan(b) {
            return Math.tan(f.toRadians(b))
        },
        asin(b) {
            return f.toDegrees(Math.asin(b))
        },
        acos(b) {
            return f.toDegrees(Math.acos(b))
        },
        atan(b) {
            return f.toDegrees(Math.atan(b))
        },
        exp(b) {
            return Math.exp(b)
        },
        ln(b) {
            return Math.log(b)
        },
        log10(b) {
            return Math.log(b) / Math.LN10
        },
        max(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for (let d = 1, c = b.length; d < c; ++d) {
                let e = b[d];
                "number" === typeof e && a < e && (a = e)
            }
            return a
        },
        min(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for (let d = 1, c = b.length; d < c; ++d) {
                let e = b[d];
                "number" === typeof e && a > e && (a = e)
            }
            return a
        },
        clamp(b, a, d) {
            return f.clamp(b, a, d)
        },
        distance(b, a, d, c) {
            return f.distanceTo(b, a, d, c)
        },
        angle(b, a, d, c) {
            return f.toDegrees(f.angleTo(b, a, d, c))
        },
        lerp(b,
            a, d) {
            return f.lerp(b, a, d)
        },
        unlerp(b, a, d) {
            return f.unlerp(b, a, d)
        },
        qarp(b, a, d, c) {
            return f.qarp(b, a, d, c)
        },
        cubic(b, a, d, c, e) {
            return f.cubic(b, a, d, c, e)
        },
        cosp(b, a, d) {
            return f.cosp(b, a, d)
        },
        anglediff(b, a) {
            return f.toDegrees(f.angleDiff(f.toRadians(b), f.toRadians(a)))
        },
        anglelerp(b, a, d) {
            return f.toDegrees(f.angleLerp(f.toRadians(b), f.toRadians(a), d))
        },
        anglerotate(b, a, d) {
            return f.toDegrees(f.angleRotate(f.toRadians(b), f.toRadians(a), f.toRadians(d)))
        },
        setbit(b, a, d) {
            a |= 0;
            return (b | 0) & ~(1 << a) | (0 !== d ? 1 : 0) << a
        },
        togglebit(b,
            a) {
            return (b | 0) ^ 1 << (a | 0)
        },
        getbit(b, a) {
            return (b | 0) & 1 << (a | 0) ? 1 : 0
        },
        newline() {
            return "\n"
        },
        uppercase(b) {
            return "string" === typeof b ? b.toUpperCase() : ""
        },
        lowercase(b) {
            return "string" === typeof b ? b.toLowerCase() : ""
        },
        left(b, a) {
            return "string" === typeof b ? b.substr(0, a) : ""
        },
        mid(b, a, d) {
            return "string" !== typeof b ? "" : 0 > d ? b.substr(a) : b.substr(a, d)
        },
        right(b, a) {
            return "string" === typeof b ? b.substr(b.length - a) : ""
        },
        trim(b) {
            return "string" === typeof b ? b.trim() : ""
        },
        tokenat(b, a, d) {
            if ("string" !== typeof b || "string" !== typeof d) return "";
            b = b.split(d);
            a = Math.floor(a);
            return 0 > a || a >= b.length ? "" : b[a]
        },
        tokencount(b, a) {
            return "string" === typeof b && "string" === typeof a && b.length ? b.split(a).length : 0
        },
        find(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(f.EscapeRegex(a), "i")) : -1
        },
        findcase(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(f.EscapeRegex(a), "")) : -1
        },
        replace(b, a, d) {
            return "string" === typeof b && "string" === typeof a && "string" === typeof d ? b.replace(new RegExp(f.EscapeRegex(a), "gi"), d) : "string" ===
                typeof b ? b : ""
        },
        regexsearch(b, a, d) {
            a = this.GetRegex(a, d);
            return b ? b.search(a) : -1
        },
        regexreplace(b, a, d, c) {
            a = this.GetRegex(a, d);
            return b ? b.replace(a, c) : ""
        },
        regexmatchcount(b, a, d) {
            return (b = this.GetRegexMatches(b.toString(), a, d)) ? b.length : 0
        },
        regexmatchat(b, a, d, c) {
            c = Math.floor(c);
            b = this.GetRegexMatches(b.toString(), a, d);
            return !b || 0 > c || c >= b.length ? "" : b[c]
        },
        zeropad(b, a) {
            let d = 0 > b ? "-" : "";
            0 > b && (b = -b);
            d += "0".repeat(Math.max(a - b.toString().length, 0));
            return d + b.toString()
        },
        urlencode(b) {
            return encodeURIComponent(b)
        },
        urldecode(b) {
            return decodeURIComponent(b)
        },
        dt() {
            return this._runtime._GetDtFast()
        },
        timescale() {
            return this._runtime.GetTimeScale()
        },
        wallclocktime() {
            return (Date.now() - this._runtime.GetStartTime()) / 1E3
        },
        unixtime() {
            return Date.now()
        },
        time() {
            return this._runtime.GetGameTime()
        },
        tickcount() {
            return this._runtime.GetTickCount()
        },
        objectcount() {
            return this._runtime.GetObjectCount()
        },
        fps() {
            return this._runtime.GetFPS()
        },
        cpuutilisation() {
            return this._runtime.GetMainThreadTime()
        },
        gpuutilisation() {
            return this._runtime.GetGPUUtilisation()
        },
        windowwidth() {
            return this._runtime.GetCanvasManager().GetDeviceWidth()
        },
        windowheight() {
            return this._runtime.GetCanvasManager().GetDeviceHeight()
        },
        originalwindowwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalwindowheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        originalviewportwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalviewportheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        scrollx() {
            return this._runtime.GetCurrentLayout().GetScrollX()
        },
        scrolly() {
            return this._runtime.GetCurrentLayout().GetScrollY()
        },
        layoutname() {
            return this._runtime.GetCurrentLayout().GetName()
        },
        layoutscale() {
            return this._runtime.GetCurrentLayout().GetScale()
        },
        layoutangle() {
            return f.toDegrees(this._runtime.GetCurrentLayout().GetAngle())
        },
        layoutwidth() {
            return this._runtime.GetCurrentLayout().GetWidth()
        },
        layoutheight() {
            return this._runtime.GetCurrentLayout().GetHeight()
        },
        viewportleft(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getLeft() :
                0
        },
        viewporttop(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getTop() : 0
        },
        viewportright(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getRight() : 0
        },
        viewportbottom(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getBottom() : 0
        },
        viewportwidth(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().width() : 0
        },
        viewportheight(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().height() :
                0
        },
        canvastolayerx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[0] : 0
        },
        canvastolayery(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[1] : 0
        },
        layertocanvasx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[0] : 0
        },
        layertocanvasy(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[1] : 0
        },
        layerscale(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetOwnScale() :
                0
        },
        layerangle(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? f.toDegrees(b.GetOwnAngle()) : 0
        },
        layeropacity(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetOpacity() : 0
        },
        layerscalerate(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScaleRate() : 0
        },
        layerscrollx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScrollX() : 0
        },
        layerscrolly(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScrollY() : 0
        },
        layerparallaxx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ?
                100 * b.GetParallaxX() : 0
        },
        layerparallaxy(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetParallaxY() : 0
        },
        layerzelevation(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetZElevation() : 0
        },
        layerindex(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetIndex() : -1
        },
        canvassnapshot() {
            const b = this._runtime.GetCanvasManager();
            return b ? b.GetCanvasSnapshotUrl() : ""
        },
        loopindex(b) {
            const a = this._loopStack;
            return a.IsInLoop() ? b ? (b = a.FindByName(b)) ? b.GetIndex() : 0 : a.GetCurrent().GetIndex() :
                0
        },
        savestatejson() {
            return this._runtime.GetLastSaveJsonString()
        },
        callmapped(b, a, ...d) {
            var c = this._GetFunctionMap(b.toLowerCase(), !1);
            if (!c) return console.warn(`[Construct 3] Call mapped function: map name '${b}' not found; returning 0`), 0;
            var e = c.strMap.get(a.toLowerCase());
            if (!e)
                if (c.defaultFunc) e = c.defaultFunc;
                else return console.warn(`[Construct 3] Call mapped function: no function associated with map '${b}' string '${a}'; returning 0 (consider setting a default)`), 0;
            c = e.GetReturnType();
            const g =
                e.GetDefaultReturnValue();
            if (0 === c) return console.warn(`[Construct 3] Call mapped function: map '${b}' string '${a}' has no return type so cannot be called from an expression; returning 0`), 0;
            if (!e.IsEnabled()) return g;
            b = this._runtime.GetEventSheetManager();
            a = b.GetCurrentEvent().GetSolModifiersIncludingParents();
            const h = 0 < a.length;
            h && b.PushCleanSol(a);
            const l = e.GetFunctionParameters();
            for (let n = d.length, q = l.length; n < q; ++n) d.push(l[n].GetInitialValue());
            e = e.GetEventBlock();
            d = e.RunAsExpressionFunctionCall(e.GetSolModifiersIncludingParents(),
                c, g, ...d);
            h && b.PopSol(a);
            return d
        },
        loadingprogress() {
            return this._runtime.GetAssetManager().GetLoadProgress()
        },
        imageloadingprogress() {
            return 0 === this._imagesLoadingTotal ? 1 : this._imagesLoadingComplete / this._imagesLoadingTotal
        },
        renderer() {
            return this._runtime.GetWebGPURenderer() ? "webgpu" : "webgl"
        },
        rendererdetail() {
            return this._runtime.GetWebGPURenderer() ? "<unavailable>" : this._runtime.GetWebGLRenderer().GetUnmaskedRenderer()
        },
        imagememoryusage() {
            let b = this._runtime.GetRenderer().GetEstimatedTextureMemoryUsage();
            return Math.round(100 * b / 1048576) / 100
        },
        rgb(b, a, d) {
            return f.PackRGB(b, a, d)
        },
        rgbex(b, a, d) {
            return f.PackRGBEx(b / 100, a / 100, d / 100)
        },
        rgba(b, a, d, c) {
            return f.PackRGBAEx(b / 100, a / 100, d / 100, c / 100)
        },
        rgbex255(b, a, d) {
            return f.PackRGBEx(b / 255, a / 255, d / 255)
        },
        rgba255(b, a, d, c) {
            return f.PackRGBAEx(b / 255, a / 255, d / 255, c / 255)
        },
        projectname() {
            return this._runtime.GetProjectName()
        },
        projectversion() {
            return this._runtime.GetProjectVersion()
        },
        currenteventsheetname() {
            return this._runtime.GetCurrentEvent().GetEventSheet().GetName()
        },
        currenteventnumber() {
            return this._runtime.GetCurrentEvent().GetDisplayNumber()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Sprite = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Sprite.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b);
            this._animations = b.GetAnimations()
        }
        Release() {
            f.clearArray(this._animations);
            super.Release()
        }
        OnCreate() {
            for (const b of this._animations) b.LoadAllAssets(this._runtime)
        }
        LoadTextures(b) {
            const a = {
                sampling: this._runtime.GetSampling()
            };
            return Promise.all(this._animations.map(d => d.LoadAllTextures(b, a)))
        }
        ReleaseTextures() {
            for (const b of this._animations) b.ReleaseAllTextures()
        }
        OnDynamicTextureLoadComplete() {
            this._UpdateAllCurrentTexture()
        }
        _UpdateAllCurrentTexture() {
            for (const b of this._objectClass.instancesIncludingPendingCreate()) b.GetSdkInstance()._UpdateCurrentTexture()
        }
        FinishCondition(b) {
            f.Plugins.Sprite._FinishCondition(this,
                b)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = f.New(f.Rect),
        d = f.New(f.Quad),
        c = f.New(f.Vector2);
    f.Plugins.Sprite.Instance = class extends f.SDKWorldInstanceBase {
        constructor(h, l) {
            super(h);
            let n = !0,
                q = "",
                y = 0,
                w = !0;
            l && (n = !!l[0], q = l[1], y = l[2], w = l[3]);
            this._currentAnimation = this._objectClass.GetAnimationByName(q) || this._objectClass.GetAnimations()[0];
            this._currentFrameIndex = f.clamp(y, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            l =
                this._currentAnimationFrame.GetImageInfo();
            this._currentTexture = l.GetTexture();
            this._currentRcTex = l.GetTexRect();
            this.HandleWebGLContextLoss();
            h.SetFlag(2, !0);
            h.SetFlag(1, 0 <= this._currentAnimation.GetSpeed());
            this._currentAnimationSpeed = Math.abs(this._currentAnimation.GetSpeed());
            this._currentAnimationRepeatTo = this._currentAnimation.GetRepeatTo();
            this._animationTimer = f.New(f.KahanSum);
            this._animationRepeats = this._frameStartTime = 0;
            this._animTriggerName = "";
            this._changeAnimFrameIndex = -1;
            this._changeAnimationName =
                "";
            this._changeAnimationFrom = 0;
            h = this.GetWorldInfo();
            this._bquadRef = h.GetBoundingQuad();
            h.SetVisible(n);
            h.SetCollisionEnabled(w);
            h.SetOriginX(this._currentAnimationFrame.GetOriginX());
            h.SetOriginY(this._currentAnimationFrame.GetOriginY());
            h.SetSourceCollisionPoly(this._currentAnimationFrame.GetCollisionPoly());
            h.SetBboxChanged();
            1 === this._objectClass.GetAnimationCount() && 1 === this._objectClass.GetAnimations()[0].GetFrameCount() || 0 === this._currentAnimationSpeed || this._StartTicking()
        }
        Release() {
            this._animationTimer =
                this._currentTexture = this._currentAnimationFrame = this._currentAnimation = null;
            super.Release()
        }
        GetCurrentImageInfo() {
            return this._currentAnimationFrame.GetImageInfo()
        }
        IsOriginalSizeKnown() {
            return !0
        }
        OnWebGLContextLost() {
            this._currentTexture = null
        }
        OnWebGLContextRestored() {
            this._UpdateCurrentTexture()
        }
        Draw(h) {
            var l = this._currentTexture;
            null !== l && (h.SetTexture(l), l = this.GetWorldInfo(), l.HasMesh() ? this._DrawMesh(l, h) : this._DrawStandard(l, h))
        }
        _DrawStandard(h, l) {
            let n = this._bquadRef;
            this._runtime.IsPixelRoundingEnabled() &&
                (n = h.PixelRoundQuad(n));
            l.Quad3(n, this._currentRcTex)
        }
        _DrawMesh(h, l) {
            const n = h.GetTransformedMesh();
            if (h.IsMeshChanged()) {
                h.CalculateBbox(a, d, !1);
                let q = d;
                this._runtime.IsPixelRoundingEnabled() && (q = h.PixelRoundQuad(q));
                n.CalculateTransformedMesh(h.GetSourceMesh(), q, this._currentRcTex);
                h.SetMeshChanged(!1)
            }
            n.Draw(l)
        }
        GetAnimationTime() {
            return this._animationTimer.Get()
        }
        IsAnimationPlaying() {
            return this._inst.GetFlag(2)
        }
        SetAnimationPlaying(h) {
            this._inst.SetFlag(2, h)
        }
        IsPlayingForwards() {
            return this._inst.GetFlag(1)
        }
        SetPlayingForwards(h) {
            this._inst.SetFlag(1,
                h)
        }
        IsInAnimationTrigger() {
            return this._inst.GetFlag(4)
        }
        SetInAnimationTrigger(h) {
            this._inst.SetFlag(4, h)
        }
        Tick() {
            this._changeAnimationName && this._DoChangeAnimation();
            0 <= this._changeAnimFrameIndex && this._DoChangeAnimFrame();
            const h = this._currentAnimationSpeed;
            if (this.IsAnimationPlaying() && 0 !== h) {
                var l = this._runtime.GetDt(this._inst);
                this._animationTimer.Add(l);
                l = this.GetAnimationTime();
                var n = this._currentAnimationFrame,
                    q = n.GetDuration() / h;
                if (!(l < this._frameStartTime + q)) {
                    var y = this._currentAnimation,
                        w = this._currentAnimationRepeatTo,
                        u = y.GetFrameCount(),
                        p = y.GetRepeatCount(),
                        x = y.IsLooping(),
                        t = y.IsPingPong();
                    this.IsPlayingForwards() ? this._currentFrameIndex++ : this._currentFrameIndex--;
                    this._frameStartTime += q;
                    this._currentFrameIndex >= u && (t ? (this.SetPlayingForwards(!1), this._currentFrameIndex = u - 2) : x ? this._currentFrameIndex = w : (this._animationRepeats++, this._animationRepeats >= p ? this._FinishAnimation(!1) : this._currentFrameIndex = w));
                    0 > this._currentFrameIndex && (t ? (this._currentFrameIndex = 1, this.SetPlayingForwards(!0),
                        x || (this._animationRepeats++, this._animationRepeats >= p && this._FinishAnimation(!0))) : x ? this._currentFrameIndex = w : (this._animationRepeats++, this._animationRepeats >= p ? this._FinishAnimation(!0) : this._currentFrameIndex = w));
                    this._currentFrameIndex = f.clamp(this._currentFrameIndex, 0, u - 1);
                    q = y.GetFrameAt(this._currentFrameIndex);
                    l > this._frameStartTime + q.GetDuration() / h && (this._frameStartTime = l);
                    this._OnFrameChanged(n, q)
                }
            } else this._StopTicking()
        }
        _FinishAnimation(h) {
            this._currentFrameIndex = h ? 0 : this._currentAnimation.GetFrameCount() -
                1;
            this.SetAnimationPlaying(!1);
            this._animTriggerName = this._currentAnimation.GetName();
            this.SetInAnimationTrigger(!0);
            this.Trigger(f.Plugins.Sprite.Cnds.OnAnyAnimFinished);
            this.Trigger(f.Plugins.Sprite.Cnds.OnAnimFinished);
            this.SetInAnimationTrigger(!1);
            this._animationRepeats = 0
        }
        _OnFrameChanged(h, l) {
            if (h !== l) {
                var n = this.GetWorldInfo(),
                    q = h.GetImageInfo(),
                    y = l.GetImageInfo(),
                    w = q.GetWidth();
                q = q.GetHeight();
                var u = y.GetWidth(),
                    p = y.GetHeight();
                w !== u && n.SetWidth(n.GetWidth() * (u / w));
                q !== p && n.SetHeight(n.GetHeight() *
                    (p / q));
                n.SetOriginX(l.GetOriginX());
                n.SetOriginY(l.GetOriginY());
                n.SetSourceCollisionPoly(l.GetCollisionPoly());
                n.SetBboxChanged();
                this._currentAnimationFrame = l;
                this._currentTexture = y.GetTexture();
                this._currentRcTex = y.GetTexRect();
                n = this.GetInstance().GetBehaviorInstances();
                for (let x = 0, t = n.length; x < t; ++x) n[x].OnSpriteFrameChanged(h, l);
                this.Trigger(f.Plugins.Sprite.Cnds.OnFrameChanged);
                this._runtime.UpdateRender()
            }
        }
        _StartAnim(h) {
            this.SetAnimationPlaying(!0);
            this._frameStartTime = this.GetAnimationTime();
            1 === h && 0 !== this._currentFrameIndex && (this._changeAnimFrameIndex = 0, this.IsInAnimationTrigger() || this._DoChangeAnimFrame());
            this._StartTicking()
        }
        _SetAnim(h, l) {
            this._changeAnimationName = h;
            this._changeAnimationFrom = l;
            this._StartTicking();
            this.IsInAnimationTrigger() || this._DoChangeAnimation()
        }
        _GetCurrentAnimationName() {
            return this._changeAnimationName ? this._changeAnimationName : this._currentAnimation.GetName()
        }
        _SetAnimFrame(h) {
            isFinite(h) && (this._changeAnimFrameIndex = h, this.IsInAnimationTrigger() || this._DoChangeAnimFrame())
        }
        _GetAnimFrame() {
            return this._currentFrameIndex
        }
        _SetAnimSpeed(h) {
            this._currentAnimationSpeed =
                Math.abs(h);
            this.SetPlayingForwards(0 <= h);
            0 < this._currentAnimationSpeed && this._StartTicking()
        }
        _GetAnimSpeed() {
            return this.IsPlayingForwards() ? this._currentAnimationSpeed : -this._currentAnimationSpeed
        }
        _SetAnimRepeatToFrame(h) {
            this._currentAnimationRepeatTo = h = f.clamp(Math.floor(h), 0, this._currentAnimation.GetFrameCount() - 1)
        }
        _GetAnimRepeatToFrame() {
            return this._currentAnimationRepeatTo
        }
        _DoChangeAnimation() {
            const h = this._currentAnimationFrame;
            var l = this._objectClass.GetAnimationByName(this._changeAnimationName);
            this._changeAnimationName = "";
            !l || l === this._currentAnimation && this.IsAnimationPlaying() || (this._currentAnimation = l, this.SetPlayingForwards(0 <= l.GetSpeed()), this._currentAnimationSpeed = Math.abs(l.GetSpeed()), this._currentAnimationRepeatTo = l.GetRepeatTo(), this._currentFrameIndex = f.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1), 1 === this._changeAnimationFrom && (this._currentFrameIndex = 0), this.SetAnimationPlaying(!0), this._frameStartTime = this.GetAnimationTime(), l = this._currentAnimation.GetFrameAt(this._currentFrameIndex),
                this._OnFrameChanged(h, l))
        }
        _DoChangeAnimFrame() {
            const h = this._currentAnimationFrame;
            var l = this._currentFrameIndex;
            this._currentFrameIndex = f.clamp(Math.floor(this._changeAnimFrameIndex), 0, this._currentAnimation.GetFrameCount() - 1);
            this._changeAnimFrameIndex = -1;
            l !== this._currentFrameIndex && (l = this._currentAnimation.GetFrameAt(this._currentFrameIndex), this._OnFrameChanged(h, l), this._frameStartTime = this.GetAnimationTime())
        }
        _UpdateCurrentTexture() {
            const h = this._currentAnimationFrame.GetImageInfo();
            this._currentTexture =
                h.GetTexture();
            this._currentRcTex = h.GetTexRect();
            this.GetWorldInfo().SetMeshChanged(!0)
        }
        GetTexture() {
            return this._currentTexture
        }
        GetTexRect() {
            return this._currentRcTex
        }
        GetImagePointCount() {
            return this._currentAnimationFrame.GetImagePointCount()
        }
        GetImagePoint(h) {
            const l = this._currentAnimationFrame,
                n = this.GetWorldInfo();
            if ("string" === typeof h) h = l.GetImagePointByName(h);
            else if ("number" === typeof h) h = l.GetImagePointByIndex(h - 1);
            else throw new TypeError("expected string or number");
            if (!h) return [n.GetX(),
                n.GetY()
            ];
            c.copy(h.GetVec2());
            if (n.HasMesh()) {
                const [q, y] = n.GetSourceMesh().TransformPoint(c.getX(), c.getY());
                c.set(q, y)
            }
            c.offset(-l.GetOriginX(), -l.GetOriginY());
            c.scale(n.GetWidth(), n.GetHeight());
            c.rotate(n.GetAngle());
            c.offset(n.GetX(), n.GetY());
            return [c.getX(), c.getY()]
        }
        GetCollisionPolyPointCount() {
            return this.GetWorldInfo().GetTransformedCollisionPoly().pointCount()
        }
        GetCollisionPolyPoint(h) {
            h = Math.floor(h);
            const l = this.GetWorldInfo();
            var n = l.GetTransformedCollisionPoly();
            const q = n.pointCount();
            h === q && (h = 0);
            if (0 > h || h >= q) return [0, 0];
            n = n.pointsArr();
            return [n[2 * h] + l.GetX(), n[2 * h + 1] + l.GetY()]
        }
        GetDebuggerProperties() {
            const h = f.Plugins.Sprite.Acts;
            return [{
                title: "plugins.sprite.debugger.animation-properties.title",
                properties: [{
                    name: "plugins.sprite.debugger.animation-properties.current-animation",
                    value: this._currentAnimation.GetName(),
                    onedit: l => this.CallAction(h.SetAnim, l, 0)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.current-frame",
                    value: this._currentFrameIndex,
                    onedit: l => this.CallAction(h.SetAnimFrame,
                        l)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.is-playing",
                    value: this.IsAnimationPlaying(),
                    onedit: l => l ? this.CallAction(h.StartAnim, 0) : this.CallAction(h.StopAnim)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.speed",
                    value: this._currentAnimationSpeed,
                    onedit: l => this.CallAction(h.SetAnimSpeed, l)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.repeats",
                    value: this._animationRepeats,
                    onedit: l => this._animationRepeats = l
                }]
            }]
        }
        SaveToJson() {
            const h = {
                a: this._currentAnimation.GetSID()
            };
            0 !== this._frameStartTime &&
                (h.fs = this._frameStartTime);
            var l = this.GetAnimationTime();
            0 !== l && (h.at = l);
            0 !== this._currentFrameIndex && (h.f = this._currentFrameIndex);
            0 !== this._currentAnimationSpeed && (h.cas = this._currentAnimationSpeed);
            1 !== this._animationRepeats && (h.ar = this._animationRepeats);
            0 !== this._currentAnimationRepeatTo && (h.rt = this._currentAnimationRepeatTo);
            this.IsAnimationPlaying() || (h.ap = this.IsAnimationPlaying());
            this.IsPlayingForwards() || (h.af = this.IsPlayingForwards());
            l = this.GetWorldInfo();
            l.IsCollisionEnabled() && (h.ce =
                l.IsCollisionEnabled());
            return h
        }
        LoadFromJson(h) {
            var l = this.GetObjectClass().GetAnimationBySID(h.a);
            l && (this._currentAnimation = l);
            this._frameStartTime = h.hasOwnProperty("fs") ? h.fs : 0;
            this._animationTimer.Set(h.hasOwnProperty("at") ? h.at : 0);
            l = h.hasOwnProperty("f") ? h.f : 0;
            this._currentFrameIndex = f.clamp(l, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationSpeed = h.hasOwnProperty("cas") ? h.cas : 0;
            this._animationRepeats = h.hasOwnProperty("ar") ? h.ar : 1;
            l = h.hasOwnProperty("rt") ? h.rt : 0;
            this._currentAnimationRepeatTo =
                f.clamp(l, 0, this._currentAnimation.GetFrameCount() - 1);
            this.SetAnimationPlaying(h.hasOwnProperty("ap") ? !!h.ap : !0);
            this.SetPlayingForwards(h.hasOwnProperty("af") ? !!h.af : !0);
            this._currentAnimationFrame = l = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            this._UpdateCurrentTexture();
            const n = this.GetWorldInfo();
            n.SetOriginX(l.GetOriginX());
            n.SetOriginY(l.GetOriginY());
            n.SetSourceCollisionPoly(l.GetCollisionPoly());
            n.SetCollisionEnabled(!!h.ce)
        }
        GetPropertyValueByIndex(h) {
            const l = this.GetWorldInfo();
            switch (h) {
                case 3:
                    return l.IsCollisionEnabled();
                case 2:
                    return f.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1)
            }
        }
        SetPropertyValueByIndex(h, l) {
            var n = this.GetWorldInfo();
            switch (h) {
                case 3:
                    n.SetCollisionEnabled(!!l);
                    break;
                case 2:
                    this.SetAnimationPlaying(!1);
                    h = this._currentAnimation.GetFrameCount() - 1;
                    n = l = f.clamp(l, 0, h);
                    l = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                    const q = this._currentAnimation.GetFrameAt(n);
                    this._OnFrameChanged(l, q);
                    this._currentFrameIndex = f.clamp(n,
                        0, h)
            }
        }
        GetScriptInterfaceClass() {
            return self.ISpriteInstance
        }
    };
    const e = new WeakMap,
        g = new Map([
            ["current-frame", 0],
            ["beginning", 1]
        ]);
    self.ISpriteInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            e.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        getImagePointCount() {
            return e.get(this).GetImagePointCount()
        }
        getImagePointX(h) {
            if ("string" !== typeof h && "number" !== typeof h) throw new TypeError("expected string or number");
            return e.get(this).GetImagePoint(h)[0]
        }
        getImagePointY(h) {
            if ("string" !==
                typeof h && "number" !== typeof h) throw new TypeError("expected string or number");
            return e.get(this).GetImagePoint(h)[1]
        }
        getImagePoint(h) {
            if ("string" !== typeof h && "number" !== typeof h) throw new TypeError("expected string or number");
            return e.get(this).GetImagePoint(h)
        }
        getPolyPointCount() {
            return e.get(this).GetCollisionPolyPointCount()
        }
        getPolyPointX(h) {
            b.RequireFiniteNumber(h);
            return e.get(this).GetCollisionPolyPoint(h)[0]
        }
        getPolyPointY(h) {
            b.RequireFiniteNumber(h);
            return e.get(this).GetCollisionPolyPoint(h)[1]
        }
        getPolyPoint(h) {
            b.RequireFiniteNumber(h);
            return e.get(this).GetCollisionPolyPoint(h)
        }
        stopAnimation() {
            e.get(this).SetAnimationPlaying(!1)
        }
        startAnimation(h = "current-frame") {
            b.RequireString(h);
            h = g.get(h);
            if ("undefined" === typeof h) throw Error("invalid mode");
            e.get(this)._StartAnim(h)
        }
        setAnimation(h, l = "beginning") {
            b.RequireString(h);
            b.RequireString(l);
            l = g.get(l);
            if ("undefined" === typeof l) throw Error("invalid mode");
            e.get(this)._SetAnim(h, l)
        }
        get animationName() {
            return e.get(this)._GetCurrentAnimationName()
        }
        set animationFrame(h) {
            b.RequireFiniteNumber(h);
            e.get(this)._SetAnimFrame(h)
        }
        get animationFrame() {
            return e.get(this)._GetAnimFrame()
        }
        set animationSpeed(h) {
            b.RequireFiniteNumber(h);
            e.get(this)._SetAnimSpeed(h)
        }
        get animationSpeed() {
            return e.get(this)._GetAnimSpeed()
        }
        set animationRepeatToFrame(h) {
            b.RequireFiniteNumber(h);
            e.get(this)._SetAnimRepeatToFrame(h)
        }
        get animationRepeatToFrame() {
            return e.get(this)._GetAnimRepeatToFrame()
        }
        get imageWidth() {
            return e.get(this).GetCurrentImageInfo().GetWidth()
        }
        get imageHeight() {
            return e.get(this).GetCurrentImageInfo().GetHeight()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = f.New(f.Rect),
        a = [],
        d = [];
    let c = !1,
        e = null,
        g = !1;
    const h = new Set;

    function l(p, x, t, r) {
        const B = x.GetUID(),
            z = t.GetUID();
        B < z ? p.Set(x, t, r) : p.Set(t, x, r)
    }

    function n(p, x, t) {
        const r = x.GetUID(),
            B = t.GetUID();
        r < B ? p.Delete(x, t) : p.Delete(t, x)
    }

    function q(p, x) {
        p.DeleteEither(x)
    }

    function y(p, x, t) {
        const r = x.GetUID(),
            B = t.GetUID();
        return r < B ? p.Get(x, t) : p.Get(t, x)
    }

    function w(p, x, t, r) {
        if (!x) return !1;
        p = p.GetInstance();
        const B = 0 !== t || 0 !== r,
            z = p.GetWorldInfo(),
            C = p.GetRuntime(),
            F = C.GetCollisionEngine();
        var J = C.GetCurrentCondition();
        const G = J.GetEventBlock().IsOrBlock();
        var I = J.GetObjectClass();
        J = J.IsInverted();
        const L = x.GetCurrentSol();
        I = I !== x;
        e = x;
        c = I && !J;
        g = !1;
        let N = 0,
            S = 0,
            X = !1;
        L.IsSelectAll() ? (b.copy(z.GetBoundingBox()), b.offset(t, r), F.GetCollisionCandidates(z.GetLayer(), x, b, d), x = d) : G ? C.IsCurrentConditionFirst() && !L._GetOwnElseInstances().length && L._GetOwnInstances().length ? x = L._GetOwnInstances() : (x = L._GetOwnElseInstances(), g = !0) : x = L._GetOwnInstances();
        B && (N = z.GetX(), S = z.GetY(), z.OffsetXY(t, r),
            z.SetBboxChanged());
        for (const U of x)
            if (F.TestOverlap(p, U)) {
                X = !0;
                if (J) break;
                I && h.add(U)
            }
        B && (z.SetXY(N, S), z.SetBboxChanged());
        f.clearArray(d);
        return X
    }

    function u(p) {
        p = p.GetRuntime().GetCurrentEvent().IsOrBlock();
        const x = e.GetCurrentSol(),
            t = x._GetOwnInstances(),
            r = x._GetOwnElseInstances();
        x.IsSelectAll() ? (x.SetSetPicked(h), p && (f.clearArray(r), x.AddElseInstances(h, e.GetInstances()))) : p ? g ? x.TransferElseInstancesToOwn(h) : (x.AddElseInstances(h, t), x.SetSetPicked(h)) : x.SetSetPicked(h);
        e.ApplySolToContainer()
    }
    f.Plugins.Sprite._FinishCondition = function(p, x) {
        c && (x && u(p), h.clear(), e = null, c = !1)
    };
    f.Plugins.Sprite.Cnds = {
        OnCollision(p) {
            if (this._runtime.IsDebugging()) return f.Plugins.Sprite.Cnds.DebugOnCollision.call(this, p);
            if (!p) return !1;
            var x = this._runtime;
            const t = x.GetCollisionEngine(),
                r = x.GetEventSheetManager(),
                B = r.GetEventStack();
            var z = r.GetCurrentCondition();
            const C = z.GetObjectClass();
            var F = z.GetSavedDataMap(),
                J = z.GetUnsavedDataMap();
            z = B.GetCurrentStackFrame();
            const G = x.GetTickCount(),
                I = G - 1,
                L = z.GetCurrentEvent(),
                N = B.Push(L);
            let S = F.get("collmemory");
            S || (S = f.New(f.PairMap), F.set("collmemory", S));
            J.get("spriteCreatedDestroyCallback") || (J.set("spriteCreatedDestroyCallback", !0), x.Dispatcher().addEventListener("instancedestroy", ia => q(S, ia.instance)));
            F = C.GetCurrentSol();
            x = p.GetCurrentSol();
            F = F.GetInstances();
            J = null;
            for (let ia = 0; ia < F.length; ++ia) {
                const ka = F[ia];
                x.IsSelectAll() ? (t.GetCollisionCandidates(ka.GetWorldInfo().GetLayer(), p, ka.GetWorldInfo().GetBoundingBox(), a), J = a, t.AddRegisteredCollisionCandidates(ka,
                    p, J)) : J = x.GetInstances();
                for (let ya = 0; ya < J.length; ++ya) {
                    const ta = J[ya];
                    if (t.TestOverlap(ka, ta) || t.CheckRegisteredCollision(ka, ta)) {
                        var X = y(S, ka, ta),
                            U = !1,
                            W = -2;
                        "number" === typeof X && (U = !0, W = X);
                        X = !U || W < I;
                        l(S, ka, ta, G);
                        X && (X = L.GetSolModifiers(), r.PushCopySol(X), W = C.GetCurrentSol(), U = p.GetCurrentSol(), W._SetSelectAll(!1), U._SetSelectAll(!1), C === p ? (U = W._GetOwnInstances(), f.clearArray(U), U.push(ka), U.push(ta), C.ApplySolToContainer()) : (W = W._GetOwnInstances(), U = U._GetOwnInstances(), f.clearArray(W), f.clearArray(U),
                            W.push(ka), U.push(ta), C.ApplySolToContainer(), p.ApplySolToContainer()), L.Retrigger(z, N), r.PopSol(X))
                    } else n(S, ka, ta)
                }
                f.clearArray(a)
            }
            B.Pop();
            return !1
        },
        * DebugOnCollision(p) {
            if (!p) return !1;
            var x = this._runtime;
            const t = x.GetCollisionEngine(),
                r = x.GetEventSheetManager(),
                B = r.GetEventStack(),
                z = B.GetCurrentStackFrame(),
                C = x.GetTickCount(),
                F = C - 1,
                J = z.GetCurrentEvent(),
                G = B.Push(J);
            var I = r.GetCurrentCondition();
            const L = I.GetObjectClass();
            var N = I.GetSavedDataMap();
            I = I.GetUnsavedDataMap();
            let S = N.get("collmemory");
            S || (S = f.New(f.PairMap), N.set("collmemory", S));
            I.get("spriteCreatedDestroyCallback") || (I.set("spriteCreatedDestroyCallback", !0), x.Dispatcher().addEventListener("instancedestroy", ia => q(S, ia.instance)));
            N = L.GetCurrentSol();
            x = p.GetCurrentSol();
            N = N.GetInstances();
            I = null;
            for (let ia = 0; ia < N.length; ++ia) {
                const ka = N[ia];
                x.IsSelectAll() ? (t.GetCollisionCandidates(ka.GetWorldInfo().GetLayer(), p, ka.GetWorldInfo().GetBoundingBox(), a), I = a, t.AddRegisteredCollisionCandidates(ka, p, I)) : I = x.GetInstances();
                for (let ya =
                        0; ya < I.length; ++ya) {
                    const ta = I[ya];
                    if (t.TestOverlap(ka, ta) || t.CheckRegisteredCollision(ka, ta)) {
                        var X = y(S, ka, ta),
                            U = !1,
                            W = -2;
                        "number" === typeof X && (U = !0, W = X);
                        X = !U || W < F;
                        l(S, ka, ta, C);
                        X && (X = J.GetSolModifiers(), r.PushCopySol(X), W = L.GetCurrentSol(), U = p.GetCurrentSol(), W._SetSelectAll(!1), U._SetSelectAll(!1), L === p ? (U = W._GetOwnInstances(), f.clearArray(U), U.push(ka), U.push(ta), L.ApplySolToContainer()) : (W = W._GetOwnInstances(), U = U._GetOwnInstances(), f.clearArray(W), f.clearArray(U), W.push(ka), U.push(ta), L.ApplySolToContainer(),
                            p.ApplySolToContainer()), yield* J.DebugRetrigger(z, G), r.PopSol(X))
                    } else n(S, ka, ta)
                }
                f.clearArray(a)
            }
            B.Pop();
            return !1
        },
        IsOverlapping(p) {
            return w(this, p, 0, 0)
        },
        IsOverlappingOffset(p, x, t) {
            return w(this, p, x, t)
        },
        IsAnimPlaying(p) {
            return f.equalsNoCase(this._GetCurrentAnimationName(), p)
        },
        CompareFrame(p, x) {
            return f.compare(this._currentFrameIndex, p, x)
        },
        CompareAnimSpeed(p, x) {
            return f.compare(this._GetAnimSpeed(), p, x)
        },
        OnAnimFinished(p) {
            return f.equalsNoCase(this._animTriggerName, p)
        },
        OnAnyAnimFinished() {
            return !0
        },
        OnFrameChanged() {
            return !0
        },
        IsMirrored() {
            return 0 > this.GetWorldInfo().GetWidth()
        },
        IsFlipped() {
            return 0 > this.GetWorldInfo().GetHeight()
        },
        OnURLLoaded() {
            return !0
        },
        OnURLFailed() {
            return !0
        },
        IsCollisionEnabled() {
            return this.GetWorldInfo().IsCollisionEnabled()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Sprite.Acts = {
        Spawn(b, a, d, c) {
            if (b && a) {
                var [e, g] = this.GetImagePoint(d);
                if (d = this._runtime.CreateInstance(b, a, e, g, c)) {
                    c && a.SortAndAddSceneGraphInstancesByZIndex(d);
                    b.GetPlugin().IsRotatable() && (a = d.GetWorldInfo(), a.SetAngle(this.GetWorldInfo().GetAngle()), a.SetBboxChanged());
                    a = this._runtime.GetEventSheetManager();
                    a.BlockFlushingInstances(!0);
                    d._TriggerOnCreatedOnSelfAndRelated();
                    a.BlockFlushingInstances(!1);
                    c = this._runtime.GetCurrentAction().GetSavedDataMap();
                    a = !1;
                    if (!c.has("Spawn_LastExec") || c.get("Spawn_LastExec") < this._runtime.GetExecCount()) a = !0, c.set("Spawn_LastExec", this._runtime.GetExecCount());
                    if (b !== this.GetObjectClass() && (b = b.GetCurrentSol(), b._SetSelectAll(!1), b = b._GetOwnInstances(), a && f.clearArray(b), b.push(d), d.IsInContainer()))
                        for (const h of d.siblings()) d = h.GetObjectClass().GetCurrentSol(), a ? d.SetSinglePicked(h) : (d._SetSelectAll(!1), d._PushInstance(h))
                }
            }
        },
        StopAnim() {
            this.SetAnimationPlaying(!1)
        },
        StartAnim(b) {
            this._StartAnim(b)
        },
        SetAnim(b,
            a) {
            this._SetAnim(b, a)
        },
        SetAnimFrame(b) {
            this._SetAnimFrame(b)
        },
        SetAnimSpeed(b) {
            this._SetAnimSpeed(b)
        },
        SetAnimRepeatToFrame(b) {
            this._SetAnimRepeatToFrame(b)
        },
        SetMirrored(b) {
            const a = this.GetWorldInfo(),
                d = a.GetWidth();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetWidth(b), a.SetBboxChanged())
        },
        SetFlipped(b) {
            const a = this.GetWorldInfo(),
                d = a.GetHeight();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetHeight(b), a.SetBboxChanged())
        },
        SetScale(b) {
            const a = this._currentAnimationFrame.GetImageInfo(),
                d = this.GetWorldInfo();
            var c =
                0 > d.GetWidth() ? -1 : 1;
            const e = 0 > d.GetHeight() ? -1 : 1;
            c *= a.GetWidth() * b;
            b = a.GetHeight() * b * e;
            if (d.GetWidth() !== c || d.GetHeight() !== b) d.SetSize(c, b), d.SetBboxChanged()
        },
        async LoadURL(b, a, d) {
            d = this._currentAnimationFrame.GetImageInfo();
            const c = this.GetWorldInfo(),
                e = this._runtime;
            if (d.GetURL() === b) 0 === a && (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged()), this.Trigger(f.Plugins.Sprite.Cnds.OnURLLoaded);
            else {
                var g = f.New(f.ImageInfo);
                try {
                    await g.LoadDynamicAsset(e, b);
                    if (!g.IsLoaded()) throw Error("image failed to load");
                    await g.LoadStaticTexture(e.GetRenderer(), {
                        sampling: this._runtime.GetSampling()
                    })
                } catch (h) {
                    console.error("Load image from URL failed: ", h);
                    this.Trigger(f.Plugins.Sprite.Cnds.OnURLFailed);
                    return
                }
                d.ReplaceWith(g);
                this._sdkType._UpdateAllCurrentTexture();
                this.WasReleased() || 0 !== a || (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged());
                e.UpdateRender();
                this.WasReleased() || await this.TriggerAsync(f.Plugins.Sprite.Cnds.OnURLLoaded)
            }
        },
        SetCollisions(b) {
            this.GetWorldInfo().SetCollisionEnabled(b)
        },
        SetSolidCollisionFilter(b,
            a) {
            this.GetWorldInfo().SetSolidCollisionFilter(0 === b, a)
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        }
    }
}
"use strict";
self.C3.Plugins.Sprite.Exps = {
    AnimationFrame() {
        return this._currentFrameIndex
    },
    AnimationFrameCount() {
        return this._currentAnimation.GetFrameCount()
    },
    AnimationName() {
        return this._currentAnimation.GetName()
    },
    AnimationSpeed() {
        return this._GetAnimSpeed()
    },
    OriginalAnimationSpeed() {
        return this._currentAnimation.GetSpeed()
    },
    ImagePointX(f) {
        return this.GetImagePoint(f)[0]
    },
    ImagePointY(f) {
        return this.GetImagePoint(f)[1]
    },
    ImagePointCount() {
        return this.GetImagePointCount()
    },
    ImageWidth() {
        return this.GetCurrentImageInfo().GetWidth()
    },
    ImageHeight() {
        return this.GetCurrentImageInfo().GetHeight()
    },
    PolyPointXAt(f) {
        return this.GetCollisionPolyPoint(f)[0]
    },
    PolyPointYAt(f) {
        return this.GetCollisionPolyPoint(f)[1]
    },
    PolyPointCount() {
        return this.GetCollisionPolyPointCount()
    }
}; {
    "use strict";
    const f = self.C3;
    f.Plugins.LocalStorage = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.LocalStorage.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.LocalStorage.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b);
            this._lastValue = this._currentKey = "";
            this._keyNamesList = [];
            this._errorMessage = "";
            this._pendingSets = this._pendingGets = 0;
            this._storage = this._runtime._GetProjectStorage();
            this._debugCache = new Map;
            this._isLoadingDebugCache = !1
        }
        Release() {
            super.Release()
        }
        async _TriggerStorageError(b) {
            this._errorMessage = this._GetErrorString(b);
            await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnError)
        }
        _GetErrorString(b) {
            return b ?
                "string" === typeof b ? b : "string" === typeof b.message ? b.message : "string" === typeof b.name ? b.name : "string" === typeof b.data ? b.data : "unknown error" : "unknown error"
        }
        GetDebuggerProperties() {
            this._isLoadingDebugCache || this._DebugCacheStorage();
            return [{
                title: "plugins.localstorage.name",
                properties: [...this._debugCache.entries()].map(b => ({
                    name: "$" + b[0],
                    value: b[1],
                    onedit: a => this._storage.setItem(b[0], a)
                }))
            }]
        }
        async _DebugCacheStorage() {
            this._isLoadingDebugCache = !0;
            try {
                const b = await this._storage.keys();
                b.sort((d,
                    c) => {
                    d = d.toLowerCase();
                    c = c.toLowerCase();
                    return d < c ? -1 : c < d ? 1 : 0
                });
                const a = await Promise.all(b.map(d => this._storage.getItem(d)));
                this._debugCache.clear();
                for (let d = 0, c = b.length; d < c; ++d) this._debugCache.set(b[d], a[d])
            } catch (b) {
                console.warn("[C3 debugger] Error displaying local storage: ", b)
            } finally {
                this._isLoadingDebugCache = !1
            }
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.LocalStorage.Cnds = {
        OnItemSet(b) {
            return this._currentKey === b
        },
        OnAnyItemSet() {
            return !0
        },
        OnItemGet(b) {
            return this._currentKey === b
        },
        OnAnyItemGet() {
            return !0
        },
        OnItemRemoved(b) {
            return this._currentKey === b
        },
        OnAnyItemRemoved() {
            return !0
        },
        OnCleared() {
            return !0
        },
        OnAllKeyNamesLoaded() {
            return !0
        },
        OnError() {
            return !0
        },
        OnItemExists(b) {
            return this._currentKey === b
        },
        OnItemMissing(b) {
            return this._currentKey === b
        },
        CompareKey(b, a) {
            return f.compare(this._currentKey, b, a)
        },
        CompareValue(b,
            a) {
            return f.compare(this._lastValue, b, a)
        },
        IsProcessingSets() {
            return 0 < this._pendingSets
        },
        IsProcessingGets() {
            return 0 < this._pendingGets
        },
        OnAllSetsComplete() {
            return !0
        },
        OnAllGetsComplete() {
            return !0
        }
    }
} {
    "use strict";
    const f = self.C3;

    function b(a) {
        return "string" === typeof a || "number" === typeof a
    }
    f.Plugins.LocalStorage.Acts = {
        async SetItem(a, d) {
            this._pendingSets++;
            try {
                const c = await this._storage.setItem(a, d);
                await this.ScheduleTriggers(async () => {
                    this._currentKey = a;
                    this._lastValue = c;
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAnyItemSet);
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemSet)
                })
            } catch (c) {
                await this._TriggerStorageError(c)
            } finally {
                this._pendingSets--, 0 === this._pendingSets &&
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAllSetsComplete)
            }
        },
        async SetBinaryItem(a, d) {
            if (d && (d = d.GetFirstPicked(this._inst)) && (d = d.GetSdkInstance())) {
                d = d.GetArrayBufferReadOnly();
                this._pendingSets++;
                try {
                    await this._storage.setItem(a, d), await this.ScheduleTriggers(async () => {
                        this._currentKey = a;
                        this._lastValue = "";
                        await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAnyItemSet);
                        await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemSet)
                    })
                } catch (c) {
                    await this._TriggerStorageError(c)
                } finally {
                    this._pendingSets--,
                        0 === this._pendingSets && await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAllSetsComplete)
                }
            }
        },
        async GetItem(a) {
            this._pendingGets++;
            try {
                const d = await this._storage.getItem(a);
                await this.ScheduleTriggers(async () => {
                    this._currentKey = a;
                    this._lastValue = b(d) ? d : "";
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAnyItemGet);
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemGet)
                })
            } catch (d) {
                await this._TriggerStorageError(d)
            } finally {
                this._pendingGets--, 0 === this._pendingGets && await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAllGetsComplete)
            }
        },
        async GetBinaryItem(a, d) {
            if (d && (d = d.GetFirstPicked(this._inst))) {
                var c = d.GetSdkInstance();
                this._pendingGets++;
                try {
                    let e = await this._storage.getItem(a);
                    e = e instanceof ArrayBuffer ? e : new ArrayBuffer(0);
                    await this.ScheduleTriggers(async () => {
                        this._lastValue = "";
                        this._currentKey = a;
                        c.SetArrayBufferTransfer(e);
                        await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAnyItemGet);
                        await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemGet)
                    })
                } catch (e) {
                    await this._TriggerStorageError(e)
                } finally {
                    this._pendingGets--,
                        0 === this._pendingGets && await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAllGetsComplete)
                }
            }
        },
        async CheckItemExists(a) {
            try {
                const d = await this._storage.getItem(a);
                await this.ScheduleTriggers(async () => {
                    this._currentKey = a;
                    "undefined" === typeof d || null === d ? (this._lastValue = "", await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemMissing)) : (this._lastValue = b(d) ? d : "", await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemExists))
                })
            } catch (d) {
                await this._TriggerStorageError(d)
            }
        },
        async RemoveItem(a) {
            try {
                await this._storage.removeItem(a),
                    await this.ScheduleTriggers(async () => {
                        this._currentKey = a;
                        this._lastValue = "";
                        await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAnyItemRemoved);
                        await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnItemRemoved)
                    })
            } catch (d) {
                await this._TriggerStorageError(d)
            }
        },
        async ClearStorage() {
            try {
                await this._storage.clear(), await this.ScheduleTriggers(async () => {
                    this._lastValue = this._currentKey = "";
                    f.clearArray(this._keyNamesList);
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnCleared)
                })
            } catch (a) {
                await this._TriggerStorageError(a)
            }
        },
        async GetAllKeyNames() {
            try {
                const a = await this._storage.keys();
                await this.ScheduleTriggers(async () => {
                    this._keyNamesList = a;
                    await this.TriggerAsync(f.Plugins.LocalStorage.Cnds.OnAllKeyNamesLoaded)
                })
            } catch (a) {
                await this._TriggerStorageError(a)
            }
        }
    }
}
"use strict";
self.C3.Plugins.LocalStorage.Exps = {
    ItemValue() {
        return this._lastValue
    },
    Key() {
        return this._currentKey
    },
    KeyCount() {
        return this._keyNamesList.length
    },
    KeyAt(f) {
        f = Math.floor(f);
        return 0 > f || f >= this._keyNamesList.length ? "" : this._keyNamesList[f]
    },
    ErrorMessage() {
        return this._errorMessage
    }
}; {
    "use strict";
    const f = self.C3;
    f.Plugins.Browser = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Browser.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Browser.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, "browser");
            this._initLocationStr = "";
            this._isOnline = !1;
            this._docTitle = this._referrer = "";
            this._isCookieEnabled = !1;
            this._windowOuterHeight = this._windowOuterWidth = this._screenHeight = this._screenWidth = 0;
            this._isScirraArcade = !1;
            this.AddDOMMessageHandlers([
                ["online-state", d => this._OnOnlineStateChanged(d)],
                ["backbutton", () => this._OnBackButton()],
                ["sw-message", d => this._OnSWMessage(d)],
                ["hashchange",
                    d => this._OnHashChange(d)
                ]
            ]);
            b = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "afterfirstlayoutstart", () => this._OnAfterFirstLayoutStart()), f.Disposable.From(b, "window-resize", () => this._OnWindowResize()), f.Disposable.From(b, "suspend", () => this._OnSuspend()), f.Disposable.From(b, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("get-initial-state", {
                exportType: this._runtime.GetExportType()
            }).then(d => {
                this._initLocationStr = d.location;
                this._isOnline = d.isOnline;
                this._referrer = d.referrer;
                this._docTitle = d.title;
                this._isCookieEnabled = d.isCookieEnabled;
                this._screenWidth = d.screenWidth;
                this._screenHeight = d.screenHeight;
                this._windowOuterWidth = d.windowOuterWidth;
                this._windowOuterHeight = d.windowOuterHeight;
                this._isScirraArcade = d.isScirraArcade
            }))
        }
        Release() {
            super.Release()
        }
        _OnAfterFirstLayoutStart() {
            this.PostToDOM("ready-for-sw-messages")
        }
        async _OnOnlineStateChanged(b) {
            b = !!b.isOnline;
            this._isOnline !== b && ((this._isOnline = b) ? await this.TriggerAsync(f.Plugins.Browser.Cnds.OnOnline) :
                await this.TriggerAsync(f.Plugins.Browser.Cnds.OnOffline))
        }
        async _OnWindowResize() {
            await this.TriggerAsync(f.Plugins.Browser.Cnds.OnResize)
        }
        _OnSuspend() {
            this.Trigger(f.Plugins.Browser.Cnds.OnPageHidden)
        }
        _OnResume() {
            this.Trigger(f.Plugins.Browser.Cnds.OnPageVisible)
        }
        async _OnBackButton() {
            await this.TriggerAsync(f.Plugins.Browser.Cnds.OnBackButton)
        }
        _OnSWMessage(b) {
            b = b.type;
            "downloading-update" === b ? this.Trigger(f.Plugins.Browser.Cnds.OnUpdateFound) : "update-ready" === b || "update-pending" === b ? this.Trigger(f.Plugins.Browser.Cnds.OnUpdateReady) :
                "offline-ready" === b && this.Trigger(f.Plugins.Browser.Cnds.OnOfflineReady)
        }
        _OnHashChange(b) {
            this._initLocationStr = b.location;
            this.Trigger(f.Plugins.Browser.Cnds.OnHashChange)
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.browser.name",
                properties: [{
                    name: "plugins.browser.debugger.user-agent",
                    value: navigator.userAgent
                }, {
                    name: "plugins.browser.debugger.is-online",
                    value: this._isOnline
                }, {
                    name: "plugins.browser.debugger.is-fullscreen",
                    value: this._runtime.GetCanvasManager().IsDocumentFullscreen()
                }]
            }]
        }
    }
}
"use strict";
self.C3.Plugins.Browser.Cnds = {
    IsOnline() {
        return this._isOnline
    },
    OnOnline() {
        return !0
    },
    OnOffline() {
        return !0
    },
    OnResize() {
        return !0
    },
    CookiesEnabled() {
        return this._isCookieEnabled
    },
    IsFullscreen() {
        return this._runtime.GetCanvasManager().IsDocumentFullscreen()
    },
    OnBackButton() {
        return !0
    },
    IsPortraitLandscape(f) {
        const b = this._runtime.GetCanvasManager().GetLastWidth(),
            a = this._runtime.GetCanvasManager().GetLastHeight();
        return (b <= a ? 0 : 1) === f
    },
    OnUpdateFound() {
        return !0
    },
    OnUpdateReady() {
        return !0
    },
    OnOfflineReady() {
        return !0
    },
    OnHashChange() {
        return !0
    },
    PageVisible() {
        return !this._runtime.IsSuspended()
    },
    OnPageHidden() {
        return !0
    },
    OnPageVisible() {
        return !0
    },
    HasJava() {
        return !1
    },
    IsDownloadingUpdate() {
        return !1
    },
    OnMenuButton() {
        return !1
    },
    OnSearchButton() {
        return !1
    },
    IsMetered() {
        return !1
    },
    IsCharging() {
        return !0
    },
    SupportsFullscreen() {
        return !0
    }
}; {
    "use strict";
    const f = self.C3,
        b = "portrait landscape portrait-primary portrait-secondary landscape-primary landscape-secondary".split(" ");
    f.Plugins.Browser.Acts = {
        Alert(a) {
            this.PostToDOM("alert", {
                message: a.toString()
            })
        },
        Close() {
            this._isScirraArcade || (this._runtime.IsDebug() ? self.C3Debugger.CloseWindow() : this.PostToDOM("close"))
        },
        Focus() {
            this.PostToDOM("set-focus", {
                isFocus: !0
            })
        },
        Blur() {
            this.PostToDOM("set-focus", {
                isFocus: !1
            })
        },
        GoBack() {
            this._isScirraArcade || this.PostToDOM("navigate", {
                type: "back"
            })
        },
        GoForward() {
            this._isScirraArcade || this.PostToDOM("navigate", {
                type: "forward"
            })
        },
        GoHome() {},
        Reload() {
            this._isScirraArcade || (this._runtime.IsDebug() ? this._runtime.PostToDebugger({
                type: "reload"
            }) : this.PostToDOM("navigate", {
                type: "reload"
            }))
        },
        GoToURL(a, d) {
            this._PostToDOMMaybeSync("navigate", {
                type: "url",
                url: a,
                target: d,
                exportType: this._runtime.GetExportType()
            })
        },
        GoToURLWindow(a, d) {
            this._PostToDOMMaybeSync("navigate", {
                type: "new-window",
                url: a,
                tag: d,
                exportType: this._runtime.GetExportType()
            })
        },
        RequestFullScreen(a,
            d) {
            2 <= a && (a += 1);
            6 === a && (a = 2);
            1 === a && (a = 0);
            a = f.CanvasManager._FullscreenModeNumberToString(a);
            this._runtime.GetCanvasManager().SetDocumentFullscreenMode(a);
            this._PostToDOMMaybeSync("request-fullscreen", {
                navUI: d
            })
        },
        CancelFullScreen() {
            this._PostToDOMMaybeSync("exit-fullscreen")
        },
        Vibrate(a) {
            a = a.split(",");
            for (let d = 0, c = a.length; d < c; ++d) a[d] = parseInt(a[d], 10);
            this._PostToDOMMaybeSync("vibrate", {
                pattern: a
            })
        },
        async InvokeDownload(a, d) {
            a && d && (a = await this._runtime.GetAssetManager().GetProjectFileUrl(a), this._runtime.InvokeDownload(a,
                d))
        },
        InvokeDownloadString(a, d, c) {
            c && (a = `data:${d},${encodeURIComponent(a)}`, this._runtime.InvokeDownload(a, c))
        },
        ConsoleLog(a, d) {
            d = d.toString();
            0 === a ? console.log(d) : 1 === a ? console.warn(d) : 2 === a && console.error(d)
        },
        ConsoleGroup(a) {
            console.group(a)
        },
        ConsoleGroupEnd() {
            console.groupEnd()
        },
        ExecJs(a) {
            try {
                eval(a)
            } catch (d) {
                console.error("Error executing JavaScript: ", d)
            }
        },
        LockOrientation(a) {
            a = Math.floor(a);
            0 > a || a >= b.length || this._PostToDOMMaybeSync("lock-orientation", {
                orientation: b[a]
            })
        },
        UnlockOrientation() {
            this._PostToDOMMaybeSync("unlock-orientation")
        },
        LoadStyleSheet(a) {
            this._runtime.GetAssetManager().LoadStyleSheet(a)
        },
        SetHash(a) {
            this.PostToDOM("set-hash", {
                hash: a
            })
        }
    }
}
"use strict";
self.C3.Plugins.Browser.Exps = {
    URL() {
        return this._runtime.IsInWorker() ? this._initLocationStr : location.toString()
    },
    Protocol() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).protocol : location.protocol
    },
    Domain() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).hostname : location.hostname
    },
    Port() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).port : location.port
    },
    PathName() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).pathname :
            location.pathname
    },
    Hash() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).hash : location.hash
    },
    QueryString() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search
    },
    QueryParam(f) {
        const b = this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search;
        return (f = RegExp("[?&]" + f + "=([^&]*)").exec(b)) ? decodeURIComponent(f[1].replace(/\+/g, " ")) : ""
    },
    Referrer() {
        return this._referrer
    },
    Title() {
        return this._docTitle
    },
    Language() {
        return navigator.language
    },
    Platform() {
        return navigator.platform
    },
    UserAgent() {
        return navigator.userAgent
    },
    ExecJS(f) {
        let b = 0;
        try {
            b = eval(f)
        } catch (a) {
            console.error("Error executing JavaScript: ", a)
        }
        return "number" === typeof b || "string" === typeof b ? b : "boolean" === typeof b ? b ? 1 : 0 : 0
    },
    Name() {
        return navigator.appName
    },
    Version() {
        return navigator.appVersion
    },
    Product() {
        return navigator.product
    },
    Vendor() {
        return navigator.vendor
    },
    BatteryLevel() {
        return 1
    },
    BatteryTimeLeft() {
        return Infinity
    },
    Bandwidth() {
        const f = navigator.connection;
        return f ? f.downlink ||
            f.downlinkMax || f.bandwidth || Infinity : Infinity
    },
    ConnectionType() {
        const f = navigator.connection;
        return f ? f.type || "unknown" : "unknown"
    },
    DevicePixelRatio() {
        return self.devicePixelRatio
    },
    ScreenWidth() {
        return this._screenWidth
    },
    ScreenHeight() {
        return this._screenHeight
    },
    WindowInnerWidth() {
        return this._runtime.GetCanvasManager().GetLastWidth()
    },
    WindowInnerHeight() {
        return this._runtime.GetCanvasManager().GetLastHeight()
    },
    WindowOuterWidth() {
        return this._windowOuterWidth
    },
    WindowOuterHeight() {
        return this._windowOuterWidth
    }
}; {
    "use strict";
    const f = self.C3;
    f.Plugins.Touch = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X;
    f.Plugins.Touch.Type = class extends f.SDKTypeBase {
        constructor(c) {
            super(c)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.ITouchObjectType
        }
    };
    let a = null;

    function d() {
        return a.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.ITouchObjectType = class extends self.IObjectClass {
        constructor(c) {
            super(c);
            a = c;
            c.GetRuntime()._GetCommonScriptInterfaces().touch = this
        }
        requestPermission(c) {
            b.RequireString(c);
            const e = d();
            if ("orientation" === c) return e._RequestPermission(0);
            if ("motion" === c) return e._RequestPermission(1);
            throw Error("invalid type");
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Touch.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, "touch");
            this._touches = new Map;
            this._isMouseDown = this._useMouseInput = !1;
            this._getTouchIndex = this._curTouchY = this._curTouchX = this._triggerPermission = this._triggerId = this._triggerIndex = this._accWithGZ = this._accWithGY = this._accWithGX = this._accZ = this._accY = this._accX = this._orientGamma = this._orientBeta = this._orientAlpha = this._orientCompassHeading = 0;
            this._permissionPromises = [];
            a && (this._useMouseInput =
                a[0]);
            this.AddDOMMessageHandler("permission-result", d => this._OnPermissionResult(d));
            b = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "pointerdown", d => this._OnPointerDown(d.data)), f.Disposable.From(b, "pointermove", d => this._OnPointerMove(d.data)), f.Disposable.From(b, "pointerup", d => this._OnPointerUp(d.data, !1)), f.Disposable.From(b, "pointercancel", d => this._OnPointerUp(d.data, !0)), f.Disposable.From(b, "deviceorientation", d => this._OnDeviceOrientation(d.data)),
                f.Disposable.From(b, "deviceorientationabsolute", d => this._OnDeviceOrientationAbsolute(d.data)), f.Disposable.From(b, "devicemotion", d => this._OnDeviceMotion(d.data)), f.Disposable.From(b, "tick2", d => this._OnTick2()))
        }
        Release() {
            this._touches.clear();
            super.Release()
        }
        _OnPointerDown(b) {
            if ("mouse" === b.pointerType)
                if (this._useMouseInput) this._isMouseDown = !0;
                else return;
            const a = b.pointerId;
            if (!this._touches.has(a)) {
                var d = b.pageX - this._runtime.GetCanvasClientX();
                b = b.pageY - this._runtime.GetCanvasClientY();
                var c =
                    performance.now(),
                    e = this._touches.size;
                this._triggerIndex = e;
                this._triggerId = a;
                var g = f.New(f.Plugins.Touch.TouchInfo);
                g.Init(c, d, b, a, e);
                this._touches.set(a, g);
                this.Trigger(f.Plugins.Touch.Cnds.OnNthTouchStart);
                this.Trigger(f.Plugins.Touch.Cnds.OnTouchStart);
                this._curTouchX = d;
                this._curTouchY = b;
                this.Trigger(f.Plugins.Touch.Cnds.OnTouchObject)
            }
        }
        _OnPointerMove(b) {
            if ("mouse" !== b.pointerType || this._isMouseDown) {
                var a = this._touches.get(b.pointerId);
                if (a) {
                    var d = performance.now();
                    if (!(2 > d - a.GetTime())) {
                        var c =
                            b.pageX - this._runtime.GetCanvasClientX(),
                            e = b.pageY - this._runtime.GetCanvasClientY();
                        a.Update(d, c, e, b.width, b.height, b.pressure)
                    }
                }
            }
        }
        _OnPointerUp(b, a) {
            if ("mouse" === b.pointerType)
                if (this._isMouseDown) this._isMouseDown = !1;
                else return;
            const d = performance.now();
            b = b.pointerId;
            const c = this._touches.get(b);
            c && (this._triggerIndex = c.GetStartIndex(), this._triggerId = c.GetId(), this.Trigger(f.Plugins.Touch.Cnds.OnNthTouchEnd), this.Trigger(f.Plugins.Touch.Cnds.OnTouchEnd), a || (a = c.ShouldTriggerTap(d), "single-tap" ===
                a ? (this.Trigger(f.Plugins.Touch.Cnds.OnTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(f.Plugins.Touch.Cnds.OnTapGestureObject)) : "double-tap" === a && (this.Trigger(f.Plugins.Touch.Cnds.OnDoubleTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(f.Plugins.Touch.Cnds.OnDoubleTapGestureObject))), c.Release(), this._touches.delete(b))
        }
        _RequestPermission(b) {
            this._PostToDOMMaybeSync("request-permission", {
                type: b
            });
            return new Promise((a, d) => {
                this._permissionPromises.push({
                    type: b,
                    resolve: a,
                    reject: d
                })
            })
        }
        _OnPermissionResult(b) {
            const a = b.result,
                d = b.type;
            this._triggerPermission = d;
            b = this._permissionPromises.filter(c => c.type === d);
            for (const c of b) c.resolve(a ? "granted" : "denied");
            this._permissionPromises = this._permissionPromises.filter(c => c.type !== d);
            a ? (this.Trigger(f.Plugins.Touch.Cnds.OnPermissionGranted), 0 === d ? this._runtime.RequestDeviceOrientationEvent() : this._runtime.RequestDeviceMotionEvent()) : this.Trigger(f.Plugins.Touch.Cnds.OnPermissionDenied)
        }
        _OnDeviceOrientation(b) {
            "number" ===
            typeof b.webkitCompassHeading ? this._orientCompassHeading = b.webkitCompassHeading : b.absolute && (this._orientCompassHeading = b.alpha);
            this._orientAlpha = b.alpha;
            this._orientBeta = b.beta;
            this._orientGamma = b.gamma
        }
        _OnDeviceOrientationAbsolute(b) {
            this._orientCompassHeading = b.alpha
        }
        _OnDeviceMotion(b) {
            const a = b.acceleration;
            a && (this._accX = a.x, this._accY = a.y, this._accZ = a.z);
            if (b = b.accelerationIncludingGravity) this._accWithGX = b.x, this._accWithGY = b.y, this._accWithGZ = b.z
        }
        _OnTick2() {
            const b = performance.now();
            let a =
                0;
            for (const d of this._touches.values()) d.GetTime() <= b - 50 && d._SetLastTime(b), d.ShouldTriggerHold(b) && (this._triggerIndex = d.GetStartIndex(), this._triggerId = d.GetId(), this._getTouchIndex = a, this.Trigger(f.Plugins.Touch.Cnds.OnHoldGesture), this._curTouchX = d.GetX(), this._curTouchY = d.GetY(), this.Trigger(f.Plugins.Touch.Cnds.OnHoldGestureObject), this._getTouchIndex = 0), ++a
        }
        _GetTouchByIndex(b) {
            b = Math.floor(b);
            for (const a of this._touches.values()) {
                if (0 === b) return a;
                --b
            }
            return null
        }
        _IsClientPosOnCanvas(b, a) {
            return 0 <=
                b && 0 <= a && b < this._runtime.GetCanvasCssWidth() && a < this._runtime.GetCanvasCssHeight()
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.touch.debugger.touches",
                properties: [...this._touches.values()].map(b => ({
                    name: "$" + b.GetId(),
                    value: b.GetX() + ", " + b.GetY()
                }))
            }]
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = [];
    f.Plugins.Touch.Cnds = {
        OnTouchStart() {
            return !0
        },
        OnTouchEnd() {
            return !0
        },
        IsInTouch() {
            return 0 < this._touches.size
        },
        OnTouchObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        IsTouchingObject(a) {
            if (!a) return !1;
            const d = a.GetCurrentSol();
            var c = d.GetInstances();
            for (const e of c) {
                c = e.GetWorldInfo();
                const g = c.GetLayer();
                for (const h of this._touches.values()) {
                    if (!this._IsClientPosOnCanvas(h.GetX(),
                            h.GetY())) continue;
                    const [l, n] = g.CanvasCssToLayer(h.GetX(), h.GetY(), c.GetTotalZElevation());
                    if (c.ContainsPoint(l, n)) {
                        b.push(e);
                        break
                    }
                }
            }
            return b.length ? (d.SetArrayPicked(b), a.ApplySolToContainer(), f.clearArray(b), !0) : !1
        },
        CompareTouchSpeed(a, d, c) {
            return (a = this._GetTouchByIndex(a)) ? f.compare(a.GetSpeed(), d, c) : !1
        },
        OrientationSupported() {
            return !0
        },
        MotionSupported() {
            return !0
        },
        CompareOrientation(a, d, c) {
            this._runtime.RequestDeviceOrientationEvent();
            return f.compare(0 === a ? this._orientAlpha : 1 === a ? this._orientBeta :
                this._orientGamma, d, c)
        },
        CompareAcceleration(a, d, c) {
            this._runtime.RequestDeviceMotionEvent();
            return f.compare(0 === a ? this._accWithGX : 1 === a ? this._accWithGY : 2 === a ? this._accWithGZ : 3 === a ? this._accX : 4 === a ? this._accY : this._accZ, d, c)
        },
        OnNthTouchStart(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        OnNthTouchEnd(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        HasNthTouch(a) {
            a = Math.floor(a);
            return this._touches.size >= a + 1
        },
        OnHoldGesture() {
            return !0
        },
        OnTapGesture() {
            return !0
        },
        OnDoubleTapGesture() {
            return !0
        },
        OnHoldGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnDoubleTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a,
                this._curTouchX, this._curTouchY, !1) : !1
        },
        OnPermissionGranted(a) {
            return this._triggerPermission === a
        },
        OnPermissionDenied(a) {
            return this._triggerPermission === a
        }
    }
}
"use strict";
self.C3.Plugins.Touch.Acts = {
    RequestPermission(f) {
        this._RequestPermission(f)
    }
}; {
    "use strict";
    const f = self.C3;
    f.Plugins.Touch.Exps = {
        TouchCount() {
            return this._touches.size
        },
        X(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !0) : 0
        },
        Y(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !1) : 0
        },
        XAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ?
                b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        XForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        AbsoluteX() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetX() : 0
        },
        AbsoluteY() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetY() : 0
        },
        AbsoluteXAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetX() : 0
        },
        AbsoluteYAt(b) {
            return (b = this._GetTouchByIndex(b)) ?
                b.GetY() : 0
        },
        AbsoluteXForID(b) {
            return (b = this._touches.get(b)) ? b.GetX() : 0
        },
        AbsoluteYForID(b) {
            return (b = this._touches.get(b)) ? b.GetY() : 0
        },
        SpeedAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetSpeed() : 0
        },
        SpeedForID(b) {
            return (b = this._touches.get(b)) ? b.GetSpeed() : 0
        },
        AngleAt(b) {
            return (b = this._GetTouchByIndex(b)) ? f.toDegrees(b.GetAngle()) : 0
        },
        AngleForID(b) {
            return (b = this._touches.get(b)) ? f.toDegrees(b.GetAngle()) : 0
        },
        CompassHeading() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientCompassHeading
        },
        Alpha() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientAlpha
        },
        Beta() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientBeta
        },
        Gamma() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientGamma
        },
        AccelerationXWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGX
        },
        AccelerationYWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGY
        },
        AccelerationZWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGZ
        },
        AccelerationX() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accX
        },
        AccelerationY() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accY
        },
        AccelerationZ() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accZ
        },
        TouchIndex() {
            return this._triggerIndex
        },
        TouchID() {
            return this._triggerId
        },
        WidthForID(b) {
            return (b = this._touches.get(b)) ? b.GetWidth() : 0
        },
        HeightForID(b) {
            return (b = this._touches.get(b)) ? b.GetHeight() : 0
        },
        PressureForID(b) {
            return (b = this._touches.get(b)) ? b.GetPressure() : 0
        }
    }
} {
    "use strict";
    const f = self.C3;
    let b = -1E3,
        a = -1E3,
        d = -1E4;
    f.Plugins.Touch.TouchInfo = class extends f.DefendedBase {
        constructor() {
            super();
            this._pressure = this._height = this._width = this._lastY = this._lastX = this._y = this._x = this._startY = this._startX = this._lastTime = this._time = this._startTime = this._startIndex = this._pointerId = 0;
            this._isTooFarForHold = this._hasTriggeredHold = !1
        }
        Release() {}
        Init(c, e, g, h, l) {
            this._pointerId = h;
            this._startIndex = l;
            this._startTime = this._lastTime = this._time = c;
            this._startX = e;
            this._startY = g;
            this._x = e;
            this._y = g;
            this._lastX = e;
            this._lastY = g
        }
        Update(c, e, g, h, l, n) {
            this._lastTime = this._time;
            this._time = c;
            this._lastX = this._x;
            this._lastY = this._y;
            this._x = e;
            this._y = g;
            this._width = h;
            this._height = l;
            this._pressure = n;
            !this._isTooFarForHold && 15 <= f.distanceTo(this._startX, this._startY, this._x, this._y) && (this._isTooFarForHold = !0)
        }
        GetId() {
            return this._pointerId
        }
        GetStartIndex() {
            return this._startIndex
        }
        GetTime() {
            return this._time
        }
        _SetLastTime(c) {
            this._lastTime = c
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSpeed() {
            const c =
                f.distanceTo(this._x, this._y, this._lastX, this._lastY),
                e = (this._time - this._lastTime) / 1E3;
            return 0 < e ? c / e : 0
        }
        GetAngle() {
            return f.angleTo(this._lastX, this._lastY, this._x, this._y)
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetPressure() {
            return this._pressure
        }
        ShouldTriggerHold(c) {
            return this._hasTriggeredHold ? !1 : 500 <= c - this._startTime && !this._isTooFarForHold && 15 > f.distanceTo(this._startX, this._startY, this._x, this._y) ? this._hasTriggeredHold = !0 : !1
        }
        ShouldTriggerTap(c) {
            if (this._hasTriggeredHold) return "";
            if (333 >= c - this._startTime && !this._isTooFarForHold && 15 > f.distanceTo(this._startX, this._startY, this._x, this._y)) {
                if (666 >= c - d && 25 > f.distanceTo(b, a, this._x, this._y)) return a = b = -1E3, d = -1E4, "double-tap";
                b = this._x;
                a = this._y;
                d = c;
                return "single-tap"
            }
            return ""
        }
        GetPositionForLayer(c, e, g) {
            return "undefined" === typeof e ? c.GetLayerByIndex(0).CanvasCssToLayer_DefaultTransform(this._x, this._y)[g ? 0 : 1] : (c = c.GetLayer(e)) ? c.CanvasCssToLayer(this._x, this._y)[g ? 0 : 1] : 0
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Spritefont2 = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Spritefont2.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b);
            this._spriteFont = f.New(self.SpriteFont)
        }
        Release() {
            super.Release()
        }
        OnCreate() {
            this.GetImageInfo().LoadAsset(this._runtime)
        }
        LoadTextures(b) {
            return this.GetImageInfo().LoadStaticTexture(b, {
                sampling: this._runtime.GetSampling()
            })
        }
        ReleaseTextures() {
            this.GetImageInfo().ReleaseTexture()
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        UpdateSettings(b, a, d, c) {
            const e = this.GetImageInfo(),
                g = this._spriteFont;
            g.SetWidth(e.GetWidth());
            g.SetHeight(e.GetHeight());
            g.SetCharacterWidth(b);
            g.SetCharacterHeight(a);
            g.SetCharacterSet(d);
            g.SetSpacingData(c);
            g.UpdateCharacterMap()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = self.C3X,
        a = ["left", "center", "right"],
        d = ["top", "center", "bottom"];
    f.Plugins.Spritefont2.Instance = class extends f.SDKWorldInstanceBase {
        constructor(l, n) {
            super(l);
            this._text = "";
            this._enableBBcode = !0;
            this._characterHeight = this._characterWidth = 16;
            this._characterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@\u00b0+=*$\u00a3\u20ac<>";
            l = "";
            this._characterScale = 1;
            this._verticalAlign = this._horizontalAlign = this._lineHeight = this._characterSpacing =
                0;
            this._wrapByWord = !0;
            this._spriteFontText = null;
            this._typewriterEndTime = this._typewriterStartTime = -1;
            this._typewriterLength = 0;
            n && (this._text = n[0], this._enableBBcode = n[1], this._characterWidth = n[2], this._characterHeight = n[3], this._characterSet = n[4], l = n[5], this._characterScale = n[6], this._characterSpacing = n[7], this._lineHeight = n[8], this._horizontalAlign = n[9], this._verticalAlign = n[10], this._wrapByWord = 0 === n[11], this.GetWorldInfo().SetVisible(n[12]));
            this._sdkType.UpdateSettings(this._characterWidth, this._characterHeight,
                this._characterSet, l);
            this._spriteFontText = f.New(self.SpriteFontText, this._sdkType.GetSpriteFont());
            n = this.GetWorldInfo();
            this._spriteFontText.SetSize(n.GetWidth(), n.GetHeight());
            this._UpdateSettings()
        }
        Release() {
            this._CancelTypewriter();
            this._spriteFontText.Release();
            this._spriteFontText = null;
            super.Release()
        }
        _UpdateSettings() {
            const l = this._spriteFontText;
            l && (l.SetBBCodeEnabled(this._enableBBcode), l.SetText(this._text), l.SetWordWrapMode(this._wrapByWord ? "word" : "character"), l.SetHorizontalAlign(a[this._horizontalAlign]),
                l.SetVerticalAlign(d[this._verticalAlign]), l.SetSpacing(this._characterSpacing), l.SetLineHeight(this._lineHeight))
        }
        Draw(l) {
            const n = this._objectClass.GetImageInfo();
            var q = n.GetTexture();
            if (q) {
                l.SetTexture(q);
                q = this.GetWorldInfo();
                var y = q.GetBoundingQuad(),
                    w = this._spriteFontText;
                w.SetScale(this._characterScale);
                w.SetSceneGraphScale(q.GetSceneGraphScale());
                this._runtime.IsPixelRoundingEnabled() && (y = q.PixelRoundQuad(y));
                w.SetSize(q.GetWidth(), q.GetHeight());
                w.GetSpriteFont().SetTexRect(n.GetTexRect());
                w.SetColor(q.GetUnpremultipliedColor());
                w.Draw(l, y.getTlx(), y.getTly(), q.GetAngle())
            }
        }
        SaveToJson() {
            const l = {
                t: this._text,
                ebbc: this._enableBBcode,
                csc: this._characterScale,
                csp: this._characterSpacing,
                lh: this._lineHeight,
                ha: this._horizontalAlign,
                va: this._verticalAlign,
                w: this._wrapByWord,
                cw: this._sdkType.GetSpriteFont().GetCharacterWidth(),
                ch: this._sdkType.GetSpriteFont().GetCharacterHeight(),
                cs: this._sdkType.GetSpriteFont().GetCharacterSet(),
                sd: this._sdkType.GetSpriteFont().GetSpacingData()
            }; - 1 !== this._typewriterEndTime &&
                (l.tw = {
                    st: this._typewriterStartTime,
                    en: this._typewriterEndTime,
                    l: this._typewriterLength
                });
            return l
        }
        LoadFromJson(l) {
            this._CancelTypewriter();
            this._text = l.t;
            this._enableBBcode = l.ebbc;
            this._characterScale = l.csc;
            this._characterSpacing = l.csp;
            this._lineHeight = l.lh;
            this._horizontalAlign = l.ha;
            this._verticalAlign = l.va;
            this._wrapByWord = l.w;
            if (l.hasOwnProperty("tw")) {
                var n = l.tw;
                this._typewriterStartTime = n.st;
                this._typewriterEndTime = n.en;
                this._typewriterLength = l.l
            }
            n = this._sdkType.GetSpriteFont();
            n.SetCharacterWidth(l.cw);
            n.SetCharacterHeight(l.ch);
            n.SetCharacterSet(l.cs);
            n.SetSpacingData(l.sd);
            this._UpdateSettings(); - 1 !== this._typewriterEndTime && this._StartTicking()
        }
        GetPropertyValueByIndex(l) {
            switch (l) {
                case 0:
                    return this._text;
                case 1:
                    return this._enableBBcode;
                case 2:
                    return this._sdkType.GetSpriteFont().GetCharacterWidth();
                case 3:
                    return this._sdkType.GetSpriteFont().GetCharacterHeight();
                case 4:
                    return this._sdkType.GetSpriteFont().GetCharacterSet();
                case 5:
                    return this._sdkType.GetSpriteFont().GetSpacingData();
                case 6:
                    return this._characterScale;
                case 7:
                    return this._characterSpacing;
                case 8:
                    return this._lineHeight;
                case 9:
                    return this._horizontalAlign;
                case 10:
                    return this._verticalAlign;
                case 11:
                    return this._wrapByWord ? 1 : 0
            }
        }
        SetPropertyValueByIndex(l, n) {
            switch (l) {
                case 0:
                    if (this._text === n) break;
                    this._text = n;
                    this._UpdateSettings();
                    break;
                case 1:
                    if (this._enableBBcode === !!n) break;
                    this._enableBBcode = !!n;
                    this._UpdateSettings();
                    break;
                case 2:
                    this._sdkType.GetSpriteFont().SetCharacterWidth(n);
                    break;
                case 3:
                    this._sdkType.GetSpriteFont().SetCharacterHeight(n);
                    break;
                case 4:
                    this._sdkType.GetSpriteFont().SetCharacterSet(n);
                    break;
                case 5:
                    this._sdkType.GetSpriteFont().SetSpacingData(n);
                    break;
                case 6:
                    if (this._characterScale === n) break;
                    this._characterScale = n;
                    this._UpdateSettings();
                    break;
                case 7:
                    if (this._characterSpacing === n) break;
                    this._characterSpacing = n;
                    this._UpdateSettings();
                    break;
                case 8:
                    if (this._lineHeight === n) break;
                    this._lineHeight = n;
                    this._UpdateSettings();
                    break;
                case 9:
                    if (this._horizontalAlign === n) break;
                    this._horizontalAlign = n;
                    this._UpdateSettings();
                    break;
                case 10:
                    if (this._verticalAlign ===
                        n) break;
                    this._verticalAlign = n;
                    this._UpdateSettings();
                    break;
                case 11:
                    this._wrapByWord !== (0 === n) && (this._wrapByWord = 0 === n, this._UpdateSettings())
            }
        }
        _SetText(l) {
            this._text !== l && (this._text = l, this._spriteFontText.SetText(l), this._runtime.UpdateRender())
        }
        GetText() {
            return this._text
        }
        _StartTypewriter(l, n) {
            this._SetText(l);
            this._typewriterStartTime = this._runtime.GetWallTime();
            this._typewriterEndTime = this._typewriterStartTime + n / this.GetInstance().GetActiveTimeScale();
            this._typewriterLength = f.BBString.StripAnyTags(l).length;
            this._spriteFontText.SetDrawMaxCharacterCount(0);
            this._StartTicking()
        }
        _CancelTypewriter() {
            this._typewriterEndTime = this._typewriterStartTime = -1;
            this._typewriterLength = 0;
            this._spriteFontText.SetDrawMaxCharacterCount(-1);
            this._StopTicking()
        }
        _FinishTypewriter() {
            -1 !== this._typewriterEndTime && (this._CancelTypewriter(), this.Trigger(f.Plugins.Spritefont2.Cnds.OnTypewriterTextFinished), this._runtime.UpdateRender())
        }
        _SetScale(l) {
            this._characterScale !== l && (this._characterScale = l, this._spriteFontText.SetScale(this._characterScale),
                this._runtime.UpdateRender())
        }
        _GetScale() {
            return this._characterScale
        }
        _SetCharacterSpacing(l) {
            this._characterSpacing !== l && (this._characterSpacing = l, this._spriteFontText.SetSpacing(this._characterSpacing), this._runtime.UpdateRender())
        }
        _GetCharacterSpacing() {
            return this._characterSpacing
        }
        _SetLineHeight(l) {
            this._lineHeight !== l && (this._lineHeight = l, this._spriteFontText.SetLineHeight(this._lineHeight), this._runtime.UpdateRender())
        }
        _GetLineHeight() {
            return this._lineHeight
        }
        _SetHAlign(l) {
            this._horizontalAlign !==
                l && (this._horizontalAlign = l, this._UpdateSettings(), this._runtime.UpdateRender())
        }
        _GetHAlign() {
            return this._horizontalAlign
        }
        _SetVAlign(l) {
            this._verticalAlign !== l && (this._verticalAlign = l, this._UpdateSettings(), this._runtime.UpdateRender())
        }
        _GetVAlign() {
            return this._verticalAlign
        }
        _SetWrapByWord(l) {
            l = !!l;
            this._wrapByWord !== l && (this._wrapByWord = l, this._UpdateSettings(), this._runtime.UpdateRender())
        }
        _IsWrapByWord() {
            return this._wrapByWord
        }
        Tick() {
            var l = this._runtime.GetWallTime();
            l >= this._typewriterEndTime ?
                (this._CancelTypewriter(), this.Trigger(f.Plugins.Spritefont2.Cnds.OnTypewriterTextFinished), this._runtime.UpdateRender()) : (l = f.relerp(this._typewriterStartTime, this._typewriterEndTime, l, 0, this._typewriterLength), l = Math.floor(l), l !== this._spriteFontText.GetDrawMaxCharacterCount() && (this._spriteFontText.SetDrawMaxCharacterCount(l), this._runtime.UpdateRender()))
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.spritefont2.name",
                properties: [{
                    name: "plugins.spritefont2.properties.text.name",
                    value: this._text,
                    onedit: l => this._SetText(l)
                }]
            }]
        }
        GetScriptInterfaceClass() {
            return self.ISpriteFontInstance
        }
    };
    const c = new WeakMap,
        e = new Map([
            ["left", 0],
            ["center", 1],
            ["right", 2]
        ]),
        g = new Map([
            ["top", 0],
            ["center", 1],
            ["bottom", 2]
        ]),
        h = new Map([
            ["word", !0],
            ["character", !1]
        ]);
    self.ISpriteFontInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            c.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        get text() {
            return c.get(this).GetText()
        }
        set text(l) {
            b.RequireString(l);
            const n = c.get(this);
            n._CancelTypewriter();
            n._SetText(l)
        }
        typewriterText(l, n) {
            b.RequireString(l);
            b.RequireFiniteNumber(n);
            const q = c.get(this);
            q._CancelTypewriter();
            q._StartTypewriter(l, n)
        }
        typewriterFinish() {
            c.get(this)._FinishTypewriter()
        }
        set characterScale(l) {
            b.RequireFiniteNumber(l);
            c.get(this)._SetScale(l)
        }
        get characterScale() {
            return c.get(this)._GetScale()
        }
        set characterSpacing(l) {
            b.RequireFiniteNumber(l);
            c.get(this)._SetCharacterSpacing(l)
        }
        get characterSpacing() {
            return c.get(this)._GetCharacterSpacing()
        }
        set lineHeight(l) {
            b.RequireFiniteNumber(l);
            c.get(this)._SetLineHeight(l)
        }
        get lineHeight() {
            return c.get(this)._GetLineHeight()
        }
        set horizontalAlign(l) {
            b.RequireString(l);
            l = e.get(l);
            if ("undefined" === typeof l) throw Error("invalid mode");
            c.get(this)._SetHAlign(l)
        }
        get horizontalAlign() {
            return a[c.get(this)._GetHAlign()]
        }
        set verticalAlign(l) {
            b.RequireString(l);
            l = g.get(l);
            if ("undefined" === typeof l) throw Error("invalid mode");
            c.get(this)._SetVAlign(l)
        }
        get verticalAlign() {
            return d[c.get(this)._GetVAlign()]
        }
        set wordWrapMode(l) {
            b.RequireString(l);
            l = h.get(l);
            if ("undefined" === typeof l) throw Error("invalid mode");
            c.get(this)._SetWrapByWord(l)
        }
        get wordWrapMode() {
            return c.get(this)._IsWrapByWord() ? "word" : "character"
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Spritefont2.Cnds = {
        CompareText(b, a) {
            return a ? this._text === b : f.equalsNoCase(this._text, b)
        },
        IsRunningTypewriterText() {
            return -1 !== this._typewriterEndTime
        },
        OnTypewriterTextFinished() {
            return !0
        }
    }
}
"use strict";
self.C3.Plugins.Spritefont2.Acts = {
    SetText(f) {
        this._CancelTypewriter();
        "number" === typeof f && 1E9 > f && (f = Math.round(1E10 * f) / 1E10);
        this._SetText(f.toString())
    },
    AppendText(f) {
        this._CancelTypewriter();
        "number" === typeof f && 1E9 > f && (f = Math.round(1E10 * f) / 1E10);
        (f = f.toString()) && this._SetText(this._text + f)
    },
    TypewriterText(f, b) {
        this._CancelTypewriter();
        "number" === typeof f && 1E9 > f && (f = Math.round(1E10 * f) / 1E10);
        this._StartTypewriter(f.toString(), b)
    },
    TypewriterFinish() {
        this._FinishTypewriter()
    },
    SetScale(f) {
        this._SetScale(f)
    },
    SetCharacterSpacing(f) {
        this._SetCharacterSpacing(f)
    },
    SetLineHeight(f) {
        this._SetLineHeight(f)
    },
    SetCharacterWidth(f, b) {
        let a = !1;
        const d = this._sdkType.GetSpriteFont();
        for (const c of f)
            if (" " === c) d.SetSpaceWidth(b), a = !0;
            else if (f = d.GetCharacter(c)) f.SetDisplayWidth(b), a = !0;
        a && d.SetCharacterWidthsChanged();
        this._runtime.UpdateRender()
    },
    SetEffect(f) {
        this.GetWorldInfo().SetBlendMode(f);
        this._runtime.UpdateRender()
    },
    SetHAlign(f) {
        this._SetHAlign(f)
    },
    SetVAlign(f) {
        this._SetVAlign(f)
    },
    SetWrapping(f) {
        this._SetWrapByWord(0 ===
            f)
    }
}; {
    "use strict";
    const f = self.C3;
    f.Plugins.Spritefont2.Exps = {
        CharacterWidth(b) {
            return (b = this._sdkType.GetSpriteFont().GetCharacter(b)) ? b.GetDisplayWidth() : this._sdkType.GetSpriteFont().GetCharacterWidth()
        },
        CharacterHeight() {
            return this._characterHeight
        },
        CharacterScale() {
            return this._characterScale
        },
        CharacterSpacing() {
            return this._characterSpacing
        },
        LineHeight() {
            return this._lineHeight
        },
        Text() {
            return this._text
        },
        PlainText() {
            return this._enableBBcode ? f.BBString.StripAnyTags(this._text) : this._text
        },
        TextWidth() {
            const b =
                this.GetWorldInfo();
            this._spriteFontText.SetSize(b.GetWidth(), b.GetHeight());
            return this._spriteFontText.GetTextWidth()
        },
        TextHeight() {
            const b = this.GetWorldInfo();
            this._spriteFontText.SetSize(b.GetWidth(), b.GetHeight());
            return this._spriteFontText.GetTextHeight()
        }
    }
} {
    "use strict";
    const f = self.C3;
    self.SpriteFontCharacter = class {
        constructor(b, a, d, c) {
            let e = b.GetCharacterWidth(),
                g = b.GetCharacterHeight();
            this._spriteFont = b;
            this._char = a;
            this._pxRect = new f.Rect(d, c, d + e, c + g);
            this._texRect = new f.Rect;
            this._displayWidth = -1;
            this._UpdateTexRect()
        }
        Release() {
            this._texRect = this._pxRect = this._spriteFont = null
        }
        _UpdateTexRect() {
            let b = this._spriteFont.GetWidth(),
                a = this._spriteFont.GetHeight();
            this._texRect.copy(this._pxRect);
            this._texRect.divide(b, a);
            this._texRect.lerpInto(this._spriteFont.GetTexRect())
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        GetChar() {
            return this._char
        }
        GetTexRect() {
            return this._texRect
        }
        SetDisplayWidth(b) {
            this._displayWidth =
                b
        }
        GetDisplayWidth() {
            return 0 > this._displayWidth ? this._spriteFont.GetCharacterWidth() : this._displayWidth
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = new f.Rect,
        a = new f.Quad,
        d = new f.Color,
        c = new Set(["left", "center", "right"]),
        e = new Set(["top", "center", "bottom"]),
        g = new Set(["word", "character"]);
    self.SpriteFontText = class {
        constructor(h) {
            this._spriteFont = h;
            this._cssHeight = this._cssWidth = 0;
            this._text = "";
            this._isBBcodeEnabled = !1;
            this._bbString = null;
            this._wrappedText = f.New(f.WordWrap);
            this._wrapMode = "word";
            this._wrapChanged = !1;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._sceneGraphScale = this._scale = 1;
            this._lineHeight =
                this._spacing = 0;
            this._color = f.New(f.Color);
            this._drawMaxCharCount = -1;
            this._drawCharCount = 0;
            this._measureTextCallback = (l, n) => this._MeasureText(l, n);
            this._spriteFont._AddSpriteFontText(this)
        }
        Release() {
            this._spriteFont._RemoveSpriteFontText(this);
            this._measureTextCallback = this._color = null;
            this._wrappedText.Clear();
            this._bbString = this._spriteFont = this._wrappedText = null
        }
        _MeasureText(h, l) {
            var n = this._GetStyleTag(l, "scale"),
                q = (n ? parseFloat(n.param) : this._scale) * this._sceneGraphScale;
            n = this._GetStyleTag(l,
                "scalex");
            n = (n ? parseFloat(n.param) : 1) * q;
            l = this._GetStyleTag(l, "scaley");
            l = (l ? parseFloat(l.param) : 1) * q;
            l = this._spriteFont.GetCharacterHeight() * l + this._lineHeight;
            const y = this.GetSpriteFont();
            q = y.GetCharacterWidth() * n;
            const w = this.GetSpacing();
            if (y.HasAnyCustomWidths()) {
                let p = 0,
                    x = 0;
                for (var u of h) {
                    h = q;
                    const t = y.GetCharacter(u);
                    t ? h = t.GetDisplayWidth() * n : " " === u && (h = y.GetSpaceWidth() * n);
                    x += h;
                    ++p
                }
                return {
                    width: x + p * w,
                    height: l
                }
            }
            u = [...h].length;
            return {
                width: q * u + Math.max(u, 0) * w,
                height: l
            }
        }
        _SetWrapChanged() {
            this._wrapChanged = !0;
            this._wrappedText.Clear()
        }
        SetSize(h, l) {
            0 >= h || 0 >= l || this._cssWidth === h && this._cssHeight === l || (this._cssWidth !== h && this._SetWrapChanged(), this._cssWidth = h, this._cssHeight = l)
        }
        SetDrawMaxCharacterCount(h) {
            this._drawMaxCharCount = Math.floor(h)
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(h, l) {
            for (let n = h.length - 1; 0 <= n; --n) {
                const q = h[n];
                if (q.tag === l) return q
            }
            return null
        }
        _HasStyleTag(h, l) {
            return !!this._GetStyleTag(h, l)
        }
        _MaybeWrapText() {
            if (this._wrapChanged) {
                !this._isBBcodeEnabled ||
                    this._bbString && this._bbString.toString() === this._text || (this._bbString = new f.BBString(this._text, {
                        noEscape: !0
                    }));
                var h = -this.GetSpacing();
                this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, h);
                this._wrapChanged = !1
            }
        }
        Draw(h, l, n, q) {
            this._MaybeWrapText();
            let y = this._drawCharCount = 0;
            const w = this._lineHeight,
                u = f.cloneArray(this._wrappedText.GetLines()),
                p = Math.sin(q);
            q = Math.cos(q);
            var x = u.reduce((t, r) => t + r.height,
                0) - w;
            "center" === this._verticalAlign ? y = Math.max(Math.floor(this._cssHeight / 2 - x / 2), 0) : "bottom" === this._verticalAlign && (y = Math.floor(this._cssHeight - x));
            for (let t = 0, r = u.length; t < r; ++t) {
                x = u[t];
                const B = x.height;
                if (0 < t && y > this._cssHeight - (B - w)) break;
                0 <= y && this._DrawLine(h, x, l, n, y, p, q);
                y += B
            }
        }
        _DrawLine(h, l, n, q, y, w, u) {
            const p = l.height;
            let x = 0;
            "center" === this._horizontalAlign ? x = Math.max(Math.floor((this._cssWidth - l.width) / 2), 0) : "right" === this._horizontalAlign && (x = Math.max(Math.floor(this._cssWidth - l.width),
                0));
            for (const t of l.fragments) this._DrawFragment(h, t, n, q, x, y, w, u, p), x += t.width
        }
        _DrawFragment(h, l, n, q, y, w, u, p, x) {
            var t = l.text,
                r = l.width,
                B = l.styles;
            if (-1 !== this._drawMaxCharCount) {
                if (this._drawCharCount >= this._drawMaxCharCount) return;
                this._drawCharCount + t.length > this._drawMaxCharCount && (t = t.substr(0, this._drawMaxCharCount - this._drawCharCount), r = this._MeasureText(t, B).width);
                this._drawCharCount += t.length
            }
            var z = this._GetStyleTag(B, "background");
            if (!(f.IsStringAllWhitespace(t) && !z || this._HasStyleTag(B,
                    "hide"))) {
                l = this._GetStyleTag(B, "scale");
                var C = (l ? parseFloat(l.param) : this._scale) * this._sceneGraphScale;
                l = this._GetStyleTag(B, "scalex");
                l = (l ? parseFloat(l.param) : 1) * C;
                var F = this._GetStyleTag(B, "scaley");
                C *= F ? parseFloat(F.param) : 1;
                C *= this._spriteFont.GetCharacterHeight();
                w += x - this._lineHeight - C;
                x = this._GetStyleTag(B, "offsetx");
                y += x ? parseFloat(x.param) : 0;
                x = this._GetStyleTag(B, "offsety");
                w += x ? parseFloat(x.param) : 0;
                z && (h.SetColorFillMode(), d.parseString(z.param), d.setA(1), h.SetColor(d), b.set(y, w, y + r,
                    w + C), b.getRight() > this._cssWidth && b.setRight(this._cssWidth), a.setFromRotatedRectPrecalc(b, u, p), a.offset(n, q), h.Quad(a), h.SetTextureFillMode());
                (r = this._GetStyleTag(B, "color")) ? (d.parseString(r.param), d.setA(this._color.getA())) : d.copy(this._color);
                (r = this._GetStyleTag(B, "opacity")) && d.setA(d.getA() * parseFloat(r.param) / 100);
                d.premultiply();
                h.SetColor(d);
                r = this._spriteFont.GetCharacterWidth() * l;
                B = Math.abs(this.GetSpacing());
                for (const J of t)
                    if (t = this._spriteFont.GetCharacter(J)) {
                        z = t.GetDisplayWidth() *
                            l;
                        if (y + z > this._cssWidth + B + 1E-5) break;
                        b.set(y, w, y + r, w + C);
                        a.setFromRotatedRectPrecalc(b, u, p);
                        a.offset(n, q);
                        h.Quad3(a, t.GetTexRect());
                        y += z + this._spacing
                    } else y += this._spriteFont.GetSpaceWidth() * l + this._spacing
            }
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        SetBBCodeEnabled(h) {
            h = !!h;
            this._isBBcodeEnabled !== h && (this._isBBcodeEnabled = h, this._SetWrapChanged())
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetText(h) {
            this._text !== h && (this._text = h, this._SetWrapChanged())
        }
        SetWordWrapMode(h) {
            if (!g.has(h)) throw Error("invalid word wrap mode");
            this._wrapMode !== h && (this._wrapMode = h, this._SetWrapChanged())
        }
        SetHorizontalAlign(h) {
            if (!c.has(h)) throw Error("invalid alignment");
            this._horizontalAlign = h
        }
        SetVerticalAlign(h) {
            if (!e.has(h)) throw Error("invalid alignment");
            this._verticalAlign = h
        }
        SetScale(h) {
            this._scale !== h && (this._scale = h, this._SetWrapChanged())
        }
        GetScale() {
            return this._scale
        }
        SetSceneGraphScale(h) {
            this._sceneGraphScale !== h && (this._sceneGraphScale = h, this._SetWrapChanged())
        }
        GetSceneGraphScale() {
            return this._sceneGraphScale
        }
        SetSpacing(h) {
            this._spacing !==
                h && (this._spacing = h, this._SetWrapChanged())
        }
        GetSpacing() {
            return this._spacing
        }
        SetLineHeight(h) {
            this._lineHeight = h;
            this._SetWrapChanged()
        }
        GetLineHeight() {
            return this._lineHeight
        }
        SetOpacity(h) {
            h = f.clamp(h, 0, 1);
            this._color.a = h
        }
        SetColor(h) {
            this._color.equals(h) || this._color.copy(h)
        }
        GetColor() {
            return this._color
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            var h = this._spriteFont.GetCharacterHeight() * this._scale;
            const l = this._lineHeight;
            h += l;
            return this._wrappedText.GetLineCount() * h - l
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = {
            width: 256,
            height: 256,
            characterWidth: 16,
            characterHeight: 16,
            characterSet: ""
        };
    self.SpriteFont = class {
        constructor(a) {
            a = Object.assign({}, b, a);
            if (0 >= a.width || 0 >= a.height || 0 >= a.characterWidth || 0 >= a.characterHeight) throw Error("invalid size");
            this._width = a.width;
            this._height = a.height;
            this._characterWidth = a.characterWidth;
            this._characterHeight = a.characterHeight;
            this._characterSet = a.characterSet;
            this._spacingData = "";
            this._spacingParsed = null;
            this._hasAnyCustomWidths = !1;
            this._spaceWidth = -1;
            this._texRect = new f.Rect(0, 0, 1, 1);
            this._characterMap = new Map;
            this._mapChanged = !0;
            this._allTexts = new Set
        }
        Release() {
            this._texRect = null;
            this._ReleaseCharacters();
            this._characterMap = null;
            this._allTexts && this._allTexts.clear();
            this._allTexts = null
        }
        _ReleaseCharacters() {
            for (let a of this._characterMap.values()) a.Release();
            this._characterMap.clear()
        }
        _AddSpriteFontText(a) {
            this._allTexts.add(a)
        }
        _RemoveSpriteFontText(a) {
            this._allTexts.delete(a)
        }
        UpdateCharacterMap() {
            if (this._mapChanged) {
                this._ReleaseCharacters();
                var a = [...this._characterSet],
                    d = Math.floor(this._width / this._characterWidth),
                    c = d * Math.floor(this._height / this._characterHeight);
                for (let e = 0, g = a.length; e < g && !(e >= c); ++e) {
                    let h = a[e];
                    this._characterMap.set(h, f.New(self.SpriteFontCharacter, this, h, e % d * this._characterWidth, Math.floor(e / d) * this._characterHeight))
                }
                this._hasAnyCustomWidths = !1;
                this._spaceWidth = -1;
                if (Array.isArray(this._spacingParsed))
                    for (let e of this._spacingParsed)
                        if (Array.isArray(e) && 2 === e.length && (a = e[0], d = e[1], "number" === typeof a && isFinite(a) &&
                                "string" === typeof d && a !== this._characterWidth))
                            for (let g of d)(d = this._characterMap.get(g)) ? (d.SetDisplayWidth(a), this._hasAnyCustomWidths = !0) : " " === g && (this._spaceWidth = a, this._hasAnyCustomWidths = !0);
                this._mapChanged = !1;
                for (let e of this._allTexts) e._SetWrapChanged()
            }
        }
        SetCharacterWidthsChanged() {
            this._hasAnyCustomWidths = !0;
            for (const a of this._allTexts) a._SetWrapChanged()
        }
        GetCharacter(a) {
            this.UpdateCharacterMap();
            return this._characterMap.get(a) || null
        }
        HasAnyCustomWidths() {
            return this._hasAnyCustomWidths
        }
        SetWidth(a) {
            a =
                Math.floor(a);
            if (0 >= a) throw Error("invalid size");
            this._width !== a && (this._width = a, this._mapChanged = !0)
        }
        GetWidth() {
            return this._width
        }
        SetHeight(a) {
            a = Math.floor(a);
            if (0 >= a) throw Error("invalid size");
            this._height !== a && (this._height = a, this._mapChanged = !0)
        }
        GetHeight() {
            return this._height
        }
        SetTexRect(a) {
            if (!this._texRect.equals(a)) {
                this._texRect.copy(a);
                for (const d of this._characterMap.values()) d._UpdateTexRect()
            }
        }
        GetTexRect() {
            return this._texRect
        }
        SetCharacterWidth(a) {
            a = Math.floor(a);
            if (0 >= a) throw Error("invalid size");
            this._characterWidth !== a && (this._characterWidth = a, this._mapChanged = !0)
        }
        GetCharacterWidth() {
            return this._characterWidth
        }
        SetCharacterHeight(a) {
            a = Math.floor(a);
            if (0 >= a) throw Error("invalid size");
            this._characterHeight !== a && (this._characterHeight = a, this._mapChanged = !0)
        }
        GetCharacterHeight() {
            return this._characterHeight
        }
        SetCharacterSet(a) {
            this._characterSet !== a && (this._characterSet = a, this._mapChanged = !0)
        }
        GetCharacterSet() {
            return this._characterSet
        }
        SetSpacingData(a) {
            if (this._spacingData !== a && (this._spacingData =
                    a, this._mapChanged = !0, this._spacingParsed = null, this._spacingData.length)) try {
                this._spacingParsed = JSON.parse(this._spacingData)
            } catch (d) {
                this._spacingParsed = null
            }
        }
        GetSpacingData() {
            return this._spacingData
        }
        SetSpaceWidth(a) {
            0 > a && (a = -1);
            this._spaceWidth !== a && (this._spaceWidth = a, 0 <= this._spaceWidth && (this._hasAnyCustomWidths = !0))
        }
        GetSpaceWidth() {
            return 0 > this._spaceWidth ? this._characterWidth : this._spaceWidth
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Keyboard = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Keyboard.Type = class extends f.SDKTypeBase {
        constructor(d) {
            super(d)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IKeyboardObjectType
        }
    };
    let b = null;

    function a() {
        return b.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.IKeyboardObjectType = class extends self.IObjectClass {
        constructor(d) {
            super(d);
            b = d;
            d.GetRuntime()._GetCommonScriptInterfaces().keyboard = this
        }
        isKeyDown(d) {
            const c = a();
            if ("string" === typeof d) return c.IsKeyDown(d);
            if ("number" ===
                typeof d) return c.IsKeyCodeDown(d);
            throw new TypeError("expected string or number");
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Keyboard.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b);
            this._keysDownByString = new Set;
            this._keysDownByWhich = new Set;
            this._triggerWhich = 0;
            this._triggerTypedKey = this._triggerString = "";
            b = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "keydown", d => this._OnKeyDown(d.data)), f.Disposable.From(b, "keyup", d => this._OnKeyUp(d.data)), f.Disposable.From(b, "window-blur", () => this._OnWindowOrKeyboardBlur()),
                f.Disposable.From(b, "keyboard-blur", () => this._OnWindowOrKeyboardBlur()))
        }
        Release() {
            super.Release()
        }
        _OnKeyDown(b) {
            const a = b.which,
                d = b.code || a.toString();
            b = b.key;
            this._keysDownByString.has(d) || (this._keysDownByString.add(d), this._keysDownByWhich.add(a), this._triggerString = d, this._triggerWhich = a, this._triggerTypedKey = b, this.Trigger(f.Plugins.Keyboard.Cnds.OnAnyKey), this.Trigger(f.Plugins.Keyboard.Cnds.OnKey), this.Trigger(f.Plugins.Keyboard.Cnds.OnLeftRightKeyPressed), this.Trigger(f.Plugins.Keyboard.Cnds.OnKeyCode))
        }
        _OnKeyUp(b) {
            const a =
                b.which,
                d = b.code || a.toString();
            b = b.key;
            this._keysDownByString.delete(d);
            this._keysDownByWhich.delete(a);
            this._triggerString = d;
            this._triggerWhich = a;
            this._triggerTypedKey = b;
            this.Trigger(f.Plugins.Keyboard.Cnds.OnAnyKeyReleased);
            this.Trigger(f.Plugins.Keyboard.Cnds.OnKeyReleased);
            this.Trigger(f.Plugins.Keyboard.Cnds.OnLeftRightKeyReleased);
            this.Trigger(f.Plugins.Keyboard.Cnds.OnKeyCodeReleased)
        }
        _OnWindowOrKeyboardBlur() {
            for (const b of this._keysDownByWhich) this._keysDownByWhich.delete(b), this._triggerWhich =
                b, this.Trigger(f.Plugins.Keyboard.Cnds.OnAnyKeyReleased), this.Trigger(f.Plugins.Keyboard.Cnds.OnKeyReleased), this.Trigger(f.Plugins.Keyboard.Cnds.OnKeyCodeReleased);
            this._keysDownByString.clear()
        }
        IsKeyDown(b) {
            return this._keysDownByString.has(b)
        }
        IsKeyCodeDown(b) {
            return this._keysDownByWhich.has(b)
        }
        SaveToJson() {
            return {
                tk: this._triggerWhich,
                tkk: this._triggerTypedKey
            }
        }
        LoadFromJson(b) {
            this._triggerWhich = b.tk;
            b.hasOwnProperty("tkk") && (this._triggerTypedKey = b.tkk)
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.keyboard.name",
                properties: [{
                    name: "plugins.keyboard.debugger.last-key-code",
                    value: this._triggerWhich
                }, {
                    name: "plugins.keyboard.debugger.last-key-string",
                    value: f.Plugins.Keyboard.Exps.StringFromKeyCode(this._triggerWhich)
                }, {
                    name: "plugins.keyboard.debugger.last-typed-key",
                    value: this._triggerTypedKey
                }]
            }]
        }
    }
} {
    "use strict";
    const f = "ShiftLeft ShiftRight ControlLeft ControlRight AltLeft AltRight MetaLeft MetaRight".split(" ");
    self.C3.Plugins.Keyboard.Cnds = {
        IsKeyDown(b) {
            return this._keysDownByWhich.has(b)
        },
        OnKey(b) {
            return this._triggerWhich === b
        },
        OnAnyKey() {
            return !0
        },
        OnAnyKeyReleased() {
            return !0
        },
        OnKeyReleased(b) {
            return this._triggerWhich === b
        },
        IsKeyCodeDown(b) {
            b = Math.floor(b);
            return this._keysDownByWhich.has(b)
        },
        OnKeyCode(b) {
            return this._triggerWhich === b
        },
        OnKeyCodeReleased(b) {
            return this._triggerWhich === b
        },
        OnLeftRightKeyPressed(b) {
            return this._triggerString === f[b]
        },
        OnLeftRightKeyReleased(b) {
            return this._triggerString === f[b]
        },
        IsLeftRightKeyDown(b) {
            return this._keysDownByString.has(f[b])
        }
    }
}
"use strict";
self.C3.Plugins.Keyboard.Acts = {}; {
    "use strict";

    function f(b) {
        b = Math.floor(b);
        switch (b) {
            case 8:
                return "backspace";
            case 9:
                return "tab";
            case 13:
                return "enter";
            case 16:
                return "shift";
            case 17:
                return "control";
            case 18:
                return "alt";
            case 19:
                return "pause";
            case 20:
                return "capslock";
            case 27:
                return "esc";
            case 33:
                return "pageup";
            case 34:
                return "pagedown";
            case 35:
                return "end";
            case 36:
                return "home";
            case 37:
                return "\u2190";
            case 38:
                return "\u2191";
            case 39:
                return "\u2192";
            case 40:
                return "\u2193";
            case 45:
                return "insert";
            case 46:
                return "del";
            case 91:
                return "left window key";
            case 92:
                return "right window key";
            case 93:
                return "select";
            case 96:
                return "numpad 0";
            case 97:
                return "numpad 1";
            case 98:
                return "numpad 2";
            case 99:
                return "numpad 3";
            case 100:
                return "numpad 4";
            case 101:
                return "numpad 5";
            case 102:
                return "numpad 6";
            case 103:
                return "numpad 7";
            case 104:
                return "numpad 8";
            case 105:
                return "numpad 9";
            case 106:
                return "numpad *";
            case 107:
                return "numpad +";
            case 109:
                return "numpad -";
            case 110:
                return "numpad .";
            case 111:
                return "numpad /";
            case 112:
                return "F1";
            case 113:
                return "F2";
            case 114:
                return "F3";
            case 115:
                return "F4";
            case 116:
                return "F5";
            case 117:
                return "F6";
            case 118:
                return "F7";
            case 119:
                return "F8";
            case 120:
                return "F9";
            case 121:
                return "F10";
            case 122:
                return "F11";
            case 123:
                return "F12";
            case 144:
                return "numlock";
            case 145:
                return "scroll lock";
            case 186:
                return ";";
            case 187:
                return "=";
            case 188:
                return ",";
            case 189:
                return "-";
            case 190:
                return ".";
            case 191:
                return "/";
            case 192:
                return "'";
            case 219:
                return "[";
            case 220:
                return "\\";
            case 221:
                return "]";
            case 222:
                return "#";
            case 223:
                return "`";
            default:
                return String.fromCharCode(b)
        }
    }
    self.C3.Plugins.Keyboard.Exps = {
        LastKeyCode() {
            return this._triggerWhich
        },
        StringFromKeyCode(b) {
            return f(b)
        },
        TypedKey() {
            return this._triggerTypedKey
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Audio = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Audio.Type = class extends f.SDKTypeBase {
        constructor(a) {
            super(a)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IAudioObjectType
        }
    };

    function b() {
        if (self.C3Audio_DOMInterface) return self.C3Audio_DOMInterface;
        throw Error("audio scripting API cannot be used here - make sure the project is using DOM mode, not worker mode");
    }
    self.IAudioObjectType = class extends self.IObjectClass {
        constructor(a) {
            super(a)
        }
        get audioContext() {
            return b().GetAudioContext()
        }
        get destinationNode() {
            return b().GetDestinationNode()
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = ["interactive", "balanced", "playback"];
    f.Plugins.Audio.Instance = class extends f.SDKInstanceBase {
        constructor(a, d) {
            super(a, "audio");
            this._nextPlayTime = 0;
            this._triggerTag = "";
            this._saveLoadMode = this._timeScaleMode = 0;
            this._playInBackground = !1;
            this._distanceModel = this._panningModel = 1;
            this._listenerX = this._runtime.GetViewportWidth() / 2;
            this._listenerY = this._runtime.GetViewportHeight() / 2;
            this._listenerZ = -600;
            this._referenceDistance = 600;
            this._maxDistance = 1E4;
            this._rolloffFactor =
                1;
            this._listenerInst = null;
            this._loadListenerUid = -1;
            this._masterVolume = 1;
            this._isSilent = !1;
            this._sampleRate = 0;
            this._effectCount = new Map;
            this._preloadCount = this._preloadTotal = 0;
            this._remoteUrls = new Map;
            a = "interactive";
            d && (this._timeScaleMode = d[0], this._saveLoadMode = d[1], this._playInBackground = d[2], a = b[d[3]], this._panningModel = d[4], this._distanceModel = d[5], this._listenerZ = -d[6], this._referenceDistance = d[7], this._maxDistance = d[8], this._rolloffFactor = d[9]);
            this._lastAIState = [];
            this._lastFxState = [];
            this._lastAnalysersData = [];
            this.AddDOMMessageHandlers([
                ["state", c => this._OnUpdateState(c)],
                ["fxstate", c => this._OnUpdateFxState(c)],
                ["trigger", c => this._OnTrigger(c)]
            ]);
            d = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(d, "instancedestroy", c => this._OnInstanceDestroyed(c.instance)), f.Disposable.From(d, "afterload", () => this._OnAfterLoad()), f.Disposable.From(d, "suspend", () => this._OnSuspend()), f.Disposable.From(d, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("create-audio-context", {
                preloadList: this._runtime.GetAssetManager().GetAudioToPreload().map(c => ({
                    originalUrl: c.originalUrl,
                    url: c.url,
                    type: c.type,
                    fileSize: c.fileSize
                })),
                isiOSCordova: this._runtime.IsiOSCordova(),
                timeScaleMode: this._timeScaleMode,
                latencyHint: a,
                panningModel: this._panningModel,
                distanceModel: this._distanceModel,
                refDistance: this._referenceDistance,
                maxDistance: this._maxDistance,
                rolloffFactor: this._rolloffFactor,
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ]
            }).then(c => {
                this._sampleRate = c.sampleRate
            }));
            this._StartTicking()
        }
        Release() {
            this._listenerInst = null;
            super.Release()
        }
        _OnInstanceDestroyed(a) {
            this._listenerInst === a && (this._listenerInst = null)
        }
        DbToLinearNoCap(a) {
            return Math.pow(10, a / 20)
        }
        DbToLinear(a) {
            a = this.DbToLinearNoCap(a);
            return isFinite(a) ? Math.max(Math.min(a, 1), 0) : 0
        }
        LinearToDbNoCap(a) {
            return Math.log(a) / Math.log(10) * 20
        }
        LinearToDb(a) {
            return this.LinearToDbNoCap(Math.max(Math.min(a, 1), 0))
        }
        _OnSuspend() {
            this._playInBackground || this.PostToDOM("set-suspended", {
                isSuspended: !0
            })
        }
        _OnResume() {
            this._playInBackground ||
                this.PostToDOM("set-suspended", {
                    isSuspended: !1
                })
        }
        _OnUpdateState(a) {
            const d = a.tickCount,
                c = this._lastAIState.filter(e => e.hasOwnProperty("placeholder") && (e.placeholder > d || -1 === e.placeholder));
            this._lastAIState = a.audioInstances;
            this._lastAnalysersData = a.analysers;
            0 < c.length && f.appendArray(this._lastAIState, c)
        }
        _OnUpdateFxState(a) {
            this._lastFxState = a.fxstate
        }
        _GetFirstAudioStateByTag(a) {
            for (const d of this._lastAIState)
                if (f.equalsNoCase(d.tag, a)) return d;
            return null
        }
        _IsTagPlaying(a) {
            return this._lastAIState.some(d =>
                f.equalsNoCase(a, d.tag) && d.isPlaying)
        }
        _MaybeMarkAsPlaying(a, d, c, e) {
            if (this._IsTagPlaying(a)) return null;
            a = {
                tag: a,
                duration: 0,
                volume: e,
                isPlaying: !0,
                playbackTime: 0,
                playbackRate: 1,
                uid: -1,
                bufferOriginalUrl: "",
                bufferUrl: "",
                bufferType: "",
                isMusic: d,
                isLooping: c,
                isMuted: !1,
                resumePosition: 0,
                pan: null,
                placeholder: -1
            };
            this._lastAIState.push(a);
            return a
        }
        async _OnTrigger(a) {
            const d = a.type;
            this._triggerTag = a.tag;
            a = a.aiid;
            if ("ended" === d) {
                for (const c of this._lastAIState)
                    if (c.aiid === a) {
                        c.isPlaying = !1;
                        break
                    }
                await this.TriggerAsync(f.Plugins.Audio.Cnds.OnEnded)
            } else "fade-ended" ===
                d && await this.TriggerAsync(f.Plugins.Audio.Cnds.OnFadeEnded)
        }
        Tick() {
            const a = {
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTimeRaw(),
                instPans: this.GetInstancePans(),
                tickCount: this._runtime.GetTickCountNoSave()
            };
            if (this._listenerInst) {
                const d = this._listenerInst.GetWorldInfo();
                this._listenerX = d.GetX();
                this._listenerY = d.GetY();
                a.listenerPos = [this._listenerX, this._listenerY, this._listenerZ]
            }
            this.PostToDOM("tick", a)
        }
        rotatePtAround(a, d, c, e, g) {
            if (0 === c) return [a, d];
            const h = Math.sin(c);
            c = Math.cos(c);
            a -= e;
            d -= g;
            const l = a * h;
            a = a * c - d * h;
            return [a + e, d * c + l + g]
        }
        GetInstancePans() {
            return this._lastAIState.filter(a => -1 !== a.uid).map(a => this._runtime.GetInstanceByUID(a.uid)).filter(a => a).map(a => {
                const d = a.GetWorldInfo(),
                    c = d.GetLayer().GetAngle(),
                    [e, g] = this.rotatePtAround(d.GetX(), d.GetY(), -c, this._listenerX, this._listenerY);
                return {
                    uid: a.GetUID(),
                    x: e,
                    y: g,
                    angle: d.GetAngle() - c
                }
            })
        }
        GetAnalyserData(a, d) {
            for (const c of this._lastAnalysersData)
                if (c.index === d && f.equalsNoCase(c.tag, a)) return c;
            return null
        }
        _IncrementEffectCount(a) {
            this._effectCount.set(a,
                (this._effectCount.get(a) || 0) + 1)
        }
        _ShouldSave(a) {
            return a.hasOwnProperty("placeholder") || 3 === this._saveLoadMode ? !1 : a.isMusic && 1 === this._saveLoadMode ? !1 : a.isMusic || 2 !== this._saveLoadMode ? !0 : !1
        }
        SaveToJson() {
            return {
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                listenerZ: this._listenerZ,
                listenerUid: this._listenerInst ? this._listenerInst.GetUID() : -1,
                remoteUrls: [...this._remoteUrls.entries()],
                playing: this._lastAIState.filter(a => this._ShouldSave(a)),
                effects: this._lastFxState,
                analysers: this._lastAnalysersData
            }
        }
        LoadFromJson(a) {
            this._isSilent =
                a.isSilent;
            this._masterVolume = a.masterVolume;
            this._listenerZ = a.listenerZ;
            this._listenerInst = null;
            this._loadListenerUid = a.listenerUid;
            this._remoteUrls.clear();
            if (a.remoteUrls)
                for (const [d, c] of a.remoteUrls) this._remoteUrls.set(d, c);
            this._lastAIState = a.playing;
            this._lastFxState = a.effects;
            this._lastAnalysersData = a.analysers
        }
        _OnAfterLoad() {
            if (-1 !== this._loadListenerUid && (this._listenerInst = this._runtime.GetInstanceByUID(this._loadListenerUid), this._loadListenerUid = -1, this._listenerInst)) {
                var a = this._listenerInst.GetWorldInfo();
                this._listenerX = a.GetX();
                this._listenerY = a.GetY()
            }
            for (var d of this._lastAIState)(a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d.bufferOriginalUrl)) ? (d.bufferUrl = a.url, d.bufferType = a.type) : d.bufferUrl = null;
            for (const c of Object.values(this._lastFxState))
                for (const e of c) e.hasOwnProperty("bufferOriginalUrl") && (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(e.bufferOriginalUrl)) && (e.bufferUrl = d.url, e.bufferType = d.type);
            this.PostToDOM("load-state", {
                saveLoadMode: this._saveLoadMode,
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTimeRaw(),
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ],
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                playing: this._lastAIState.filter(c => null !== c.bufferUrl),
                effects: this._lastFxState
            })
        }
        GetDebuggerProperties() {
            const a = [];
            for (const [d, c] of Object.entries(this._lastFxState)) a.push({
                name: "$" + d,
                value: c.map(e => e.type).join(", ")
            });
            return [{
                title: "plugins.audio.debugger.tag-effects",
                properties: a
            }, {
                title: "plugins.audio.debugger.currently-playing",
                properties: [{
                    name: "plugins.audio.debugger.currently-playing-count",
                    value: this._lastAIState.length
                }, ...this._lastAIState.map((d, c) => ({
                    name: "$#" + c,
                    value: `${d.bufferOriginalUrl} ("${d.tag}") ${Math.round(10*d.playbackTime)/10} / ${Math.round(10*d.duration)/10}`
                }))]
            }]
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Plugins.Audio.Cnds = {
        OnEnded(b) {
            return f.equalsNoCase(this._triggerTag, b)
        },
        OnFadeEnded(b) {
            return f.equalsNoCase(this._triggerTag, b)
        },
        PreloadsComplete() {
            return this._preloadCount === this._preloadTotal
        },
        AdvancedAudioSupported() {
            return !0
        },
        IsSilent() {
            return this._isSilent
        },
        IsAnyPlaying() {
            for (const b of this._lastAIState)
                if (b.isPlaying) return !0;
            return !1
        },
        IsTagPlaying(b) {
            return this._IsTagPlaying(b)
        }
    }
} {
    "use strict";
    const f = self.C3,
        b = "lowpass highpass bandpass lowshelf highshelf peaking notch allpass".split(" ");
    f.Plugins.Audio.Acts = {
        async Play(a, d, c, e) {
            if (!this._isSilent) {
                var g = a[1],
                    h = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (h) {
                    var l = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var n = this._MaybeMarkAsPlaying(e.toLowerCase(), g, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: h.url,
                            type: h.type,
                            isMusic: g,
                            tag: e.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: l,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        n && (n.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPosition(a, d, c, e, g, h, l, n, q, y) {
            if (!this._isSilent) {
                var w = a[1],
                    u = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (u) {
                    var p = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var x = this._MaybeMarkAsPlaying(y.toLowerCase(), w, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: u.url,
                            type: u.type,
                            isMusic: w,
                            tag: y.toLowerCase(),
                            isLooping: 0 !==
                                d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: p,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: e,
                                y: g,
                                angle: f.toRadians(h),
                                innerAngle: f.toRadians(l),
                                outerAngle: f.toRadians(n),
                                outerGain: this.DbToLinear(q)
                            }
                        })
                    } finally {
                        x && (x.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObject(a, d, c, e, g, h, l, n) {
            if (!this._isSilent && e && (e = e.GetFirstPicked()) && e.GetWorldInfo()) {
                var q = e.GetWorldInfo(),
                    y = q.GetLayer().GetAngle(),
                    [w, u] = this.rotatePtAround(q.GetX(), q.GetY(), -y, this._listenerX, this._listenerY),
                    p = a[1],
                    x = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (x) {
                    var t = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var r = this._MaybeMarkAsPlaying(n.toLowerCase(), p, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: x.url,
                            type: x.type,
                            isMusic: p,
                            tag: n.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: t,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: w,
                                y: u,
                                angle: q.GetAngle() - y,
                                innerAngle: f.toRadians(g),
                                outerAngle: f.toRadians(h),
                                outerGain: this.DbToLinear(l),
                                uid: e.GetUID()
                            }
                        })
                    } finally {
                        r && (r.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayByName(a, d, c, e, g) {
            if (!this._isSilent) {
                a = 1 === a;
                var h = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (h) {
                    var l = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var n = this._MaybeMarkAsPlaying(g.toLowerCase(), a, 0 !== c, this.DbToLinear(e));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: h.url,
                            type: h.type,
                            isMusic: a,
                            tag: g.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(e),
                            pos: 0,
                            off: l,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        n && (n.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPositionByName(a, d, c, e, g, h, l, n, q, y, w) {
            if (!this._isSilent) {
                a = 1 === a;
                var u = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (u) {
                    var p = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var x = this._MaybeMarkAsPlaying(w.toLowerCase(), a, 0 !== c, this.DbToLinear(e));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: u.url,
                            type: u.type,
                            isMusic: a,
                            tag: w.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(e),
                            pos: 0,
                            off: p,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: g,
                                y: h,
                                angle: f.toRadians(l),
                                innerAngle: f.toRadians(n),
                                outerAngle: f.toRadians(q),
                                outerGain: this.DbToLinear(y)
                            }
                        })
                    } finally {
                        x && (x.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObjectByName(a, d, c, e, g, h, l, n, q) {
            if (!this._isSilent && !this._isSilent && g && (g = g.GetFirstPicked()) && g.GetWorldInfo()) {
                var y = g.GetWorldInfo(),
                    w = y.GetLayer().GetAngle(),
                    [u, p] = this.rotatePtAround(y.GetX(),
                        y.GetY(), -w, this._listenerX, this._listenerY);
                a = 1 === a;
                var x = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (x) {
                    var t = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var r = this._MaybeMarkAsPlaying(q.toLowerCase(), a, 0 !== c, this.DbToLinear(e));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: x.url,
                            type: x.type,
                            isMusic: a,
                            tag: q.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(e),
                            pos: 0,
                            off: t,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: u,
                                y: p,
                                angle: y.GetAngle() - w,
                                innerAngle: f.toRadians(h),
                                outerAngle: f.toRadians(l),
                                outerGain: this.DbToLinear(n),
                                uid: g.GetUID()
                            }
                        })
                    } finally {
                        r && (r.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        SetLooping(a, d) {
            this.PostToDOM("set-looping", {
                tag: a.toLowerCase(),
                isLooping: 0 === d
            })
        },
        SetMuted(a, d) {
            this.PostToDOM("set-muted", {
                tag: a.toLowerCase(),
                isMuted: 0 === d
            })
        },
        SetVolume(a, d) {
            this.PostToDOM("set-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d)
            })
        },
        FadeVolume(a, d, c, e) {
            this.PostToDOM("fade-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d),
                duration: c,
                stopOnEnd: 0 === e
            })
        },
        async Preload(a) {
            const d = a[1],
                c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: a[0],
                url: c.url,
                type: c.type,
                isMusic: d
            }), this._preloadCount++)
        },
        async PreloadByName(a, d) {
            a = 1 === a;
            const c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: d,
                url: c.url,
                type: c.type,
                isMusic: a
            }), this._preloadCount++)
        },
        SetPlaybackRate(a, d) {
            this.PostToDOM("set-playback-rate", {
                tag: a.toLowerCase(),
                rate: Math.max(d, 0)
            })
        },
        Stop(a) {
            this.PostToDOM("stop", {
                tag: a.toLowerCase()
            })
        },
        StopAll() {
            this.PostToDOM("stop-all")
        },
        SetPaused(a, d) {
            this.PostToDOM("set-paused", {
                tag: a.toLowerCase(),
                paused: 0 === d
            })
        },
        Seek(a, d) {
            this.PostToDOM("seek", {
                tag: a.toLowerCase(),
                pos: d
            })
        },
        SetSilent(a) {
            2 === a && (a = this._isSilent ? 1 : 0);
            a = 0 === a;
            this._isSilent !== a && (this._isSilent = a, this.PostToDOM("set-silent", {
                isSilent: a
            }))
        },
        SetMasterVolume(a) {
            a = this.DbToLinear(a);
            this._masterVolume !== a && (this._masterVolume = a, this.PostToDOM("set-master-volume", {
                vol: a
            }))
        },
        AddFilterEffect(a, d, c, e, g, h, l) {
            a = a.toLowerCase();
            d = b[d];
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "filter",
                tag: a,
                params: [d, c, e, g, h, f.clamp(l / 100, 0, 1)]
            })
        },
        AddDelayEffect(a, d, c, e) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "delay",
                tag: a,
                params: [d, this.DbToLinear(c), f.clamp(e / 100, 0, 1)]
            })
        },
        AddFlangerEffect(a, d,
            c, e, g, h) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "flanger",
                tag: a,
                params: [d / 1E3, c / 1E3, e, g / 100, f.clamp(h / 100, 0, 1)]
            })
        },
        AddPhaserEffect(a, d, c, e, g, h, l) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "phaser",
                tag: a,
                params: [d, c, e, g, h, f.clamp(l / 100, 0, 1)]
            })
        },
        AddConvolutionEffect(a, d, c, e) {
            a = a.toLowerCase();
            const g = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d[0]);
            g && (this._IncrementEffectCount(a), this.PostToDOM("add-effect", {
                type: "convolution",
                tag: a,
                bufferOriginalUrl: d[0],
                bufferUrl: g.url,
                bufferType: g.type,
                params: [0 === c, f.clamp(e / 100, 0, 1)]
            }))
        },
        AddGainEffect(a, d) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [this.DbToLinear(d)]
            })
        },
        AddMuteEffect(a) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [0]
            })
        },
        AddTremoloEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "tremolo",
                tag: a,
                params: [d, f.clamp(c / 100, 0, 1)]
            })
        },
        AddRingModEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "ringmod",
                tag: a,
                params: [d, f.clamp(c / 100, 0, 1)]
            })
        },
        AddDistortionEffect(a, d, c, e, g, h) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "distortion",
                tag: a,
                params: [this.DbToLinearNoCap(d), this.DbToLinearNoCap(c), e, this.DbToLinearNoCap(g), f.clamp(h / 100, 0, 1)]
            })
        },
        AddCompressorEffect(a, d, c, e, g, h) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "compressor",
                tag: a,
                params: [d, c, e, g / 1E3, h / 1E3]
            })
        },
        AddAnalyserEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "analyser",
                tag: a,
                params: [d, c]
            })
        },
        RemoveEffects(a) {
            a = a.toLowerCase();
            this._effectCount.set(a, 0);
            this.PostToDOM("remove-effects", {
                tag: a
            });
            this._lastFxState = {}
        },
        SetEffectParameter(a, d, c, e, g, h) {
            this.PostToDOM("set-effect-param", {
                tag: a.toLowerCase(),
                index: Math.floor(d),
                param: c,
                value: e,
                ramp: g,
                time: h
            })
        },
        SetListenerObject(a) {
            a &&
                (a = a.GetFirstPicked()) && a.GetWorldInfo() && (this._listenerInst = a)
        },
        SetListenerZ(a) {
            this._listenerZ = a
        },
        ScheduleNextPlay(a) {
            this._nextPlayTime = Math.max(a, 0)
        },
        UnloadAudio(a) {
            const d = a[1];
            (a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0])) && this.PostToDOM("unload", {
                url: a.url,
                type: a.type,
                isMusic: d
            })
        },
        UnloadAudioByName(a, d) {
            a = 1 === a;
            (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase())) && this.PostToDOM("unload", {
                url: d.url,
                type: d.type,
                isMusic: a
            })
        },
        UnloadAll() {
            this.PostToDOM("unload-all")
        },
        AddRemoteURL(a, d, c) {
            this._remoteUrls.set(c.toLowerCase(), {
                url: a,
                type: d
            })
        }
    }
}
"use strict";
self.C3.Plugins.Audio.Exps = {
    Duration(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? f.duration : 0
    },
    PlaybackTime(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? f.playbackTime : 0
    },
    PlaybackRate(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? f.playbackRate : 0
    },
    Volume(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? this.LinearToDb(f.volume) : 0
    },
    MasterVolume() {
        return this.LinearToDb(this._masterVolume)
    },
    EffectCount(f) {
        return this._effectCount.get(f.toLowerCase()) || 0
    },
    AnalyserFreqBinCount(f, b) {
        return (f = this.GetAnalyserData(f,
            Math.floor(b))) ? f.binCount : 0
    },
    AnalyserFreqBinAt(f, b, a) {
        f = this.GetAnalyserData(f, Math.floor(b));
        if (!f) return 0;
        a = Math.floor(a);
        return 0 > a || a >= f.binCount ? 0 : f.freqBins[a]
    },
    AnalyserPeakLevel(f, b) {
        return (f = this.GetAnalyserData(f, Math.floor(b))) ? f.peak : 0
    },
    AnalyserRMSLevel(f, b) {
        return (f = this.GetAnalyserData(f, Math.floor(b))) ? f.rms : 0
    },
    SampleRate() {
        return this._sampleRate
    },
    CurrentTime() {
        return self.C3_GetAudioContextCurrentTime ? self.C3_GetAudioContextCurrentTime() : performance.now() / 1E3
    }
}; {
    "use strict";
    const f = self.C3;
    f.Behaviors.Pin = class extends f.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Behaviors.Pin.Type = class extends f.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const f = self.C3;
    f.Behaviors.Pin.Instance = class extends f.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._pinInst = null;
            this._pinUid = -1;
            this._mode = "";
            this._propSet = new Set;
            this._lastKnownAngle = this._dz = this._dAngle = this._dHeight = this._dWidth = this._dy = this._dx = this._pinImagePoint = this._pinAngle = this._pinDist = 0;
            this._destroy = !1;
            a && (this._destroy = a[0]);
            b = this._runtime.Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "instancedestroy", d => this._OnInstanceDestroyed(d.instance)),
                f.Disposable.From(b, "afterload", d => this._OnAfterLoad()))
        }
        Release() {
            this._pinInst = null;
            super.Release()
        }
        _SetPinInst(b) {
            b ? (this._pinInst = b, this._StartTicking2()) : (this._pinInst = null, this._StopTicking2())
        }
        _Pin(b, a, d) {
            if (b && (b = b.GetFirstPicked(this._inst)))
                if (this._mode = a, this._SetPinInst(b), a = this._inst.GetWorldInfo(), b = b.GetWorldInfo(), "properties" === this._mode) {
                    const c = this._propSet;
                    c.clear();
                    for (const e of d) c.add(e);
                    this._dx = a.GetX() - b.GetX();
                    this._dy = a.GetY() - b.GetY();
                    this._dAngle = a.GetAngle() - b.GetAngle();
                    this._lastKnownAngle = a.GetAngle();
                    this._dz = a.GetZElevation() - b.GetZElevation();
                    c.has("x") && c.has("y") && (this._pinAngle = f.angleTo(b.GetX(), b.GetY(), a.GetX(), a.GetY()) - b.GetAngle(), this._pinDist = f.distanceTo(b.GetX(), b.GetY(), a.GetX(), a.GetY()));
                    c.has("width-abs") ? this._dWidth = a.GetWidth() - b.GetWidth() : c.has("width-scale") && (this._dWidth = a.GetWidth() / b.GetWidth());
                    c.has("height-abs") ? this._dHeight = a.GetHeight() - b.GetHeight() : c.has("height-scale") && (this._dHeight = a.GetHeight() / b.GetHeight())
                } else this._pinDist =
                    f.distanceTo(b.GetX(), b.GetY(), a.GetX(), a.GetY())
        }
        SaveToJson() {
            const b = this._propSet,
                a = this._mode,
                d = {
                    uid: this._pinInst ? this._pinInst.GetUID() : -1,
                    m: a
                };
            if ("rope" === a || "bar" === a) d.pd = this._pinDist;
            else if ("properties" === a) {
                d.ps = [...this._propSet];
                b.has("imagepoint") ? d.ip = this._pinImagePoint : b.has("x") && b.has("y") ? (d.pa = this._pinAngle, d.pd = this._pinDist) : (b.has("x") && (d.dx = this._dx), b.has("y") && (d.dy = this._dy));
                b.has("angle") && (d.da = this._dAngle, d.lka = this._lastKnownAngle);
                if (b.has("width-abs") || b.has("width-scale")) d.dw =
                    this._dWidth;
                if (b.has("height-abs") || b.has("height-scale")) d.dh = this._dHeight;
                b.has("z") && (d.dz = this._dz)
            }
            return d
        }
        LoadFromJson(b) {
            const a = b.m,
                d = this._propSet;
            d.clear();
            this._pinUid = b.uid;
            if ("number" === typeof a) this._LoadFromJson_Legacy(b);
            else if (this._mode = a, "rope" === a || "bar" === a) this._pinDist = b.pd;
            else if ("properties" === a) {
                for (const c of b.ps) d.add(c);
                d.has("imagepoint") ? this._pinImagePoint = b.ip : d.has("x") && d.has("y") ? (this._pinAngle = b.pa, this._pinDist = b.pd) : (d.has("x") && (this._dx = b.dx), d.has("y") &&
                    (this._dy = b.dy));
                d.has("angle") && (this._dAngle = b.da, this._lastKnownAngle = b.lka || 0);
                if (d.has("width-abs") || d.has("width-scale")) this._dWidth = b.dw;
                if (d.has("height-abs") || d.has("height-scale")) this._dHeight = b.dh;
                d.has("z") && (this._dz = b.dz)
            }
        }
        _LoadFromJson_Legacy(b) {
            const a = this._propSet,
                d = b.msa,
                c = b.tsa,
                e = b.pa,
                g = b.pd;
            switch (b.m) {
                case 0:
                    this._mode = "properties";
                    a.add("x").add("y").add("angle");
                    this._pinAngle = e;
                    this._pinDist = g;
                    this._dAngle = d - c;
                    this._lastKnownAngle = b.lka;
                    break;
                case 1:
                    this._mode = "properties";
                    a.add("x").add("y");
                    this._pinAngle = e;
                    this._pinDist = g;
                    break;
                case 2:
                    this._mode = "properties";
                    a.add("angle");
                    this._dAngle = d - c;
                    this._lastKnownAngle = b.lka;
                    break;
                case 3:
                    this._mode = "rope";
                    this._pinDist = b.pd;
                    break;
                case 4:
                    this._mode = "bar", this._pinDist = b.pd
            }
        }
        _OnAfterLoad() {
            -1 === this._pinUid ? this._SetPinInst(null) : (this._SetPinInst(this._runtime.GetInstanceByUID(this._pinUid)), this._pinUid = -1)
        }
        _OnInstanceDestroyed(b) {
            this._pinInst === b && (this._SetPinInst(null), this._destroy && this._runtime.DestroyInstance(this._inst))
        }
        Tick2() {
            var b =
                this._pinInst;
            if (b) {
                var a = b.GetWorldInfo(),
                    d = this._inst.GetWorldInfo(),
                    c = this._mode,
                    e = !1;
                if ("rope" === c || "bar" === c) {
                    if (b = f.distanceTo(d.GetX(), d.GetY(), a.GetX(), a.GetY()), b > this._pinDist || "bar" === c && b < this._pinDist) e = f.angleTo(a.GetX(), a.GetY(), d.GetX(), d.GetY()), d.SetXY(a.GetX() + Math.cos(e) * this._pinDist, a.GetY() + Math.sin(e) * this._pinDist), e = !0
                } else {
                    c = this._propSet;
                    if (c.has("imagepoint")) {
                        const [g, h] = b.GetImagePoint(this._pinImagePoint);
                        d.EqualsXY(g, h) || (d.SetXY(g, h), e = !0)
                    } else if (c.has("x") && c.has("y")) {
                        b =
                            a.GetX() + Math.cos(a.GetAngle() + this._pinAngle) * this._pinDist;
                        const g = a.GetY() + Math.sin(a.GetAngle() + this._pinAngle) * this._pinDist;
                        d.EqualsXY(b, g) || (d.SetXY(b, g), e = !0)
                    } else b = a.GetX() + this._dx, c.has("x") && b !== d.GetX() && (d.SetX(b), e = !0), b = a.GetY() + this._dy, c.has("y") && b !== d.GetY() && (d.SetY(b), e = !0);
                    c.has("angle") && (this._lastKnownAngle !== d.GetAngle() && (this._dAngle = f.clampAngle(this._dAngle + (d.GetAngle() - this._lastKnownAngle))), b = f.clampAngle(a.GetAngle() + this._dAngle), b !== d.GetAngle() && (d.SetAngle(b),
                        e = !0), this._lastKnownAngle = d.GetAngle());
                    c.has("width-abs") && (b = a.GetWidth() + this._dWidth, b !== d.GetWidth() && (d.SetWidth(b), e = !0));
                    c.has("width-scale") && (b = a.GetWidth() * this._dWidth, b !== d.GetWidth() && (d.SetWidth(b), e = !0));
                    c.has("height-abs") && (b = a.GetHeight() + this._dHeight, b !== d.GetHeight() && (d.SetHeight(b), e = !0));
                    c.has("height-scale") && (b = a.GetHeight() * this._dHeight, b !== d.GetHeight() && (d.SetHeight(b), e = !0));
                    c.has("z") && (b = a.GetZElevation() + this._dz, b !== d.GetZElevation() && (d.SetZElevation(b), this._runtime.UpdateRender()))
                }
                e &&
                    d.SetBboxChanged()
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.pin.debugger.is-pinned",
                    value: !!this._pinInst
                }, {
                    name: "behaviors.pin.debugger.pinned-uid",
                    value: this._pinInst ? this._pinInst.GetUID() : 0
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Pin.Cnds = {
    IsPinned() {
        return !!this._pinInst
    },
    WillDestroy() {
        return this._destroy
    }
};
"use strict";
self.C3.Behaviors.Pin.Acts = {
    PinByDistance(f, b) {
        this._Pin(f, 0 === b ? "rope" : "bar")
    },
    PinByProperties(f, b, a, d, c, e, g) {
        const h = [];
        b && h.push("x");
        a && h.push("y");
        d && h.push("angle");
        g && h.push("z");
        1 === c ? h.push("width-abs") : 2 === c && h.push("width-scale");
        1 === e ? h.push("height-abs") : 2 === e && h.push("height-scale");
        0 !== h.length && this._Pin(f, "properties", h)
    },
    PinByImagePoint(f, b, a, d, c, e) {
        const g = ["imagepoint"];
        a && g.push("angle");
        e && g.push("z");
        1 === d ? g.push("width-abs") : 2 === d && g.push("width-scale");
        1 === c ? g.push("height-abs") :
            2 === c && g.push("height-scale");
        this._pinImagePoint = b;
        this._Pin(f, "properties", g)
    },
    SetPinDistance(f) {
        if ("rope" === this._mode || "bar" === this._mode) this._pinDist = Math.max(f, 0)
    },
    SetDestroy(f) {
        this._destroy = f
    },
    Unpin() {
        this._SetPinInst(null);
        this._mode = "";
        this._propSet.clear();
        this._pinImagePoint = ""
    },
    Pin(f, b) {
        switch (b) {
            case 0:
                this._Pin(f, "properties", ["x", "y", "angle"]);
                break;
            case 1:
                this._Pin(f, "properties", ["x", "y"]);
                break;
            case 2:
                this._Pin(f, "properties", ["angle"]);
                break;
            case 3:
                this._Pin(f, "rope");
                break;
            case 4:
                this._Pin(f,
                    "bar")
        }
    }
};
"use strict";
self.C3.Behaviors.Pin.Exps = {
    PinnedUID() {
        return this._pinInst ? this._pinInst.GetUID() : -1
    }
}; {
    "use strict";
    const f = self.C3;
    f.Behaviors.Fade = class extends f.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const f = self.C3;
    f.Behaviors.Fade.Type = class extends f.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const f = self.C3;
    f.Behaviors.Fade.Instance = class extends f.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._fadeOutTime = this._waitTime = this._fadeInTime = 0;
            this._activeAtStart = this._destroy = !0;
            this._setMaxOpacity = !1;
            this._stage = 0;
            this._stageTime = f.New(f.KahanSum);
            this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1;
            a && (this._fadeInTime = a[0], this._waitTime = a[1], this._fadeOutTime = a[2], this._destroy = !!a[3], this._stage = (this._activeAtStart = !!a[4]) ? 0 : 3);
            this._activeAtStart && (0 ===
                this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender()));
            this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                fit: this._fadeInTime,
                wt: this._waitTime,
                fot: this._fadeOutTime,
                d: this._destroy,
                s: this._stage,
                st: this._stageTime.Get(),
                mo: this._maxOpacity
            }
        }
        LoadFromJson(b) {
            this._fadeInTime = b.fit;
            this._waitTime = b.wt;
            this._fadeOutTime = b.fot;
            this._destroy = b.d;
            this._stage = b.s;
            this._stageTime.Set(b.st);
            this._maxOpacity =
                b.mo
        }
        Tick() {
            var b = this._runtime.GetDt(this._inst);
            this._stageTime.Add(b);
            b = this._inst.GetWorldInfo();
            0 === this._stage && (b.SetOpacity(this._stageTime.Get() / this._fadeInTime * this._maxOpacity), this._runtime.UpdateRender(), b.GetOpacity() >= this._maxOpacity && (b.SetOpacity(this._maxOpacity), this._stage = 1, this._stageTime.Reset(), this.Trigger(f.Behaviors.Fade.Cnds.OnFadeInEnd)));
            1 === this._stage && this._stageTime.Get() >= this._waitTime && (this._stage = 2, this._stageTime.Reset(), this.Trigger(f.Behaviors.Fade.Cnds.OnWaitEnd));
            2 === this._stage && 0 !== this._fadeOutTime && (b.SetOpacity(this._maxOpacity - this._stageTime.Get() / this._fadeOutTime * this._maxOpacity), this._runtime.UpdateRender(), 0 >= b.GetOpacity() && (this._stage = 3, this._stageTime.Reset(), this.Trigger(f.Behaviors.Fade.Cnds.OnFadeOutEnd), this._destroy && this._runtime.DestroyInstance(this._inst)))
        }
        Start() {
            this._stage = 0;
            this._stageTime.Reset();
            0 === this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender())
        }
        GetPropertyValueByIndex(b) {
            switch (b) {
                case 0:
                    return this._fadeInTime;
                case 1:
                    return this._waitTime;
                case 2:
                    return this._fadeOutTime;
                case 3:
                    return this._destroy
            }
        }
        SetPropertyValueByIndex(b, a) {
            switch (b) {
                case 0:
                    this._fadeInTime = a;
                    break;
                case 1:
                    this._waitTime = a;
                    break;
                case 2:
                    this._fadeOutTime = a;
                    break;
                case 3:
                    this._destroy = !!a
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.fade.properties.fade-in-time.name",
                    value: this._fadeInTime,
                    onedit: b => this._fadeInTime = b
                }, {
                    name: "behaviors.fade.properties.wait-time.name",
                    value: this._waitTime,
                    onedit: b => this._waitTime = b
                }, {
                    name: "behaviors.fade.properties.fade-out-time.name",
                    value: this._fadeOutTime,
                    onedit: b => this._fadeOutTime = b
                }, {
                    name: "behaviors.fade.debugger.stage",
                    value: ["behaviors.fade.debugger." + ["fade-in", "wait", "fade-out", "done"][this._stage]]
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Fade.Cnds = {
    OnFadeOutEnd() {
        return !0
    },
    OnFadeInEnd() {
        return !0
    },
    OnWaitEnd() {
        return !0
    }
};
"use strict";
self.C3.Behaviors.Fade.Acts = {
    StartFade() {
        this._activeAtStart || this._setMaxOpacity || (this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1, this._setMaxOpacity = !0);
        3 === this._stage && this.Start()
    },
    RestartFade() {
        this.Start()
    },
    SetFadeInTime(f) {
        0 > f && (f = 0);
        this._fadeInTime = f
    },
    SetWaitTime(f) {
        0 > f && (f = 0);
        this._waitTime = f
    },
    SetFadeOutTime(f) {
        0 > f && (f = 0);
        this._fadeOutTime = f
    }
};
"use strict";
self.C3.Behaviors.Fade.Exps = {
    FadeInTime() {
        return this._fadeInTime
    },
    WaitTime() {
        return this._waitTime
    },
    FadeOutTime() {
        return this._fadeOutTime
    }
}; {
    const f = self.C3;
    self.C3_GetObjectRefTable = function() {
        return [f.Plugins.Sprite, f.Plugins.LocalStorage, f.Plugins.Browser, f.Plugins.Touch, f.Behaviors.Pin, f.Plugins.Spritefont2, f.Plugins.Keyboard, f.Behaviors.Fade, f.Plugins.Audio, f.Plugins.System.Cnds.OnLayoutStart, f.Plugins.Sprite.Acts.SetPos, f.Plugins.System.Exps.viewportleft, f.Plugins.Sprite.Exps.LayerNumber, f.Plugins.System.Exps.viewporttop, f.Plugins.System.Acts.SetVar, f.Plugins.Sprite.Acts.SetY, f.Plugins.System.Acts.SetGroupActive, f.Plugins.Sprite.Acts.SetVisible,
            f.Plugins.Sprite.Acts.SetScale, f.Plugins.Spritefont2.Acts.SetVisible, f.Plugins.System.Cnds.IsGroupActive, f.Plugins.System.Cnds.EveryTick, f.Plugins.Sprite.Exps.Y, f.Plugins.Sprite.Cnds.CompareY, f.Plugins.System.Acts.Wait, f.Plugins.System.Acts.AddVar, f.Plugins.System.Cnds.CompareVar, f.Plugins.Sprite.Cnds.PickByUID, f.Plugins.Spritefont2.Cnds.PickByUID, f.Plugins.Sprite.Acts.SetAnimFrame, f.Plugins.Audio.Acts.SetSilent, f.Plugins.Touch.Cnds.OnTouchObject, f.Plugins.Sprite.Cnds.CompareFrame, f.Plugins.Sprite.Cnds.IsOverlapping,
            f.Plugins.Audio.Acts.Play, f.Plugins.System.Acts.GoToLayout, f.Plugins.Browser.Cnds.OnBackButton, f.Plugins.Browser.Acts.Close, f.Plugins.Sprite.Cnds.IsOnLayer, f.Plugins.Sprite.Acts.SetX, f.Plugins.Sprite.Exps.X, f.Plugins.LocalStorage.Acts.CheckItemExists, f.Plugins.LocalStorage.Cnds.OnItemExists, f.Plugins.LocalStorage.Acts.GetItem, f.Plugins.LocalStorage.Cnds.OnItemGet, f.Plugins.LocalStorage.Exps.ItemValue, f.Behaviors.Pin.Acts.PinByProperties, f.Plugins.Sprite.Acts.SetWidth, f.Plugins.Sprite.Exps.Width, f.Plugins.System.Exps.random,
            f.Plugins.Sprite.Cnds.CompareWidth, f.Plugins.Sprite.Acts.SetSize, f.Plugins.Sprite.Acts.MoveToTop, f.Plugins.Sprite.Acts.SetAngle, f.Plugins.System.Exps.layoutwidth, f.Plugins.System.Exps.layoutheight, f.Plugins.System.Cnds.TriggerOnce, f.Plugins.Sprite.Acts.Destroy, f.Plugins.System.Cnds.ForEachOrdered, f.Plugins.Spritefont2.Exps.Y, f.Plugins.Spritefont2.Exps.Text, f.Plugins.Spritefont2.Cnds.CompareText, f.Plugins.Spritefont2.Acts.SetText, f.Plugins.Keyboard.Exps.StringFromKeyCode, f.Plugins.Touch.Cnds.OnTouchStart,
            f.Plugins.Touch.Cnds.IsTouchingObject, f.Plugins.Sprite.Acts.SetPosToObject, f.Plugins.Touch.Cnds.IsInTouch, f.Plugins.Spritefont2.Cnds.PickDistance, f.Plugins.Touch.Exps.X, f.Plugins.Touch.Exps.Y, f.Plugins.Sprite.Acts.SetTowardPosition, f.Plugins.Spritefont2.Exps.X, f.Plugins.Sprite.Exps.Angle, f.Plugins.System.Cnds.Else, f.Plugins.Touch.Cnds.OnTouchEnd, f.Plugins.Spritefont2.Exps.PickedCount, f.Plugins.System.Cnds.For, f.Plugins.System.Exps.tokencount, f.Plugins.System.Cnds.Compare, f.Plugins.System.Exps.len,
            f.Plugins.System.Exps.tokenat, f.Plugins.System.Exps.loopindex, f.Plugins.Sprite.Acts.Spawn, f.Plugins.System.Acts.CreateObject, f.Plugins.Spritefont2.Exps.Width, f.Plugins.Spritefont2.Acts.SetScale, f.Plugins.Sprite.Exps.Count, f.Plugins.Spritefont2.Exps.Count, f.Plugins.LocalStorage.Acts.SetItem, f.Plugins.System.Cnds.PickNth, f.Plugins.Sprite.Exps.MeshColumns, f.Plugins.System.Acts.RestartLayout, f.Plugins.Sprite.Cnds.OnCollision, f.Plugins.System.Exps.viewportright, f.Plugins.Sprite.Acts.RotateClockwise
        ]
    };
    self.C3_JsPropNameTable = [{
            Background: 0
        }, {
            Logo_T: 0
        }, {
            Play_B: 0
        }, {
            Sound_B_On: 0
        }, {
            LocalStorage: 0
        }, {
            Browser: 0
        }, {
            Touch: 0
        }, {
            Category_T: 0
        }, {
            Back_B: 0
        }, {
            Category_Options: 0
        }, {
            Levels_T: 0
        }, {
            Levels_Select: 0
        }, {
            Pin: 0
        }, {
            Option_B: 0
        }, {
            Options_Bar: 0
        }, {
            Sprite: 0
        }, {
            Box_Text: 0
        }, {
            Char: 0
        }, {
            Box_Game: 0
        }, {
            Word: 0
        }, {
            Keyboard: 0
        }, {
            Stroke: 0
        }, {
            Marker: 0
        }, {
            Word_Marker: 0
        }, {
            Sprite2: 0
        }, {
            Point_01: 0
        }, {
            Marker_Side_R: 0
        }, {
            Stroke_Side_R: 0
        }, {
            Stroke_Side_L: 0
        }, {
            Marker_Side_L: 0
        }, {
            Option_Grub_B: 0
        }, {
            Cover: 0
        }, {
            Coin_Box: 0
        }, {
            Add_B: 0
        }, {
            Coin_Icon: 0
        }, {
            Fade: 0
        },
        {
            Trasnsitions: 0
        }, {
            Levels_Lock: 0
        }, {
            Numb: 0
        }, {
            Level_T_Pos: 0
        }, {
            Load_Logo: 0
        }, {
            Load_Box: 0
        }, {
            Load_Tile: 0
        }, {
            Audio: 0
        }, {
            Load_Ads: 0
        }, {
            Hide: 0
        }, {
            Stroke_F: 0
        }, {
            Marker_F: 0
        }, {
            Popup_F: 0
        }, {
            Sound: 0
        }, {
            Scal_Popup: 0
        }, {
            Page_Pos: 0
        }, {
            Scal_play: 0
        }, {
            Category: 0
        }, {
            Coin: 0
        }, {
            Level_Animals: 0
        }, {
            Level_Fruits: 0
        }, {
            Level_Vehicles: 0
        }, {
            Level_Clothes: 0
        }, {
            Level_Country: 0
        }, {
            Picked_Char: 0
        }, {
            List_Of_Words: 0
        }, {
            Pick_Lenght: 0
        }, {
            Point_Unlock: 0
        }
    ]
} {
    const f = self.C3;
    self.C3_ExpressionFuncs = [b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) + 60
        }, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) + 50
        }, () => 0, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) - 300
        }, () => "Down", () => "Zoom_Play", b => {
            const a = b._GetNode(0).GetVar();
            return () => a.GetValue()
        }, () => "Animasi_Home", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 30
        }, () => 318, () => .1, () => 1, () =>
        175, () => 360, () => "Sound", () => .8, () => "", () => "Play", () => -10, () => .5, () => "Exit", () => "Object_Pos_Categ", () => "UI", () => "Back_To_Home", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 10
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 10
        }, () => "Category_Select", () => 2, () => 3, () => 4, () => 5, () => "Object_Pos_Levels", () => "Category_Check", () => "ANIMALS", () => "FRUITS", () => "VEHICLES", () => "CLOTHES", () => "COUNTRY", () => "Back_To_Category", () => "Animal_Select_1", () => "Animal_Select_2", () => "Animal_Select_3", () => "Animal_Select_4",
        () => "Animal_Select_5", () => 6, () => "Animal_Select_6", () => 7, () => "Animal_Select_7", () => 8, () => "Animal_Select_8", () => 9, () => "Animal_Select_9", () => 10, () => "Animal_Select_10", () => 11, () => "Animal_Select_11", () => 12, () => "Animal_Select_12", () => 13, () => "Animal_Select_13", () => 14, () => "Animal_Select_14", () => 15, () => "Animal_Select_15", () => 16, () => "Animal_Select_16", () => 17, () => "Animal_Select_17", () => 18, () => "Animal_Select_18", () => 19, () => "Animal_Select_19", () => 20, () => "Animal_Select_20", () => "Animal_Levels", () => .85, () => "Fruit_Select_1",
        () => "Fruit_Select_2", () => "Fruit_Select_3", () => "Fruit_Select_4", () => "Fruit_Select_5", () => "Fruit_Select_6", () => "Fruit_Select_7", () => "Fruit_Select_8", () => "Fruit_Select_9", () => "Fruit_Select_10", () => "Fruit_Select_11", () => "Fruit_Select_12", () => "Fruit_Select_13", () => "Fruit_Select_14", () => "Fruit_Select_15", () => "Fruit_Select_16", () => "Fruit_Select_17", () => "Fruit_Select_18", () => "Fruit_Select_19", () => "Fruit_Select_20", () => "Fruits_Level", () => "Vehicles_Select_1", () => "Vehicles_Select_2", () => "Vehicles_Select_3",
        () => "Vehicles_Select_4", () => "Vehicles_Select_5", () => "Vehicles_Select_6", () => "Vehicles_Select_7", () => "Vehicles_Select_8", () => "Vehicles_Select_9", () => "Vehicles_Select_10", () => "Vehicles_Select_11", () => "Vehicles_Select_12", () => "Vehicles_Select_13", () => "Vehicles_Select_14", () => "Vehicles_Select_15", () => "Vehicles_Select_16", () => "Vehicles_Select_17", () => "Vehicles_Select_18", () => "Vehicles_Select_19", () => "Vehicles_Select_20", () => "Vehicles_select_1", () => "Vehicles_select_2", () => "Vehicles_select_3", () => "Vehicles_select_4",
        () => "Vehicles_select_5", () => "Vehicles_select_6", () => "Vehicles_select_7", () => "Vehicles_select_8", () => "Vehicles_select_9", () => "Vehicles_select_10", () => "Vehicles_select_11", () => "Vehicles_select_12", () => "Vehicles_select_13", () => "Vehicles_select_14", () => "Vehicles_select_15", () => "Vehicles_select_16", () => "Vehicles_select_17", () => "Vehicles_select_18", () => "Vehicles_select_19", () => "Vehicles_select_20", () => "Vehicle_Level", () => "Clothes_Select_1", () => "Clothes_Select_2", () => "Clothes_Select_3", () => "Clothes_Select_4",
        () => "Clothes_Select_5", () => "Clothes_Select_6", () => "Clothes_Select_7", () => "Clothes_Select_8", () => "Clothes_Select_9", () => "Clothes_Select_10", () => "Clothes_Select_11", () => "Clothes_Select_12", () => "Clothes_Select_13", () => "Clothes_Select_14", () => "Clothes_Select_15", () => "Clothes_Select_16", () => "Clothes_Select_17", () => "Clothes_Select_18", () => "Clothes_Select_19", () => "Clothes_Select_20", () => "Clothes_Level", () => "Country_Select_1", () => "Country_Select_2", () => "Country_Select_3", () => "Country_Select_4", () => "Country_Select_5",
        () => "Country_Select_6", () => "Country_Select_7", () => "Country_Select_8", () => "Country_Select_9", () => "Country_Select_10", () => "Country_Select_11", () => "Country_Select_12", () => "Country_Select_13", () => "Country_Select_14", () => "Country_Select_15", () => "Country_Select_16", () => "Country_Select_17", () => "Country_Select_18", () => "Country_Select_19", () => "Country_Select_20", () => "Country_Level", () => "Coins", () => "Animals_L", () => "Fruits_L", () => "Vehicles_L", () => "Clothes_L", () => "Country_L", () => "Load_Saved_Game", b => {
            const a =
                b._GetNode(0).GetBoundMethod();
            return () => a()
        }, () => "Sett_Popup", () => 169, () => 39, () => 40, () => 41, () => 174, () => 184, () => 185, () => 186, () => 187, () => 188, () => 189, () => "Loading", b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetBoundMethod();
            return () => a.ExpObject() + d(.03, .5)
        }, () => 280, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) - 500
        }, () => 50, () => 30, () => "Unlock", () => "Popup_Zoom", () => "Object_Game_Pos", () => "Options", () => 550, () => 640, () => "Add_Coin", () => "Unlock_Select", () => "Touch_Char",
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject()
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + "#"
        }, () => "9", () => "asfd", b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => a(d(65, 91))
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1),
                c = b._GetNode(2),
                e = b._GetNode(3);
            return () => f.distanceTo(a.ExpObject(), d.ExpObject(), c.ExpObject(), e.ExpObject())
        }, () => "list_order", b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar();
            return () => a(d.GetValue(), "#") - 1
        },
        b => {
            const a =
                b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar();
            return () => a(d.GetValue())
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetBoundMethod();
            return () => a(d.GetValue(), c("list_order"), "#")
        }, () => "WS", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 25
        }, () => -50, () => "Complete_Level", () => "Wait_Complete", () => "Sound_Complete", () => "Clear_Error", () => 1.5, () => "Creat_Interstitial", () => "Popup_Button", () => -8, () => "Show_AD", () => "Coin_Pos", () => 999, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) - 80
        }, () => 361, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) - 60
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject()) + 105
        }, () => "LOAD_ADS", () => "Tr"
    ]
}
var module$str$c3runtime = {};
var module$str$__c3root__ = {};