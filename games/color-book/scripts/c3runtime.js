// Generated by Construct 3, the game and app creator :: https://www.construct.net
'use strict';
(function(f, b) {
    "object" === typeof exports && "undefined" !== typeof module ? b(exports) : "function" === typeof define && define.amd ? define(["exports"], b) : (f = f || self, b(f.glMatrix = {}))
})(this, function(f) {
    function b(g, l, v) {
        var y = l[0],
            A = l[1],
            D = l[2];
        l = l[3];
        var E = v[0],
            H = v[1],
            K = v[2];
        v = v[3];
        g[0] = y * E + D * H;
        g[1] = A * E + l * H;
        g[2] = y * K + D * v;
        g[3] = A * K + l * v;
        return g
    }

    function a(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        g[2] = l[2] - v[2];
        g[3] = l[3] - v[3];
        return g
    }

    function d(g, l, v) {
        var y = l[0],
            A = l[1],
            D = l[2],
            E = l[3],
            H = l[4];
        l = l[5];
        var K =
            v[0],
            M = v[1],
            R = v[2],
            S = v[3],
            W = v[4];
        v = v[5];
        g[0] = y * K + D * M;
        g[1] = A * K + E * M;
        g[2] = y * R + D * S;
        g[3] = A * R + E * S;
        g[4] = y * W + D * v + H;
        g[5] = A * W + E * v + l;
        return g
    }

    function c(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        g[2] = l[2] - v[2];
        g[3] = l[3] - v[3];
        g[4] = l[4] - v[4];
        g[5] = l[5] - v[5];
        return g
    }

    function e() {
        var g = new na(9);
        na != Float32Array && (g[1] = 0, g[2] = 0, g[3] = 0, g[5] = 0, g[6] = 0, g[7] = 0);
        g[0] = 1;
        g[4] = 1;
        g[8] = 1;
        return g
    }

    function k(g, l, v) {
        var y = l[0],
            A = l[1],
            D = l[2],
            E = l[3],
            H = l[4],
            K = l[5],
            M = l[6],
            R = l[7];
        l = l[8];
        var S = v[0],
            W = v[1],
            U = v[2],
            da = v[3],
            ca = v[4],
            Y = v[5],
            ra = v[6],
            ma = v[7];
        v = v[8];
        g[0] = S * y + W * E + U * M;
        g[1] = S * A + W * H + U * R;
        g[2] = S * D + W * K + U * l;
        g[3] = da * y + ca * E + Y * M;
        g[4] = da * A + ca * H + Y * R;
        g[5] = da * D + ca * K + Y * l;
        g[6] = ra * y + ma * E + v * M;
        g[7] = ra * A + ma * H + v * R;
        g[8] = ra * D + ma * K + v * l;
        return g
    }

    function h(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        g[2] = l[2] - v[2];
        g[3] = l[3] - v[3];
        g[4] = l[4] - v[4];
        g[5] = l[5] - v[5];
        g[6] = l[6] - v[6];
        g[7] = l[7] - v[7];
        g[8] = l[8] - v[8];
        return g
    }

    function p(g) {
        g[0] = 1;
        g[1] = 0;
        g[2] = 0;
        g[3] = 0;
        g[4] = 0;
        g[5] = 1;
        g[6] = 0;
        g[7] = 0;
        g[8] = 0;
        g[9] = 0;
        g[10] = 1;
        g[11] = 0;
        g[12] = 0;
        g[13] = 0;
        g[14] = 0;
        g[15] = 1;
        return g
    }

    function n(g,
        l, v) {
        var y = l[0],
            A = l[1],
            D = l[2],
            E = l[3],
            H = l[4],
            K = l[5],
            M = l[6],
            R = l[7],
            S = l[8],
            W = l[9],
            U = l[10],
            da = l[11],
            ca = l[12],
            Y = l[13],
            ra = l[14];
        l = l[15];
        var ma = v[0],
            pa = v[1],
            qa = v[2],
            oa = v[3];
        g[0] = ma * y + pa * H + qa * S + oa * ca;
        g[1] = ma * A + pa * K + qa * W + oa * Y;
        g[2] = ma * D + pa * M + qa * U + oa * ra;
        g[3] = ma * E + pa * R + qa * da + oa * l;
        ma = v[4];
        pa = v[5];
        qa = v[6];
        oa = v[7];
        g[4] = ma * y + pa * H + qa * S + oa * ca;
        g[5] = ma * A + pa * K + qa * W + oa * Y;
        g[6] = ma * D + pa * M + qa * U + oa * ra;
        g[7] = ma * E + pa * R + qa * da + oa * l;
        ma = v[8];
        pa = v[9];
        qa = v[10];
        oa = v[11];
        g[8] = ma * y + pa * H + qa * S + oa * ca;
        g[9] = ma * A + pa * K + qa * W + oa * Y;
        g[10] = ma * D + pa *
            M + qa * U + oa * ra;
        g[11] = ma * E + pa * R + qa * da + oa * l;
        ma = v[12];
        pa = v[13];
        qa = v[14];
        oa = v[15];
        g[12] = ma * y + pa * H + qa * S + oa * ca;
        g[13] = ma * A + pa * K + qa * W + oa * Y;
        g[14] = ma * D + pa * M + qa * U + oa * ra;
        g[15] = ma * E + pa * R + qa * da + oa * l;
        return g
    }

    function m(g, l, v) {
        var y = l[0],
            A = l[1],
            D = l[2],
            E = l[3],
            H = y + y,
            K = A + A,
            M = D + D;
        l = y * H;
        var R = y * K;
        y *= M;
        var S = A * K;
        A *= M;
        D *= M;
        H *= E;
        K *= E;
        E *= M;
        g[0] = 1 - (S + D);
        g[1] = R + E;
        g[2] = y - K;
        g[3] = 0;
        g[4] = R - E;
        g[5] = 1 - (l + D);
        g[6] = A + H;
        g[7] = 0;
        g[8] = y + K;
        g[9] = A - H;
        g[10] = 1 - (l + S);
        g[11] = 0;
        g[12] = v[0];
        g[13] = v[1];
        g[14] = v[2];
        g[15] = 1;
        return g
    }

    function t(g, l) {
        g[0] =
            l[12];
        g[1] = l[13];
        g[2] = l[14];
        return g
    }

    function q(g, l) {
        var v = l[4],
            y = l[5],
            A = l[6],
            D = l[8],
            E = l[9],
            H = l[10];
        g[0] = Math.hypot(l[0], l[1], l[2]);
        g[1] = Math.hypot(v, y, A);
        g[2] = Math.hypot(D, E, H);
        return g
    }

    function u(g, l) {
        var v = new na(3);
        q(v, l);
        var y = 1 / v[0],
            A = 1 / v[1],
            D = 1 / v[2],
            E = l[0] * y;
        v = l[1] * A;
        var H = l[2] * D,
            K = l[4] * y,
            M = l[5] * A,
            R = l[6] * D;
        y *= l[8];
        A *= l[9];
        l = l[10] * D;
        D = E + M + l;
        0 < D ? (E = 2 * Math.sqrt(D + 1), g[3] = .25 * E, g[0] = (R - A) / E, g[1] = (y - H) / E, g[2] = (v - K) / E) : E > M && E > l ? (E = 2 * Math.sqrt(1 + E - M - l), g[3] = (R - A) / E, g[0] = .25 * E, g[1] = (v + K) / E, g[2] = (y +
            H) / E) : M > l ? (E = 2 * Math.sqrt(1 + M - E - l), g[3] = (y - H) / E, g[0] = (v + K) / E, g[1] = .25 * E, g[2] = (R + A) / E) : (E = 2 * Math.sqrt(1 + l - E - M), g[3] = (v - K) / E, g[0] = (y + H) / E, g[1] = (R + A) / E, g[2] = .25 * E);
        return g
    }

    function r(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        g[2] = l[2] - v[2];
        g[3] = l[3] - v[3];
        g[4] = l[4] - v[4];
        g[5] = l[5] - v[5];
        g[6] = l[6] - v[6];
        g[7] = l[7] - v[7];
        g[8] = l[8] - v[8];
        g[9] = l[9] - v[9];
        g[10] = l[10] - v[10];
        g[11] = l[11] - v[11];
        g[12] = l[12] - v[12];
        g[13] = l[13] - v[13];
        g[14] = l[14] - v[14];
        g[15] = l[15] - v[15];
        return g
    }

    function x() {
        var g = new na(3);
        na != Float32Array &&
            (g[0] = 0, g[1] = 0, g[2] = 0);
        return g
    }

    function z(g) {
        return Math.hypot(g[0], g[1], g[2])
    }

    function C(g, l, v) {
        var y = new na(3);
        y[0] = g;
        y[1] = l;
        y[2] = v;
        return y
    }

    function w(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        g[2] = l[2] - v[2];
        return g
    }

    function B(g, l, v) {
        g[0] = l[0] * v[0];
        g[1] = l[1] * v[1];
        g[2] = l[2] * v[2];
        return g
    }

    function F(g, l, v) {
        g[0] = l[0] / v[0];
        g[1] = l[1] / v[1];
        g[2] = l[2] / v[2];
        return g
    }

    function J(g, l) {
        return Math.hypot(l[0] - g[0], l[1] - g[1], l[2] - g[2])
    }

    function O(g, l) {
        var v = l[0] - g[0],
            y = l[1] - g[1];
        g = l[2] - g[2];
        return v * v + y * y + g * g
    }

    function G(g) {
        var l =
            g[0],
            v = g[1];
        g = g[2];
        return l * l + v * v + g * g
    }

    function I(g, l) {
        var v = l[0],
            y = l[1],
            A = l[2];
        v = v * v + y * y + A * A;
        0 < v && (v = 1 / Math.sqrt(v));
        g[0] = l[0] * v;
        g[1] = l[1] * v;
        g[2] = l[2] * v;
        return g
    }

    function P(g, l) {
        return g[0] * l[0] + g[1] * l[1] + g[2] * l[2]
    }

    function Q(g, l, v) {
        var y = l[0],
            A = l[1];
        l = l[2];
        var D = v[0],
            E = v[1];
        v = v[2];
        g[0] = A * v - l * E;
        g[1] = l * D - y * v;
        g[2] = y * E - A * D;
        return g
    }

    function T() {
        var g = new na(4);
        na != Float32Array && (g[0] = 0, g[1] = 0, g[2] = 0, g[3] = 0);
        return g
    }

    function X(g) {
        var l = new na(4);
        l[0] = g[0];
        l[1] = g[1];
        l[2] = g[2];
        l[3] = g[3];
        return l
    }

    function Z(g,
        l, v, y) {
        var A = new na(4);
        A[0] = g;
        A[1] = l;
        A[2] = v;
        A[3] = y;
        return A
    }

    function fa(g, l) {
        g[0] = l[0];
        g[1] = l[1];
        g[2] = l[2];
        g[3] = l[3];
        return g
    }

    function ia(g, l, v, y, A) {
        g[0] = l;
        g[1] = v;
        g[2] = y;
        g[3] = A;
        return g
    }

    function ba(g, l, v) {
        g[0] = l[0] + v[0];
        g[1] = l[1] + v[1];
        g[2] = l[2] + v[2];
        g[3] = l[3] + v[3];
        return g
    }

    function xa(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        g[2] = l[2] - v[2];
        g[3] = l[3] - v[3];
        return g
    }

    function ua(g, l, v) {
        g[0] = l[0] * v[0];
        g[1] = l[1] * v[1];
        g[2] = l[2] * v[2];
        g[3] = l[3] * v[3];
        return g
    }

    function Da(g, l, v) {
        g[0] = l[0] / v[0];
        g[1] = l[1] / v[1];
        g[2] =
            l[2] / v[2];
        g[3] = l[3] / v[3];
        return g
    }

    function Ea(g, l, v) {
        g[0] = l[0] * v;
        g[1] = l[1] * v;
        g[2] = l[2] * v;
        g[3] = l[3] * v;
        return g
    }

    function Ba(g, l) {
        return Math.hypot(l[0] - g[0], l[1] - g[1], l[2] - g[2], l[3] - g[3])
    }

    function Aa(g, l) {
        var v = l[0] - g[0],
            y = l[1] - g[1],
            A = l[2] - g[2];
        g = l[3] - g[3];
        return v * v + y * y + A * A + g * g
    }

    function ka(g) {
        return Math.hypot(g[0], g[1], g[2], g[3])
    }

    function Fa(g) {
        var l = g[0],
            v = g[1],
            y = g[2];
        g = g[3];
        return l * l + v * v + y * y + g * g
    }

    function wa(g, l) {
        var v = l[0],
            y = l[1],
            A = l[2];
        l = l[3];
        var D = v * v + y * y + A * A + l * l;
        0 < D && (D = 1 / Math.sqrt(D));
        g[0] =
            v * D;
        g[1] = y * D;
        g[2] = A * D;
        g[3] = l * D;
        return g
    }

    function Ca(g, l) {
        return g[0] * l[0] + g[1] * l[1] + g[2] * l[2] + g[3] * l[3]
    }

    function Pa(g, l, v, y) {
        var A = l[0],
            D = l[1],
            E = l[2];
        l = l[3];
        g[0] = A + y * (v[0] - A);
        g[1] = D + y * (v[1] - D);
        g[2] = E + y * (v[2] - E);
        g[3] = l + y * (v[3] - l);
        return g
    }

    function Qa(g, l) {
        return g[0] === l[0] && g[1] === l[1] && g[2] === l[2] && g[3] === l[3]
    }

    function Ra(g, l) {
        var v = g[0],
            y = g[1],
            A = g[2];
        g = g[3];
        var D = l[0],
            E = l[1],
            H = l[2];
        l = l[3];
        return Math.abs(v - D) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(D)) && Math.abs(y - E) <= 1E-6 * Math.max(1, Math.abs(y),
            Math.abs(E)) && Math.abs(A - H) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(H)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
    }

    function Ja() {
        var g = new na(4);
        na != Float32Array && (g[0] = 0, g[1] = 0, g[2] = 0);
        g[3] = 1;
        return g
    }

    function Sa(g, l, v) {
        v *= .5;
        var y = Math.sin(v);
        g[0] = y * l[0];
        g[1] = y * l[1];
        g[2] = y * l[2];
        g[3] = Math.cos(v);
        return g
    }

    function Ta(g, l, v) {
        var y = l[0],
            A = l[1],
            D = l[2];
        l = l[3];
        var E = v[0],
            H = v[1],
            K = v[2];
        v = v[3];
        g[0] = y * v + l * E + A * K - D * H;
        g[1] = A * v + l * H + D * E - y * K;
        g[2] = D * v + l * K + y * H - A * E;
        g[3] = l * v - y * E - A * H - D * K;
        return g
    }

    function Ua(g,
        l, v) {
        v *= .5;
        var y = l[0],
            A = l[1],
            D = l[2];
        l = l[3];
        var E = Math.sin(v);
        v = Math.cos(v);
        g[0] = y * v + l * E;
        g[1] = A * v + D * E;
        g[2] = D * v - A * E;
        g[3] = l * v - y * E;
        return g
    }

    function Va(g, l, v) {
        v *= .5;
        var y = l[0],
            A = l[1],
            D = l[2];
        l = l[3];
        var E = Math.sin(v);
        v = Math.cos(v);
        g[0] = y * v - D * E;
        g[1] = A * v + l * E;
        g[2] = D * v + y * E;
        g[3] = l * v - A * E;
        return g
    }

    function Wa(g, l, v) {
        v *= .5;
        var y = l[0],
            A = l[1],
            D = l[2];
        l = l[3];
        var E = Math.sin(v);
        v = Math.cos(v);
        g[0] = y * v + A * E;
        g[1] = A * v - y * E;
        g[2] = D * v + l * E;
        g[3] = l * v - D * E;
        return g
    }

    function Xa(g, l) {
        var v = l[0],
            y = l[1],
            A = l[2],
            D = Math.sqrt(v * v + y * y + A * A);
        l = Math.exp(l[3]);
        var E = 0 < D ? l * Math.sin(D) / D : 0;
        g[0] = v * E;
        g[1] = y * E;
        g[2] = A * E;
        g[3] = l * Math.cos(D);
        return g
    }

    function Ya(g, l) {
        var v = l[0],
            y = l[1],
            A = l[2];
        l = l[3];
        var D = Math.sqrt(v * v + y * y + A * A);
        D = 0 < D ? Math.atan2(D, l) / D : 0;
        g[0] = v * D;
        g[1] = y * D;
        g[2] = A * D;
        g[3] = .5 * Math.log(v * v + y * y + A * A + l * l);
        return g
    }

    function Ka(g, l, v, y) {
        var A = l[0],
            D = l[1],
            E = l[2];
        l = l[3];
        var H = v[0],
            K = v[1],
            M = v[2];
        v = v[3];
        var R = A * H + D * K + E * M + l * v;
        0 > R && (R = -R, H = -H, K = -K, M = -M, v = -v);
        if (1E-6 < 1 - R) {
            var S = Math.acos(R);
            var W = Math.sin(S);
            R = Math.sin((1 - y) * S) / W;
            y = Math.sin(y * S) /
                W
        } else R = 1 - y;
        g[0] = R * A + y * H;
        g[1] = R * D + y * K;
        g[2] = R * E + y * M;
        g[3] = R * l + y * v;
        return g
    }

    function Za(g, l) {
        var v = l[0] + l[4] + l[8];
        if (0 < v) v = Math.sqrt(v + 1), g[3] = .5 * v, v = .5 / v, g[0] = (l[5] - l[7]) * v, g[1] = (l[6] - l[2]) * v, g[2] = (l[1] - l[3]) * v;
        else {
            var y = 0;
            l[4] > l[0] && (y = 1);
            l[8] > l[3 * y + y] && (y = 2);
            var A = (y + 1) % 3,
                D = (y + 2) % 3;
            v = Math.sqrt(l[3 * y + y] - l[3 * A + A] - l[3 * D + D] + 1);
            g[y] = .5 * v;
            v = .5 / v;
            g[3] = (l[3 * A + D] - l[3 * D + A]) * v;
            g[A] = (l[3 * A + y] + l[3 * y + A]) * v;
            g[D] = (l[3 * D + y] + l[3 * y + D]) * v
        }
        return g
    }

    function $a(g, l, v) {
        var y = .5 * v[0],
            A = .5 * v[1];
        v = .5 * v[2];
        var D = l[0],
            E = l[1],
            H = l[2];
        l = l[3];
        g[0] = D;
        g[1] = E;
        g[2] = H;
        g[3] = l;
        g[4] = y * l + A * H - v * E;
        g[5] = A * l + v * D - y * H;
        g[6] = v * l + y * E - A * D;
        g[7] = -y * D - A * E - v * H;
        return g
    }

    function ab(g, l) {
        g[0] = l[0];
        g[1] = l[1];
        g[2] = l[2];
        g[3] = l[3];
        g[4] = l[4];
        g[5] = l[5];
        g[6] = l[6];
        g[7] = l[7];
        return g
    }

    function bb(g, l, v) {
        var y = l[0],
            A = l[1],
            D = l[2],
            E = l[3],
            H = v[4],
            K = v[5],
            M = v[6],
            R = v[7],
            S = l[4],
            W = l[5],
            U = l[6];
        l = l[7];
        var da = v[0],
            ca = v[1],
            Y = v[2];
        v = v[3];
        g[0] = y * v + E * da + A * Y - D * ca;
        g[1] = A * v + E * ca + D * da - y * Y;
        g[2] = D * v + E * Y + y * ca - A * da;
        g[3] = E * v - y * da - A * ca - D * Y;
        g[4] = y * R + E * H + A * M - D * K + S * v + l * da + W * Y - U * ca;
        g[5] =
            A * R + E * K + D * H - y * M + W * v + l * ca + U * da - S * Y;
        g[6] = D * R + E * M + y * K - A * H + U * v + l * Y + S * ca - W * da;
        g[7] = E * R - y * H - A * K - D * M + l * v - S * da - W * ca - U * Y;
        return g
    }

    function cb() {
        var g = new na(2);
        na != Float32Array && (g[0] = 0, g[1] = 0);
        return g
    }

    function db(g, l, v) {
        g[0] = l[0] - v[0];
        g[1] = l[1] - v[1];
        return g
    }

    function eb(g, l, v) {
        g[0] = l[0] * v[0];
        g[1] = l[1] * v[1];
        return g
    }

    function fb(g, l, v) {
        g[0] = l[0] / v[0];
        g[1] = l[1] / v[1];
        return g
    }

    function gb(g, l) {
        return Math.hypot(l[0] - g[0], l[1] - g[1])
    }

    function hb(g, l) {
        var v = l[0] - g[0];
        g = l[1] - g[1];
        return v * v + g * g
    }

    function ib(g) {
        return Math.hypot(g[0],
            g[1])
    }

    function jb(g) {
        var l = g[0];
        g = g[1];
        return l * l + g * g
    }
    var na = "undefined" !== typeof Float32Array ? Float32Array : Array,
        Ga = Math.random,
        kb = Math.PI / 180;
    Math.hypot || (Math.hypot = function() {
        for (var g = 0, l = arguments.length; l--;) g += arguments[l] * arguments[l];
        return Math.sqrt(g)
    });
    var lb = Object.freeze({
            __proto__: null,
            EPSILON: 1E-6,
            get ARRAY_TYPE() {
                return na
            },
            RANDOM: Ga,
            setMatrixArrayType: function(g) {
                na = g
            },
            toRadian: function(g) {
                return g * kb
            },
            equals: function(g, l) {
                return Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
            }
        }),
        mb = Object.freeze({
            __proto__: null,
            create: function() {
                var g = new na(4);
                na != Float32Array && (g[1] = 0, g[2] = 0);
                g[0] = 1;
                g[3] = 1;
                return g
            },
            clone: function(g) {
                var l = new na(4);
                l[0] = g[0];
                l[1] = g[1];
                l[2] = g[2];
                l[3] = g[3];
                return l
            },
            copy: function(g, l) {
                g[0] = l[0];
                g[1] = l[1];
                g[2] = l[2];
                g[3] = l[3];
                return g
            },
            identity: function(g) {
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 1;
                return g
            },
            fromValues: function(g, l, v, y) {
                var A = new na(4);
                A[0] = g;
                A[1] = l;
                A[2] = v;
                A[3] = y;
                return A
            },
            set: function(g, l, v, y, A) {
                g[0] = l;
                g[1] = v;
                g[2] = y;
                g[3] = A;
                return g
            },
            transpose: function(g,
                l) {
                if (g === l) {
                    var v = l[1];
                    g[1] = l[2];
                    g[2] = v
                } else g[0] = l[0], g[1] = l[2], g[2] = l[1], g[3] = l[3];
                return g
            },
            invert: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2];
                l = l[3];
                var D = v * l - A * y;
                if (!D) return null;
                D = 1 / D;
                g[0] = l * D;
                g[1] = -y * D;
                g[2] = -A * D;
                g[3] = v * D;
                return g
            },
            adjoint: function(g, l) {
                var v = l[0];
                g[0] = l[3];
                g[1] = -l[1];
                g[2] = -l[2];
                g[3] = v;
                return g
            },
            determinant: function(g) {
                return g[0] * g[3] - g[2] * g[1]
            },
            multiply: b,
            rotate: function(g, l, v) {
                var y = l[0],
                    A = l[1],
                    D = l[2];
                l = l[3];
                var E = Math.sin(v);
                v = Math.cos(v);
                g[0] = y * v + D * E;
                g[1] = A * v + l * E;
                g[2] = y * -E +
                    D * v;
                g[3] = A * -E + l * v;
                return g
            },
            scale: function(g, l, v) {
                var y = l[1],
                    A = l[2],
                    D = l[3],
                    E = v[0];
                v = v[1];
                g[0] = l[0] * E;
                g[1] = y * E;
                g[2] = A * v;
                g[3] = D * v;
                return g
            },
            fromRotation: function(g, l) {
                var v = Math.sin(l);
                l = Math.cos(l);
                g[0] = l;
                g[1] = v;
                g[2] = -v;
                g[3] = l;
                return g
            },
            fromScaling: function(g, l) {
                g[0] = l[0];
                g[1] = 0;
                g[2] = 0;
                g[3] = l[1];
                return g
            },
            str: function(g) {
                return "mat2(" + g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] + ")"
            },
            frob: function(g) {
                return Math.hypot(g[0], g[1], g[2], g[3])
            },
            LDU: function(g, l, v, y) {
                g[2] = y[2] / y[0];
                v[0] = y[0];
                v[1] = y[1];
                v[3] = y[3] - g[2] *
                    v[1];
                return [g, l, v]
            },
            add: function(g, l, v) {
                g[0] = l[0] + v[0];
                g[1] = l[1] + v[1];
                g[2] = l[2] + v[2];
                g[3] = l[3] + v[3];
                return g
            },
            subtract: a,
            exactEquals: function(g, l) {
                return g[0] === l[0] && g[1] === l[1] && g[2] === l[2] && g[3] === l[3]
            },
            equals: function(g, l) {
                var v = g[0],
                    y = g[1],
                    A = g[2];
                g = g[3];
                var D = l[0],
                    E = l[1],
                    H = l[2];
                l = l[3];
                return Math.abs(v - D) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(D)) && Math.abs(y - E) <= 1E-6 * Math.max(1, Math.abs(y), Math.abs(E)) && Math.abs(A - H) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(H)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g),
                    Math.abs(l))
            },
            multiplyScalar: function(g, l, v) {
                g[0] = l[0] * v;
                g[1] = l[1] * v;
                g[2] = l[2] * v;
                g[3] = l[3] * v;
                return g
            },
            multiplyScalarAndAdd: function(g, l, v, y) {
                g[0] = l[0] + v[0] * y;
                g[1] = l[1] + v[1] * y;
                g[2] = l[2] + v[2] * y;
                g[3] = l[3] + v[3] * y;
                return g
            },
            mul: b,
            sub: a
        }),
        nb = Object.freeze({
            __proto__: null,
            create: function() {
                var g = new na(6);
                na != Float32Array && (g[1] = 0, g[2] = 0, g[4] = 0, g[5] = 0);
                g[0] = 1;
                g[3] = 1;
                return g
            },
            clone: function(g) {
                var l = new na(6);
                l[0] = g[0];
                l[1] = g[1];
                l[2] = g[2];
                l[3] = g[3];
                l[4] = g[4];
                l[5] = g[5];
                return l
            },
            copy: function(g, l) {
                g[0] =
                    l[0];
                g[1] = l[1];
                g[2] = l[2];
                g[3] = l[3];
                g[4] = l[4];
                g[5] = l[5];
                return g
            },
            identity: function(g) {
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 1;
                g[4] = 0;
                g[5] = 0;
                return g
            },
            fromValues: function(g, l, v, y, A, D) {
                var E = new na(6);
                E[0] = g;
                E[1] = l;
                E[2] = v;
                E[3] = y;
                E[4] = A;
                E[5] = D;
                return E
            },
            set: function(g, l, v, y, A, D, E) {
                g[0] = l;
                g[1] = v;
                g[2] = y;
                g[3] = A;
                g[4] = D;
                g[5] = E;
                return g
            },
            invert: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4];
                l = l[5];
                var H = v * D - y * A;
                if (!H) return null;
                H = 1 / H;
                g[0] = D * H;
                g[1] = -y * H;
                g[2] = -A * H;
                g[3] = v * H;
                g[4] = (A * l - D * E) * H;
                g[5] = (y * E - v * l) * H;
                return g
            },
            determinant: function(g) {
                return g[0] * g[3] - g[1] * g[2]
            },
            multiply: d,
            rotate: function(g, l, v) {
                var y = l[0],
                    A = l[1],
                    D = l[2],
                    E = l[3],
                    H = l[4];
                l = l[5];
                var K = Math.sin(v);
                v = Math.cos(v);
                g[0] = y * v + D * K;
                g[1] = A * v + E * K;
                g[2] = y * -K + D * v;
                g[3] = A * -K + E * v;
                g[4] = H;
                g[5] = l;
                return g
            },
            scale: function(g, l, v) {
                var y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4],
                    H = l[5],
                    K = v[0];
                v = v[1];
                g[0] = l[0] * K;
                g[1] = y * K;
                g[2] = A * v;
                g[3] = D * v;
                g[4] = E;
                g[5] = H;
                return g
            },
            translate: function(g, l, v) {
                var y = l[0],
                    A = l[1],
                    D = l[2],
                    E = l[3],
                    H = l[4];
                l = l[5];
                var K = v[0];
                v = v[1];
                g[0] = y;
                g[1] = A;
                g[2] = D;
                g[3] = E;
                g[4] =
                    y * K + D * v + H;
                g[5] = A * K + E * v + l;
                return g
            },
            fromRotation: function(g, l) {
                var v = Math.sin(l);
                l = Math.cos(l);
                g[0] = l;
                g[1] = v;
                g[2] = -v;
                g[3] = l;
                g[4] = 0;
                g[5] = 0;
                return g
            },
            fromScaling: function(g, l) {
                g[0] = l[0];
                g[1] = 0;
                g[2] = 0;
                g[3] = l[1];
                g[4] = 0;
                g[5] = 0;
                return g
            },
            fromTranslation: function(g, l) {
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 1;
                g[4] = l[0];
                g[5] = l[1];
                return g
            },
            str: function(g) {
                return "mat2d(" + g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] + ", " + g[4] + ", " + g[5] + ")"
            },
            frob: function(g) {
                return Math.hypot(g[0], g[1], g[2], g[3], g[4], g[5], 1)
            },
            add: function(g, l, v) {
                g[0] =
                    l[0] + v[0];
                g[1] = l[1] + v[1];
                g[2] = l[2] + v[2];
                g[3] = l[3] + v[3];
                g[4] = l[4] + v[4];
                g[5] = l[5] + v[5];
                return g
            },
            subtract: c,
            multiplyScalar: function(g, l, v) {
                g[0] = l[0] * v;
                g[1] = l[1] * v;
                g[2] = l[2] * v;
                g[3] = l[3] * v;
                g[4] = l[4] * v;
                g[5] = l[5] * v;
                return g
            },
            multiplyScalarAndAdd: function(g, l, v, y) {
                g[0] = l[0] + v[0] * y;
                g[1] = l[1] + v[1] * y;
                g[2] = l[2] + v[2] * y;
                g[3] = l[3] + v[3] * y;
                g[4] = l[4] + v[4] * y;
                g[5] = l[5] + v[5] * y;
                return g
            },
            exactEquals: function(g, l) {
                return g[0] === l[0] && g[1] === l[1] && g[2] === l[2] && g[3] === l[3] && g[4] === l[4] && g[5] === l[5]
            },
            equals: function(g, l) {
                var v =
                    g[0],
                    y = g[1],
                    A = g[2],
                    D = g[3],
                    E = g[4];
                g = g[5];
                var H = l[0],
                    K = l[1],
                    M = l[2],
                    R = l[3],
                    S = l[4];
                l = l[5];
                return Math.abs(v - H) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(H)) && Math.abs(y - K) <= 1E-6 * Math.max(1, Math.abs(y), Math.abs(K)) && Math.abs(A - M) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(M)) && Math.abs(D - R) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(R)) && Math.abs(E - S) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(S)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
            },
            mul: d,
            sub: c
        }),
        ob = Object.freeze({
            __proto__: null,
            create: e,
            fromMat4: function(g,
                l) {
                g[0] = l[0];
                g[1] = l[1];
                g[2] = l[2];
                g[3] = l[4];
                g[4] = l[5];
                g[5] = l[6];
                g[6] = l[8];
                g[7] = l[9];
                g[8] = l[10];
                return g
            },
            clone: function(g) {
                var l = new na(9);
                l[0] = g[0];
                l[1] = g[1];
                l[2] = g[2];
                l[3] = g[3];
                l[4] = g[4];
                l[5] = g[5];
                l[6] = g[6];
                l[7] = g[7];
                l[8] = g[8];
                return l
            },
            copy: function(g, l) {
                g[0] = l[0];
                g[1] = l[1];
                g[2] = l[2];
                g[3] = l[3];
                g[4] = l[4];
                g[5] = l[5];
                g[6] = l[6];
                g[7] = l[7];
                g[8] = l[8];
                return g
            },
            fromValues: function(g, l, v, y, A, D, E, H, K) {
                var M = new na(9);
                M[0] = g;
                M[1] = l;
                M[2] = v;
                M[3] = y;
                M[4] = A;
                M[5] = D;
                M[6] = E;
                M[7] = H;
                M[8] = K;
                return M
            },
            set: function(g, l,
                v, y, A, D, E, H, K, M) {
                g[0] = l;
                g[1] = v;
                g[2] = y;
                g[3] = A;
                g[4] = D;
                g[5] = E;
                g[6] = H;
                g[7] = K;
                g[8] = M;
                return g
            },
            identity: function(g) {
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 1;
                g[5] = 0;
                g[6] = 0;
                g[7] = 0;
                g[8] = 1;
                return g
            },
            transpose: function(g, l) {
                if (g === l) {
                    var v = l[1],
                        y = l[2],
                        A = l[5];
                    g[1] = l[3];
                    g[2] = l[6];
                    g[3] = v;
                    g[5] = l[7];
                    g[6] = y;
                    g[7] = A
                } else g[0] = l[0], g[1] = l[3], g[2] = l[6], g[3] = l[1], g[4] = l[4], g[5] = l[7], g[6] = l[2], g[7] = l[5], g[8] = l[8];
                return g
            },
            invert: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4],
                    H = l[5],
                    K = l[6],
                    M = l[7];
                l = l[8];
                var R = l * E - H * M,
                    S = -l * D + H * K,
                    W = M * D - E * K,
                    U = v * R + y * S + A * W;
                if (!U) return null;
                U = 1 / U;
                g[0] = R * U;
                g[1] = (-l * y + A * M) * U;
                g[2] = (H * y - A * E) * U;
                g[3] = S * U;
                g[4] = (l * v - A * K) * U;
                g[5] = (-H * v + A * D) * U;
                g[6] = W * U;
                g[7] = (-M * v + y * K) * U;
                g[8] = (E * v - y * D) * U;
                return g
            },
            adjoint: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4],
                    H = l[5],
                    K = l[6],
                    M = l[7];
                l = l[8];
                g[0] = E * l - H * M;
                g[1] = A * M - y * l;
                g[2] = y * H - A * E;
                g[3] = H * K - D * l;
                g[4] = v * l - A * K;
                g[5] = A * D - v * H;
                g[6] = D * M - E * K;
                g[7] = y * K - v * M;
                g[8] = v * E - y * D;
                return g
            },
            determinant: function(g) {
                var l = g[3],
                    v = g[4],
                    y = g[5],
                    A = g[6],
                    D = g[7],
                    E = g[8];
                return g[0] * (E *
                    v - y * D) + g[1] * (-E * l + y * A) + g[2] * (D * l - v * A)
            },
            multiply: k,
            translate: function(g, l, v) {
                var y = l[0],
                    A = l[1],
                    D = l[2],
                    E = l[3],
                    H = l[4],
                    K = l[5],
                    M = l[6],
                    R = l[7];
                l = l[8];
                var S = v[0];
                v = v[1];
                g[0] = y;
                g[1] = A;
                g[2] = D;
                g[3] = E;
                g[4] = H;
                g[5] = K;
                g[6] = S * y + v * E + M;
                g[7] = S * A + v * H + R;
                g[8] = S * D + v * K + l;
                return g
            },
            rotate: function(g, l, v) {
                var y = l[0],
                    A = l[1],
                    D = l[2],
                    E = l[3],
                    H = l[4],
                    K = l[5],
                    M = l[6],
                    R = l[7];
                l = l[8];
                var S = Math.sin(v);
                v = Math.cos(v);
                g[0] = v * y + S * E;
                g[1] = v * A + S * H;
                g[2] = v * D + S * K;
                g[3] = v * E - S * y;
                g[4] = v * H - S * A;
                g[5] = v * K - S * D;
                g[6] = M;
                g[7] = R;
                g[8] = l;
                return g
            },
            scale: function(g,
                l, v) {
                var y = v[0];
                v = v[1];
                g[0] = y * l[0];
                g[1] = y * l[1];
                g[2] = y * l[2];
                g[3] = v * l[3];
                g[4] = v * l[4];
                g[5] = v * l[5];
                g[6] = l[6];
                g[7] = l[7];
                g[8] = l[8];
                return g
            },
            fromTranslation: function(g, l) {
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 1;
                g[5] = 0;
                g[6] = l[0];
                g[7] = l[1];
                g[8] = 1;
                return g
            },
            fromRotation: function(g, l) {
                var v = Math.sin(l);
                l = Math.cos(l);
                g[0] = l;
                g[1] = v;
                g[2] = 0;
                g[3] = -v;
                g[4] = l;
                g[5] = 0;
                g[6] = 0;
                g[7] = 0;
                g[8] = 1;
                return g
            },
            fromScaling: function(g, l) {
                g[0] = l[0];
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = l[1];
                g[5] = 0;
                g[6] = 0;
                g[7] = 0;
                g[8] = 1;
                return g
            },
            fromMat2d: function(g,
                l) {
                g[0] = l[0];
                g[1] = l[1];
                g[2] = 0;
                g[3] = l[2];
                g[4] = l[3];
                g[5] = 0;
                g[6] = l[4];
                g[7] = l[5];
                g[8] = 1;
                return g
            },
            fromQuat: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2];
                l = l[3];
                var D = v + v,
                    E = y + y,
                    H = A + A;
                v *= D;
                var K = y * D;
                y *= E;
                var M = A * D,
                    R = A * E;
                A *= H;
                D *= l;
                E *= l;
                l *= H;
                g[0] = 1 - y - A;
                g[3] = K - l;
                g[6] = M + E;
                g[1] = K + l;
                g[4] = 1 - v - A;
                g[7] = R - D;
                g[2] = M - E;
                g[5] = R + D;
                g[8] = 1 - v - y;
                return g
            },
            normalFromMat4: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4],
                    H = l[5],
                    K = l[6],
                    M = l[7],
                    R = l[8],
                    S = l[9],
                    W = l[10],
                    U = l[11],
                    da = l[12],
                    ca = l[13],
                    Y = l[14];
                l = l[15];
                var ra = v * H - y * E,
                    ma = v * K - A *
                    E,
                    pa = v * M - D * E,
                    qa = y * K - A * H,
                    oa = y * M - D * H,
                    za = A * M - D * K,
                    L = R * ca - S * da,
                    N = R * Y - W * da;
                R = R * l - U * da;
                var V = S * Y - W * ca;
                S = S * l - U * ca;
                W = W * l - U * Y;
                U = ra * W - ma * S + pa * V + qa * R - oa * N + za * L;
                if (!U) return null;
                U = 1 / U;
                g[0] = (H * W - K * S + M * V) * U;
                g[1] = (K * R - E * W - M * N) * U;
                g[2] = (E * S - H * R + M * L) * U;
                g[3] = (A * S - y * W - D * V) * U;
                g[4] = (v * W - A * R + D * N) * U;
                g[5] = (y * R - v * S - D * L) * U;
                g[6] = (ca * za - Y * oa + l * qa) * U;
                g[7] = (Y * pa - da * za - l * ma) * U;
                g[8] = (da * oa - ca * pa + l * ra) * U;
                return g
            },
            projection: function(g, l, v) {
                g[0] = 2 / l;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = -2 / v;
                g[5] = 0;
                g[6] = -1;
                g[7] = 1;
                g[8] = 1;
                return g
            },
            str: function(g) {
                return "mat3(" +
                    g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] + ", " + g[4] + ", " + g[5] + ", " + g[6] + ", " + g[7] + ", " + g[8] + ")"
            },
            frob: function(g) {
                return Math.hypot(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8])
            },
            add: function(g, l, v) {
                g[0] = l[0] + v[0];
                g[1] = l[1] + v[1];
                g[2] = l[2] + v[2];
                g[3] = l[3] + v[3];
                g[4] = l[4] + v[4];
                g[5] = l[5] + v[5];
                g[6] = l[6] + v[6];
                g[7] = l[7] + v[7];
                g[8] = l[8] + v[8];
                return g
            },
            subtract: h,
            multiplyScalar: function(g, l, v) {
                g[0] = l[0] * v;
                g[1] = l[1] * v;
                g[2] = l[2] * v;
                g[3] = l[3] * v;
                g[4] = l[4] * v;
                g[5] = l[5] * v;
                g[6] = l[6] * v;
                g[7] = l[7] * v;
                g[8] = l[8] * v;
                return g
            },
            multiplyScalarAndAdd: function(g,
                l, v, y) {
                g[0] = l[0] + v[0] * y;
                g[1] = l[1] + v[1] * y;
                g[2] = l[2] + v[2] * y;
                g[3] = l[3] + v[3] * y;
                g[4] = l[4] + v[4] * y;
                g[5] = l[5] + v[5] * y;
                g[6] = l[6] + v[6] * y;
                g[7] = l[7] + v[7] * y;
                g[8] = l[8] + v[8] * y;
                return g
            },
            exactEquals: function(g, l) {
                return g[0] === l[0] && g[1] === l[1] && g[2] === l[2] && g[3] === l[3] && g[4] === l[4] && g[5] === l[5] && g[6] === l[6] && g[7] === l[7] && g[8] === l[8]
            },
            equals: function(g, l) {
                var v = g[0],
                    y = g[1],
                    A = g[2],
                    D = g[3],
                    E = g[4],
                    H = g[5],
                    K = g[6],
                    M = g[7];
                g = g[8];
                var R = l[0],
                    S = l[1],
                    W = l[2],
                    U = l[3],
                    da = l[4],
                    ca = l[5],
                    Y = l[6],
                    ra = l[7];
                l = l[8];
                return Math.abs(v - R) <= 1E-6 *
                    Math.max(1, Math.abs(v), Math.abs(R)) && Math.abs(y - S) <= 1E-6 * Math.max(1, Math.abs(y), Math.abs(S)) && Math.abs(A - W) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(W)) && Math.abs(D - U) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(U)) && Math.abs(E - da) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(da)) && Math.abs(H - ca) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(ca)) && Math.abs(K - Y) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(Y)) && Math.abs(M - ra) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(ra)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
            },
            mul: k,
            sub: h
        }),
        pb = Object.freeze({
            __proto__: null,
            create: function() {
                var g = new na(16);
                na != Float32Array && (g[1] = 0, g[2] = 0, g[3] = 0, g[4] = 0, g[6] = 0, g[7] = 0, g[8] = 0, g[9] = 0, g[11] = 0, g[12] = 0, g[13] = 0, g[14] = 0);
                g[0] = 1;
                g[5] = 1;
                g[10] = 1;
                g[15] = 1;
                return g
            },
            clone: function(g) {
                var l = new na(16);
                l[0] = g[0];
                l[1] = g[1];
                l[2] = g[2];
                l[3] = g[3];
                l[4] = g[4];
                l[5] = g[5];
                l[6] = g[6];
                l[7] = g[7];
                l[8] = g[8];
                l[9] = g[9];
                l[10] = g[10];
                l[11] = g[11];
                l[12] = g[12];
                l[13] = g[13];
                l[14] = g[14];
                l[15] = g[15];
                return l
            },
            copy: function(g, l) {
                g[0] = l[0];
                g[1] = l[1];
                g[2] = l[2];
                g[3] = l[3];
                g[4] =
                    l[4];
                g[5] = l[5];
                g[6] = l[6];
                g[7] = l[7];
                g[8] = l[8];
                g[9] = l[9];
                g[10] = l[10];
                g[11] = l[11];
                g[12] = l[12];
                g[13] = l[13];
                g[14] = l[14];
                g[15] = l[15];
                return g
            },
            fromValues: function(g, l, v, y, A, D, E, H, K, M, R, S, W, U, da, ca) {
                var Y = new na(16);
                Y[0] = g;
                Y[1] = l;
                Y[2] = v;
                Y[3] = y;
                Y[4] = A;
                Y[5] = D;
                Y[6] = E;
                Y[7] = H;
                Y[8] = K;
                Y[9] = M;
                Y[10] = R;
                Y[11] = S;
                Y[12] = W;
                Y[13] = U;
                Y[14] = da;
                Y[15] = ca;
                return Y
            },
            set: function(g, l, v, y, A, D, E, H, K, M, R, S, W, U, da, ca, Y) {
                g[0] = l;
                g[1] = v;
                g[2] = y;
                g[3] = A;
                g[4] = D;
                g[5] = E;
                g[6] = H;
                g[7] = K;
                g[8] = M;
                g[9] = R;
                g[10] = S;
                g[11] = W;
                g[12] = U;
                g[13] = da;
                g[14] = ca;
                g[15] = Y;
                return g
            },
            identity: p,
            transpose: function(g, l) {
                if (g === l) {
                    var v = l[1],
                        y = l[2],
                        A = l[3],
                        D = l[6],
                        E = l[7],
                        H = l[11];
                    g[1] = l[4];
                    g[2] = l[8];
                    g[3] = l[12];
                    g[4] = v;
                    g[6] = l[9];
                    g[7] = l[13];
                    g[8] = y;
                    g[9] = D;
                    g[11] = l[14];
                    g[12] = A;
                    g[13] = E;
                    g[14] = H
                } else g[0] = l[0], g[1] = l[4], g[2] = l[8], g[3] = l[12], g[4] = l[1], g[5] = l[5], g[6] = l[9], g[7] = l[13], g[8] = l[2], g[9] = l[6], g[10] = l[10], g[11] = l[14], g[12] = l[3], g[13] = l[7], g[14] = l[11], g[15] = l[15];
                return g
            },
            invert: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4],
                    H = l[5],
                    K = l[6],
                    M = l[7],
                    R = l[8],
                    S = l[9],
                    W = l[10],
                    U = l[11],
                    da = l[12],
                    ca = l[13],
                    Y = l[14];
                l = l[15];
                var ra = v * H - y * E,
                    ma = v * K - A * E,
                    pa = v * M - D * E,
                    qa = y * K - A * H,
                    oa = y * M - D * H,
                    za = A * M - D * K,
                    L = R * ca - S * da,
                    N = R * Y - W * da,
                    V = R * l - U * da,
                    aa = S * Y - W * ca,
                    ha = S * l - U * ca,
                    ja = W * l - U * Y,
                    ea = ra * ja - ma * ha + pa * aa + qa * V - oa * N + za * L;
                if (!ea) return null;
                ea = 1 / ea;
                g[0] = (H * ja - K * ha + M * aa) * ea;
                g[1] = (A * ha - y * ja - D * aa) * ea;
                g[2] = (ca * za - Y * oa + l * qa) * ea;
                g[3] = (W * oa - S * za - U * qa) * ea;
                g[4] = (K * V - E * ja - M * N) * ea;
                g[5] = (v * ja - A * V + D * N) * ea;
                g[6] = (Y * pa - da * za - l * ma) * ea;
                g[7] = (R * za - W * pa + U * ma) * ea;
                g[8] = (E * ha - H * V + M * L) * ea;
                g[9] = (y * V - v * ha - D * L) * ea;
                g[10] =
                    (da * oa - ca * pa + l * ra) * ea;
                g[11] = (S * pa - R * oa - U * ra) * ea;
                g[12] = (H * N - E * aa - K * L) * ea;
                g[13] = (v * aa - y * N + A * L) * ea;
                g[14] = (ca * ma - da * qa - Y * ra) * ea;
                g[15] = (R * qa - S * ma + W * ra) * ea;
                return g
            },
            adjoint: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2],
                    D = l[3],
                    E = l[4],
                    H = l[5],
                    K = l[6],
                    M = l[7],
                    R = l[8],
                    S = l[9],
                    W = l[10],
                    U = l[11],
                    da = l[12],
                    ca = l[13],
                    Y = l[14];
                l = l[15];
                g[0] = H * (W * l - U * Y) - S * (K * l - M * Y) + ca * (K * U - M * W);
                g[1] = -(y * (W * l - U * Y) - S * (A * l - D * Y) + ca * (A * U - D * W));
                g[2] = y * (K * l - M * Y) - H * (A * l - D * Y) + ca * (A * M - D * K);
                g[3] = -(y * (K * U - M * W) - H * (A * U - D * W) + S * (A * M - D * K));
                g[4] = -(E * (W * l - U * Y) - R * (K *
                    l - M * Y) + da * (K * U - M * W));
                g[5] = v * (W * l - U * Y) - R * (A * l - D * Y) + da * (A * U - D * W);
                g[6] = -(v * (K * l - M * Y) - E * (A * l - D * Y) + da * (A * M - D * K));
                g[7] = v * (K * U - M * W) - E * (A * U - D * W) + R * (A * M - D * K);
                g[8] = E * (S * l - U * ca) - R * (H * l - M * ca) + da * (H * U - M * S);
                g[9] = -(v * (S * l - U * ca) - R * (y * l - D * ca) + da * (y * U - D * S));
                g[10] = v * (H * l - M * ca) - E * (y * l - D * ca) + da * (y * M - D * H);
                g[11] = -(v * (H * U - M * S) - E * (y * U - D * S) + R * (y * M - D * H));
                g[12] = -(E * (S * Y - W * ca) - R * (H * Y - K * ca) + da * (H * W - K * S));
                g[13] = v * (S * Y - W * ca) - R * (y * Y - A * ca) + da * (y * W - A * S);
                g[14] = -(v * (H * Y - K * ca) - E * (y * Y - A * ca) + da * (y * K - A * H));
                g[15] = v * (H * W - K * S) - E * (y * W - A * S) +
                    R * (y * K - A * H);
                return g
            },
            determinant: function(g) {
                var l = g[0],
                    v = g[1],
                    y = g[2],
                    A = g[3],
                    D = g[4],
                    E = g[5],
                    H = g[6],
                    K = g[7],
                    M = g[8],
                    R = g[9],
                    S = g[10],
                    W = g[11],
                    U = g[12],
                    da = g[13],
                    ca = g[14];
                g = g[15];
                return (l * E - v * D) * (S * g - W * ca) - (l * H - y * D) * (R * g - W * da) + (l * K - A * D) * (R * ca - S * da) + (v * H - y * E) * (M * g - W * U) - (v * K - A * E) * (M * ca - S * U) + (y * K - A * H) * (M * da - R * U)
            },
            multiply: n,
            translate: function(g, l, v) {
                var y = v[0],
                    A = v[1];
                v = v[2];
                if (l === g) g[12] = l[0] * y + l[4] * A + l[8] * v + l[12], g[13] = l[1] * y + l[5] * A + l[9] * v + l[13], g[14] = l[2] * y + l[6] * A + l[10] * v + l[14], g[15] = l[3] * y + l[7] * A + l[11] * v +
                    l[15];
                else {
                    var D = l[0];
                    var E = l[1];
                    var H = l[2];
                    var K = l[3];
                    var M = l[4];
                    var R = l[5];
                    var S = l[6];
                    var W = l[7];
                    var U = l[8];
                    var da = l[9];
                    var ca = l[10];
                    var Y = l[11];
                    g[0] = D;
                    g[1] = E;
                    g[2] = H;
                    g[3] = K;
                    g[4] = M;
                    g[5] = R;
                    g[6] = S;
                    g[7] = W;
                    g[8] = U;
                    g[9] = da;
                    g[10] = ca;
                    g[11] = Y;
                    g[12] = D * y + M * A + U * v + l[12];
                    g[13] = E * y + R * A + da * v + l[13];
                    g[14] = H * y + S * A + ca * v + l[14];
                    g[15] = K * y + W * A + Y * v + l[15]
                }
                return g
            },
            scale: function(g, l, v) {
                var y = v[0],
                    A = v[1];
                v = v[2];
                g[0] = l[0] * y;
                g[1] = l[1] * y;
                g[2] = l[2] * y;
                g[3] = l[3] * y;
                g[4] = l[4] * A;
                g[5] = l[5] * A;
                g[6] = l[6] * A;
                g[7] = l[7] * A;
                g[8] = l[8] * v;
                g[9] =
                    l[9] * v;
                g[10] = l[10] * v;
                g[11] = l[11] * v;
                g[12] = l[12];
                g[13] = l[13];
                g[14] = l[14];
                g[15] = l[15];
                return g
            },
            rotate: function(g, l, v, y) {
                var A = y[0],
                    D = y[1];
                y = y[2];
                var E = Math.hypot(A, D, y);
                if (1E-6 > E) return null;
                E = 1 / E;
                A *= E;
                D *= E;
                y *= E;
                var H = Math.sin(v);
                var K = Math.cos(v);
                var M = 1 - K;
                v = l[0];
                E = l[1];
                var R = l[2];
                var S = l[3];
                var W = l[4];
                var U = l[5];
                var da = l[6];
                var ca = l[7];
                var Y = l[8];
                var ra = l[9];
                var ma = l[10];
                var pa = l[11];
                var qa = A * A * M + K;
                var oa = D * A * M + y * H;
                var za = y * A * M - D * H;
                var L = A * D * M - y * H;
                var N = D * D * M + K;
                var V = y * D * M + A * H;
                var aa = A * y * M + D * H;
                A =
                    D * y * M - A * H;
                D = y * y * M + K;
                g[0] = v * qa + W * oa + Y * za;
                g[1] = E * qa + U * oa + ra * za;
                g[2] = R * qa + da * oa + ma * za;
                g[3] = S * qa + ca * oa + pa * za;
                g[4] = v * L + W * N + Y * V;
                g[5] = E * L + U * N + ra * V;
                g[6] = R * L + da * N + ma * V;
                g[7] = S * L + ca * N + pa * V;
                g[8] = v * aa + W * A + Y * D;
                g[9] = E * aa + U * A + ra * D;
                g[10] = R * aa + da * A + ma * D;
                g[11] = S * aa + ca * A + pa * D;
                l !== g && (g[12] = l[12], g[13] = l[13], g[14] = l[14], g[15] = l[15]);
                return g
            },
            rotateX: function(g, l, v) {
                var y = Math.sin(v);
                v = Math.cos(v);
                var A = l[4],
                    D = l[5],
                    E = l[6],
                    H = l[7],
                    K = l[8],
                    M = l[9],
                    R = l[10],
                    S = l[11];
                l !== g && (g[0] = l[0], g[1] = l[1], g[2] = l[2], g[3] = l[3], g[12] = l[12],
                    g[13] = l[13], g[14] = l[14], g[15] = l[15]);
                g[4] = A * v + K * y;
                g[5] = D * v + M * y;
                g[6] = E * v + R * y;
                g[7] = H * v + S * y;
                g[8] = K * v - A * y;
                g[9] = M * v - D * y;
                g[10] = R * v - E * y;
                g[11] = S * v - H * y;
                return g
            },
            rotateY: function(g, l, v) {
                var y = Math.sin(v);
                v = Math.cos(v);
                var A = l[0],
                    D = l[1],
                    E = l[2],
                    H = l[3],
                    K = l[8],
                    M = l[9],
                    R = l[10],
                    S = l[11];
                l !== g && (g[4] = l[4], g[5] = l[5], g[6] = l[6], g[7] = l[7], g[12] = l[12], g[13] = l[13], g[14] = l[14], g[15] = l[15]);
                g[0] = A * v - K * y;
                g[1] = D * v - M * y;
                g[2] = E * v - R * y;
                g[3] = H * v - S * y;
                g[8] = A * y + K * v;
                g[9] = D * y + M * v;
                g[10] = E * y + R * v;
                g[11] = H * y + S * v;
                return g
            },
            rotateZ: function(g,
                l, v) {
                var y = Math.sin(v);
                v = Math.cos(v);
                var A = l[0],
                    D = l[1],
                    E = l[2],
                    H = l[3],
                    K = l[4],
                    M = l[5],
                    R = l[6],
                    S = l[7];
                l !== g && (g[8] = l[8], g[9] = l[9], g[10] = l[10], g[11] = l[11], g[12] = l[12], g[13] = l[13], g[14] = l[14], g[15] = l[15]);
                g[0] = A * v + K * y;
                g[1] = D * v + M * y;
                g[2] = E * v + R * y;
                g[3] = H * v + S * y;
                g[4] = K * v - A * y;
                g[5] = M * v - D * y;
                g[6] = R * v - E * y;
                g[7] = S * v - H * y;
                return g
            },
            fromTranslation: function(g, l) {
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = 1;
                g[6] = 0;
                g[7] = 0;
                g[8] = 0;
                g[9] = 0;
                g[10] = 1;
                g[11] = 0;
                g[12] = l[0];
                g[13] = l[1];
                g[14] = l[2];
                g[15] = 1;
                return g
            },
            fromScaling: function(g,
                l) {
                g[0] = l[0];
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = l[1];
                g[6] = 0;
                g[7] = 0;
                g[8] = 0;
                g[9] = 0;
                g[10] = l[2];
                g[11] = 0;
                g[12] = 0;
                g[13] = 0;
                g[14] = 0;
                g[15] = 1;
                return g
            },
            fromRotation: function(g, l, v) {
                var y = v[0],
                    A = v[1];
                v = v[2];
                var D = Math.hypot(y, A, v);
                if (1E-6 > D) return null;
                D = 1 / D;
                y *= D;
                A *= D;
                v *= D;
                D = Math.sin(l);
                l = Math.cos(l);
                var E = 1 - l;
                g[0] = y * y * E + l;
                g[1] = A * y * E + v * D;
                g[2] = v * y * E - A * D;
                g[3] = 0;
                g[4] = y * A * E - v * D;
                g[5] = A * A * E + l;
                g[6] = v * A * E + y * D;
                g[7] = 0;
                g[8] = y * v * E + A * D;
                g[9] = A * v * E - y * D;
                g[10] = v * v * E + l;
                g[11] = 0;
                g[12] = 0;
                g[13] = 0;
                g[14] = 0;
                g[15] = 1;
                return g
            },
            fromXRotation: function(g,
                l) {
                var v = Math.sin(l);
                l = Math.cos(l);
                g[0] = 1;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = l;
                g[6] = v;
                g[7] = 0;
                g[8] = 0;
                g[9] = -v;
                g[10] = l;
                g[11] = 0;
                g[12] = 0;
                g[13] = 0;
                g[14] = 0;
                g[15] = 1;
                return g
            },
            fromYRotation: function(g, l) {
                var v = Math.sin(l);
                l = Math.cos(l);
                g[0] = l;
                g[1] = 0;
                g[2] = -v;
                g[3] = 0;
                g[4] = 0;
                g[5] = 1;
                g[6] = 0;
                g[7] = 0;
                g[8] = v;
                g[9] = 0;
                g[10] = l;
                g[11] = 0;
                g[12] = 0;
                g[13] = 0;
                g[14] = 0;
                g[15] = 1;
                return g
            },
            fromZRotation: function(g, l) {
                var v = Math.sin(l);
                l = Math.cos(l);
                g[0] = l;
                g[1] = v;
                g[2] = 0;
                g[3] = 0;
                g[4] = -v;
                g[5] = l;
                g[6] = 0;
                g[7] = 0;
                g[8] = 0;
                g[9] = 0;
                g[10] = 1;
                g[11] = 0;
                g[12] =
                    0;
                g[13] = 0;
                g[14] = 0;
                g[15] = 1;
                return g
            },
            fromRotationTranslation: m,
            fromQuat2: function(g, l) {
                var v = new na(3),
                    y = -l[0],
                    A = -l[1],
                    D = -l[2],
                    E = l[3],
                    H = l[4],
                    K = l[5],
                    M = l[6],
                    R = l[7],
                    S = y * y + A * A + D * D + E * E;
                0 < S ? (v[0] = 2 * (H * E + R * y + K * D - M * A) / S, v[1] = 2 * (K * E + R * A + M * y - H * D) / S, v[2] = 2 * (M * E + R * D + H * A - K * y) / S) : (v[0] = 2 * (H * E + R * y + K * D - M * A), v[1] = 2 * (K * E + R * A + M * y - H * D), v[2] = 2 * (M * E + R * D + H * A - K * y));
                m(g, l, v);
                return g
            },
            getTranslation: t,
            getScaling: q,
            getRotation: u,
            fromRotationTranslationScale: function(g, l, v, y) {
                var A = l[0],
                    D = l[1],
                    E = l[2],
                    H = l[3],
                    K = A + A,
                    M = D + D,
                    R = E +
                    E;
                l = A * K;
                var S = A * M;
                A *= R;
                var W = D * M;
                D *= R;
                E *= R;
                K *= H;
                M *= H;
                H *= R;
                R = y[0];
                var U = y[1];
                y = y[2];
                g[0] = (1 - (W + E)) * R;
                g[1] = (S + H) * R;
                g[2] = (A - M) * R;
                g[3] = 0;
                g[4] = (S - H) * U;
                g[5] = (1 - (l + E)) * U;
                g[6] = (D + K) * U;
                g[7] = 0;
                g[8] = (A + M) * y;
                g[9] = (D - K) * y;
                g[10] = (1 - (l + W)) * y;
                g[11] = 0;
                g[12] = v[0];
                g[13] = v[1];
                g[14] = v[2];
                g[15] = 1;
                return g
            },
            fromRotationTranslationScaleOrigin: function(g, l, v, y, A) {
                var D = l[0],
                    E = l[1],
                    H = l[2],
                    K = l[3],
                    M = D + D,
                    R = E + E,
                    S = H + H;
                l = D * M;
                var W = D * R,
                    U = D * S;
                D = E * R;
                E *= S;
                var da = H * S;
                H = K * M;
                R *= K;
                var ca = K * S,
                    Y = y[0],
                    ra = y[1];
                S = y[2];
                y = A[0];
                K = A[1];
                A = A[2];
                M =
                    (1 - (D + da)) * Y;
                var ma = (W + ca) * Y;
                Y *= U - R;
                W = (W - ca) * ra;
                da = (1 - (l + da)) * ra;
                ra *= E + H;
                U = (U + R) * S;
                E = (E - H) * S;
                l = (1 - (l + D)) * S;
                g[0] = M;
                g[1] = ma;
                g[2] = Y;
                g[3] = 0;
                g[4] = W;
                g[5] = da;
                g[6] = ra;
                g[7] = 0;
                g[8] = U;
                g[9] = E;
                g[10] = l;
                g[11] = 0;
                g[12] = v[0] + y - (M * y + W * K + U * A);
                g[13] = v[1] + K - (ma * y + da * K + E * A);
                g[14] = v[2] + A - (Y * y + ra * K + l * A);
                g[15] = 1;
                return g
            },
            fromQuat: function(g, l) {
                var v = l[0],
                    y = l[1],
                    A = l[2];
                l = l[3];
                var D = v + v,
                    E = y + y,
                    H = A + A;
                v *= D;
                var K = y * D;
                y *= E;
                var M = A * D,
                    R = A * E;
                A *= H;
                D *= l;
                E *= l;
                l *= H;
                g[0] = 1 - y - A;
                g[1] = K + l;
                g[2] = M - E;
                g[3] = 0;
                g[4] = K - l;
                g[5] = 1 - v - A;
                g[6] = R + D;
                g[7] =
                    0;
                g[8] = M + E;
                g[9] = R - D;
                g[10] = 1 - v - y;
                g[11] = 0;
                g[12] = 0;
                g[13] = 0;
                g[14] = 0;
                g[15] = 1;
                return g
            },
            frustum: function(g, l, v, y, A, D, E) {
                var H = 1 / (v - l),
                    K = 1 / (A - y),
                    M = 1 / (D - E);
                g[0] = 2 * D * H;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = 2 * D * K;
                g[6] = 0;
                g[7] = 0;
                g[8] = (v + l) * H;
                g[9] = (A + y) * K;
                g[10] = (E + D) * M;
                g[11] = -1;
                g[12] = 0;
                g[13] = 0;
                g[14] = E * D * 2 * M;
                g[15] = 0;
                return g
            },
            perspective: function(g, l, v, y, A) {
                l = 1 / Math.tan(l / 2);
                g[0] = l / v;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = l;
                g[6] = 0;
                g[7] = 0;
                g[8] = 0;
                g[9] = 0;
                g[11] = -1;
                g[12] = 0;
                g[13] = 0;
                g[15] = 0;
                null != A && Infinity !== A ? (v = 1 / (y - A), g[10] =
                    (A + y) * v, g[14] = 2 * A * y * v) : (g[10] = -1, g[14] = -2 * y);
                return g
            },
            perspectiveFromFieldOfView: function(g, l, v, y) {
                var A = Math.tan(l.upDegrees * Math.PI / 180),
                    D = Math.tan(l.downDegrees * Math.PI / 180),
                    E = Math.tan(l.leftDegrees * Math.PI / 180);
                l = Math.tan(l.rightDegrees * Math.PI / 180);
                var H = 2 / (E + l),
                    K = 2 / (A + D);
                g[0] = H;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = K;
                g[6] = 0;
                g[7] = 0;
                g[8] = -((E - l) * H * .5);
                g[9] = (A - D) * K * .5;
                g[10] = y / (v - y);
                g[11] = -1;
                g[12] = 0;
                g[13] = 0;
                g[14] = y * v / (v - y);
                g[15] = 0;
                return g
            },
            ortho: function(g, l, v, y, A, D, E) {
                var H = 1 / (l - v),
                    K = 1 / (y - A),
                    M = 1 /
                    (D - E);
                g[0] = -2 * H;
                g[1] = 0;
                g[2] = 0;
                g[3] = 0;
                g[4] = 0;
                g[5] = -2 * K;
                g[6] = 0;
                g[7] = 0;
                g[8] = 0;
                g[9] = 0;
                g[10] = 2 * M;
                g[11] = 0;
                g[12] = (l + v) * H;
                g[13] = (A + y) * K;
                g[14] = (E + D) * M;
                g[15] = 1;
                return g
            },
            lookAt: function(g, l, v, y) {
                var A = l[0],
                    D = l[1];
                l = l[2];
                var E = y[0];
                var H = y[1];
                var K = y[2];
                var M = v[0];
                y = v[1];
                var R = v[2];
                if (1E-6 > Math.abs(A - M) && 1E-6 > Math.abs(D - y) && 1E-6 > Math.abs(l - R)) return p(g);
                v = A - M;
                y = D - y;
                M = l - R;
                var S = 1 / Math.hypot(v, y, M);
                v *= S;
                y *= S;
                M *= S;
                R = H * M - K * y;
                K = K * v - E * M;
                E = E * y - H * v;
                (S = Math.hypot(R, K, E)) ? (S = 1 / S, R *= S, K *= S, E *= S) : E = K = R = 0;
                H = y * E - M * K;
                var W =
                    M * R - v * E;
                var U = v * K - y * R;
                (S = Math.hypot(H, W, U)) ? (S = 1 / S, H *= S, W *= S, U *= S) : U = W = H = 0;
                g[0] = R;
                g[1] = H;
                g[2] = v;
                g[3] = 0;
                g[4] = K;
                g[5] = W;
                g[6] = y;
                g[7] = 0;
                g[8] = E;
                g[9] = U;
                g[10] = M;
                g[11] = 0;
                g[12] = -(R * A + K * D + E * l);
                g[13] = -(H * A + W * D + U * l);
                g[14] = -(v * A + y * D + M * l);
                g[15] = 1;
                return g
            },
            targetTo: function(g, l, v, y) {
                var A = l[0],
                    D = l[1];
                l = l[2];
                var E = y[0],
                    H = y[1],
                    K = y[2];
                y = A - v[0];
                var M = D - v[1];
                v = l - v[2];
                var R = y * y + M * M + v * v;
                0 < R && (R = 1 / Math.sqrt(R), y *= R, M *= R, v *= R);
                var S = H * v - K * M;
                K = K * y - E * v;
                E = E * M - H * y;
                R = S * S + K * K + E * E;
                0 < R && (R = 1 / Math.sqrt(R), S *= R, K *= R, E *= R);
                g[0] = S;
                g[1] = K;
                g[2] = E;
                g[3] = 0;
                g[4] = M * E - v * K;
                g[5] = v * S - y * E;
                g[6] = y * K - M * S;
                g[7] = 0;
                g[8] = y;
                g[9] = M;
                g[10] = v;
                g[11] = 0;
                g[12] = A;
                g[13] = D;
                g[14] = l;
                g[15] = 1;
                return g
            },
            str: function(g) {
                return "mat4(" + g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] + ", " + g[4] + ", " + g[5] + ", " + g[6] + ", " + g[7] + ", " + g[8] + ", " + g[9] + ", " + g[10] + ", " + g[11] + ", " + g[12] + ", " + g[13] + ", " + g[14] + ", " + g[15] + ")"
            },
            frob: function(g) {
                return Math.hypot(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15])
            },
            add: function(g, l, v) {
                g[0] = l[0] + v[0];
                g[1] = l[1] +
                    v[1];
                g[2] = l[2] + v[2];
                g[3] = l[3] + v[3];
                g[4] = l[4] + v[4];
                g[5] = l[5] + v[5];
                g[6] = l[6] + v[6];
                g[7] = l[7] + v[7];
                g[8] = l[8] + v[8];
                g[9] = l[9] + v[9];
                g[10] = l[10] + v[10];
                g[11] = l[11] + v[11];
                g[12] = l[12] + v[12];
                g[13] = l[13] + v[13];
                g[14] = l[14] + v[14];
                g[15] = l[15] + v[15];
                return g
            },
            subtract: r,
            multiplyScalar: function(g, l, v) {
                g[0] = l[0] * v;
                g[1] = l[1] * v;
                g[2] = l[2] * v;
                g[3] = l[3] * v;
                g[4] = l[4] * v;
                g[5] = l[5] * v;
                g[6] = l[6] * v;
                g[7] = l[7] * v;
                g[8] = l[8] * v;
                g[9] = l[9] * v;
                g[10] = l[10] * v;
                g[11] = l[11] * v;
                g[12] = l[12] * v;
                g[13] = l[13] * v;
                g[14] = l[14] * v;
                g[15] = l[15] * v;
                return g
            },
            multiplyScalarAndAdd: function(g,
                l, v, y) {
                g[0] = l[0] + v[0] * y;
                g[1] = l[1] + v[1] * y;
                g[2] = l[2] + v[2] * y;
                g[3] = l[3] + v[3] * y;
                g[4] = l[4] + v[4] * y;
                g[5] = l[5] + v[5] * y;
                g[6] = l[6] + v[6] * y;
                g[7] = l[7] + v[7] * y;
                g[8] = l[8] + v[8] * y;
                g[9] = l[9] + v[9] * y;
                g[10] = l[10] + v[10] * y;
                g[11] = l[11] + v[11] * y;
                g[12] = l[12] + v[12] * y;
                g[13] = l[13] + v[13] * y;
                g[14] = l[14] + v[14] * y;
                g[15] = l[15] + v[15] * y;
                return g
            },
            exactEquals: function(g, l) {
                return g[0] === l[0] && g[1] === l[1] && g[2] === l[2] && g[3] === l[3] && g[4] === l[4] && g[5] === l[5] && g[6] === l[6] && g[7] === l[7] && g[8] === l[8] && g[9] === l[9] && g[10] === l[10] && g[11] === l[11] && g[12] ===
                    l[12] && g[13] === l[13] && g[14] === l[14] && g[15] === l[15]
            },
            equals: function(g, l) {
                var v = g[0],
                    y = g[1],
                    A = g[2],
                    D = g[3],
                    E = g[4],
                    H = g[5],
                    K = g[6],
                    M = g[7],
                    R = g[8],
                    S = g[9],
                    W = g[10],
                    U = g[11],
                    da = g[12],
                    ca = g[13],
                    Y = g[14];
                g = g[15];
                var ra = l[0],
                    ma = l[1],
                    pa = l[2],
                    qa = l[3],
                    oa = l[4],
                    za = l[5],
                    L = l[6],
                    N = l[7],
                    V = l[8],
                    aa = l[9],
                    ha = l[10],
                    ja = l[11],
                    ea = l[12],
                    ta = l[13],
                    sa = l[14];
                l = l[15];
                return Math.abs(v - ra) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(ra)) && Math.abs(y - ma) <= 1E-6 * Math.max(1, Math.abs(y), Math.abs(ma)) && Math.abs(A - pa) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(pa)) &&
                    Math.abs(D - qa) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(qa)) && Math.abs(E - oa) <= 1E-6 * Math.max(1, Math.abs(E), Math.abs(oa)) && Math.abs(H - za) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(za)) && Math.abs(K - L) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(L)) && Math.abs(M - N) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(N)) && Math.abs(R - V) <= 1E-6 * Math.max(1, Math.abs(R), Math.abs(V)) && Math.abs(S - aa) <= 1E-6 * Math.max(1, Math.abs(S), Math.abs(aa)) && Math.abs(W - ha) <= 1E-6 * Math.max(1, Math.abs(W), Math.abs(ha)) && Math.abs(U - ja) <= 1E-6 * Math.max(1, Math.abs(U),
                        Math.abs(ja)) && Math.abs(da - ea) <= 1E-6 * Math.max(1, Math.abs(da), Math.abs(ea)) && Math.abs(ca - ta) <= 1E-6 * Math.max(1, Math.abs(ca), Math.abs(ta)) && Math.abs(Y - sa) <= 1E-6 * Math.max(1, Math.abs(Y), Math.abs(sa)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
            },
            mul: n,
            sub: r
        }),
        La = function() {
            var g = x();
            return function(l, v, y, A, D, E) {
                v || (v = 3);
                y || (y = 0);
                for (A = A ? Math.min(A * v + y, l.length) : l.length; y < A; y += v) g[0] = l[y], g[1] = l[y + 1], g[2] = l[y + 2], D(g, g, E), l[y] = g[0], l[y + 1] = g[1], l[y + 2] = g[2];
                return l
            }
        }();
    La = Object.freeze({
        __proto__: null,
        create: x,
        clone: function(g) {
            var l = new na(3);
            l[0] = g[0];
            l[1] = g[1];
            l[2] = g[2];
            return l
        },
        length: z,
        fromValues: C,
        copy: function(g, l) {
            g[0] = l[0];
            g[1] = l[1];
            g[2] = l[2];
            return g
        },
        set: function(g, l, v, y) {
            g[0] = l;
            g[1] = v;
            g[2] = y;
            return g
        },
        add: function(g, l, v) {
            g[0] = l[0] + v[0];
            g[1] = l[1] + v[1];
            g[2] = l[2] + v[2];
            return g
        },
        subtract: w,
        multiply: B,
        divide: F,
        ceil: function(g, l) {
            g[0] = Math.ceil(l[0]);
            g[1] = Math.ceil(l[1]);
            g[2] = Math.ceil(l[2]);
            return g
        },
        floor: function(g, l) {
            g[0] = Math.floor(l[0]);
            g[1] = Math.floor(l[1]);
            g[2] = Math.floor(l[2]);
            return g
        },
        min: function(g, l, v) {
            g[0] = Math.min(l[0], v[0]);
            g[1] = Math.min(l[1], v[1]);
            g[2] = Math.min(l[2], v[2]);
            return g
        },
        max: function(g, l, v) {
            g[0] = Math.max(l[0], v[0]);
            g[1] = Math.max(l[1], v[1]);
            g[2] = Math.max(l[2], v[2]);
            return g
        },
        round: function(g, l) {
            g[0] = Math.round(l[0]);
            g[1] = Math.round(l[1]);
            g[2] = Math.round(l[2]);
            return g
        },
        scale: function(g, l, v) {
            g[0] = l[0] * v;
            g[1] = l[1] * v;
            g[2] = l[2] * v;
            return g
        },
        scaleAndAdd: function(g, l, v, y) {
            g[0] = l[0] + v[0] * y;
            g[1] = l[1] + v[1] * y;
            g[2] = l[2] + v[2] * y;
            return g
        },
        distance: J,
        squaredDistance: O,
        squaredLength: G,
        negate: function(g, l) {
            g[0] = -l[0];
            g[1] = -l[1];
            g[2] = -l[2];
            return g
        },
        inverse: function(g, l) {
            g[0] = 1 / l[0];
            g[1] = 1 / l[1];
            g[2] = 1 / l[2];
            return g
        },
        normalize: I,
        dot: P,
        cross: Q,
        lerp: function(g, l, v, y) {
            var A = l[0],
                D = l[1];
            l = l[2];
            g[0] = A + y * (v[0] - A);
            g[1] = D + y * (v[1] - D);
            g[2] = l + y * (v[2] - l);
            return g
        },
        hermite: function(g, l, v, y, A, D) {
            var E = D * D,
                H = E * (2 * D - 3) + 1,
                K = E * (D - 2) + D,
                M = E * (D - 1);
            D = E * (3 - 2 * D);
            g[0] = l[0] * H + v[0] * K + y[0] * M + A[0] * D;
            g[1] = l[1] * H + v[1] * K + y[1] * M + A[1] * D;
            g[2] = l[2] * H + v[2] * K + y[2] * M + A[2] * D;
            return g
        },
        bezier: function(g,
            l, v, y, A, D) {
            var E = 1 - D,
                H = E * E,
                K = D * D,
                M = H * E;
            H *= 3 * D;
            E *= 3 * K;
            D *= K;
            g[0] = l[0] * M + v[0] * H + y[0] * E + A[0] * D;
            g[1] = l[1] * M + v[1] * H + y[1] * E + A[1] * D;
            g[2] = l[2] * M + v[2] * H + y[2] * E + A[2] * D;
            return g
        },
        random: function(g, l) {
            l = l || 1;
            var v = 2 * Ga() * Math.PI,
                y = 2 * Ga() - 1,
                A = Math.sqrt(1 - y * y) * l;
            g[0] = Math.cos(v) * A;
            g[1] = Math.sin(v) * A;
            g[2] = y * l;
            return g
        },
        transformMat4: function(g, l, v) {
            var y = l[0],
                A = l[1];
            l = l[2];
            var D = v[3] * y + v[7] * A + v[11] * l + v[15];
            D = D || 1;
            g[0] = (v[0] * y + v[4] * A + v[8] * l + v[12]) / D;
            g[1] = (v[1] * y + v[5] * A + v[9] * l + v[13]) / D;
            g[2] = (v[2] * y + v[6] * A + v[10] * l +
                v[14]) / D;
            return g
        },
        transformMat3: function(g, l, v) {
            var y = l[0],
                A = l[1];
            l = l[2];
            g[0] = y * v[0] + A * v[3] + l * v[6];
            g[1] = y * v[1] + A * v[4] + l * v[7];
            g[2] = y * v[2] + A * v[5] + l * v[8];
            return g
        },
        transformQuat: function(g, l, v) {
            var y = v[0],
                A = v[1],
                D = v[2],
                E = l[0],
                H = l[1];
            l = l[2];
            var K = A * l - D * H,
                M = D * E - y * l,
                R = y * H - A * E;
            v = 2 * v[3];
            g[0] = E + K * v + 2 * (A * R - D * M);
            g[1] = H + M * v + 2 * (D * K - y * R);
            g[2] = l + R * v + 2 * (y * M - A * K);
            return g
        },
        rotateX: function(g, l, v, y) {
            var A = [],
                D = [];
            A[0] = l[0] - v[0];
            A[1] = l[1] - v[1];
            A[2] = l[2] - v[2];
            D[0] = A[0];
            D[1] = A[1] * Math.cos(y) - A[2] * Math.sin(y);
            D[2] = A[1] *
                Math.sin(y) + A[2] * Math.cos(y);
            g[0] = D[0] + v[0];
            g[1] = D[1] + v[1];
            g[2] = D[2] + v[2];
            return g
        },
        rotateY: function(g, l, v, y) {
            var A = [],
                D = [];
            A[0] = l[0] - v[0];
            A[1] = l[1] - v[1];
            A[2] = l[2] - v[2];
            D[0] = A[2] * Math.sin(y) + A[0] * Math.cos(y);
            D[1] = A[1];
            D[2] = A[2] * Math.cos(y) - A[0] * Math.sin(y);
            g[0] = D[0] + v[0];
            g[1] = D[1] + v[1];
            g[2] = D[2] + v[2];
            return g
        },
        rotateZ: function(g, l, v, y) {
            var A = [],
                D = [];
            A[0] = l[0] - v[0];
            A[1] = l[1] - v[1];
            A[2] = l[2] - v[2];
            D[0] = A[0] * Math.cos(y) - A[1] * Math.sin(y);
            D[1] = A[0] * Math.sin(y) + A[1] * Math.cos(y);
            D[2] = A[2];
            g[0] = D[0] + v[0];
            g[1] =
                D[1] + v[1];
            g[2] = D[2] + v[2];
            return g
        },
        angle: function(g, l) {
            var v = g[0],
                y = g[1],
                A = g[2],
                D = l[0],
                E = l[1],
                H = l[2];
            g = (v = Math.sqrt(v * v + y * y + A * A) * Math.sqrt(D * D + E * E + H * H)) && P(g, l) / v;
            return Math.acos(Math.min(Math.max(g, -1), 1))
        },
        zero: function(g) {
            g[0] = 0;
            g[1] = 0;
            g[2] = 0;
            return g
        },
        str: function(g) {
            return "vec3(" + g[0] + ", " + g[1] + ", " + g[2] + ")"
        },
        exactEquals: function(g, l) {
            return g[0] === l[0] && g[1] === l[1] && g[2] === l[2]
        },
        equals: function(g, l) {
            var v = g[0],
                y = g[1];
            g = g[2];
            var A = l[0],
                D = l[1];
            l = l[2];
            return Math.abs(v - A) <= 1E-6 * Math.max(1, Math.abs(v),
                Math.abs(A)) && Math.abs(y - D) <= 1E-6 * Math.max(1, Math.abs(y), Math.abs(D)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
        },
        sub: w,
        mul: B,
        div: F,
        dist: J,
        sqrDist: O,
        len: z,
        sqrLen: G,
        forEach: La
    });
    var Ma = function() {
        var g = T();
        return function(l, v, y, A, D, E) {
            v || (v = 4);
            y || (y = 0);
            for (A = A ? Math.min(A * v + y, l.length) : l.length; y < A; y += v) g[0] = l[y], g[1] = l[y + 1], g[2] = l[y + 2], g[3] = l[y + 3], D(g, g, E), l[y] = g[0], l[y + 1] = g[1], l[y + 2] = g[2], l[y + 3] = g[3];
            return l
        }
    }();
    Ma = Object.freeze({
        __proto__: null,
        create: T,
        clone: X,
        fromValues: Z,
        copy: fa,
        set: ia,
        add: ba,
        subtract: xa,
        multiply: ua,
        divide: Da,
        ceil: function(g, l) {
            g[0] = Math.ceil(l[0]);
            g[1] = Math.ceil(l[1]);
            g[2] = Math.ceil(l[2]);
            g[3] = Math.ceil(l[3]);
            return g
        },
        floor: function(g, l) {
            g[0] = Math.floor(l[0]);
            g[1] = Math.floor(l[1]);
            g[2] = Math.floor(l[2]);
            g[3] = Math.floor(l[3]);
            return g
        },
        min: function(g, l, v) {
            g[0] = Math.min(l[0], v[0]);
            g[1] = Math.min(l[1], v[1]);
            g[2] = Math.min(l[2], v[2]);
            g[3] = Math.min(l[3], v[3]);
            return g
        },
        max: function(g, l, v) {
            g[0] = Math.max(l[0], v[0]);
            g[1] = Math.max(l[1], v[1]);
            g[2] = Math.max(l[2], v[2]);
            g[3] = Math.max(l[3], v[3]);
            return g
        },
        round: function(g, l) {
            g[0] = Math.round(l[0]);
            g[1] = Math.round(l[1]);
            g[2] = Math.round(l[2]);
            g[3] = Math.round(l[3]);
            return g
        },
        scale: Ea,
        scaleAndAdd: function(g, l, v, y) {
            g[0] = l[0] + v[0] * y;
            g[1] = l[1] + v[1] * y;
            g[2] = l[2] + v[2] * y;
            g[3] = l[3] + v[3] * y;
            return g
        },
        distance: Ba,
        squaredDistance: Aa,
        length: ka,
        squaredLength: Fa,
        negate: function(g, l) {
            g[0] = -l[0];
            g[1] = -l[1];
            g[2] = -l[2];
            g[3] = -l[3];
            return g
        },
        inverse: function(g, l) {
            g[0] = 1 / l[0];
            g[1] = 1 / l[1];
            g[2] = 1 / l[2];
            g[3] = 1 / l[3];
            return g
        },
        normalize: wa,
        dot: Ca,
        cross: function(g, l, v, y) {
            var A = v[0] * y[1] - v[1] * y[0],
                D = v[0] * y[2] - v[2] * y[0],
                E = v[0] * y[3] - v[3] * y[0],
                H = v[1] * y[2] - v[2] * y[1],
                K = v[1] * y[3] - v[3] * y[1];
            v = v[2] * y[3] - v[3] * y[2];
            y = l[0];
            var M = l[1],
                R = l[2];
            l = l[3];
            g[0] = M * v - R * K + l * H;
            g[1] = -(y * v) + R * E - l * D;
            g[2] = y * K - M * E + l * A;
            g[3] = -(y * H) + M * D - R * A;
            return g
        },
        lerp: Pa,
        random: function(g, l) {
            l = l || 1;
            do {
                var v = 2 * Ga() - 1;
                var y = 2 * Ga() - 1;
                var A = v * v + y * y
            } while (1 <= A);
            do {
                var D = 2 * Ga() - 1;
                var E = 2 * Ga() - 1;
                var H = D * D + E * E
            } while (1 <= H);
            A = Math.sqrt((1 - A) / H);
            g[0] = l * v;
            g[1] = l * y;
            g[2] = l * D * A;
            g[3] = l * E * A;
            return g
        },
        transformMat4: function(g, l, v) {
            var y = l[0],
                A = l[1],
                D = l[2];
            l = l[3];
            g[0] = v[0] * y + v[4] * A + v[8] * D + v[12] * l;
            g[1] = v[1] * y + v[5] * A + v[9] * D + v[13] * l;
            g[2] = v[2] * y + v[6] * A + v[10] * D + v[14] * l;
            g[3] = v[3] * y + v[7] * A + v[11] * D + v[15] * l;
            return g
        },
        transformQuat: function(g, l, v) {
            var y = l[0],
                A = l[1],
                D = l[2],
                E = v[0],
                H = v[1],
                K = v[2];
            v = v[3];
            var M = v * y + H * D - K * A,
                R = v * A + K * y - E * D,
                S = v * D + E * A - H * y;
            y = -E * y - H * A - K * D;
            g[0] = M * v + y * -E + R * -K - S * -H;
            g[1] = R * v + y * -H + S * -E - M * -K;
            g[2] = S * v + y * -K + M * -H - R * -E;
            g[3] = l[3];
            return g
        },
        zero: function(g) {
            g[0] = 0;
            g[1] = 0;
            g[2] = 0;
            g[3] = 0;
            return g
        },
        str: function(g) {
            return "vec4(" + g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] + ")"
        },
        exactEquals: Qa,
        equals: Ra,
        sub: xa,
        mul: ua,
        div: Da,
        dist: Ba,
        sqrDist: Aa,
        len: ka,
        sqrLen: Fa,
        forEach: Ma
    });
    var Na = function() {
            var g = x(),
                l = C(1, 0, 0),
                v = C(0, 1, 0);
            return function(y, A, D) {
                var E = P(A, D);
                if (-.999999 > E) return Q(g, l, A), 1E-6 > z(g) && Q(g, v, A), I(g, g), Sa(y, g, Math.PI), y;
                if (.999999 < E) return y[0] = 0, y[1] = 0, y[2] = 0, y[3] = 1, y;
                Q(g, A, D);
                y[0] = g[0];
                y[1] = g[1];
                y[2] = g[2];
                y[3] = 1 + E;
                return wa(y, y)
            }
        }(),
        Oa = function() {
            var g = Ja(),
                l = Ja();
            return function(v, y, A, D, E,
                H) {
                Ka(g, y, E, H);
                Ka(l, A, D, H);
                Ka(v, g, l, 2 * H * (1 - H));
                return v
            }
        }(),
        Ia = function() {
            var g = e();
            return function(l, v, y, A) {
                g[0] = y[0];
                g[3] = y[1];
                g[6] = y[2];
                g[1] = A[0];
                g[4] = A[1];
                g[7] = A[2];
                g[2] = -v[0];
                g[5] = -v[1];
                g[8] = -v[2];
                return wa(l, Za(l, g))
            }
        }();
    Na = Object.freeze({
        __proto__: null,
        create: Ja,
        identity: function(g) {
            g[0] = 0;
            g[1] = 0;
            g[2] = 0;
            g[3] = 1;
            return g
        },
        setAxisAngle: Sa,
        getAxisAngle: function(g, l) {
            var v = 2 * Math.acos(l[3]),
                y = Math.sin(v / 2);
            1E-6 < y ? (g[0] = l[0] / y, g[1] = l[1] / y, g[2] = l[2] / y) : (g[0] = 1, g[1] = 0, g[2] = 0);
            return v
        },
        getAngle: function(g,
            l) {
            g = Ca(g, l);
            return Math.acos(2 * g * g - 1)
        },
        multiply: Ta,
        rotateX: Ua,
        rotateY: Va,
        rotateZ: Wa,
        calculateW: function(g, l) {
            var v = l[0],
                y = l[1];
            l = l[2];
            g[0] = v;
            g[1] = y;
            g[2] = l;
            g[3] = Math.sqrt(Math.abs(1 - v * v - y * y - l * l));
            return g
        },
        exp: Xa,
        ln: Ya,
        pow: function(g, l, v) {
            Ya(g, l);
            Ea(g, g, v);
            Xa(g, g);
            return g
        },
        slerp: Ka,
        random: function(g) {
            var l = Ga(),
                v = Ga(),
                y = Ga(),
                A = Math.sqrt(1 - l);
            l = Math.sqrt(l);
            g[0] = A * Math.sin(2 * Math.PI * v);
            g[1] = A * Math.cos(2 * Math.PI * v);
            g[2] = l * Math.sin(2 * Math.PI * y);
            g[3] = l * Math.cos(2 * Math.PI * y);
            return g
        },
        invert: function(g,
            l) {
            var v = l[0],
                y = l[1],
                A = l[2];
            l = l[3];
            var D = v * v + y * y + A * A + l * l;
            D = D ? 1 / D : 0;
            g[0] = -v * D;
            g[1] = -y * D;
            g[2] = -A * D;
            g[3] = l * D;
            return g
        },
        conjugate: function(g, l) {
            g[0] = -l[0];
            g[1] = -l[1];
            g[2] = -l[2];
            g[3] = l[3];
            return g
        },
        fromMat3: Za,
        fromEuler: function(g, l, v, y) {
            var A = .5 * Math.PI / 180;
            l *= A;
            v *= A;
            y *= A;
            A = Math.sin(l);
            l = Math.cos(l);
            var D = Math.sin(v);
            v = Math.cos(v);
            var E = Math.sin(y);
            y = Math.cos(y);
            g[0] = A * v * y - l * D * E;
            g[1] = l * D * y + A * v * E;
            g[2] = l * v * E - A * D * y;
            g[3] = l * v * y + A * D * E;
            return g
        },
        str: function(g) {
            return "quat(" + g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] +
                ")"
        },
        clone: X,
        fromValues: Z,
        copy: fa,
        set: ia,
        add: ba,
        mul: Ta,
        scale: Ea,
        dot: Ca,
        lerp: Pa,
        length: ka,
        len: ka,
        squaredLength: Fa,
        sqrLen: Fa,
        normalize: wa,
        exactEquals: Qa,
        equals: Ra,
        rotationTo: Na,
        sqlerp: Oa,
        setAxes: Ia
    });
    Oa = Object.freeze({
        __proto__: null,
        create: function() {
            var g = new na(8);
            na != Float32Array && (g[0] = 0, g[1] = 0, g[2] = 0, g[4] = 0, g[5] = 0, g[6] = 0, g[7] = 0);
            g[3] = 1;
            return g
        },
        clone: function(g) {
            var l = new na(8);
            l[0] = g[0];
            l[1] = g[1];
            l[2] = g[2];
            l[3] = g[3];
            l[4] = g[4];
            l[5] = g[5];
            l[6] = g[6];
            l[7] = g[7];
            return l
        },
        fromValues: function(g, l, v,
            y, A, D, E, H) {
            var K = new na(8);
            K[0] = g;
            K[1] = l;
            K[2] = v;
            K[3] = y;
            K[4] = A;
            K[5] = D;
            K[6] = E;
            K[7] = H;
            return K
        },
        fromRotationTranslationValues: function(g, l, v, y, A, D, E) {
            var H = new na(8);
            H[0] = g;
            H[1] = l;
            H[2] = v;
            H[3] = y;
            A *= .5;
            D *= .5;
            E *= .5;
            H[4] = A * y + D * v - E * l;
            H[5] = D * y + E * g - A * v;
            H[6] = E * y + A * l - D * g;
            H[7] = -A * g - D * l - E * v;
            return H
        },
        fromRotationTranslation: $a,
        fromTranslation: function(g, l) {
            g[0] = 0;
            g[1] = 0;
            g[2] = 0;
            g[3] = 1;
            g[4] = .5 * l[0];
            g[5] = .5 * l[1];
            g[6] = .5 * l[2];
            g[7] = 0;
            return g
        },
        fromRotation: function(g, l) {
            g[0] = l[0];
            g[1] = l[1];
            g[2] = l[2];
            g[3] = l[3];
            g[4] =
                0;
            g[5] = 0;
            g[6] = 0;
            g[7] = 0;
            return g
        },
        fromMat4: function(g, l) {
            var v = Ja();
            u(v, l);
            var y = new na(3);
            t(y, l);
            $a(g, v, y);
            return g
        },
        copy: ab,
        identity: function(g) {
            g[0] = 0;
            g[1] = 0;
            g[2] = 0;
            g[3] = 1;
            g[4] = 0;
            g[5] = 0;
            g[6] = 0;
            g[7] = 0;
            return g
        },
        set: function(g, l, v, y, A, D, E, H, K) {
            g[0] = l;
            g[1] = v;
            g[2] = y;
            g[3] = A;
            g[4] = D;
            g[5] = E;
            g[6] = H;
            g[7] = K;
            return g
        },
        getReal: fa,
        getDual: function(g, l) {
            g[0] = l[4];
            g[1] = l[5];
            g[2] = l[6];
            g[3] = l[7];
            return g
        },
        setReal: fa,
        setDual: function(g, l) {
            g[4] = l[0];
            g[5] = l[1];
            g[6] = l[2];
            g[7] = l[3];
            return g
        },
        getTranslation: function(g,
            l) {
            var v = l[4],
                y = l[5],
                A = l[6],
                D = l[7],
                E = -l[0],
                H = -l[1],
                K = -l[2];
            l = l[3];
            g[0] = 2 * (v * l + D * E + y * K - A * H);
            g[1] = 2 * (y * l + D * H + A * E - v * K);
            g[2] = 2 * (A * l + D * K + v * H - y * E);
            return g
        },
        translate: function(g, l, v) {
            var y = l[0],
                A = l[1],
                D = l[2],
                E = l[3],
                H = .5 * v[0],
                K = .5 * v[1];
            v = .5 * v[2];
            var M = l[4],
                R = l[5],
                S = l[6];
            l = l[7];
            g[0] = y;
            g[1] = A;
            g[2] = D;
            g[3] = E;
            g[4] = E * H + A * v - D * K + M;
            g[5] = E * K + D * H - y * v + R;
            g[6] = E * v + y * K - A * H + S;
            g[7] = -y * H - A * K - D * v + l;
            return g
        },
        rotateX: function(g, l, v) {
            var y = -l[0],
                A = -l[1],
                D = -l[2],
                E = l[3],
                H = l[4],
                K = l[5],
                M = l[6],
                R = l[7],
                S = H * E + R * y + K * D - M * A,
                W = K * E + R * A +
                M * y - H * D,
                U = M * E + R * D + H * A - K * y;
            H = R * E - H * y - K * A - M * D;
            Ua(g, l, v);
            y = g[0];
            A = g[1];
            D = g[2];
            E = g[3];
            g[4] = S * E + H * y + W * D - U * A;
            g[5] = W * E + H * A + U * y - S * D;
            g[6] = U * E + H * D + S * A - W * y;
            g[7] = H * E - S * y - W * A - U * D;
            return g
        },
        rotateY: function(g, l, v) {
            var y = -l[0],
                A = -l[1],
                D = -l[2],
                E = l[3],
                H = l[4],
                K = l[5],
                M = l[6],
                R = l[7],
                S = H * E + R * y + K * D - M * A,
                W = K * E + R * A + M * y - H * D,
                U = M * E + R * D + H * A - K * y;
            H = R * E - H * y - K * A - M * D;
            Va(g, l, v);
            y = g[0];
            A = g[1];
            D = g[2];
            E = g[3];
            g[4] = S * E + H * y + W * D - U * A;
            g[5] = W * E + H * A + U * y - S * D;
            g[6] = U * E + H * D + S * A - W * y;
            g[7] = H * E - S * y - W * A - U * D;
            return g
        },
        rotateZ: function(g, l, v) {
            var y = -l[0],
                A = -l[1],
                D = -l[2],
                E = l[3],
                H = l[4],
                K = l[5],
                M = l[6],
                R = l[7],
                S = H * E + R * y + K * D - M * A,
                W = K * E + R * A + M * y - H * D,
                U = M * E + R * D + H * A - K * y;
            H = R * E - H * y - K * A - M * D;
            Wa(g, l, v);
            y = g[0];
            A = g[1];
            D = g[2];
            E = g[3];
            g[4] = S * E + H * y + W * D - U * A;
            g[5] = W * E + H * A + U * y - S * D;
            g[6] = U * E + H * D + S * A - W * y;
            g[7] = H * E - S * y - W * A - U * D;
            return g
        },
        rotateByQuatAppend: function(g, l, v) {
            var y = v[0],
                A = v[1],
                D = v[2];
            v = v[3];
            var E = l[0],
                H = l[1],
                K = l[2],
                M = l[3];
            g[0] = E * v + M * y + H * D - K * A;
            g[1] = H * v + M * A + K * y - E * D;
            g[2] = K * v + M * D + E * A - H * y;
            g[3] = M * v - E * y - H * A - K * D;
            E = l[4];
            H = l[5];
            K = l[6];
            M = l[7];
            g[4] = E * v + M * y + H * D - K * A;
            g[5] = H * v + M * A + K *
                y - E * D;
            g[6] = K * v + M * D + E * A - H * y;
            g[7] = M * v - E * y - H * A - K * D;
            return g
        },
        rotateByQuatPrepend: function(g, l, v) {
            var y = l[0],
                A = l[1],
                D = l[2];
            l = l[3];
            var E = v[0],
                H = v[1],
                K = v[2],
                M = v[3];
            g[0] = y * M + l * E + A * K - D * H;
            g[1] = A * M + l * H + D * E - y * K;
            g[2] = D * M + l * K + y * H - A * E;
            g[3] = l * M - y * E - A * H - D * K;
            E = v[4];
            H = v[5];
            K = v[6];
            M = v[7];
            g[4] = y * M + l * E + A * K - D * H;
            g[5] = A * M + l * H + D * E - y * K;
            g[6] = D * M + l * K + y * H - A * E;
            g[7] = l * M - y * E - A * H - D * K;
            return g
        },
        rotateAroundAxis: function(g, l, v, y) {
            if (1E-6 > Math.abs(y)) return ab(g, l);
            var A = Math.hypot(v[0], v[1], v[2]);
            y *= .5;
            var D = Math.sin(y),
                E = D * v[0] / A,
                H = D * v[1] / A;
            v = D * v[2] / A;
            y = Math.cos(y);
            A = l[0];
            D = l[1];
            var K = l[2],
                M = l[3];
            g[0] = A * y + M * E + D * v - K * H;
            g[1] = D * y + M * H + K * E - A * v;
            g[2] = K * y + M * v + A * H - D * E;
            g[3] = M * y - A * E - D * H - K * v;
            A = l[4];
            D = l[5];
            K = l[6];
            l = l[7];
            g[4] = A * y + l * E + D * v - K * H;
            g[5] = D * y + l * H + K * E - A * v;
            g[6] = K * y + l * v + A * H - D * E;
            g[7] = l * y - A * E - D * H - K * v;
            return g
        },
        add: function(g, l, v) {
            g[0] = l[0] + v[0];
            g[1] = l[1] + v[1];
            g[2] = l[2] + v[2];
            g[3] = l[3] + v[3];
            g[4] = l[4] + v[4];
            g[5] = l[5] + v[5];
            g[6] = l[6] + v[6];
            g[7] = l[7] + v[7];
            return g
        },
        multiply: bb,
        mul: bb,
        scale: function(g, l, v) {
            g[0] = l[0] * v;
            g[1] = l[1] * v;
            g[2] = l[2] * v;
            g[3] = l[3] * v;
            g[4] = l[4] * v;
            g[5] = l[5] * v;
            g[6] = l[6] * v;
            g[7] = l[7] * v;
            return g
        },
        dot: Ca,
        lerp: function(g, l, v, y) {
            var A = 1 - y;
            0 > Ca(l, v) && (y = -y);
            g[0] = l[0] * A + v[0] * y;
            g[1] = l[1] * A + v[1] * y;
            g[2] = l[2] * A + v[2] * y;
            g[3] = l[3] * A + v[3] * y;
            g[4] = l[4] * A + v[4] * y;
            g[5] = l[5] * A + v[5] * y;
            g[6] = l[6] * A + v[6] * y;
            g[7] = l[7] * A + v[7] * y;
            return g
        },
        invert: function(g, l) {
            var v = Fa(l);
            g[0] = -l[0] / v;
            g[1] = -l[1] / v;
            g[2] = -l[2] / v;
            g[3] = l[3] / v;
            g[4] = -l[4] / v;
            g[5] = -l[5] / v;
            g[6] = -l[6] / v;
            g[7] = l[7] / v;
            return g
        },
        conjugate: function(g, l) {
            g[0] = -l[0];
            g[1] = -l[1];
            g[2] = -l[2];
            g[3] = l[3];
            g[4] = -l[4];
            g[5] = -l[5];
            g[6] = -l[6];
            g[7] = l[7];
            return g
        },
        length: ka,
        len: ka,
        squaredLength: Fa,
        sqrLen: Fa,
        normalize: function(g, l) {
            var v = Fa(l);
            if (0 < v) {
                v = Math.sqrt(v);
                var y = l[0] / v,
                    A = l[1] / v,
                    D = l[2] / v,
                    E = l[3] / v,
                    H = l[4],
                    K = l[5],
                    M = l[6];
                l = l[7];
                var R = y * H + A * K + D * M + E * l;
                g[0] = y;
                g[1] = A;
                g[2] = D;
                g[3] = E;
                g[4] = (H - y * R) / v;
                g[5] = (K - A * R) / v;
                g[6] = (M - D * R) / v;
                g[7] = (l - E * R) / v
            }
            return g
        },
        str: function(g) {
            return "quat2(" + g[0] + ", " + g[1] + ", " + g[2] + ", " + g[3] + ", " + g[4] + ", " + g[5] + ", " + g[6] + ", " + g[7] + ")"
        },
        exactEquals: function(g, l) {
            return g[0] === l[0] &&
                g[1] === l[1] && g[2] === l[2] && g[3] === l[3] && g[4] === l[4] && g[5] === l[5] && g[6] === l[6] && g[7] === l[7]
        },
        equals: function(g, l) {
            var v = g[0],
                y = g[1],
                A = g[2],
                D = g[3],
                E = g[4],
                H = g[5],
                K = g[6];
            g = g[7];
            var M = l[0],
                R = l[1],
                S = l[2],
                W = l[3],
                U = l[4],
                da = l[5],
                ca = l[6];
            l = l[7];
            return Math.abs(v - M) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(M)) && Math.abs(y - R) <= 1E-6 * Math.max(1, Math.abs(y), Math.abs(R)) && Math.abs(A - S) <= 1E-6 * Math.max(1, Math.abs(A), Math.abs(S)) && Math.abs(D - W) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(W)) && Math.abs(E - U) <= 1E-6 * Math.max(1, Math.abs(E),
                Math.abs(U)) && Math.abs(H - da) <= 1E-6 * Math.max(1, Math.abs(H), Math.abs(da)) && Math.abs(K - ca) <= 1E-6 * Math.max(1, Math.abs(K), Math.abs(ca)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
        }
    });
    Ia = function() {
        var g = cb();
        return function(l, v, y, A, D, E) {
            v || (v = 2);
            y || (y = 0);
            for (A = A ? Math.min(A * v + y, l.length) : l.length; y < A; y += v) g[0] = l[y], g[1] = l[y + 1], D(g, g, E), l[y] = g[0], l[y + 1] = g[1];
            return l
        }
    }();
    Ia = Object.freeze({
        __proto__: null,
        create: cb,
        clone: function(g) {
            var l = new na(2);
            l[0] = g[0];
            l[1] = g[1];
            return l
        },
        fromValues: function(g,
            l) {
            var v = new na(2);
            v[0] = g;
            v[1] = l;
            return v
        },
        copy: function(g, l) {
            g[0] = l[0];
            g[1] = l[1];
            return g
        },
        set: function(g, l, v) {
            g[0] = l;
            g[1] = v;
            return g
        },
        add: function(g, l, v) {
            g[0] = l[0] + v[0];
            g[1] = l[1] + v[1];
            return g
        },
        subtract: db,
        multiply: eb,
        divide: fb,
        ceil: function(g, l) {
            g[0] = Math.ceil(l[0]);
            g[1] = Math.ceil(l[1]);
            return g
        },
        floor: function(g, l) {
            g[0] = Math.floor(l[0]);
            g[1] = Math.floor(l[1]);
            return g
        },
        min: function(g, l, v) {
            g[0] = Math.min(l[0], v[0]);
            g[1] = Math.min(l[1], v[1]);
            return g
        },
        max: function(g, l, v) {
            g[0] = Math.max(l[0], v[0]);
            g[1] =
                Math.max(l[1], v[1]);
            return g
        },
        round: function(g, l) {
            g[0] = Math.round(l[0]);
            g[1] = Math.round(l[1]);
            return g
        },
        scale: function(g, l, v) {
            g[0] = l[0] * v;
            g[1] = l[1] * v;
            return g
        },
        scaleAndAdd: function(g, l, v, y) {
            g[0] = l[0] + v[0] * y;
            g[1] = l[1] + v[1] * y;
            return g
        },
        distance: gb,
        squaredDistance: hb,
        length: ib,
        squaredLength: jb,
        negate: function(g, l) {
            g[0] = -l[0];
            g[1] = -l[1];
            return g
        },
        inverse: function(g, l) {
            g[0] = 1 / l[0];
            g[1] = 1 / l[1];
            return g
        },
        normalize: function(g, l) {
            var v = l[0],
                y = l[1];
            v = v * v + y * y;
            0 < v && (v = 1 / Math.sqrt(v));
            g[0] = l[0] * v;
            g[1] = l[1] * v;
            return g
        },
        dot: function(g, l) {
            return g[0] * l[0] + g[1] * l[1]
        },
        cross: function(g, l, v) {
            l = l[0] * v[1] - l[1] * v[0];
            g[0] = g[1] = 0;
            g[2] = l;
            return g
        },
        lerp: function(g, l, v, y) {
            var A = l[0];
            l = l[1];
            g[0] = A + y * (v[0] - A);
            g[1] = l + y * (v[1] - l);
            return g
        },
        random: function(g, l) {
            l = l || 1;
            var v = 2 * Ga() * Math.PI;
            g[0] = Math.cos(v) * l;
            g[1] = Math.sin(v) * l;
            return g
        },
        transformMat2: function(g, l, v) {
            var y = l[0];
            l = l[1];
            g[0] = v[0] * y + v[2] * l;
            g[1] = v[1] * y + v[3] * l;
            return g
        },
        transformMat2d: function(g, l, v) {
            var y = l[0];
            l = l[1];
            g[0] = v[0] * y + v[2] * l + v[4];
            g[1] = v[1] * y + v[3] * l +
                v[5];
            return g
        },
        transformMat3: function(g, l, v) {
            var y = l[0];
            l = l[1];
            g[0] = v[0] * y + v[3] * l + v[6];
            g[1] = v[1] * y + v[4] * l + v[7];
            return g
        },
        transformMat4: function(g, l, v) {
            var y = l[0];
            l = l[1];
            g[0] = v[0] * y + v[4] * l + v[12];
            g[1] = v[1] * y + v[5] * l + v[13];
            return g
        },
        rotate: function(g, l, v, y) {
            var A = l[0] - v[0];
            l = l[1] - v[1];
            var D = Math.sin(y);
            y = Math.cos(y);
            g[0] = A * y - l * D + v[0];
            g[1] = A * D + l * y + v[1];
            return g
        },
        angle: function(g, l) {
            var v = g[0];
            g = g[1];
            var y = l[0];
            l = l[1];
            var A = Math.sqrt(v * v + g * g) * Math.sqrt(y * y + l * l);
            return Math.acos(Math.min(Math.max(A && (v *
                y + g * l) / A, -1), 1))
        },
        zero: function(g) {
            g[0] = 0;
            g[1] = 0;
            return g
        },
        str: function(g) {
            return "vec2(" + g[0] + ", " + g[1] + ")"
        },
        exactEquals: function(g, l) {
            return g[0] === l[0] && g[1] === l[1]
        },
        equals: function(g, l) {
            var v = g[0];
            g = g[1];
            var y = l[0];
            l = l[1];
            return Math.abs(v - y) <= 1E-6 * Math.max(1, Math.abs(v), Math.abs(y)) && Math.abs(g - l) <= 1E-6 * Math.max(1, Math.abs(g), Math.abs(l))
        },
        len: ib,
        sub: db,
        mul: eb,
        div: fb,
        dist: gb,
        sqrDist: hb,
        sqrLen: jb,
        forEach: Ia
    });
    f.glMatrix = lb;
    f.mat2 = mb;
    f.mat2d = nb;
    f.mat3 = ob;
    f.mat4 = pb;
    f.quat = Na;
    f.quat2 = Oa;
    f.vec2 = Ia;
    f.vec3 = La;
    f.vec4 = Ma;
    Object.defineProperty(f, "__esModule", {
        value: !0
    })
});
"use strict"; {
    function f(G, I, P) {
        var Q = [0, 0];
        var T = G[1][1] - G[0][1];
        var X = G[0][0] - G[1][0];
        G = T * G[0][0] + X * G[0][1];
        var Z = I[1][1] - I[0][1];
        var fa = I[0][0] - I[1][0];
        I = Z * I[0][0] + fa * I[0][1];
        var ia = T * fa - Z * X;
        J(ia, 0, P || 0) || (Q[0] = (fa * G - X * I) / ia, Q[1] = (T * I - Z * G) / ia);
        return Q
    }

    function b(G, I, P, Q) {
        var T = I[0] - G[0];
        I = I[1] - G[1];
        var X = Q[0] - P[0],
            Z = Q[1] - P[1];
        if (0 === X * I - Z * T) return !1;
        Q = (T * (P[1] - G[1]) + I * (G[0] - P[0])) / (X * I - Z * T);
        G = (X * (G[1] - P[1]) + Z * (P[0] - G[0])) / (Z * T - X * I);
        return 0 <= Q && 1 >= Q && 0 <= G && 1 >= G
    }

    function a(G, I, P) {
        return (I[0] - G[0]) * (P[1] - G[1]) -
            (P[0] - G[0]) * (I[1] - G[1])
    }

    function d(G, I, P) {
        return 0 < a(G, I, P)
    }

    function c(G, I, P) {
        return 0 <= a(G, I, P)
    }

    function e(G, I, P) {
        return 0 > a(G, I, P)
    }

    function k(G, I, P) {
        return 0 >= a(G, I, P)
    }
    var tmpPoint1$$module$str$c3runtime = [],
        tmpPoint2$$module$str$c3runtime = [];

    function h(G, I, P, Q) {
        if (Q) {
            var T = tmpPoint1$$module$str$c3runtime,
                X = tmpPoint2$$module$str$c3runtime;
            T[0] = I[0] - G[0];
            T[1] = I[1] - G[1];
            X[0] = P[0] - I[0];
            X[1] = P[1] - I[1];
            return Math.acos((T[0] * X[0] + T[1] * X[1]) / (Math.sqrt(T[0] * T[0] + T[1] * T[1]) * Math.sqrt(X[0] * X[0] + X[1] * X[1]))) <
                Q
        }
        return 0 === a(G, I, P)
    }

    function p(G, I) {
        var P = I[0] - G[0];
        G = I[1] - G[1];
        return P * P + G * G
    }

    function n(G, I) {
        var P = G.length;
        return G[0 > I ? I % P + P : I % P]
    }

    function m(G) {
        G.length = 0
    }

    function t(G, I, P, Q) {
        for (; P < Q; P++) G.push(I[P])
    }

    function q(G) {
        for (var I = [], P = G.length, Q = 0; Q !== P; Q++) I.push(G.pop());
        for (Q = 0; Q !== P; Q++) G[Q] = I[Q]
    }

    function u(G, I) {
        return e(n(G, I - 1), n(G, I), n(G, I + 1))
    }
    var tmpLine1$$module$str$c3runtime = [],
        tmpLine2$$module$str$c3runtime = [];

    function r(G, I, P) {
        var Q = tmpLine1$$module$str$c3runtime,
            T = tmpLine2$$module$str$c3runtime;
        if (c(n(G, I + 1), n(G, I), n(G, P)) && k(n(G, I - 1), n(G, I), n(G, P))) return !1;
        var X = p(n(G, I), n(G, P));
        for (var Z = 0; Z !== G.length; ++Z)
            if ((Z + 1) % G.length !== I && Z !== I && c(n(G, I), n(G, P), n(G, Z + 1)) && k(n(G, I), n(G, P), n(G, Z))) {
                Q[0] = n(G, I);
                Q[1] = n(G, P);
                T[0] = n(G, Z);
                T[1] = n(G, Z + 1);
                var fa = f(Q, T);
                if (p(n(G, I), fa) < X) return !1
            }
        return !0
    }

    function x(G, I, P) {
        for (var Q = 0; Q !== G.length; ++Q)
            if (Q !== I && Q !== P && (Q + 1) % G.length !== I && (Q + 1) % G.length !== P && b(n(G, I), n(G, P), n(G, Q), n(G, Q + 1))) return !1;
        return !0
    }

    function z(G, I, P, Q) {
        Q = Q || [];
        m(Q);
        if (I < P)
            for (var T =
                    I; T <= P; T++) Q.push(G[T]);
        else {
            for (T = 0; T <= P; T++) Q.push(G[T]);
            for (T = I; T < G.length; T++) Q.push(G[T])
        }
        return Q
    }

    function C(G) {
        for (var I = [], P, Q, T = [], X = Number.MAX_VALUE, Z = 0; Z < G.length; ++Z)
            if (u(G, Z))
                for (var fa = 0; fa < G.length; ++fa)
                    if (r(G, Z, fa)) {
                        P = C(z(G, Z, fa, T));
                        Q = C(z(G, fa, Z, T));
                        for (var ia = 0; ia < Q.length; ia++) P.push(Q[ia]);
                        P.length < X && (I = P, X = P.length, I.push([n(G, Z), n(G, fa)]))
                    }
        return I
    }

    function w(G, I) {
        if (0 === I.length) return [G];
        if (I instanceof Array && I.length && I[0] instanceof Array && 2 === I[0].length && I[0][0] instanceof Array) {
            G = [G];
            for (var P = 0; P < I.length; P++)
                for (var Q = I[P], T = 0; T < G.length; T++) {
                    var X = w(G[T], Q);
                    if (X) {
                        G.splice(T, 1);
                        G.push(X[0], X[1]);
                        break
                    }
                }
            return G
        }
        Q = I;
        P = G.indexOf(Q[0]);
        T = G.indexOf(Q[1]);
        return -1 !== P && -1 !== T ? [z(G, P, T), z(G, T, P)] : !1
    }

    function B(G, I, P, Q, T) {
        var X = I[1] - G[1];
        I = G[0] - I[0];
        G = X * G[0] + I * G[1];
        var Z = Q[1] - P[1];
        Q = P[0] - Q[0];
        P = Z * P[0] + Q * P[1];
        var fa = X * Q - Z * I;
        return J(fa, 0, T || 0) ? [0, 0] : [(Q * G - I * P) / fa, (X * P - Z * G) / fa]
    }

    function F(G, I, P, Q, T, X, Z) {
        X = X || 100;
        Z = Z || 0;
        T = T || 25;
        I = "undefined" !== typeof I ? I : [];
        P = P || [];
        Q = Q || [];
        var fa = [0, 0],
            ia = [0, 0],
            ba = [0, 0],
            xa, ua = 0,
            Da = 0,
            Ea = 0,
            Ba = [],
            Aa = [];
        if (3 > G.length) return I;
        Z++;
        if (Z > X) return console.warn("quickDecomp: max level (" + X + ") reached."), I;
        for (var ka = 0; ka < G.length; ++ka)
            if (u(G, ka)) {
                P.push(G[ka]);
                var Fa = xa = Number.MAX_VALUE;
                for (var wa = 0; wa < G.length; ++wa) {
                    if (d(n(G, ka - 1), n(G, ka), n(G, wa)) && k(n(G, ka - 1), n(G, ka), n(G, wa - 1)) && (ba = B(n(G, ka - 1), n(G, ka), n(G, wa), n(G, wa - 1)), e(n(G, ka + 1), n(G, ka), ba))) {
                        var Ca = p(G[ka], ba);
                        Ca < xa && (xa = Ca, ia = ba, Da = wa)
                    }
                    d(n(G, ka + 1), n(G, ka), n(G, wa + 1)) && k(n(G, ka + 1),
                        n(G, ka), n(G, wa)) && (ba = B(n(G, ka + 1), n(G, ka), n(G, wa), n(G, wa + 1)), d(n(G, ka - 1), n(G, ka), ba) && (Ca = p(G[ka], ba), Ca < Fa && (Fa = Ca, fa = ba, ua = wa)))
                }
                if (Da === (ua + 1) % G.length) ba[0] = (ia[0] + fa[0]) / 2, ba[1] = (ia[1] + fa[1]) / 2, Q.push(ba), ka < ua ? (t(Ba, G, ka, ua + 1), Ba.push(ba), Aa.push(ba), 0 !== Da && t(Aa, G, Da, G.length), t(Aa, G, 0, ka + 1)) : (0 !== ka && t(Ba, G, ka, G.length), t(Ba, G, 0, ua + 1), Ba.push(ba), Aa.push(ba), t(Aa, G, Da, ka + 1));
                else {
                    Da > ua && (ua += G.length);
                    fa = Number.MAX_VALUE;
                    if (ua < Da) return I;
                    for (wa = Da; wa <= ua; ++wa) c(n(G, ka - 1), n(G, ka), n(G, wa)) &&
                        k(n(G, ka + 1), n(G, ka), n(G, wa)) && (Ca = p(n(G, ka), n(G, wa)), Ca < fa && x(G, ka, wa) && (fa = Ca, Ea = wa % G.length));
                    ka < Ea ? (t(Ba, G, ka, Ea + 1), 0 !== Ea && t(Aa, G, Ea, G.length), t(Aa, G, 0, ka + 1)) : (0 !== ka && t(Ba, G, ka, G.length), t(Ba, G, 0, Ea + 1), t(Aa, G, Ea, ka + 1))
                }
                Ba.length < Aa.length ? (F(Ba, I, P, Q, T, X, Z), F(Aa, I, P, Q, T, X, Z)) : (F(Aa, I, P, Q, T, X, Z), F(Ba, I, P, Q, T, X, Z));
                return I
            }
        I.push(G);
        return I
    }

    function J(G, I, P) {
        return Math.abs(G - I) <= (P || 0)
    }

    function O(G, I, P) {
        return J(G[0], I[0], P) && J(G[1], I[1], P)
    }
    self.polyDecomp = {
        decomp: function(G) {
            var I = C(G);
            return 0 <
                I.length ? w(G, I) : [G]
        },
        quickDecomp: F,
        isSimple: function(G) {
            var I;
            for (I = 0; I < G.length - 1; I++)
                for (var P = 0; P < I - 1; P++)
                    if (b(G[I], G[I + 1], G[P], G[P + 1])) return !1;
            for (I = 1; I < G.length - 2; I++)
                if (b(G[0], G[G.length - 1], G[I], G[I + 1])) return !1;
            return !0
        },
        removeCollinearPoints: function(G, I) {
            for (var P = 0, Q = G.length - 1; 3 < G.length && 0 <= Q; --Q) h(n(G, Q - 1), n(G, Q), n(G, Q + 1), I) && (G.splice(Q % G.length, 1), P++);
            return P
        },
        removeDuplicatePoints: function(G, I) {
            for (var P = G.length - 1; 1 <= P; --P)
                for (var Q = G[P], T = P - 1; 0 <= T; --T) O(Q, G[T], I) && G.splice(P,
                    1)
        },
        makeCCW: function(G) {
            for (var I = 0, P = 1; P < G.length; ++P)
                if (G[P][1] < G[I][1] || G[P][1] === G[I][1] && G[P][0] > G[I][0]) I = P;
            if (d(n(G, I - 1), n(G, I), n(G, I + 1))) return !1;
            q(G);
            return !0
        }
    }
}
"use strict"; {
    let f = !1,
        b = !1,
        a = "dev";
    const d = self.C3 = class {
        constructor() {
            throw TypeError("static class can't be instantiated");
        }
        static SetReady() {
            f = !0
        }
        static IsReady() {
            return f
        }
        static SetAppStarted() {
            b = !0
        }
        static HasAppStarted() {
            return b
        }
        static SetBuildMode(c) {
            a = c
        }
        static GetBuildMode() {
            return a
        }
        static IsReleaseBuild() {
            return "final" === a
        }
    };
    d.isDebug = !1;
    d.isDebugDefend = !1;
    d.hardwareConcurrency = navigator.hardwareConcurrency || 2;
    self.C3X = {}
}
"use strict"; {
    const f = self.C3;
    f.QueryParser = class {
        constructor(b) {
            this._queryString = b;
            this._parameters = new Map;
            this._Parse()
        }
        _Parse() {
            var b = this._queryString;
            if (b.startsWith("?") || b.startsWith("#")) b = b.substr(1);
            b = b.split("&");
            for (const a of b) this._ParseParameter(a)
        }
        _ParseParameter(b) {
            if (b)
                if (b.includes("=")) {
                    var a = b.indexOf("="),
                        d = decodeURIComponent(b.substring(0, a));
                    b = decodeURIComponent(b.substring(a + 1));
                    this._parameters.set(d, b)
                } else this._parameters.set(b, null)
        }
        LogAll() {
            for (const b of this._parameters) console.log("[QueryParser] Parameter '" +
                b[0] + "' = " + (null === b[1] ? "null" : "'" + b[1] + "'"))
        }
        Has(b) {
            return this._parameters.has(b)
        }
        Get(b) {
            b = this._parameters.get(b);
            return "undefined" === typeof b ? null : b
        }
        ClearHash() {
            history.replaceState("", document.title, location.pathname + location.search)
        }
        Reparse(b) {
            this._queryString = b;
            this._parameters.clear();
            this._Parse()
        }
    };
    f.QueryString = new f.QueryParser(location.search);
    f.LocationHashString = new f.QueryParser(location.hash);
    "dev" !== f.QueryString.Get("mode") && f.SetBuildMode("final")
}
"use strict"; {
    const f = self.C3,
        b = navigator.userAgent;
    let a = {
        linux: /linux|openbsd|freebsd|netbsd/i.test(b),
        chromeOS: /CrOS/.test(b),
        windowsTizen: /trident|iemobile|msie|tizen/i.test(b),
        genericMS: /trident|iemobile|msie|edge\//i.test(b),
        opera: /OPR\//.test(b),
        blackberry: /bb10/i.test(b),
        edge: /edge\//i.test(b),
        trident: /trident/i.test(b),
        webkit: /webkit/i.test(b),
        safari: /safari\//i.test(b),
        chrome: /chrome\//i.test(b),
        chromium: /chromium\//i.test(b),
        crosswalk: /crosswalk|xwalk/i.test(b),
        nwjs: /nwjs/i.test(b),
        amazonwebapp: /amazonwebappplatform/i.test(b),
        webview: /wv\)/.test(b),
        android: /android/i.test(b),
        nokia: /nokiabrowser\/[0-9.]+/i.test(b)
    };
    var JSCompiler_object_inline_windows_0 = /windows\s+nt\s+\d+\.\d+/i.exec(b),
        JSCompiler_object_inline_OSX_1 = /mac\s+os\s+x\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_android_2 = /android\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_opera_3 = /OPR\/[0-9.]+/.exec(b),
        JSCompiler_object_inline_tizen_4 = /tizen\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_iphone_5 = /iphone\s+os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_ipad_6 =
        /ipad[^)]*os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_winPhone_7 = /windows\s+phone\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_winPhoneOS_8 = /windows\s+phone\s+os\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chrome_9 = /chrome\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chromium_10 = /chromium\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_nwjs_11 = /nwjs\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_firefox_12 = /firefox\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_ie_13 = /msie\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edge_14 =
        /edge\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edgeChromium_15 = /edg\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_silk_16 = /silk\/[0-9.]+/i.exec(b);
    let d = "(unknown)",
        c = "(unknown)",
        e = "(unknown)",
        k = "(unknown)",
        h = "(unknown)",
        p = "browser",
        n = !1,
        m = !1,
        t = new Map;

    function q(r, x, z) {
        !0 === x ? (z(), t.set(r, !0)) : x && x.length && (z(x[0]), t.set(r, !0))
    }
    q("isWindows", JSCompiler_object_inline_windows_0, r => {
        d = "Windows";
        if (r = r.split(" ")[2]) switch (r) {
            case "5.0":
                c = "2000";
                break;
            case "5.1":
                c = "XP";
                break;
            case "5.2":
                c = "XP";
                break;
            case "6.0":
                c = "Vista";
                break;
            case "6.1":
                c = "7";
                break;
            case "6.2":
                c = "8";
                break;
            case "6.3":
                c = "8.1";
                break;
            case "10.0":
                c = "10"
        }
    });
    q("isOSX", JSCompiler_object_inline_OSX_1, r => {
        d = "Mac OS X";
        (r = r.split(" ")[3]) && (c = r.replace("_", "."))
    });
    q("isLinux", a.linux, () => {
        d = "Linux"
    });
    q("isChromeOS", a.chromeOS, () => {
        d = "Chrome OS"
    });
    q("isAndroid", !a.windowsTizen && JSCompiler_object_inline_android_2, r => {
        d = "Android";
        (r = r.split(" ")[1]) && (c = r)
    });
    q("isTizen", JSCompiler_object_inline_tizen_4, r => {
        d = "Tizen";
        (r = r.split(" ")[1]) && (c =
            r)
    });
    q("isIPhone", !a.windowsTizen && JSCompiler_object_inline_iphone_5, r => {
        d = "iOS";
        (r = r.split(" ")[2]) && (c = r.replace("_", "."))
    });
    q("isIPad", !a.windowsTizen && JSCompiler_object_inline_ipad_6, r => {
        d = "iOS";
        (r = r.split(" ")[3]) && (c = r.replace("_", "."))
    });
    q("isWindowsPhone", JSCompiler_object_inline_winPhone_7, r => {
        d = "Windows Phone";
        (r = r.split(" ")[2]) && (c = r)
    });
    q("isWindowsPhoneOS", JSCompiler_object_inline_winPhoneOS_8, r => {
        d = "Windows Phone";
        (r = r.split(" ")[3]) && (c = r)
    });
    q("isBlackberry", a.blackberry, () => {
        d = "Blackberry";
        c = "10";
        e = "stock";
        h = "webkit"
    });
    q("isChrome", !a.edge && !a.opera && JSCompiler_object_inline_chrome_9, r => {
        e = "Chrome";
        h = "Chromium";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isOpera", JSCompiler_object_inline_opera_3, r => {
        e = "Opera";
        h = "Chromium";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isChromium", JSCompiler_object_inline_chromium_10, r => {
        h = e = "Chromium";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isFirefox", JSCompiler_object_inline_firefox_12, r => {
        e = "Firefox";
        h = "Gecko";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isInternetExplorer", JSCompiler_object_inline_ie_13,
        r => {
            e = "Internet Explorer";
            h = "Trident";
            (r = r.split(" ")[1]) && (k = r)
        });
    q("isTrident", "Internet Explorer" !== e && a.trident, () => {
        h = "Trident";
        var r = /rv:[0-9.]+/i.exec(b);
        r && r.length && (e = "Internet Explorer", (r = r[0].split(":")[1]) && (k = r))
    });
    q("isEdge", JSCompiler_object_inline_edge_14, r => {
        h = e = "Edge";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isEdgeChromium", JSCompiler_object_inline_edgeChromium_15, r => {
        e = "Edge";
        h = "Chromium";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isSafari", a.safari && !a.nokia && !a.chrome && !a.chromium && !a.genericIE &&
        !a.blackberry, () => {
            e = "Safari";
            h = "WebKit";
            var r = /version\/[0-9.]+/i.exec(b),
                x = /crios\/[0-9.]+/i.exec(b),
                z = /fxios\/[0-9.]+/i.exec(b);
            r && r.length && (r = r[0].split("/")[1]) && (k = r);
            x && x.length && (e = "Chrome for iOS", (x = x[0].split("/")[1]) && (k = x));
            z && z.length && (e = "Firefox for iOS", (z = z[0].split("/")[1]) && (k = z))
        });
    q("isSilk", JSCompiler_object_inline_silk_16, r => {
        e = "Silk";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isCrosswalk", a.crosswalk, () => p = "crosswalk");
    q("isCordova", self.device && (self.device.cordova || self.device.phonegap),
        () => p = "cordova");
    q("isNWJS", JSCompiler_object_inline_nwjs_11, r => {
        p = "nwjs";
        e = "NW.js";
        h = "Chromium";
        (r = r.split("/")[1]) && (k = r)
    });
    q("isAmazonWebApp", a.amazonwebapp, () => p = "webapp");
    q("isHomeScreenWebApp", "nwjs" !== p && "undefined" !== typeof window && (window.matchMedia && window.matchMedia("(display-mode: standalone)").matches || navigator.standalone), () => p = "webapp");
    q("isFalseSafari", "Safari" === e && ("Android" === d || "Tizen" === d || "Blackberry" === d), () => e = "stock");
    q("isAndroidWebview", "Chrome" === e && "browser" === p && a.webview,
        () => p = "webview");
    q("isFirefoxOS", "Firefox" === e && "(unknown)" === d, () => d = "Firefox OS");
    q("isAndroidFallback", "(unknown)" === d && !a.windowsTizen && a.android, () => d = "Android");
    q("isTridentFallback", "(unknown)" === d && a.trident, () => h = "Trident");
    q("isWebkitFallback", "(unknown)" === d && a.webkit, () => h = "WebKit");
    q("isDesktop", (() => "Windows" === d || "Mac OS X" === d || "Linux" === d || "Chrome OS" === d || "nwjs" === p)(), () => n = !0);
    "Edge" === h && "undefined" !== typeof Windows && "undefined" !== typeof Windows.System && (p = "windows-store");
    m =
        "nwjs" === p;
    const u = "Mac OS X" === d && navigator.maxTouchPoints && 2 < navigator.maxTouchPoints;
    u && (d = "iOS", c = k, m = n = !1);
    f.Platform = {
        OS: d,
        OSVersion: c,
        Browser: e,
        BrowserVersion: k,
        BrowserVersionNumber: parseFloat(k),
        BrowserEngine: h,
        Context: p,
        IsDesktop: n,
        IsMobile: !n,
        IsDesktopApp: m,
        IsChromeWebStore: !!(self.chrome && self.chrome.runtime && self.chrome.runtime.id),
        IsAppleOS: "Mac OS X" === d || "iOS" === d,
        IsIpadOS: u,
        IsLinux: "Linux" === d
    }
}
"use strict"; {
    const f = new Map,
        b = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAll,
        a = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAllKeys;

    function d(u) {
        return new Promise((r, x) => {
            u.onsuccess = () => r(u.result);
            u.onerror = () => x(u.error)
        })
    }

    function c(u) {
        return new Promise((r, x) => {
            u.oncomplete = () => r();
            u.onerror = () => x(u.error);
            u.onabort = () => x(u.error)
        })
    }

    function e(u, r) {
        return h(u, r)
    }

    function k(u, r) {
        return h(u, r, !0)
    }
    async function h(u, r, x = !1,
        z = !0) {
        const C = await p(u);
        try {
            const w = C.transaction(["keyvaluepairs"], x ? "readwrite" : "readonly");
            return r(w)
        } catch (w) {
            if (z && "InvalidStateError" === w.name) return f.delete(u), h(u, r, x, !1);
            throw w;
        }
    }

    function p(u) {
        m(u);
        let r = f.get(u);
        r instanceof Promise || (r = n(u), f.set(u, r), r.catch(x => f.delete(u)));
        return r
    }
    async function n(u) {
        m(u);
        const r = indexedDB.open(u, 2);
        r.addEventListener("upgradeneeded", x => {
            try {
                x.target.result.createObjectStore("keyvaluepairs")
            } catch (z) {
                console.error(`Failed to create objectstore for database ${u}`,
                    z)
            }
        });
        return d(r)
    }

    function m(u) {
        if ("string" !== typeof u) throw new TypeError("expected string");
    }

    function t(u, r) {
        const x = u.objectStore("keyvaluepairs").openCursor();
        return new Promise(z => {
            const C = [];
            x.onsuccess = w => {
                if (w = w.target.result) {
                    switch (r) {
                        case "entries":
                            C.push([w.key, w.value]);
                            break;
                        case "keys":
                            C.push(w.key);
                            break;
                        case "values":
                            C.push(w.value)
                    }
                    w.continue()
                } else z(C)
            }
        })
    }
    class q {
        constructor(u) {
            m(u);
            this.name = u
        }
        async ready() {
            await p(this.name)
        }
        set(u, r) {
            m(u);
            return k(this.name, async x => {
                var z = x.objectStore("keyvaluepairs").put(r,
                    u);
                z = d(z);
                x = c(x);
                await Promise.all([x, z])
            })
        }
        get(u) {
            m(u);
            return e(this.name, async r => {
                var x = r.objectStore("keyvaluepairs").get(u);
                x = d(x);
                r = c(r);
                [, r] = await Promise.all([r, x]);
                return r
            })
        }
        delete(u) {
            m(u);
            return k(this.name, async r => {
                var x = r.objectStore("keyvaluepairs").delete(u);
                x = d(x);
                r = c(r);
                await Promise.all([r, x])
            })
        }
        clear() {
            return k(this.name, async u => {
                var r = u.objectStore("keyvaluepairs").clear();
                r = d(r);
                u = c(u);
                await Promise.all([u, r])
            })
        }
        keys() {
            return e(this.name, async u => {
                if (a) {
                    var r = u.objectStore("keyvaluepairs").getAllKeys();
                    r = d(r)
                } else r = t(u, "keys");
                u = c(u);
                [, u] = await Promise.all([u, r]);
                return u
            })
        }
        values() {
            return e(this.name, async u => {
                if (b) {
                    var r = u.objectStore("keyvaluepairs").getAll();
                    r = d(r)
                } else r = t(u, "values");
                u = c(u);
                [, u] = await Promise.all([u, r]);
                return u
            })
        }
        entries() {
            return e(this.name, async u => {
                var r = t(u, "entries");
                u = c(u);
                [, r] = await Promise.all([u, r]);
                return r
            })
        }
    }
    self.KVStorageContainer = q
}
"use strict"; {
    const f = self.KVStorageContainer,
        b = [/no available storage method found/i, /an attempt was made to break through the security policy of the user agent/i, /the user denied permission to access the database/i, /a mutation operation was attempted on a database that did not allow mutations/i, /idbfactory\.open\(\) called in an invalid security context/i],
        a = new WeakMap;
    let d = !1;
    "undefined" === typeof indexedDB && (d = !0, console.warn("Unable to use local storage because indexedDB is not defined"));

    function c(p) {
        throw Error(`"${p}" is not implemented`);
    }

    function e(p) {
        if ("function" === typeof p) throw Error("localforage callback API is not implemented; please use the promise API instead");
    }

    function k(p) {
        return "object" === typeof p ? new Promise(n => {
            const {
                port1: m,
                port2: t
            } = new MessageChannel;
            t.onmessage = q => n(q.data);
            m.postMessage(p)
        }) : Promise.resolve(p)
    }
    class h {
        constructor(p) {
            this._inst = p;
            a.set(this, new Map)
        }
        _MaybeSwitchToMemoryFallback(p) {
            if (!d)
                for (const n of b)
                    if (p && n.test(p.message)) {
                        console.error("Unable to use local storage, reverting to in-memory store: ",
                            p, p.message);
                        d = !0;
                        break
                    }
        }
        async _getItemFallback(p) {
            p = a.get(this).get(p);
            p = await k(p);
            return "undefined" === typeof p ? null : p
        }
        async _setItemFallback(p, n) {
            n = await k(n);
            a.get(this).set(p, n)
        }
        _removeItemFallback(p) {
            a.get(this).delete(p)
        }
        _clearFallback() {
            a.get(this).clear()
        }
        _keysFallback() {
            return Array.from(a.get(this).keys())
        }
        IsUsingFallback() {
            return d
        }
        async getItem(p, n) {
            e(n);
            if (d) return await this._getItemFallback(p);
            let m;
            try {
                m = await this._inst.get(p)
            } catch (t) {
                this._MaybeSwitchToMemoryFallback(t);
                if (d) return await this._getItemFallback(p);
                console.error(`Error reading '${p}' from storage, returning null: `, t);
                return null
            }
            return "undefined" === typeof m ? null : m
        }
        async setItem(p, n, m) {
            e(m);
            "undefined" === typeof n && (n = null);
            if (d) await this._setItemFallback(p, n);
            else try {
                await this._inst.set(p, n)
            } catch (t) {
                if (this._MaybeSwitchToMemoryFallback(t), d) await this._setItemFallback(p, n);
                else throw t;
            }
        }
        async removeItem(p, n) {
            e(n);
            if (d) this._removeItemFallback(p);
            else try {
                await this._inst.delete(p)
            } catch (m) {
                this._MaybeSwitchToMemoryFallback(m), d ? this._removeItemFallback(p) :
                    console.error(`Error removing '${p}' from storage: `, m)
            }
        }
        async clear(p) {
            e(p);
            if (d) this._clearFallback();
            else try {
                await this._inst.clear()
            } catch (n) {
                this._MaybeSwitchToMemoryFallback(n), d ? this._clearFallback() : console.error("Error clearing storage: ", n)
            }
        }
        async keys(p) {
            e(p);
            if (d) return this._keysFallback();
            p = [];
            try {
                p = await this._inst.keys()
            } catch (n) {
                this._MaybeSwitchToMemoryFallback(n);
                if (d) return this._keysFallback();
                console.error("Error getting storage keys: ", n)
            }
            return p
        }
        ready(p) {
            e(p);
            return d ? Promise.resolve(!0) :
                this._inst.ready()
        }
        createInstance(p) {
            if ("object" !== typeof p) throw new TypeError("invalid options object");
            p = p.name;
            if ("string" !== typeof p) throw new TypeError("invalid store name");
            p = new f(p);
            return new h(p)
        }
        length(p) {
            c("localforage.length()")
        }
        key(p, n) {
            c("localforage.key()")
        }
        iterate(p, n) {
            c("localforage.iterate()")
        }
        setDriver(p) {
            c("localforage.setDriver()")
        }
        config(p) {
            c("localforage.config()")
        }
        defineDriver(p) {
            c("localforage.defineDriver()")
        }
        driver() {
            c("localforage.driver()")
        }
        supports(p) {
            c("localforage.supports()")
        }
        dropInstance() {
            c("localforage.dropInstance()")
        }
        disableMemoryMode() {
            d = !1
        }
    }
    self.localforage = new h(new f("localforage"))
}
"use strict"; {
    const f = self.C3;
    f.Supports = {};
    f.Supports.WebAnimations = (() => {
        try {
            if ("Safari" === f.Platform.Browser || "undefined" === typeof document) return !1;
            const b = document.createElement("div");
            return "undefined" === typeof b.animate ? !1 : "undefined" !== typeof b.animate([{
                opacity: "0"
            }, {
                opacity: "1"
            }], 1E3).reverse
        } catch (b) {
            return !1
        }
    })();
    f.Supports.DialogElement = "undefined" !== typeof HTMLDialogElement;
    f.Supports.RequestIdleCallback = !!self.requestIdleCallback;
    f.Supports.ImageBitmap = !!self.createImageBitmap;
    f.Supports.ImageBitmapOptions = !1;
    if (f.Supports.ImageBitmap) try {
        self.createImageBitmap(new ImageData(32, 32), {
            premultiplyAlpha: "none"
        }).then(b => {
            f.Supports.ImageBitmapOptions = !0
        }).catch(b => {
            f.Supports.ImageBitmapOptions = !1
        })
    } catch (b) {
        f.Supports.ImageBitmapOptions = !1
    }
    f.Supports.ClipboardReadText = !(!navigator.clipboard || !navigator.clipboard.readText || "Firefox" === f.Platform.Browser);
    f.Supports.PermissionsQuery = !(!navigator.permissions || !navigator.permissions.query);
    f.Supports.Proxies = "undefined" !== typeof Proxy;
    f.Supports.DownloadAttribute =
        (() => "undefined" === typeof document ? !1 : "undefined" !== typeof document.createElement("a").download)();
    f.Supports.CanvasToBlob = (() => "undefined" !== typeof HTMLCanvasElement && HTMLCanvasElement.prototype.toBlob)();
    f.Supports.Fetch = "function" === typeof fetch;
    f.Supports.PersistentStorage = !!(self.isSecureContext && "Opera" !== f.Platform.Browser && navigator.storage && navigator.storage.persist);
    f.Supports.StorageQuotaEstimate = !!(self.isSecureContext && navigator.storage && navigator.storage.estimate);
    f.Supports.Fullscreen =
        (() => {
            if ("undefined" === typeof document || "iOS" === f.Platform.OS) return !1;
            const b = document.documentElement;
            return !!(b.requestFullscreen || b.msRequestFullscreen || b.mozRequestFullScreen || b.webkitRequestFullscreen)
        })();
    f.Supports.ImageDecoder = "undefined" !== typeof self.ImageDecoder;
    f.Supports.NativeFileSystemAPI = !!self.showOpenFilePicker;
    f.Supports.NavigatorFontsQuery = !(!navigator.fonts || !navigator.fonts.query)
}
"use strict"; {
    const f = self.C3;
    if (!String.prototype.trimStart) {
        const b = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*/;
        String.prototype.trimStart = function() {
            return this.replace(b, "")
        }
    }
    if (!String.prototype.trimEnd) {
        const b = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*$/;
        String.prototype.trimEnd = function() {
            return this.replace(b,
                "")
        }
    }
    String.prototype.replaceAll || (String.prototype.replaceAll = function(b, a) {
        return this.replace(new RegExp(f.EscapeRegex(b), "g"), a)
    });
    Array.prototype.values || (Array.prototype.values = function*() {
        for (const b of this) yield b
    });
    if (!Array.prototype.flat) {
        function b(a, d) {
            return a.reduce((c, e) => {
                0 < d && Array.isArray(e) ? Array.prototype.push.apply(c, b(e, d - 1)) : c.push(e);
                return c
            }, [])
        }
        Array.prototype.flat = function(a = 1) {
            return b(this, a)
        }
    }
    RegExp.escape || (RegExp.escape = function(b) {
        return String(b).replace(/[\\^$*+?.()|[\]{}]/g,
            "\\$&")
    });
    navigator.storage && !navigator.storage.estimate && navigator.webkitTemporaryStorage && navigator.webkitTemporaryStorage.queryUsageAndQuota && (navigator.storage.estimate = function() {
        return new Promise((b, a) => navigator.webkitTemporaryStorage.queryUsageAndQuota((d, c) => b({
            usage: d,
            quota: c
        }), a))
    });
    "undefined" === typeof HTMLCollection || HTMLCollection.prototype[Symbol.iterator] || (HTMLCollection.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof NodeList || NodeList.prototype[Symbol.iterator] || (NodeList.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof DOMTokenList || DOMTokenList.prototype[Symbol.iterator] || (DOMTokenList.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof FileList || FileList.prototype[Symbol.iterator] || (FileList.prototype[Symbol.iterator] =
        function() {
            let b = 0;
            return {
                next: () => b >= this.length ? {
                    done: !0
                } : {
                    value: this.item(b++),
                    done: !1
                }
            }
        });
    "undefined" === typeof TextEncoder && (self.TextEncoder = class {
        constructor() {
            Object.defineProperty(this, "encoding", {
                value: "utf-8",
                writable: !1
            })
        }
        encode(b) {
            for (var a = b.length, d = -1, c = new Uint8Array(3 * a), e, k, h = 0; h !== a;) {
                e = b.charCodeAt(h);
                h += 1;
                if (55296 <= e && 56319 >= e) {
                    if (h === a) {
                        c[d += 1] = 239;
                        c[d += 1] = 191;
                        c[d += 1] = 189;
                        break
                    }
                    k = b.charCodeAt(h);
                    if (56320 <= k && 57343 >= k) {
                        if (e = 1024 * (e - 55296) + k - 56320 + 65536, h += 1, 65535 < e) {
                            c[d += 1] = 240 |
                                e >>> 18;
                            c[d += 1] = 128 | e >>> 12 & 63;
                            c[d += 1] = 128 | e >>> 6 & 63;
                            c[d += 1] = 128 | e & 63;
                            continue
                        }
                    } else {
                        c[d += 1] = 239;
                        c[d += 1] = 191;
                        c[d += 1] = 189;
                        continue
                    }
                }
                127 >= e ? c[d += 1] = 0 | e : (2047 >= e ? c[d += 1] = 192 | e >>> 6 : (c[d += 1] = 224 | e >>> 12, c[d += 1] = 128 | e >>> 6 & 63), c[d += 1] = 128 | e & 63)
            }
            return new Uint8Array(c.buffer.slice(0, d + 1))
        }
        toString() {
            return "[object TextEncoder]"
        }
    }, TextEncoder[Symbol.toStringTag] = "TextEncoder");
    if ("undefined" === typeof TextDecoder) {
        function b(c) {
            const e = c[Symbol.iterator]();
            return {
                next: k => e.next(),
                [Symbol.iterator]() {
                    return this
                }
            }
        }

        function a(c) {
            c = c.next();
            if (c.done) throw Error("unexpected end of input");
            if (0 != (c.value & 192 ^ 128)) throw Error("invalid byte");
            return c.value & 63
        }
        const d = new Map;
        d.set("utf-8", (c, e) => {
            if (c.buffer) var k = new Uint8Array(c.buffer, c.byteOffset, c.byteLength);
            else if (k instanceof ArrayBuffer) k = new Uint8Array(c);
            else throw Error("Invalid parameter");
            c = b(k);
            k = [];
            try {
                for (const h of c) {
                    let p;
                    if (127 > h) p = h & 127;
                    else if (223 > h) p = (h & 31) << 6 | a(c);
                    else if (239 > h) p = (h & 15) << 12 | a(c) << 6 | a(c);
                    else if (247 > h) p = (h & 7) << 18 | a(c) <<
                        12 | a(c) << 6 | a(c);
                    else throw Error("Invalid character");
                    k.push(String.fromCodePoint(p))
                }
            } catch (h) {
                if (e) throw h;
                k.push("\ufffd")
            }
            return k.join("")
        });
        d.set("utf8", d.get("utf-8"));
        d.set("utf-16le", (c, e) => {
            throw Error("utf-16le decoder not implemented");
        });
        self.TextDecoder = class {
            constructor(c = "utf-8", e = {}) {
                const k = d.get(c);
                if (!k) throw Error(`TextDecoder polyfill does not support "${c}"`);
                Object.defineProperty(this, "fatal", {
                    value: !0 === e.fatal,
                    writable: !1
                });
                Object.defineProperty(this, "_decoder", {
                    value: k,
                    writable: !1
                });
                Object.defineProperty(this, "encoding", {
                    value: c,
                    writable: !1
                })
            }
            decode(c) {
                return this._decoder(c, this.fatal)
            }
            toString() {
                return "[object TextDecoder]"
            }
        };
        TextDecoder[Symbol.toStringTag] = "TextDecoder"
    }
    "undefined" === typeof self.isSecureContext && (self.isSecureContext = "https:" === location.protocol);
    "undefined" === typeof self.globalThis && (self.globalThis = self)
}
"use strict"; {
    const f = self.C3;

    function b(a) {
        let d = f.GetCallStack();
        console.error("Assertion failure: " + a + "\n\nStack trace:\n" + d)
    }
    self.assert = function(a, d) {
        a || b(d)
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X;
    f.IsNumber = function(d) {
        return "number" === typeof d
    };
    f.IsFiniteNumber = function(d) {
        return f.IsNumber(d) && isFinite(d)
    };
    f.RequireNumber = function(d) {
        if (!f.IsNumber(d)) throw new TypeError("expected number");
    };
    f.RequireOptionalNumber = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireNumberInRange = function(d, c, e) {
        if (!f.IsNumber(d) || isNaN(d) || c > d || e < d) throw new RangeError("number outside of range");
    };
    f.RequireAllNumber = function(...d) {
        for (let c of d);
    };
    f.RequireFiniteNumber = function(d) {
        if (!f.IsFiniteNumber(d)) throw new TypeError("expected finite number");
    };
    f.RequireOptionalFiniteNumber = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllFiniteNumber = function(...d) {
        for (let c of d);
    };
    f.IsString = function(d) {
        return "string" === typeof d
    };
    f.RequireString = function(d) {
        if (!f.IsString(d)) throw new TypeError("expected string");
    };
    f.RequireOptionalString = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllString = function(...d) {
        for (let c of d);
    };
    f.IsSimpleObject = function(d) {
        return "object" !== typeof d || null === d ? !1 : (d = Object.getPrototypeOf(d)) ? d.constructor === Object : null ===
            d
    };
    f.RequireSimpleObject = function(d) {
        if (!f.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    f.RequireOptionalSimpleObject = function(d) {
        if (!f.IsNullOrUndefined(d) && !f.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    f.IsObject = function(d) {
        return "object" === typeof d && null !== d && !Array.isArray(d)
    };
    f.RequireObject = function(d) {
        if (!f.IsObject(d)) throw new TypeError("expected object");
    };
    f.RequireOptionalObject = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllObject = function(...d) {
        for (let c of d);
    };
    f.IsFileLike = function(d) {
        return f.IsInstanceOf(d, Blob) && "string" === typeof d.name
    };
    f.RequireFileLike = function(d) {
        if (!f.IsFileLike(d)) throw new TypeError("expected file");
    };
    f.RequireOptionalFileLike = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.IsArray = function(d) {
        return Array.isArray(d)
    };
    f.RequireArray = function(d) {
        if (!f.IsArray(d)) throw new TypeError("expected array");
    };
    f.RequireOptionalArray = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllArray = function(...d) {
        for (let c of d);
    };
    f.Is2DArray = function(d) {
        return f.IsArray(d) ?
            d.length ? f.IsArray(d[0]) ? !0 : !1 : !0 : !1
    };
    f.Require2DArray = function(d) {
        if (!f.Is2DArray(d)) throw new TypeError("expected 2d array");
        for (let c of d)
            if (!f.IsArray(c)) throw new TypeError("expected 2d array");
    };
    f.RequireOptional2DArray = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.IsFunction = function(d) {
        return "function" === typeof d
    };
    f.RequireFunction = function(d, c) {
        if (!f.IsFunction(d)) throw new TypeError("expected function");
        if (!f.IsNullOrUndefined(c) && d !== c) throw new TypeError("expected same function reference");
    };
    f.RequireOptionalFunction = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllFunction = function(...d) {
        for (let c of d);
    };
    f.RequireAnyFunction = function(d, ...c) {
        if (!f.IsFunction(d)) throw new TypeError("expected function");
        if (!c.length) throw Error("missing comparison functions");
        for (let e of c)
            if (!f.IsNullOrUndefined(e) && d === e) return;
        throw new TypeError("expected same function reference");
    };
    f.RequireOptionalAllFunction = function(...d) {
        if (!f.IsNullOrUndefined(d))
            for (let c of d);
    };
    f.IsInstanceOf = function(d,
        c) {
        return d instanceof c
    };
    f.IsInstanceOfAny = function(d, ...c) {
        for (let e of c)
            if (f.IsInstanceOf(d, e)) return !0;
        return !1
    };
    f.RequireInstanceOf = function(d, c) {
        if (!f.IsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    f.RequireOptionalInstanceOf = function(d, c) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllInstanceOf = function(d, ...c) {
        for (let e of c);
    };
    f.RequireAnyInstanceOf = function(d, ...c) {
        if (!f.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    f.RequireAnyOptionalInstanceOf = function(d, ...c) {
        if (!f.IsNullOrUndefined(d) &&
            !f.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    f.IsArrayOf = function(d, c) {
        for (let e of d)
            if (!f.IsInstanceOf(e, c)) return !1;
        return !0
    };
    f.IsArrayOfFiniteNumbers = function(d) {
        for (let c of d)
            if (!f.IsFiniteNumber(c)) return !1;
        return !0
    };
    f.RequireArrayOf = function(d, c) {
        for (let e of d);
    };
    f.RequireOptionalArrayOf = function(d, c) {
        if (!f.IsNullOrUndefined(d))
            for (let e of d);
    };
    f.RequireArrayOfAny = function(d, ...c) {
        for (let e of d);
    };
    f.RequireOptionalArrayOfAny = function(d, ...c) {
        if (!f.IsNullOrUndefined(d))
            for (let e of d);
    };
    f.IsDOMNode = function(d, c) {
        return f.IsNullOrUndefined(d) || !f.IsString(d.nodeName) ? !1 : !c || f.equalsNoCase(d.nodeName, c)
    };
    f.RequireDOMNode = function(d, c) {
        if (f.IsNullOrUndefined(d) || !f.IsString(d.nodeName)) throw new TypeError("expected DOM node");
        if (c && !f.equalsNoCase(d.nodeName, c)) throw new TypeError(`expected DOM '${c}' node`);
    };
    f.RequireOptionalDOMNode = function(d, c) {
        f.IsNullOrUndefined(d)
    };
    f.IsHTMLElement = function(d, c) {
        return f.IsNullOrUndefined(d) || !f.IsString(d.tagName) ? !1 : !c || f.equalsNoCase(d.tagName,
            c)
    };
    f.RequireHTMLElement = function(d, c) {
        if (f.IsNullOrUndefined(d) || !f.IsString(d.tagName)) throw new TypeError("expected HTML element");
        if (c && !f.equalsNoCase(d.tagName, c)) throw new TypeError(`expected HTML '${c}' element`);
    };
    f.RequireOptionalHTMLElement = function(d, c) {
        f.IsNullOrUndefined(d)
    };
    f.IsDrawable = function(d) {
        return f.IsHTMLElement(d, "img") || f.IsHTMLElement(d, "canvas") || f.IsHTMLElement(d, "video") || "undefined" !== typeof OffscreenCanvas && d instanceof OffscreenCanvas || "undefined" !== typeof ImageBitmap &&
            d instanceof ImageBitmap
    };
    f.RequireDrawable = function(d) {
        if (!f.IsDrawable(d)) throw new TypeError("expected drawable");
    };
    f.RequireOptionalDrawable = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.IsDrawableOrImageData = function(d) {
        return d instanceof ImageData ? !0 : f.IsDrawable(d)
    };
    f.RequireDrawableOrImageData = function(d) {
        if (!f.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    f.RequireOptionalDrawableOrImageData = function(d) {
        if (!f.IsNullOrUndefined(d) && !f.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    f.IsStringLike = function(d) {
        return "string" === typeof d || d instanceof f.HtmlString || d instanceof f.BBString
    };
    f.RequireStringLike = function(d) {
        if (!f.IsStringLike(d)) throw new TypeError("expected string-like");
    };
    f.RequireOptionalStringLike = function(d) {
        f.IsNullOrUndefined(d)
    };
    f.RequireAllStringLike = function(...d) {
        for (let c of d);
    };
    f.RequireOverride = function() {
        throw Error("must be overridden");
    };
    f.NotYetImplemented = function() {
        throw Error("not yet implemented");
    };
    f.IsDefined = function(d, ...c) {
        if ("undefined" ===
            typeof d) return !1;
        for (let e of c) {
            if ("undefined" === typeof d[e]) return !1;
            d = d[e]
        }
        return !0
    };
    f.IsNullOrUndefined = function(d) {
        return "undefined" === typeof d || null === d
    };
    f.AreArrayElementsOfSameType = function(d) {
        let c = d[0].constructor;
        for (let e of d)
            if (e.constructor !== c) return !1;
        return c
    };
    f.AreArrayElementsOfType = function(d, c) {
        for (let e of d)
            if (!(e instanceof c)) return !1;
        return !0
    };
    const a = Object.getPrototypeOf(Uint8Array);
    f.IsTypedArray = function(d) {
        return f.IsInstanceOf(d, a)
    };
    f.RequireTypedArray = function(d) {};
    f.WeakRequireTypedArray = function(d) {
        f.WeakRequireInstanceOf(d, a)
    };
    f.WeakRequireAnyInstanceOf = function(d, ...c) {
        if (!f.WeakIsAnyInstanceOf(d, ...c)) throw new TypeError("unexpected type");
    };
    f.WeakIsAnyInstanceOf = function(d, ...c) {
        for (const e of c)
            if (f.WeakIsInstanceOf(d, e)) return !0;
        return !1
    };
    f.WeakRequireInstanceOf = function(d, c) {
        if (!f.WeakIsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    f.WeakIsInstanceOf = function(d, c) {
        for (; d = Object.getPrototypeOf(d);)
            if (d.constructor.name === c.name) return !0;
        return !1
    };
    b.RequireNumber = f.RequireNumber;
    b.RequireOptionalNumber = f.RequireOptionalNumber;
    b.RequireFiniteNumber = f.RequireFiniteNumber;
    b.RequireOptionalFiniteNumber = f.RequireOptionalFiniteNumber;
    b.RequireString = f.RequireString;
    b.RequireOptionalString = f.RequireOptionalString;
    b.RequireObject = f.RequireObject;
    b.RequireOptionalObject = f.RequireOptionalObject;
    b.RequireArray = f.RequireArray;
    b.RequireOptionalArray = f.RequireOptionalArray;
    b.RequireFunction = f.RequireFunction;
    b.RequireOptionalFunction = f.RequireOptionalFunction;
    b.RequireInstanceOf = f.RequireInstanceOf;
    b.RequireOptionalInstanceOf = f.RequireOptionalInstanceOf;
    b.IsNullOrUndefined = f.IsNullOrUndefined
}
"use strict"; {
    const f = self.C3,
        b = new Map;
    f.RafLog = function(r, ...x) {
        b.has(r) || b.set(r, -1); - 1 === b.get(r) && b.set(r, requestAnimationFrame(() => {
            console.log(`%c${r}`, "font-weight: bold", ...x);
            b.set(r, -1)
        }))
    };
    f.GetCallStack = function() {
        return Error().stack
    };
    f.Debugger = function() {
        debugger
    };
    f.cast = function(r, x) {
        return r && r instanceof x ? r : null
    };
    f.getName = function(r) {
        return "undefined" === typeof r ? "undefined" : null === r ? "null" : "boolean" === typeof r ? "<boolean>" : f.IsNumber(r) ? "<number>" : f.IsString(r) ? "<string>" : f.IsArray(r) ? "<array>" :
            "symbol" === typeof r ? "<" + r.toString() + ">" : f.IsFunction(r) ? r.name && "Function" !== r.name ? r.name : "<anonymous function>" : "object" === typeof r ? r.constructor && r.constructor.name && "Object" !== r.constructor.name ? r.constructor.name : "<anonymous object>" : "<unknown>"
    };
    f.getType = function(r) {
        return null === r ? "null" : Array.isArray(r) ? "array" : typeof r
    };
    f.range = function*(r, x) {
        if (!isFinite(Math.abs(r - x))) throw Error("Invalid parameters");
        if (r > x)
            for (--r; r >= x; r--) yield r;
        else
            for (; r < x; r++) yield r
    };

    function a(r, x) {
        r = f.getType(r);
        x = f.getType(x);
        return "null" === r || "null" === x ? !0 : "undefined" === r || "undefined" === x ? !1 : r === x
    }
    let d = new Map,
        c = new Map,
        e = new WeakMap,
        k = new WeakMap;
    f.DefendHandler = {};
    const h = new Set(["then", "splice"]);

    function p(r) {
        console.warn("[Defence] " + r + " @", f.GetCallStack())
    }
    f.DefendHandler.get = function(r, x) {
        x in r || "symbol" === typeof x || h.has(x) || p(`Accessed missing property '${x}' from defended object '${f.getName(r)}', returning undefined`);
        k.has(r) && "symbol" !== typeof x && !h.has(x) && p(`Accessed property '${x}' on a released object '${f.getName(r)}'\nObject was originally released at: ${k.get(r)})\nCall stack at access: `);
        return r[x]
    };
    f.DefendHandler.set = function(r, x, z) {
        x in r || d.has(r) || p(`Set non-existent property '${x}' to '${z}' on defended object '${f.getName(r)}'`);
        a(r[x], z) || d.has(r) || p(`Set '${f.getType(r[x])}' property '${x}' to type '${f.getType(z)}' on defended object '${f.getName(r)}'`);
        k.has(r) && p(`Set property '${x}' on a released object '${f.getName(r)}'\nObject was originally released at: ${k.get(r)})\nCall stack at access: `);
        r[x] = z;
        return !0
    };
    f.DefendHandler.deleteProperty = function(r, x) {
        throw new ReferenceError(`Cannot delete property '${x}' from defended object '${f.getName(r)}'`);
    };
    f.DefendHandler.defineProperty = function(r, x, z) {
        throw new ReferenceError(`Cannot define property '${x}' on defended object '${f.getName(r)}'`);
    };
    f.DefendHandler.enumerate = function(r) {
        throw new ReferenceError(`Cannot enumerate defended object '${f.getName(r)}'`);
    };
    let n = -1;

    function m() {
        n = -1;
        if (0 < d.size || 0 < c.size) {
            let r = [...new Set([...d.keys()].map(x => f.getName(x)))].join();
            console.warn(`An object derived from DefendedBase was not protected with debugDefend(). This will disable some checks. See the coding guidelines! Possible affected class names: ${r}`);
            d.clear();
            c.clear()
        }
    }
    f.DefendedBase = class {
        constructor() {
            if (f.isDebugDefend && f.Supports.Proxies) {
                var r = new.target;
                r = Object.create(r.prototype);
                var x = new Proxy(r, f.DefendHandler);
                d.set(r, x);
                c.set(x, r);
                e.set(x, r); - 1 === n && (n = requestAnimationFrame(m));
                return x
            }
        }
    };
    f.debugDefend = function(r) {
        if (f.isDebugDefend && f.Supports.Proxies && r instanceof f.DefendedBase) {
            if (!c.has(r)) return r;
            let x = c.get(r);
            c.delete(r);
            d.delete(x);
            return r
        }
        return f.isDebug ? Object.seal(r) : r
    };
    f.New = function(r, ...x) {
        let z;
        try {
            z = new r(...x)
        } catch (C) {
            throw c.clear(),
                d.clear(), C;
        }
        f.isDebugDefend && u(r, z);
        return f.debugDefend(z)
    };
    f.Release = function(r) {
        (r = e.get(r)) && k.set(r, f.GetCallStack())
    };
    f.WasReleased = function(r) {
        return (r = e.get(r)) ? !!k.get(r) : !1
    };
    let t = new Map;

    function q(r) {
        let x = new Set;
        for (let z in r) x.add(z);
        return x
    }

    function u(r, x) {
        x = q(x);
        let z = t.get(r);
        if (z) {
            let C = [];
            for (let w of z.values()) x.has(w) ? x.delete(w) : C.push(w);
            f.appendArray(C, [...x]);
            C.length && console.warn(`[Defence] '${f.getName(r)}' constructor creates inconsistent properties: ${C.join(", ")}`)
        } else t.set(r,
            x)
    }
    f.PerfMark = class {
        constructor(r) {
            this._name = "";
            r && this.start(r)
        }
        start(r) {
            this._name = r;
            performance.mark(this._name + "-Start")
        }
        end() {
            performance.mark(this._name + "-End");
            performance.measure(this._name, this._name + "-Start", this._name + "-End")
        }
        next(r) {
            this.end();
            this._name = r;
            performance.mark(this._name + "-Start")
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = 2 * Math.PI,
        a = Math.PI / 180,
        d = 180 / Math.PI;
    f.wrap = function(k, h, p) {
        k = Math.floor(k);
        h = Math.floor(h);
        p = Math.floor(p);
        return k < h ? (k = p - (h - k) % (p - h), k === p ? 0 : k) : h + (k - h) % (p - h)
    };
    f.mapToRange = function(k, h, p, n, m) {
        return (k - h) * (m - n) / (p - h) + n
    };
    f.normalize = function(k, h, p) {
        return (k - h) / (p - h)
    };
    f.clamp = function(k, h, p) {
        return k < h ? h : k > p ? p : k
    };
    f.clampAngle = function(k) {
        k %= b;
        0 > k && (k += b);
        return k
    };
    f.toRadians = function(k) {
        return k * a
    };
    f.toDegrees = function(k) {
        return k * d
    };
    f.distanceTo = function(k, h, p, n) {
        return Math.hypot(p -
            k, n - h)
    };
    f.distanceSquared = function(k, h, p, n) {
        k = p - k;
        h = n - h;
        return k * k + h * h
    };
    f.angleTo = function(k, h, p, n) {
        return Math.atan2(n - h, p - k)
    };
    f.angleDiff = function(k, h) {
        if (k === h) return 0;
        k = Math.sin(k) * Math.sin(h) + Math.cos(k) * Math.cos(h);
        return 1 <= k ? 0 : -1 >= k ? Math.PI : Math.acos(k)
    };
    f.angleRotate = function(k, h, p) {
        let n = Math.sin(k),
            m = Math.cos(k),
            t = Math.sin(h),
            q = Math.cos(h);
        return Math.acos(n * t + m * q) > p ? 0 < m * t - n * q ? f.clampAngle(k + p) : f.clampAngle(k - p) : f.clampAngle(h)
    };
    f.angleClockwise = function(k, h) {
        return 0 >= Math.cos(k) * Math.sin(h) -
            Math.sin(k) * Math.cos(h)
    };
    f.angleLerp = function(k, h, p, n = 0) {
        let m = f.angleDiff(k, h);
        n *= b;
        return f.angleClockwise(h, k) ? f.clampAngle(k + (m + n) * p) : f.clampAngle(k - (m + n) * p)
    };
    f.angleLerpClockwise = function(k, h, p, n = 0) {
        const m = f.angleDiff(k, h);
        n *= b;
        return f.angleClockwise(h, k) ? f.clampAngle(k + (m + n) * p) : f.clampAngle((b - m + n) * p)
    };
    f.angleLerpAntiClockwise = function(k, h, p, n = 0) {
        const m = f.angleDiff(k, h);
        n *= b;
        return f.angleClockwise(h, k) ? f.clampAngle((-b + m - n) * p) : f.clampAngle(k - (m + n) * p)
    };
    f.lerp = function(k, h, p) {
        return k + p * (h -
            k)
    };
    f.unlerp = function(k, h, p) {
        return k === h ? 0 : (p - k) / (h - k)
    };
    f.relerp = function(k, h, p, n, m) {
        return f.lerp(n, m, f.unlerp(k, h, p))
    };
    f.qarp = function(k, h, p, n) {
        return f.lerp(f.lerp(k, h, n), f.lerp(h, p, n), n)
    };
    f.cubic = function(k, h, p, n, m) {
        return f.lerp(f.qarp(k, h, p, m), f.qarp(h, p, n, m), m)
    };
    f.cosp = function(k, h, p) {
        return (k + h + (k - h) * Math.cos(p * Math.PI)) / 2
    };
    f.isPOT = function(k) {
        return 0 < k && 0 === (k - 1 & k)
    };
    f.nextHighestPowerOfTwo = function(k) {
        --k;
        for (let h = 1; 32 > h; h <<= 1) k |= k >> h;
        return k + 1
    };
    f.roundToNearestFraction = function(k, h) {
        return Math.round(k *
            h) / h
    };
    f.floorToNearestFraction = function(k, h) {
        return Math.floor(k * h) / h
    };
    f.round6dp = function(k) {
        return Math.round(1E6 * k) / 1E6
    };
    f.toFixed = function(k, h) {
        k = k.toFixed(h);
        for (h = k.length - 1; 0 <= h && "0" === k.charAt(h); --h);
        0 <= h && "." === k.charAt(h) && --h;
        return 0 > h ? k : k.substr(0, h + 1)
    };
    f.PackRGB = function(k, h, p) {
        return f.clamp(k, 0, 255) | f.clamp(h, 0, 255) << 8 | f.clamp(p, 0, 255) << 16
    };
    f.PackRGBAEx = function(k, h, p, n) {
        k = f.clamp(Math.floor(1024 * k), -8192, 8191);
        h = f.clamp(Math.floor(1024 * h), -8192, 8191);
        p = f.clamp(Math.floor(1024 * p), -8192, 8191);
        n = f.clamp(Math.floor(1023 * n), 0, 1023);
        0 > k && (k += 16384);
        0 > h && (h += 16384);
        0 > p && (p += 16384);
        return -(274877906944 * k + 16777216 * h + 1024 * p + n)
    };
    f.PackRGBEx = function(k, h, p) {
        return f.PackRGBAEx(k, h, p, 1)
    };

    function c(k) {
        return 0 === k && 0 > 1 / k
    }
    f.GetRValue = function(k) {
        if (0 <= k) return (k & 255) / 255;
        k = Math.floor(-k / 274877906944);
        8191 < k && (k -= 16384);
        return k / 1024
    };
    f.GetGValue = function(k) {
        if (0 <= k) return ((k & 65280) >> 8) / 255;
        k = Math.floor(-k % 274877906944 / 16777216);
        8191 < k && (k -= 16384);
        return k / 1024
    };
    f.GetBValue = function(k) {
        if (0 <=
            k) return ((k & 16711680) >> 16) / 255;
        k = Math.floor(-k % 16777216 / 1024);
        8191 < k && (k -= 16384);
        return k / 1024
    };
    f.GetAValue = function(k) {
        return c(k) ? 0 : 0 <= k ? 1 : Math.floor(-k % 1024) / 1023
    };
    f.greatestCommonDivisor = function(k, h) {
        k = Math.floor(k);
        for (h = Math.floor(h); 0 !== h;) {
            let p = h;
            h = k % h;
            k = p
        }
        return k
    };
    const e = [
        [3, 2],
        [4, 3],
        [5, 4],
        [5, 3],
        [6, 5],
        [14, 9],
        [16, 9],
        [16, 10],
        [21, 9]
    ];
    f.getAspectRatio = function(k, h) {
        k = Math.floor(k);
        h = Math.floor(h);
        if (k === h) return [1, 1];
        for (var p of e) {
            let n = k / p[0] * p[1];
            if (1 > Math.abs(h - n)) return p.slice(0);
            n = k / p[1] * p[0];
            if (1 > Math.abs(h - n)) return [p[1], p[0]]
        }
        p = f.greatestCommonDivisor(k, h);
        return [k / p, h / p]
    };
    f.segmentsIntersect = function(k, h, p, n, m, t, q, u) {
        var r = Math.min(k, p),
            x = Math.max(m, q);
        if (Math.max(k, p) < Math.min(m, q) || r > x) return !1;
        r = Math.min(h, n);
        x = Math.max(t, u);
        if (Math.max(h, n) < Math.min(t, u) || r > x) return !1;
        r = m - k + q - p;
        x = t - h + u - n;
        k = p - k;
        h = n - h;
        m = q - m;
        t = u - t;
        u = Math.abs(h * m - t * k);
        return Math.abs(m * x - t * r) > u ? !1 : Math.abs(k * x - h * r) <= u
    };
    f.segmentsIntersectPreCalc = function(k, h, p, n, m, t, q, u, r, x, z, C) {
        const w = Math.max(r, z);
        if (t < Math.min(r, z) || m > w) return !1;
        m = Math.max(x, C);
        if (u < Math.min(x, C) || q > m) return !1;
        q = r - k + z - p;
        u = x - h + C - n;
        k = p - k;
        h = n - h;
        r = z - r;
        x = C - x;
        C = Math.abs(h * r - x * k);
        return Math.abs(r * u - x * q) > C ? !1 : Math.abs(k * u - h * q) <= C
    };
    f.segmentIntersectsQuad = function(k, h, p, n, m) {
        const t = Math.min(k, p),
            q = Math.max(k, p),
            u = Math.min(h, n),
            r = Math.max(h, n),
            x = m.getTlx(),
            z = m.getTly(),
            C = m.getTrx(),
            w = m.getTry(),
            B = m.getBrx(),
            F = m.getBry(),
            J = m.getBlx();
        m = m.getBly();
        return f.segmentsIntersectPreCalc(k, h, p, n, t, q, u, r, x, z, C, w) || f.segmentsIntersectPreCalc(k,
            h, p, n, t, q, u, r, C, w, B, F) || f.segmentsIntersectPreCalc(k, h, p, n, t, q, u, r, B, F, J, m) || f.segmentsIntersectPreCalc(k, h, p, n, t, q, u, r, J, m, x, z)
    };
    f.segmentIntersectsAnyN = function(k, h, p, n, m) {
        const t = Math.min(k, p),
            q = Math.max(k, p),
            u = Math.min(h, n),
            r = Math.max(h, n);
        let x = 0;
        for (let z = m.length - 4; x <= z; x += 2)
            if (f.segmentsIntersectPreCalc(k, h, p, n, t, q, u, r, m[x], m[x + 1], m[x + 2], m[x + 3])) return !0;
        return f.segmentsIntersectPreCalc(k, h, p, n, t, q, u, r, m[x], m[x + 1], m[0], m[1])
    };
    f.rayIntersect = function(k, h, p, n, m, t, q, u) {
        p -= k;
        t = u - t;
        const r = p *
            t - (n - h) * (q - m);
        if (0 === r) return 2;
        n = ((h - n) * (q - k) + p * (u - h)) / r;
        return 0 < n && 1.000001 > n ? (t * (q - k) + (m - q) * (u - h)) / r : 2
    };
    f.rayIntersectExtended = function(k, h, p, n, m, t, q, u, r) {
        const x = (q - m) * r;
        r *= u - t;
        return f.rayIntersect(k, h, p, n, m - x, t - r, q + x, u + r)
    };
    f.isPointInTriangleInclusive = function(k, h, p, n, m, t, q, u) {
        m -= p;
        t -= n;
        q -= p;
        u -= n;
        k -= p;
        p = h - n;
        h = m * m + t * t;
        n = m * q + t * u;
        m = m * k + t * p;
        t = q * q + u * u;
        q = q * k + u * p;
        u = 1 / (h * t - n * n);
        t = (t * m - n * q) * u;
        m = (h * q - n * m) * u;
        return 0 <= t && 0 <= m && 1 >= t + m
    };
    f.triangleCartesianToBarycentric = function(k, h, p, n, m, t, q, u) {
        m -= p;
        t -=
            n;
        q -= p;
        u -= n;
        k -= p;
        const r = h - n;
        h = m * m + t * t;
        n = m * q + t * u;
        p = q * q + u * u;
        m = k * m + r * t;
        t = k * q + r * u;
        q = h * p - n * n;
        u = (p * m - n * t) / q;
        m = (h * t - n * m) / q;
        return [1 - u - m, u, m]
    };
    f.triangleBarycentricToCartesian = function(k, h, p, n, m, t, q, u, r) {
        return [k * n + h * t + p * u, k * m + h * q + p * r]
    }
}
"use strict"; {
    const f = self.C3;
    let b = null,
        a = "";
    if ("undefined" !== typeof document) {
        b = document;
        const m = document.querySelector("base");
        if (a = m && m.hasAttribute("href") ? m.getAttribute("href") : "") a.startsWith("/") && (a = a.substr(1)), a.endsWith("/") || (a += "/")
    }
    f.GetBaseHref = function() {
        return a
    };
    f.GetBaseURL = function() {
        if (!b) return "";
        const m = b.location;
        return f.GetPathFromURL(m.origin + m.pathname) + a
    };
    f.GetPathFromURL = function(m) {
        if (!m.length || m.endsWith("/") || m.endsWith("\\")) return m;
        const t = Math.max(m.lastIndexOf("/"), m.lastIndexOf("\\"));
        return -1 === t ? "" : m.substr(0, t + 1)
    };
    f.GetFilenameFromURL = function(m) {
        if (!m.length) return m;
        if (m.endsWith("/") || m.endsWith("\\")) return "";
        const t = Math.max(m.lastIndexOf("/"), m.lastIndexOf("\\"));
        return -1 === t ? m : m.substr(t + 1)
    };
    f.DataTransferHasFiles = function(m) {
        if (m.types)
            for (let t = 0; t < m.types.length; t++)
                if ("Files" === m.types[t] || "application/x-c3-file" === m.types[t]) return !0;
        return !1
    };
    const d = ["alphabetical"],
        c = {
            filter: null,
            sort: null
        };
    f.FilterAndCloneFiles = async function(m, t) {
        t = Object.assign({}, c, t);
        if (!f.IsFunction(t.filter)) throw Error('"filter" option is not a function');
        m = Array.from(m).filter(q => 0 !== q.size).filter(q => t.filter(q)).map(async q => {
            try {
                return await f.CloneFile(q)
            } catch (u) {
                return null
            }
        });
        m = (await Promise.all(m)).filter(q => q);
        if (t && t.sort) switch (t.sort) {
            case "alphabetical":
                m.sort((q, u) => q.name.localeCompare(u.name));
                break;
            default:
                throw Error(`invalid sort mode "${t.sort}", valid modes are "${d}"`);
        }
        return m
    };
    f.DataTransferFilterFiles = async function(m, t) {
        return f.FilterAndCloneFiles(m.files, t)
    };
    f.IsFileAnImage = function(m) {
        return m.type ? -1 !== m.type.search(/image\/.*/) :
            -1 !== f.MimeType.GetForFileExtension(f.GetFileExtension(m.name)).GetString().search(/image\/.*/)
    };
    f.IsFileAnSVG = function(m) {
        return "image/svg+xml" === m.type
    };
    f.IsFileAMultiImageContainer = function(m) {
        return m.type ? f.MimeType.Get(m.type).IsAnimatedImage() : f.MimeType.GetForFileExtension(f.GetFileExtension(m.name)).IsAnimatedImage()
    };
    f.GetFileExtension = function(m) {
        let t = m.lastIndexOf(".");
        return 1 > t ? "" : m.substr(t)
    };
    f.GetFileNamePart = function(m) {
        let t = m.lastIndexOf(".");
        return 1 > t ? m : m.substr(0, t)
    };
    f.NormalizeFileSeparator =
        function(m) {
            return m.replace(/\\/g, "/")
        };
    f.ParseFilePath = function(m) {
        m = f.NormalizeFileSeparator(m);
        let t = /^\w:\//.exec(m);
        t ? (t = t[0], m = m.slice(3), "/" !== m[0] && (m = "/" + m)) : t = "";
        m = m.replace(/\/{2,}/g, "/");
        1 < m.length && "/" === m.slice(-1) && (m = m.slice(0, -1));
        var q = m.lastIndexOf("/") + 1;
        let u = "",
            r = m,
            x = "";
        0 < q && (u = m.slice(0, q), r = m.slice(q));
        m = r;
        q = r.lastIndexOf(".");
        0 < q && (x = r.slice(q), m = r.slice(0, -x.length));
        return {
            dir: u,
            base: r,
            name: m,
            root: t,
            ext: x,
            full: t + u + r
        }
    };
    f.Wait = function(m, t) {
        return new Promise((q, u) => {
            self.setTimeout(q,
                m, t)
        })
    };
    f.swallowException = function(m) {
        try {
            m()
        } catch (t) {
            f.isDebug && console.warn("Swallowed exception: ", t)
        }
    };
    f.noop = function() {};
    f.equalsNoCase = function(m, t) {
        return "string" !== typeof m || "string" !== typeof t ? !1 : m === t || m.normalize().toLowerCase() === t.normalize().toLowerCase()
    };
    f.equalsCase = function(m, t) {
        return "string" !== typeof m || "string" !== typeof t ? !1 : m === t ? !0 : m.normalize() === t.normalize()
    };
    f.typedArraySet16 = function(m, t, q) {
        m[q++] = t[0];
        m[q++] = t[1];
        m[q++] = t[2];
        m[q++] = t[3];
        m[q++] = t[4];
        m[q++] = t[5];
        m[q++] =
            t[6];
        m[q++] = t[7];
        m[q++] = t[8];
        m[q++] = t[9];
        m[q++] = t[10];
        m[q++] = t[11];
        m[q++] = t[12];
        m[q++] = t[13];
        m[q++] = t[14];
        m[q] = t[15]
    };
    f.truncateArray = function(m, t) {
        m.length = t
    };
    f.clearArray = function(m) {
        m && 0 !== m.length && f.truncateArray(m, 0)
    };
    f.clear2DArray = function(m) {
        if (m) {
            for (let t = 0; t < m.length; t++) f.truncateArray(m[t], 0);
            f.truncateArray(m, 0)
        }
    };
    f.extendArray = function(m, t, q) {
        t |= 0;
        var u = m.length;
        if (!(t <= u))
            for (; u < t; ++u) m.push(q)
    };
    f.resizeArray = function(m, t, q) {
        t |= 0;
        const u = m.length;
        t < u ? f.truncateArray(m, t) : t > u && f.extendArray(m,
            t, q)
    };
    f.shallowAssignArray = function(m, t) {
        f.clearArray(m);
        f.appendArray(m, t)
    };
    f.appendArray = function(m, t) {
        if (1E4 > t.length) m.push(...t);
        else
            for (let q = 0, u = t.length; q < u; ++q) m.push(t[q])
    };
    f.arrayRemove = function(m, t) {
        t = Math.floor(t);
        if (!(0 > t || t >= m.length)) {
            for (var q = m.length - 1; t < q; ++t) m[t] = m[t + 1];
            f.truncateArray(m, q)
        }
    };
    f.arrayFindRemove = function(m, t) {
        t = m.indexOf(t);
        0 <= t && m.splice(t, 1)
    };
    f.arraysEqual = function(m, t) {
        let q = m.length;
        if (t.length !== q) return !1;
        for (let u = 0; u < q; ++u)
            if (m[u] !== t[u]) return !1;
        return !0
    };
    f.arrayFilterOut = function(m, t) {
        let q = [],
            u = 0;
        for (let r = 0, x = m.length; r < x; ++r) {
            let z = m[r];
            t(z) ? q.push(z) : (m[u] = z, ++u)
        }
        f.truncateArray(m, u);
        return q
    };
    f.arrayRemoveAllInSet = function(m, t) {
        const q = m.length;
        let u = 0;
        for (let r = 0, x = m.length; r < x; ++r) {
            let z = m[r];
            t.has(z) || (m[u++] = z)
        }
        f.truncateArray(m, u);
        return q - u
    };
    f.isArrayIndexInBounds = function(m, t) {
        return m !== Math.floor(m) ? !1 : 0 <= m && m < t.length
    };
    f.validateArrayIndex = function(m, t) {
        if (!f.isArrayIndexInBounds(m, t)) throw new RangeError("array index out of bounds");
    };
    f.cloneArray = function(m) {
        return m.slice()
    };
    f.deepCloneArray = function(m, t) {
        let q = [];
        for (let u of m)
            if (f.IsObject(u)) {
                m = t(u);
                if (!m) throw Error("missing clone");
                if (m.constructor !== u.constructor) throw Error("object is not a clone");
                q.push(m)
            } else f.IsArray(u) ? q.push(f.deepCloneArray(u, t)) : q.push(u);
        return q
    };
    f.clone2DArray = function(m) {
        let t = [];
        for (let q of m) t.push(q.slice());
        return t
    };
    f.mergeSets = function(m, t) {
        return new Set([...m, ...t])
    };
    f.mergeSetsInPlace = function(m, t) {
        for (const q of t) m.add(q);
        return m
    };
    f.first = function(m) {
        for (let t of m) return t;
        return null
    };
    f.xor = function(m, t) {
        return !m !== !t
    };
    f.compare = function(m, t, q) {
        switch (t) {
            case 0:
                return m === q;
            case 1:
                return m !== q;
            case 2:
                return m < q;
            case 3:
                return m <= q;
            case 4:
                return m > q;
            case 5:
                return m >= q;
            default:
                return !1
        }
    };
    f.hasAnyOwnProperty = function(m) {
        for (let t in m)
            if (m.hasOwnProperty(t)) return !0;
        return !1
    };
    f.PromiseAllWithProgress = function(m, t) {
        return m.length ? new Promise((q, u) => {
            const r = [];
            let x = 0,
                z = !1;
            for (let C = 0, w = m.length; C < w; ++C) r.push(void 0),
                m[C].then(B => {
                    z || (r[C] = B, ++x, x === m.length ? q(r) : t(x, m.length))
                }).catch(B => {
                    z = !0;
                    u(B)
                })
        }) : Promise.resolve([])
    };
    let e = [];
    f.AddLibraryMemoryCallback = function(m) {
        e.push(m)
    };
    f.GetEstimatedLibraryMemoryUsage = function() {
        let m = 0;
        for (let t of e) {
            let q = t();
            m += q
        }
        return Math.floor(m)
    };
    let k = 1;
    const h = new Map,
        p = new MessageChannel;
    p.port2.onmessage = function(m) {
        const t = m.data,
            q = h.get(t);
        h.delete(t);
        q && q(m.timeStamp)
    };
    f.RequestUnlimitedAnimationFrame = function(m) {
        const t = k++;
        h.set(t, m);
        p.port1.postMessage(t);
        return t
    };
    f.CancelUnlimitedAnimationFrame = function(m) {
        h.delete(m)
    };
    f.PostTask = f.RequestUnlimitedAnimationFrame;
    f.WaitForNextTask = function() {
        return new Promise(m => f.PostTask(m))
    };
    const n = new Set;
    f.RequestPostAnimationFrame = function(m) {
        const t = self.requestAnimationFrame(async q => {
            await f.WaitForNextTask();
            n.has(t) && (n.delete(t), m(q))
        });
        n.add(t);
        return t
    };
    f.CancelPostAnimationFrame = function(m) {
        n.has(m) && (self.cancelAnimationFrame(m), n.delete(m))
    }
}
"use strict"; {
    const f = self.C3;
    f.IsAbsoluteURL = function(b) {
        return /^(?:[a-z\-]+:)?\/\//.test(b) || "data:" === b.substr(0, 5) || "blob:" === b.substr(0, 5)
    };
    f.IsRelativeURL = function(b) {
        return !f.IsAbsoluteURL(b)
    };
    f.ThrowIfNotOk = function(b) {
        if (!b.ok) throw Error(`fetch '${b.url}' response returned ${b.status} ${b.statusText}`);
    };
    f.FetchOk = function(b, a) {
        return fetch(b, a).then(d => {
            f.ThrowIfNotOk(d);
            return d
        })
    };
    f.FetchText = function(b) {
        return f.FetchOk(b).then(a => a.text())
    };
    f.FetchJson = function(b) {
        return f.FetchOk(b).then(a => a.json())
    };
    f.FetchBlob = function(b) {
        return f.FetchOk(b).then(a => a.blob())
    };
    f.FetchArrayBuffer = function(b) {
        return f.FetchOk(b).then(a => a.arrayBuffer())
    };
    f.FetchImage = function(b) {
        return new Promise((a, d) => {
            const c = new Image;
            c.onload = () => a(c);
            c.onerror = e => d(e);
            c.src = b
        })
    };
    f.BlobToArrayBuffer = function(b) {
        return "function" === typeof b.arrayBuffer ? b.arrayBuffer() : new Promise((a, d) => {
            const c = new FileReader;
            c.onload = () => a(c.result);
            c.onerror = () => d(c.error);
            c.readAsArrayBuffer(b)
        })
    };
    f.BlobToString = function(b) {
        return "function" ===
            typeof b.text ? b.text() : new Promise((a, d) => {
                const c = new FileReader;
                c.onload = () => a(c.result);
                c.onerror = () => d(c.error);
                c.readAsText(b)
            })
    };
    f.BlobToJson = function(b) {
        return f.BlobToString(b).then(a => JSON.parse(a))
    };
    f.BlobToImage = async function(b, a) {
        b = URL.createObjectURL(b);
        try {
            const d = await f.FetchImage(b);
            URL.revokeObjectURL(b);
            b = "";
            a && "function" === typeof d.decode && await d.decode();
            return d
        } finally {
            b && URL.revokeObjectURL(b)
        }
    };
    f.CreateCanvas = function(b, a) {
        if ("undefined" !== typeof document && "function" ===
            typeof document.createElement) {
            const d = document.createElement("canvas");
            d.width = b;
            d.height = a;
            return d
        }
        return new OffscreenCanvas(b, a)
    };
    f.CanvasToBlob = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = f.clamp(d, 0, 1);
        return b.toBlob ? new Promise(c => b.toBlob(c, a, d)) : b.convertToBlob ? b.convertToBlob({
            type: a,
            quality: d
        }) : f.Asyncify(() => f.CanvasToBlobSync(b, a, d))
    };
    f.CanvasToBlobSync = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = f.clamp(d, 0, 1);
        return f.DataURIToBinaryBlobSync(b.toDataURL(a,
            d))
    };
    f.DataURIToBinaryBlobSync = function(b) {
        b = f.ParseDataURI(b);
        return f.BinaryStringToBlob(b.data, b.mime_type)
    };
    f.ParseDataURI = function(b) {
        if ("data:" !== b.substr(0, 5)) throw new URIError("expected data: uri");
        var a = b.indexOf(",");
        if (0 > a) throw new URIError("expected comma in data: uri");
        var d = b.substring(5, a);
        b = b.substring(a + 1);
        a = d.split(";");
        d = a[0] || "";
        let c = a[2];
        b = "base64" === a[1] || "base64" === c ? atob(b) : decodeURIComponent(b);
        return {
            mime_type: d,
            data: b
        }
    };
    f.BinaryStringToBlob = function(b, a) {
        var d = b.length;
        let c = d >> 2,
            e = new Uint8Array(d),
            k = new Uint32Array(e.buffer, 0, c),
            h, p;
        for (p = h = 0; h < c; ++h) k[h] = b.charCodeAt(p++) | b.charCodeAt(p++) << 8 | b.charCodeAt(p++) << 16 | b.charCodeAt(p++) << 24;
        for (d &= 3; d--;) e[p] = b.charCodeAt(p), ++p;
        return a ? new Blob([e], {
            type: a
        }) : new Blob([e])
    };
    f.DrawableToBlob = function(b, a, d) {
        const c = f.CreateCanvas(b.width, b.height);
        c.getContext("2d").drawImage(b, 0, 0);
        return f.CanvasToBlob(c, a, d)
    };
    f.ImageDataToBlobSync = function(b, a, d) {
        const c = f.CreateCanvas(b.width, b.height);
        c.getContext("2d").putImageData(b,
            0, 0);
        return f.CanvasToBlobSync(c, a, d)
    };
    f.ImageDataToBlob = function(b, a, d) {
        if (f.Supports.ImageBitmapOptions) return createImageBitmap(b, {
            premultiplyAlpha: "none"
        }).then(c => f.DrawableToBlob(c, a, d));
        if (f.Supports.ImageBitmap) return createImageBitmap(b).then(c => f.DrawableToBlob(c, a, d)); {
            const c = f.CreateCanvas(b.width, b.height);
            c.getContext("2d").putImageData(b, 0, 0);
            return f.CanvasToBlob(c, a, d)
        }
    };
    f.CopySet = function(b, a) {
        b.clear();
        for (const d of a) b.add(d)
    };
    f.MapToObject = function(b) {
        const a = Object.create(null);
        for (const [d, c] of b.entries()) a[d] = c;
        return a
    };
    f.ObjectToMap = function(b, a) {
        a.clear();
        for (const [d, c] of Object.entries(b)) a.set(d, c)
    };
    f.ToSuperJSON = function d(a) {
        if ("object" === typeof a && null !== a) {
            if (a instanceof Set) return {
                _c3type_: "set",
                data: [...a].map(c => d(c))
            };
            if (a instanceof Map) return {
                _c3type_: "map",
                data: [...a].map(c => [c[0], d(c[1])])
            }; {
                const c = Object.create(null);
                for (const [e, k] of Object.entries(a)) c[e] = d(k);
                return c
            }
        }
        return a
    };
    f.FromSuperJSON = function c(d) {
        if ("object" === typeof d & null !== d) {
            if ("set" ===
                d._c3type_) return new Set(d.data.map(e => c(e)));
            if ("map" === d._c3type_) return new Map(d.data.map(e => [e[0], c(e[1])])); {
                const e = Object.create(null);
                for (const [k, h] of Object.entries(d)) e[k] = c(h);
                return e
            }
        }
        return d
    };
    f.CSSToCamelCase = function(d) {
        let c = "",
            e = !1;
        for (const k of d) "-" === k ? e = !0 : e ? (c += k.toUpperCase(), e = !1) : c += k;
        return c
    };
    f.IsIterator = function(d) {
        return "object" === typeof d && "function" === typeof d.next
    };
    f.MakeFilledArray = function(d, c) {
        const e = [];
        if ("function" === typeof c)
            for (var k = 0; k < d; ++k) e.push(c());
        else
            for (k = 0; k < d; ++k) e.push(c);
        return e
    }
}
"use strict"; {
    const f = self.C3,
        b = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?/i,
        a = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?,([0-9.])/i;

    function d(e) {
        return 0 === e.length ? "00" : 1 === e.length ? "0" + e : e
    }

    function c(e, k, h) {
        0 > h && (h += 1);
        1 < h && --h;
        return h < 1 / 6 ? e + 6 * (k - e) * h : .5 > h ? k : h < 2 / 3 ? e + (k - e) * (2 / 3 - h) * 6 : e
    }
    f.Color = class {
        constructor(e, k, h, p) {
            this._a = this._b = this._g = this._r = 0;
            e instanceof f.Color ? this.set(e) : this.setRgba(e || 0, k || 0, h || 0, p || 0)
        }
        setRgb(e, k, h) {
            this._r = +e;
            this._g = +k;
            this._b = +h;
            this.clamp();
            return this
        }
        setRgba(e, k, h, p) {
            this._r = +e;
            this._g = +k;
            this._b = +h;
            this._a = +p;
            this.clamp();
            return this
        }
        set(e) {
            this._r = e._r;
            this._g = e._g;
            this._b = e._b;
            this._a = e._a;
            return this
        }
        copy(e) {
            return this.set(e)
        }
        add(e) {
            this._r += e._r;
            this._g += e._g;
            this._b += e._b;
            this._a += e._a;
            this.clamp()
        }
        addRgb(e, k, h, p = 0) {
            this._r += +e;
            this._g += +k;
            this._b += +h;
            this._a += +p;
            this.clamp()
        }
        diff(e) {
            this.setR(Math.max(this._r, e._r) - Math.min(this._r, e._r));
            this.setG(Math.max(this._g, e._g) - Math.min(this._g, e._g));
            this.setB(Math.max(this._b, e._b) - Math.min(this._b, e._b));
            this.setA(Math.max(this._a,
                e._a) - Math.min(this._a, e._a));
            this.clamp()
        }
        copyRgb(e) {
            this._r = e._r;
            this._g = e._g;
            this._b = e._b
        }
        setR(e) {
            this._r = f.clamp(+e, 0, 1)
        }
        getR() {
            return this._r
        }
        setG(e) {
            this._g = f.clamp(+e, 0, 1)
        }
        getG() {
            return this._g
        }
        setB(e) {
            this._b = f.clamp(+e, 0, 1)
        }
        getB() {
            return this._b
        }
        setA(e) {
            this._a = f.clamp(+e, 0, 1)
        }
        getA() {
            return this._a
        }
        clone() {
            return f.New(f.Color, this._r, this._g, this._b, this._a)
        }
        toArray() {
            return [this._r, this._g, this._b, this._a]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(e, k) {
            e[k++] =
                this._r;
            e[k++] = this._g;
            e[k++] = this._b;
            e[k] = this._a
        }
        equals(e) {
            return this._r === e._r && this._g === e._g && this._b === e._b && this._a === e._a
        }
        equalsIgnoringAlpha(e) {
            return this._r === e._r && this._g === e._g && this._b === e._b
        }
        equalsRgb(e, k, h) {
            return this._r === e && this._g === k && this._b === h
        }
        equalsRgba(e, k, h, p) {
            return this._r === e && this._g === k && this._b === h && this._a === p
        }
        multiply(e) {
            this._r *= e._r;
            this._g *= e._g;
            this._b *= e._b;
            this._a *= e._a
        }
        multiplyAlpha(e) {
            this._r *= e;
            this._g *= e;
            this._b *= e;
            this._a *= e
        }
        premultiply() {
            this._r *= this._a;
            this._g *= this._a;
            this._b *= this._a;
            return this
        }
        unpremultiply() {
            this._r /= this._a;
            this._g /= this._a;
            this._b /= this._a;
            return this
        }
        clamp() {
            this._r = f.clamp(this._r, 0, 1);
            this._g = f.clamp(this._g, 0, 1);
            this._b = f.clamp(this._b, 0, 1);
            this._a = f.clamp(this._a, 0, 1);
            return this
        }
        setFromRgbValue(e) {
            this._r = f.GetRValue(e);
            this._g = f.GetGValue(e);
            this._b = f.GetBValue(e);
            this._a = f.GetAValue(e)
        }
        getCssRgb(e, k, h) {
            e = f.IsFiniteNumber(e) ? e : this.getR();
            k = f.IsFiniteNumber(k) ? k : this.getG();
            h = f.IsFiniteNumber(h) ? h : this.getB();
            return `rgb(${100*
e}%, ${100*k}%, ${100*h}%)`
        }
        getCssRgba(e, k, h, p) {
            e = f.IsFiniteNumber(e) ? e : this.getR();
            k = f.IsFiniteNumber(k) ? k : this.getG();
            h = f.IsFiniteNumber(h) ? h : this.getB();
            p = f.IsFiniteNumber(p) ? p : this.getA();
            return `rgba(${100*e}%, ${100*k}%, ${100*h}%, ${p})`
        }
        toHexString() {
            const e = Math.round(255 * this.getR()),
                k = Math.round(255 * this.getG()),
                h = Math.round(255 * this.getB());
            return "#" + d(e.toString(16)) + d(k.toString(16)) + d(h.toString(16))
        }
        parseHexString(e) {
            if ("string" !== typeof e) return !1;
            e = e.trim();
            "#" === e.charAt(0) && (e =
                e.substr(1));
            let k, h;
            if (3 === e.length) k = parseInt(e[0], 16) / 15, h = parseInt(e[1], 16) / 15, e = parseInt(e[2], 16) / 15;
            else if (6 === e.length) k = parseInt(e.substr(0, 2), 16) / 255, h = parseInt(e.substr(2, 2), 16) / 255, e = parseInt(e.substr(4, 2), 16) / 255;
            else return !1;
            isFinite(k) && this.setR(k);
            isFinite(h) && this.setG(h);
            isFinite(e) && this.setB(e);
            this.setA(1);
            return !0
        }
        toCommaSeparatedRgb() {
            const e = Math.round(255 * this.getR()),
                k = Math.round(255 * this.getG()),
                h = Math.round(255 * this.getB());
            return `${e}, ${k}, ${h}`
        }
        toRgbArray() {
            const e =
                Math.round(255 * this.getR()),
                k = Math.round(255 * this.getG()),
                h = Math.round(255 * this.getB());
            return [e, k, h]
        }
        parseCommaSeparatedRgb(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/^rgb\(|\)|%/, "");
            var k = e.split(",");
            if (3 > k.length) return !1;
            e = parseInt(k[0].trim(), 10) / 255;
            const h = parseInt(k[1].trim(), 10) / 255;
            k = parseInt(k[2].trim(), 10) / 255;
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(k) && this.setB(k);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedPercentageRgb(e) {
            if ("string" !== typeof e) return !1;
            e =
                e.replace(/^rgb\(|\)|%/, "");
            var k = e.split(",");
            if (3 > k.length) return !1;
            e = parseInt(k[0].trim(), 10) / 100;
            const h = parseInt(k[1].trim(), 10) / 100;
            k = parseInt(k[2].trim(), 10) / 100;
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(k) && this.setB(k);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedRgba(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/^rgba\(|\)|%/, "");
            var k = e.split(",");
            if (4 > k.length) return !1;
            e = parseInt(k[0].trim(), 10) / 255;
            const h = parseInt(k[1].trim(), 10) / 255,
                p = parseInt(k[2].trim(), 10) / 255;
            k =
                parseFloat(k[3].trim());
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(p) && this.setB(p);
            isFinite(k) && this.setA(k);
            return !0
        }
        parseCommaSeparatedPercentageRgba(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/^rgba\(|\)|%/, "");
            var k = e.split(",");
            if (4 > k.length) return !1;
            e = parseInt(k[0].trim(), 10) / 100;
            const h = parseInt(k[1].trim(), 10) / 100,
                p = parseInt(k[2].trim(), 10) / 100;
            k = parseFloat(k[3].trim());
            isFinite(e) && this.setR(e);
            isFinite(h) && this.setG(h);
            isFinite(p) && this.setB(p);
            isFinite(k) && this.setA(k);
            return !0
        }
        parseString(e) {
            if ("string" !== typeof e) return !1;
            e = e.replace(/\s+/, "");
            if (e.includes(",")) {
                if (e.startsWith("rgb(")) return e.includes("%") ? this.parseCommaSeparatedPercentageRgb(e) : this.parseCommaSeparatedRgb(e);
                if (e.startsWith("rgba(")) return e.includes("%") ? this.parseCommaSeparatedPercentageRgba(e) : this.parseCommaSeparatedRgba(e);
                if (e.startsWith("hsl(") || e.startsWith("hsla(")) return this.parseHSLString(e); {
                    const k = e.split(",");
                    if (e.includes("%")) {
                        if (3 === k.length) return this.parseCommaSeparatedPercentageRgb(e);
                        if (4 === k.length) return this.parseCommaSeparatedPercentageRgba(e)
                    } else {
                        if (3 === k.length) return this.parseCommaSeparatedRgb(e);
                        if (4 === k.length) return this.parseCommaSeparatedRgba(e)
                    }
                    return !1
                }
            }
            return this.parseHexString(e)
        }
        toJSON() {
            return [this._r, this._g, this._b, this._a]
        }
        setFromHSLA(e, k, h, p) {
            e %= 360;
            k = f.clamp(k, 0, 100);
            h = f.clamp(h, 0, 100);
            p = f.clamp(p, 0, 1);
            e /= 360;
            k /= 100;
            h /= 100;
            if (0 === k) h = k = e = h;
            else {
                const n = .5 > h ? h * (1 + k) : h + k - h * k,
                    m = 2 * h - n;
                h = c(m, n, e + 1 / 3);
                k = c(m, n, e);
                e = c(m, n, e - 1 / 3)
            }
            this.setR(h);
            this.setG(k);
            this.setB(e);
            this.setA(p);
            return this
        }
        parseHSLString(e) {
            var k = e.replace(/ |hsl|hsla|\(|\)|;/gi, "");
            e = b.exec(k);
            k = a.exec(k);
            return e && 4 === e.length ? (this.setFromHSLA(+e[1], +e[2], +e[3], 1), !0) : k && 5 === k.length ? (this.setFromHSLA(+e[1], +e[2], +e[3], +e[4]), !0) : !1
        }
        toHSLAString() {
            var e = this._r;
            const k = this._g,
                h = this._b,
                p = this._a,
                n = f.Color.GetHue(e, k, h),
                m = f.Color.GetSaturation(e, k, h);
            e = f.Color.GetLuminosity(e, k, h);
            return `hsla(${n}, ${m}%, ${e}%, ${p})`
        }
        toHSLAArray() {
            const e = this._r,
                k = this._g,
                h = this._b;
            return [f.Color.GetHue(e,
                k, h), f.Color.GetSaturation(e, k, h), f.Color.GetLuminosity(e, k, h), this._a]
        }
        setFromJSON(e) {
            !Array.isArray(e) || 3 > e.length || (this._r = e[0], this._g = e[1], this._b = e[2], this._a = 4 <= e.length ? e[3] : 1)
        }
        set r(e) {
            this.setR(e)
        }
        get r() {
            return this.getR()
        }
        set g(e) {
            this.setG(e)
        }
        get g() {
            return this.getG()
        }
        set b(e) {
            this.setB(e)
        }
        get b() {
            return this.getB()
        }
        set a(e) {
            this.setA(e)
        }
        get a() {
            return this.getA()
        }
        setAtIndex(e, k) {
            switch (e) {
                case 0:
                    this.setR(k);
                    break;
                case 1:
                    this.setG(k);
                    break;
                case 2:
                    this.setB(k);
                    break;
                case 3:
                    this.setA(k);
                    break;
                default:
                    throw new RangeError("invalid color index");
            }
        }
        getAtIndex(e) {
            switch (e) {
                case 0:
                    return this.getR();
                case 1:
                    return this.getG();
                case 2:
                    return this.getB();
                case 3:
                    return this.getA();
                default:
                    throw new RangeError("invalid color index");
            }
        }
        static Equals(e, k) {
            let h;
            if (Array.isArray(e)) h = new f.Color, h.setFromJSON(e);
            else if (e instanceof f.Color) h = e;
            else throw Error("unexpected type");
            if (Array.isArray(k)) e = new f.Color, e.setFromJSON(k);
            else if (k instanceof f.Color) e = k;
            else throw Error("unexpected type");
            return h.equals(e)
        }
        static DiffChannel(e, k) {
            return f.clamp(Math.max(e, k) - Math.min(e, k), 0, 1)
        }
        static Diff(e, k) {
            const h = new f.Color;
            h.setR(Math.max(e._r, k._r) - Math.min(e._r, k._r));
            h.setG(Math.max(e._g, k._g) - Math.min(e._g, k._g));
            h.setB(Math.max(e._b, k._b) - Math.min(e._b, k._b));
            h.setA(Math.max(e._a, k._a) - Math.min(e._a, k._a));
            return h
        }
        static DiffNoAlpha(e, k) {
            const h = new f.Color(0, 0, 0, 1);
            h.setR(Math.max(e._r, k._r) - Math.min(e._r, k._r));
            h.setG(Math.max(e._g, k._g) - Math.min(e._g, k._g));
            h.setB(Math.max(e._b, k._b) -
                Math.min(e._b, k._b));
            return h
        }
        static GetHue(e, k, h) {
            const p = Math.max(e, k, h),
                n = Math.min(e, k, h);
            if (p === n) return 0;
            let m = 0;
            switch (p) {
                case e:
                    m = (k - h) / (p - n) + (k < h ? 6 : 0);
                    break;
                case k:
                    m = (h - e) / (p - n) + 2;
                    break;
                case h:
                    m = (e - k) / (p - n) + 4
            }
            return Math.round(m / 6 * 360)
        }
        static GetSaturation(e, k, h) {
            const p = Math.max(e, k, h);
            e = Math.min(e, k, h);
            if (p === e) return 0;
            k = p - e;
            return Math.round(100 * (.5 < (p + e) / 2 ? k / (2 - p - e) : k / (p + e)))
        }
        static GetLuminosity(e, k, h) {
            const p = Math.max(e, k, h);
            return p ? Math.round((p + Math.min(e, k, h)) / 2 * 100) : 0
        }
    };
    f.Color.White =
        Object.freeze(f.New(f.Color, 1, 1, 1, 1));
    f.Color.Black = Object.freeze(f.New(f.Color, 0, 0, 0, 1));
    f.Color.TransparentBlack = Object.freeze(f.New(f.Color, 0, 0, 0, 0))
}
"use strict"; {
    const f = self.C3;
    f.Vector2 = class {
        constructor(b, a) {
            this._y = this._x = 0;
            b instanceof f.Vector2 ? this.copy(b) : this.set(b || 0, a || 0)
        }
        set(b, a) {
            this._x = +b;
            this._y = +a
        }
        copy(b) {
            this._x = b._x;
            this._y = b._y
        }
        equals(b) {
            return this._x === b._x && this._y === b._y
        }
        equalsValues(b, a) {
            return this._x === b && this._y === a
        }
        setX(b) {
            this._x = +b
        }
        getX() {
            return this._x
        }
        setY(b) {
            this._y = +b
        }
        getY() {
            return this._y
        }
        toArray() {
            return [this._x, this._y]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._x;
            b[a] =
                this._y
        }
        offset(b, a) {
            this._x += +b;
            this._y += +a
        }
        scale(b, a) {
            this._x *= b;
            this._y *= a
        }
        divide(b, a) {
            this._x /= b;
            this._y /= a
        }
        round() {
            this._x = Math.round(this._x);
            this._y = Math.round(this._y)
        }
        floor() {
            this._x = Math.floor(this._x);
            this._y = Math.floor(this._y)
        }
        ceil() {
            this._x = Math.ceil(this._x);
            this._y = Math.ceil(this._y)
        }
        angle() {
            return f.angleTo(0, 0, this._x, this._y)
        }
        lengthSquared() {
            return this._x * this._x + this._y * this._y
        }
        length() {
            return Math.sqrt(this.lengthSquared())
        }
        rotatePrecalc(b, a) {
            const d = this._x * a - this._y * b;
            this._y =
                this._y * a + this._x * b;
            this._x = d
        }
        rotate(b) {
            0 !== b && this.rotatePrecalc(Math.sin(b), Math.cos(b))
        }
        rotateAbout(b, a, d) {
            0 === b || a === this._x && d === this._y || (this._x -= a, this._y -= d, this.rotatePrecalc(Math.sin(b), Math.cos(b)), this._x += +a, this._y += +d)
        }
        move(b, a) {
            0 !== a && (this._x += Math.cos(b) * a, this._y += Math.sin(b) * a)
        }
        normalize() {
            const b = this.length();
            0 !== b && 1 !== b && (this._x /= b, this._y /= b)
        }
        clamp(b, a) {
            this._x = f.clamp(this._x, b, a);
            this._y = f.clamp(this._y, b, a)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Rect = class {
        constructor(b, a, d, c) {
            this._bottom = this._right = this._top = this._left = 0;
            b instanceof f.Rect ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0)
        }
        set(b, a, d, c) {
            this._left = +b;
            this._top = +a;
            this._right = +d;
            this._bottom = +c
        }
        setWH(b, a, d, c) {
            b = +b;
            a = +a;
            this._left = b;
            this._top = a;
            this._right = b + +d;
            this._bottom = a + +c
        }
        copy(b) {
            this._left = +b._left;
            this._top = +b._top;
            this._right = +b._right;
            this._bottom = +b._bottom
        }
        clone() {
            return new f.Rect(this._left, this._top, this._right, this._bottom)
        }
        static Merge(b, a) {
            const d =
                new f.Rect;
            d.setLeft(Math.min(b._left, a._left));
            d.setTop(Math.min(b._top, a._top));
            d.setRight(Math.max(b._right, a._right));
            d.setBottom(Math.max(b._bottom, a._bottom));
            return d
        }
        static FromObject(b) {
            return new f.Rect(b.left, b.top, b.right, b.bottom)
        }
        equals(b) {
            return this._left === b._left && this._top === b._top && this._right === b._right && this._bottom === b._bottom
        }
        setLeft(b) {
            this._left = +b
        }
        getLeft() {
            return this._left
        }
        setTop(b) {
            this._top = +b
        }
        getTop() {
            return this._top
        }
        setRight(b) {
            this._right = +b
        }
        getRight() {
            return this._right
        }
        setBottom(b) {
            this._bottom = +b
        }
        getBottom() {
            return this._bottom
        }
        toArray() {
            return [this._left, this._top, this._right, this._bottom]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        toDOMRect() {
            return new DOMRect(this._left, this._top, this.width(), this.height())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = this._left;
            b[a] = this._bottom
        }
        width() {
            return this._right -
                this._left
        }
        height() {
            return this._bottom - this._top
        }
        midX() {
            return (this._left + this._right) / 2
        }
        midY() {
            return (this._top + this._bottom) / 2
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right += b;
            this._bottom += a
        }
        offsetLeft(b) {
            this._left += +b
        }
        offsetTop(b) {
            this._top += +b
        }
        offsetRight(b) {
            this._right += +b
        }
        offsetBottom(b) {
            this._bottom += +b
        }
        toSquare(b) {
            if ("x" !== b) throw Error("invalid axis, only 'x' supported");
            this._bottom = this._top < this._bottom ? this._left < this._right ? this._top + this.width() : this._top - this.width() :
                this._left < this._right ? this._top - this.width() : this._top + this.width()
        }
        inflate(b, a) {
            b = +b;
            a = +a;
            this._left -= b;
            this._top -= a;
            this._right += b;
            this._bottom += a
        }
        deflate(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right -= b;
            this._bottom -= a
        }
        multiply(b, a) {
            this._left *= b;
            this._top *= a;
            this._right *= b;
            this._bottom *= a
        }
        divide(b, a) {
            this._left /= b;
            this._top /= a;
            this._right /= b;
            this._bottom /= a
        }
        mirrorAround(b) {
            this._left = +b - this._left;
            this._right = +b - this._right
        }
        flipAround(b) {
            this._top = +b - this._top;
            this._bottom = +b - this._bottom
        }
        swapLeftRight() {
            const b =
                this._left;
            this._left = this._right;
            this._right = b
        }
        swapTopBottom() {
            const b = this._top;
            this._top = this._bottom;
            this._bottom = b
        }
        shuntY(b) {
            const a = this._top;
            this._top = +b - this._bottom;
            this._bottom = +b - a
        }
        round() {
            this._left = Math.round(this._left);
            this._top = Math.round(this._top);
            this._right = Math.round(this._right);
            this._bottom = Math.round(this._bottom)
        }
        roundInner() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        roundOuter() {
            this._left =
                Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        floor() {
            this._left = Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        ceil() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        clamp(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top < a && (this._top = +a);
            this._right >
                d && (this._right = +d);
            this._bottom > c && (this._bottom = +c)
        }
        clampFlipped(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top > a && (this._top = +a);
            this._right > d && (this._right = +d);
            this._bottom < c && (this._bottom = +c)
        }
        normalize() {
            this._left > this._right && this.swapLeftRight();
            this._top > this._bottom && this.swapTopBottom()
        }
        intersectsRect(b) {
            return !(b._right < this._left || b._bottom < this._top || b._left > this._right || b._top > this._bottom)
        }
        intersectsRectOffset(b, a, d) {
            return !(b._right + a < this._left || b._bottom + d < this._top || b._left +
                a > this._right || b._top + d > this._bottom)
        }
        containsPoint(b, a) {
            return b >= this._left && b <= this._right && a >= this._top && a <= this._bottom
        }
        containsRect(b) {
            return b._left >= this._left && b._top >= this._top && b._right <= this._right && b._bottom <= this._bottom
        }
        expandToContain(b) {
            b._left < this._left && (this._left = +b._left);
            b._top < this._top && (this._top = +b._top);
            b._right > this._right && (this._right = +b._right);
            b._bottom > this._bottom && (this._bottom = +b._bottom)
        }
        lerpInto(b) {
            this._left = f.lerp(b._left, b._right, this._left);
            this._top = f.lerp(b._top,
                b._bottom, this._top);
            this._right = f.lerp(b._left, b._right, this._right);
            this._bottom = f.lerp(b._top, b._bottom, this._bottom)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Quad = class {
        constructor(b, a, d, c, e, k, h, p) {
            this._bly = this._blx = this._bry = this._brx = this._try = this._trx = this._tly = this._tlx = 0;
            b instanceof f.Quad ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0, e || 0, k || 0, h || 0, p || 0)
        }
        set(b, a, d, c, e, k, h, p) {
            this._tlx = +b;
            this._tly = +a;
            this._trx = +d;
            this._try = +c;
            this._brx = +e;
            this._bry = +k;
            this._blx = +h;
            this._bly = +p
        }
        setRect(b, a, d, c) {
            this.set(b, a, d, a, d, c, b, c)
        }
        copy(b) {
            this._tlx = b._tlx;
            this._tly = b._tly;
            this._trx = b._trx;
            this._try = b._try;
            this._brx = b._brx;
            this._bry = b._bry;
            this._blx = b._blx;
            this._bly = b._bly
        }
        equals(b) {
            return this._tlx === b._tlx && this._tly === b._tly && this._trx === b._trx && this._try === b._try && this._brx === b._brx && this._bry === b._bry && this._blx === b._blx && this._bly === b._bly
        }
        setTlx(b) {
            this._tlx = +b
        }
        getTlx() {
            return this._tlx
        }
        setTly(b) {
            this._tly = +b
        }
        getTly() {
            return this._tly
        }
        setTrx(b) {
            this._trx = +b
        }
        getTrx() {
            return this._trx
        }
        setTry(b) {
            this._try = +b
        }
        getTry() {
            return this._try
        }
        setBrx(b) {
            this._brx = +b
        }
        getBrx() {
            return this._brx
        }
        setBry(b) {
            this._bry = +b
        }
        getBry() {
            return this._bry
        }
        setBlx(b) {
            this._blx = +b
        }
        getBlx() {
            return this._blx
        }
        setBly(b) {
            this._bly = +b
        }
        getBly() {
            return this._bly
        }
        toDOMQuad() {
            return new DOMQuad(new DOMPoint(this._tlx, this._tly), new DOMPoint(this._trx, this._try), new DOMPoint(this._brx, this._bry), new DOMPoint(this._blx, this._bly))
        }
        toArray() {
            return [this._tlx, this._tly, this._trx, this._try, this._brx, this._bry, this._blx, this._bly]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = this._blx;
            b[a] = this._bly
        }
        writeToTypedArray3D(b, a, d) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = d;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = d;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = d;
            b[a++] = this._blx;
            b[a++] = this._bly;
            b[a] = d
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._tlx += b;
            this._tly += a;
            this._trx += b;
            this._try += a;
            this._brx += b;
            this._bry += a;
            this._blx += b;
            this._bly += a
        }
        round() {
            this._tlx = Math.round(this._tlx);
            this._tly = Math.round(this._tly);
            this._trx = Math.round(this._trx);
            this._try = Math.round(this._try);
            this._brx = Math.round(this._brx);
            this._bry = Math.round(this._bry);
            this._blx = Math.round(this._blx);
            this._bly = Math.round(this._bly)
        }
        floor() {
            this._tlx = Math.floor(this._tlx);
            this._tly = Math.floor(this._tly);
            this._trx = Math.floor(this._trx);
            this._try = Math.floor(this._try);
            this._brx = Math.floor(this._brx);
            this._bry = Math.floor(this._bry);
            this._blx = Math.floor(this._blx);
            this._bly = Math.floor(this._bly)
        }
        ceil() {
            this._tlx = Math.ceil(this._tlx);
            this._tly = Math.ceil(this._tly);
            this._trx = Math.ceil(this._trx);
            this._try =
                Math.ceil(this._try);
            this._brx = Math.ceil(this._brx);
            this._bry = Math.ceil(this._bry);
            this._blx = Math.ceil(this._blx);
            this._bly = Math.ceil(this._bly)
        }
        setFromRect(b) {
            this._tlx = b._left;
            this._tly = b._top;
            this._trx = b._right;
            this._try = b._top;
            this._brx = b._right;
            this._bry = b._bottom;
            this._blx = b._left;
            this._bly = b._bottom
        }
        setFromRotatedRect(b, a) {
            0 === a ? this.setFromRect(b) : this.setFromRotatedRectPrecalc(b, Math.sin(a), Math.cos(a))
        }
        setFromRotatedRectPrecalc(b, a, d) {
            const c = b._left * a,
                e = b._top * a,
                k = b._right * a;
            a *= b._bottom;
            const h = b._left * d,
                p = b._top * d,
                n = b._right * d;
            b = b._bottom * d;
            this._tlx = h - e;
            this._tly = p + c;
            this._trx = n - e;
            this._try = p + k;
            this._brx = n - a;
            this._bry = b + k;
            this._blx = h - a;
            this._bly = b + c
        }
        getBoundingBox(b) {
            b.set(Math.min(this._tlx, this._trx, this._brx, this._blx), Math.min(this._tly, this._try, this._bry, this._bly), Math.max(this._tlx, this._trx, this._brx, this._blx), Math.max(this._tly, this._try, this._bry, this._bly))
        }
        containsPoint(b, a) {
            var d = this._trx - this._tlx,
                c = this._try - this._tly;
            const e = this._brx - this._tlx,
                k = this._bry - this._tly;
            b -= this._tlx;
            a -= this._tly;
            var h = d * d + c * c;
            let p = d * e + c * k;
            c = d * b + c * a;
            const n = e * e + k * k,
                m = e * b + k * a;
            let t = 1 / (h * n - p * p);
            d = (n * c - p * m) * t;
            h = (h * m - p * c) * t;
            if (0 <= d && 0 < h && 1 > d + h) return !0;
            d = this._blx - this._tlx;
            c = this._bly - this._tly;
            h = d * d + c * c;
            p = d * e + c * k;
            c = d * b + c * a;
            t = 1 / (h * n - p * p);
            d = (n * c - p * m) * t;
            h = (h * m - p * c) * t;
            return 0 <= d && 0 < h && 1 > d + h
        }
        midX() {
            return (this._tlx + this._trx + this._brx + this._blx) / 4
        }
        midY() {
            return (this._tly + this._try + this._bry + this._bly) / 4
        }
        intersectsSegment(b, a, d, c) {
            return this.containsPoint(b, a) || this.containsPoint(d, c) ?
                !0 : f.segmentIntersectsQuad(b, a, d, c, this)
        }
        intersectsQuad(b) {
            var a = b.midX(),
                d = b.midY();
            if (this.containsPoint(a, d)) return !0;
            a = this.midX();
            d = this.midY();
            if (b.containsPoint(a, d)) return !0;
            a = this._tlx;
            d = this._tly;
            const c = this._trx,
                e = this._try,
                k = this._brx,
                h = this._bry,
                p = this._blx,
                n = this._bly;
            return f.segmentIntersectsQuad(a, d, c, e, b) || f.segmentIntersectsQuad(c, e, k, h, b) || f.segmentIntersectsQuad(k, h, p, n, b) || f.segmentIntersectsQuad(p, n, a, d, b)
        }
        mirror() {
            this._swap(0, 2);
            this._swap(1, 3);
            this._swap(6, 4);
            this._swap(7,
                5)
        }
        flip() {
            this._swap(0, 6);
            this._swap(1, 7);
            this._swap(2, 4);
            this._swap(3, 5)
        }
        diag() {
            this._swap(2, 6);
            this._swap(3, 7)
        }
        _swap(b, a) {
            const d = this._getAtIndex(b);
            this._setAtIndex(b, this._getAtIndex(a));
            this._setAtIndex(a, d)
        }
        _getAtIndex(b) {
            switch (b) {
                case 0:
                    return this._tlx;
                case 1:
                    return this._tly;
                case 2:
                    return this._trx;
                case 3:
                    return this._try;
                case 4:
                    return this._brx;
                case 5:
                    return this._bry;
                case 6:
                    return this._blx;
                case 7:
                    return this._bly;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
        _setAtIndex(b,
            a) {
            a = +a;
            switch (b) {
                case 0:
                    this._tlx = a;
                    break;
                case 1:
                    this._tly = a;
                    break;
                case 2:
                    this._trx = a;
                    break;
                case 3:
                    this._try = a;
                    break;
                case 4:
                    this._brx = a;
                    break;
                case 5:
                    this._bry = a;
                    break;
                case 6:
                    this._blx = a;
                    break;
                case 7:
                    this._bly = a;
                    break;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [0, 0, 1, 0, 1, 1, 0, 1],
        a = f.New(f.Quad);
    f.CollisionPoly = class extends f.DefendedBase {
        constructor(d, c = !0) {
            super();
            d || (d = b);
            this._ptsArr = Float64Array.from(d);
            this._bbox = new f.Rect;
            this._isBboxChanged = !0;
            this._enabled = c
        }
        Release() {}
        pointsArr() {
            return this._ptsArr
        }
        pointCount() {
            return this._ptsArr.length / 2
        }
        setPoints(d) {
            this._ptsArr.length === d.length ? this._ptsArr.set(d) : this._ptsArr = Float64Array.from(d);
            this._isBboxChanged = !0
        }
        setDefaultPoints() {
            this.setPoints(b)
        }
        copy(d) {
            this.setPoints(d._ptsArr)
        }
        setBboxChanged() {
            this._isBboxChanged = !0
        }
        _updateBbox() {
            if (this._isBboxChanged) {
                var d = this._ptsArr,
                    c = d[0],
                    e = d[1],
                    k = c,
                    h = e;
                for (let p = 0, n = d.length; p < n; p += 2) {
                    const m = d[p],
                        t = d[p + 1];
                    m < c && (c = m);
                    m > k && (k = m);
                    t < e && (e = t);
                    t > h && (h = t)
                }
                this._bbox.set(c, e, k, h);
                this._isBboxChanged = !1
            }
        }
        setFromRect(d, c, e) {
            let k = this._ptsArr;
            8 !== k.length && (this._ptsArr = k = new Float64Array(8));
            k[0] = d.getLeft() - c;
            k[1] = d.getTop() - e;
            k[2] = d.getRight() - c;
            k[3] = d.getTop() - e;
            k[4] = d.getRight() - c;
            k[5] = d.getBottom() - e;
            k[6] = d.getLeft() - c;
            k[7] = d.getBottom() - e;
            this._bbox.copy(d);
            0 === c && 0 ===
                e || this._bbox.offset(-c, -e);
            this._isBboxChanged = !1
        }
        setFromQuad(d, c, e) {
            a.copy(d);
            a.offset(c, e);
            this.setPoints(a.toArray());
            this._isBboxChanged = !0
        }
        transform(d, c, e) {
            let k = 0,
                h = 1;
            0 !== e && (k = Math.sin(e), h = Math.cos(e));
            this.transformPrecalc(d, c, k, h)
        }
        transformPrecalc(d, c, e, k) {
            const h = this._ptsArr;
            for (let p = 0, n = h.length; p < n; p += 2) {
                const m = p + 1,
                    t = h[p] * d,
                    q = h[m] * c;
                h[p] = t * k - q * e;
                h[m] = q * k + t * e
            }
            this._isBboxChanged = !0
        }
        offset(d, c) {
            const e = this._ptsArr;
            for (let k = 0, h = e.length; k < h; k += 2) e[k] += d, e[k + 1] += c
        }
        containsPoint(d, c) {
            const e =
                this._ptsArr;
            if (d === e[0] && c === e[1]) return !0;
            this._updateBbox();
            var k = this._bbox;
            const h = k.getLeft() - 110,
                p = k.getTop() - 101,
                n = k.getRight() + 131;
            k = k.getBottom() + 120;
            let m, t, q, u, r, x, z, C;
            h < d ? (m = h, q = d) : (m = d, q = h);
            p < c ? (t = p, u = c) : (t = c, u = p);
            n < d ? (r = n, z = d) : (r = d, z = n);
            k < c ? (x = k, C = c) : (x = c, C = k);
            let w = 0,
                B = 0;
            for (let J = 0, O = e.length; J < O; J += 2) {
                var F = (J + 2) % O;
                const G = e[J],
                    I = e[J + 1],
                    P = e[F];
                F = e[F + 1];
                f.segmentsIntersectPreCalc(h, p, d, c, m, q, t, u, G, I, P, F) && ++w;
                f.segmentsIntersectPreCalc(n, k, d, c, r, z, x, C, G, I, P, F) && ++B
            }
            return 1 === w % 2 ||
                1 === B % 2
        }
        intersectsPoly(d, c, e) {
            const k = d._ptsArr,
                h = this._ptsArr;
            if (this.containsPoint(k[0] + c, k[1] + e) || d.containsPoint(h[0] - c, h[1] - e)) return !0;
            for (let n = 0, m = h.length; n < m; n += 2) {
                var p = (n + 2) % m;
                d = h[n];
                const t = h[n + 1],
                    q = h[p];
                p = h[p + 1];
                let u, r, x, z;
                d < q ? (u = d, x = q) : (u = q, x = d);
                t < p ? (r = t, z = p) : (r = p, z = t);
                for (let C = 0, w = k.length; C < w; C += 2) {
                    const B = (C + 2) % w;
                    if (f.segmentsIntersectPreCalc(d, t, q, p, u, x, r, z, k[C] + c, k[C + 1] + e, k[B] + c, k[B + 1] + e)) return !0
                }
            }
            return !1
        }
        intersectsSegment(d, c, e, k, h, p) {
            if (this.containsPoint(e - d, k - c) || this.containsPoint(h -
                    d, p - c)) return !0;
            let n, m, t, q;
            e < h ? (n = e, t = h) : (n = h, t = e);
            k < p ? (m = k, q = p) : (m = p, q = k);
            const u = this._ptsArr;
            for (let r = 0, x = u.length; r < x; r += 2) {
                const z = (r + 2) % x;
                if (f.segmentsIntersectPreCalc(e, k, h, p, n, t, m, q, u[r] + d, u[r + 1] + c, u[z] + d, u[z + 1] + c)) return !0
            }
            return !1
        }
        mirror(d) {
            const c = this._ptsArr;
            for (let e = 0, k = c.length; e < k; e += 2) c[e] = 2 * d - c[e];
            this._isBboxChanged = !0
        }
        flip(d) {
            const c = this._ptsArr;
            for (let e = 0, k = c.length; e < k; e += 2) {
                const h = e + 1;
                c[h] = 2 * d - c[h]
            }
            this._isBboxChanged = !0
        }
        diag() {
            const d = this._ptsArr;
            for (let c = 0, e = d.length; c <
                e; c += 2) {
                const k = c + 1,
                    h = d[c];
                d[c] = d[k];
                d[k] = h
            }
            this._isBboxChanged = !0
        }
        GetMidX() {
            const d = this._ptsArr;
            let c = 0;
            for (let e = 0, k = d.length; e < k; e += 2) c += d[e];
            return c / this.pointCount()
        }
        GetMidY() {
            const d = this._ptsArr;
            let c = 0;
            for (let e = 0, k = d.length; e < k; e += 2) c += d[e + 1];
            return c / this.pointCount()
        }
        GetPointsArray() {
            return this._ptsArr
        }
        GetPointCount() {
            return this.pointCount()
        }
        IsEnabled() {
            return this._enabled
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.PairMap = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._firstMap = new Map;
            if (b)
                for (const [a, d, c] of b) this.Set(a, d, c)
        }
        Release() {
            this.Clear();
            this._firstMap = null
        }
        Clear() {
            const b = this._firstMap;
            for (const a of b.values()) a.clear();
            b.clear()
        }
        Set(b, a, d) {
            const c = this._firstMap;
            let e = c.get(b);
            e || (e = new Map, c.set(b, e));
            e.set(a, d)
        }
        Get(b, a) {
            return (b = this._firstMap.get(b)) ? b.get(a) : b
        }
        Has(b, a) {
            return (b = this._firstMap.get(b)) ? b.has(a) : !1
        }
        Delete(b, a) {
            const d = this._firstMap,
                c = d.get(b);
            if (!c) return !1;
            (a = c.delete(a)) && 0 === c.size && d.delete(b);
            return a
        }
        DeleteEither(b) {
            const a = this._firstMap,
                d = a.get(b);
            d && (d.clear(), a.delete(b));
            for (const [c, e] of a.entries()) e.delete(b) && 0 === e.size && a.delete(c)
        }
        GetSize() {
            let b = 0;
            for (const a of this._firstMap.values()) b += a.size;
            return b
        }* values() {
            for (const b of this._firstMap.values()) yield* b.values()
        }* keyPairs() {
            for (const [b, a] of this._firstMap.entries())
                for (const d of a.keys()) yield [b, d]
        }* entries() {
            for (const [b, a] of this._firstMap.entries())
                for (const [d,
                        c
                    ] of a.entries()) yield [b, d, c]
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.ArraySet = class extends f.DefendedBase {
        constructor() {
            super();
            this._set = new Set;
            this._arr = [];
            this._needToRebuildArray = !1
        }
        Release() {
            this.Clear()
        }
        Clear() {
            this._set.clear();
            f.clearArray(this._arr);
            this._needToRebuildArray = !1
        }
        Add(b) {
            this._set.has(b) || (this._set.add(b), this._needToRebuildArray || this._arr.push(b))
        }
        Has(b) {
            return this._set.has(b)
        }
        Delete(b) {
            this._set.delete(b) && (this._needToRebuildArray = !0)
        }
        GetSize() {
            return this._set.size
        }
        IsEmpty() {
            return 0 === this._set.size
        }
        GetArray() {
            this._needToRebuildArray &&
                (this._RebuildArray(), this._needToRebuildArray = !1);
            return this._arr
        }
        _RebuildArray() {
            const b = this._arr;
            f.clearArray(b);
            for (const a of this._set) b.push(a)
        }
    }
}
"use strict"; {
    const f = new Map,
        b = new Map,
        a = new Map,
        d = new Map,
        c = new Map,
        e = new Map;
    e.set("linear", "noease");
    e.set("default", "noease");
    self.Ease = class q {
        constructor() {}
        static InheritEase() {
            return "default"
        }
        static DefaultEase() {
            return "noease"
        }
        static GetEditorEaseNames(u, ...r) {
            this._CreateEaseMap();
            a.has(u) || a.set(u, new Map);
            u = [...a.get(u).keys()];
            u.sort();
            return [...b.keys()].concat(u).filter(x => !r.includes(x))
        }
        static GetRuntimeEaseNames() {
            this._CreateEaseMap();
            const u = [...d.keys()];
            u.sort();
            return [...b.keys()].concat(u)
        }
        static IsNamePredefined(u) {
            this._CreateEaseMap();
            return [...b.keys()].includes(u)
        }
        static _GetEase(u) {
            const r = e.get(u);
            if (r) return f.get(r);
            if (q.IsNamePredefined(u)) return f.get(u);
            if (c.has(u)) return c.get(u)
        }
        static GetEditorEase(u, r) {
            this._CreateEaseMap();
            const x = q._GetEase(u);
            return x ? x : a.get(r).get(u)
        }
        static GetRuntimeEase(u) {
            this._CreateEaseMap();
            const r = q._GetEase(u);
            return r ? r : d.get(u)
        }
        static GetEaseFromIndex(u) {
            this._CreateEaseMap();
            return this.GetRuntimeEaseNames()[u]
        }
        static GetIndexForEase(u, r) {
            this._CreateEaseMap();
            return this.GetEditorEaseNames(r).indexOf(u)
        }
        static _CreateEaseMap() {
            0 ===
                f.size && (this._AddPredifinedEase("default", () => {}), this._AddPredifinedEase("noease", this.NoEase), this._AddPredifinedEase("easeinsine", this.EaseInSine), this._AddPredifinedEase("easeoutsine", this.EaseOutSine), this._AddPredifinedEase("easeinoutsine", this.EaseInOutSine), this._AddPredifinedEase("easeinelastic", this.EaseInElastic), this._AddPredifinedEase("easeoutelastic", this.EaseOutElastic), this._AddPredifinedEase("easeinoutelastic", this.EaseInOutElastic), this._AddPredifinedEase("easeinback", this.EaseInBack),
                    this._AddPredifinedEase("easeoutback", this.EaseOutBack), this._AddPredifinedEase("easeinoutback", this.EaseInOutBack), this._AddPredifinedEase("easeinbounce", this.EaseInBounce), this._AddPredifinedEase("easeoutbounce", this.EaseOutBounce), this._AddPredifinedEase("easeinoutbounce", this.EaseInOutBounce), this._AddPredifinedEase("easeincubic", this.EaseInCubic), this._AddPredifinedEase("easeoutcubic", this.EaseOutCubic), this._AddPredifinedEase("easeinoutcubic", this.EaseInOutCubic), this._AddPredifinedEase("easeinquad",
                        this.EaseInQuad), this._AddPredifinedEase("easeoutquad", this.EaseOutQuad), this._AddPredifinedEase("easeinoutquad", this.EaseInOutQuad), this._AddPredifinedEase("easeinquart", this.EaseInQuart), this._AddPredifinedEase("easeoutquart", this.EaseOutQuart), this._AddPredifinedEase("easeinoutquart", this.EaseInOutQuart), this._AddPredifinedEase("easeinquint", this.EaseInQuint), this._AddPredifinedEase("easeoutquint", this.EaseOutQuint), this._AddPredifinedEase("easeinoutquint", this.EaseInOutQuint), this._AddPredifinedEase("easeincirc",
                        this.EaseInCirc), this._AddPredifinedEase("easeoutcirc", this.EaseOutCirc), this._AddPredifinedEase("easeinoutcirc", this.EaseInOutCirc), this._AddPredifinedEase("easeinexpo", this.EaseInExpo), this._AddPredifinedEase("easeoutexpo", this.EaseOutExpo), this._AddPredifinedEase("easeinoutexpo", this.EaseInOutExpo), this._AddPrivateCustomEase("cubicbezier", this.EaseCubicBezier), this._AddPrivateCustomEase("spline", this.EaseSpline))
        }
        static _AddPredifinedEase(u, r) {
            q._AddEase(u, r, "predefined")
        }
        static _AddPrivateCustomEase(u,
            r) {
            q._AddEase(u, r, "private")
        }
        static AddCustomEase(u, r, x) {
            this._CreateEaseMap();
            q._AddEase(u, r, "custom", x)
        }
        static RemoveCustomEase(u, r) {
            this.IsNamePredefined(u) || [...c.keys()].includes(u) || (r = a.get(r)) && r.delete(u)
        }
        static _AddEase(u, r, x, z) {
            switch (x) {
                case "predefined":
                    f.set(u, r);
                    b.set(u, r);
                    break;
                case "custom":
                    z ? (a.has(z) || a.set(z, new Map), a.get(z).set(u, r)) : d.set(u, r);
                    break;
                case "private":
                    f.set(u, r);
                    c.set(u, r);
                    break;
                default:
                    throw Error("unexpected ease mode");
            }
        }
        static NoEase(u, r, x, z) {
            return x * u / z + r
        }
        static EaseInQuad(u,
            r, x, z) {
            return x * (u /= z) * u + r
        }
        static EaseOutQuad(u, r, x, z) {
            return -x * (u /= z) * (u - 2) + r
        }
        static EaseInOutQuad(u, r, x, z) {
            return 1 > (u /= z / 2) ? x / 2 * u * u + r : -x / 2 * (--u * (u - 2) - 1) + r
        }
        static EaseInCubic(u, r, x, z) {
            return x * (u /= z) * u * u + r
        }
        static EaseOutCubic(u, r, x, z) {
            return x * ((u = u / z - 1) * u * u + 1) + r
        }
        static EaseInOutCubic(u, r, x, z) {
            return 1 > (u /= z / 2) ? x / 2 * u * u * u + r : x / 2 * ((u -= 2) * u * u + 2) + r
        }
        static EaseInQuart(u, r, x, z) {
            return x * (u /= z) * u * u * u + r
        }
        static EaseOutQuart(u, r, x, z) {
            return -x * ((u = u / z - 1) * u * u * u - 1) + r
        }
        static EaseInOutQuart(u, r, x, z) {
            return 1 > (u /=
                z / 2) ? x / 2 * u * u * u * u + r : -x / 2 * ((u -= 2) * u * u * u - 2) + r
        }
        static EaseInQuint(u, r, x, z) {
            return x * (u /= z) * u * u * u * u + r
        }
        static EaseOutQuint(u, r, x, z) {
            return x * ((u = u / z - 1) * u * u * u * u + 1) + r
        }
        static EaseInOutQuint(u, r, x, z) {
            return 1 > (u /= z / 2) ? x / 2 * u * u * u * u * u + r : x / 2 * ((u -= 2) * u * u * u * u + 2) + r
        }
        static EaseInSine(u, r, x, z) {
            return -x * Math.cos(u / z * (Math.PI / 2)) + x + r
        }
        static EaseOutSine(u, r, x, z) {
            return x * Math.sin(u / z * (Math.PI / 2)) + r
        }
        static EaseInOutSine(u, r, x, z) {
            return -x / 2 * (Math.cos(Math.PI * u / z) - 1) + r
        }
        static EaseInExpo(u, r, x, z) {
            return 0 === u ? r : x * Math.pow(2,
                10 * (u / z - 1)) + r
        }
        static EaseOutExpo(u, r, x, z) {
            return u === z ? r + x : x * (-Math.pow(2, -10 * u / z) + 1) + r
        }
        static EaseInOutExpo(u, r, x, z) {
            return 0 === u ? r : u === z ? r + x : 1 > (u /= z / 2) ? x / 2 * Math.pow(2, 10 * (u - 1)) + r : x / 2 * (-Math.pow(2, -10 * --u) + 2) + r
        }
        static EaseInCirc(u, r, x, z) {
            return -x * (Math.sqrt(1 - (u /= z) * u) - 1) + r
        }
        static EaseOutCirc(u, r, x, z) {
            return x * Math.sqrt(1 - (u = u / z - 1) * u) + r
        }
        static EaseInOutCirc(u, r, x, z) {
            return 1 > (u /= z / 2) ? -x / 2 * (Math.sqrt(1 - u * u) - 1) + r : x / 2 * (Math.sqrt(1 - (u -= 2) * u) + 1) + r
        }
        static EaseInElastic(u, r, x, z) {
            let C = 0,
                w = x;
            if (0 === u) return r;
            if (1 === (u /= z)) return r + x;
            C || (C = .3 * z);
            w < Math.abs(x) ? (w = x, x = C / 4) : x = C / (2 * Math.PI) * Math.asin(x / w);
            return -(w * Math.pow(2, 10 * --u) * Math.sin(2 * (u * z - x) * Math.PI / C)) + r
        }
        static EaseOutElastic(u, r, x, z) {
            let C, w = 0,
                B = x;
            if (0 === u) return r;
            if (1 === (u /= z)) return r + x;
            w || (w = .3 * z);
            B < Math.abs(x) ? (B = x, C = w / 4) : C = w / (2 * Math.PI) * Math.asin(x / B);
            return B * Math.pow(2, -10 * u) * Math.sin(2 * (u * z - C) * Math.PI / w) + x + r
        }
        static EaseInOutElastic(u, r, x, z) {
            let C, w = 0,
                B = x;
            if (0 === u) return r;
            if (2 === (u /= z / 2)) return r + x;
            w || (w = .3 * z * 1.5);
            B < Math.abs(x) ? (B = x,
                C = w / 4) : C = w / (2 * Math.PI) * Math.asin(x / B);
            return 1 > u ? -.5 * B * Math.pow(2, 10 * --u) * Math.sin(2 * (u * z - C) * Math.PI / w) + r : B * Math.pow(2, -10 * --u) * Math.sin(2 * (u * z - C) * Math.PI / w) * .5 + x + r
        }
        static EaseInBack(u, r, x, z, C) {
            void 0 === C && (C = 1.70158);
            return x * (u /= z) * u * ((C + 1) * u - C) + r
        }
        static EaseOutBack(u, r, x, z, C) {
            void 0 === C && (C = 1.70158);
            return x * ((u = u / z - 1) * u * ((C + 1) * u + C) + 1) + r
        }
        static EaseInOutBack(u, r, x, z, C) {
            void 0 === C && (C = 1.70158);
            return 1 > (u /= z / 2) ? x / 2 * u * u * (((C *= 1.525) + 1) * u - C) + r : x / 2 * ((u -= 2) * u * (((C *= 1.525) + 1) * u + C) + 2) + r
        }
        static EaseInBounce(u,
            r, x, z) {
            return x - q.EaseOutBounce(z - u, 0, x, z) + r
        }
        static EaseOutBounce(u, r, x, z) {
            return (u /= z) < 1 / 2.75 ? 7.5625 * x * u * u + r : u < 2 / 2.75 ? x * (7.5625 * (u -= 1.5 / 2.75) * u + .75) + r : u < 2.5 / 2.75 ? x * (7.5625 * (u -= 2.25 / 2.75) * u + .9375) + r : x * (7.5625 * (u -= 2.625 / 2.75) * u + .984375) + r
        }
        static EaseInOutBounce(u, r, x, z) {
            return u < z / 2 ? .5 * q.EaseInBounce(2 * u, 0, x, z) + r : .5 * q.EaseOutBounce(2 * u - z, 0, x, z) + .5 * x + r
        }
        static EaseCubicBezier(u, r, x, z, C) {
            return r + 3 * u * (x - r) + 3 * u ** 2 * (r + z - 2 * x) + u ** 3 * (C - r + 3 * x - 3 * z)
        }
        static EaseSpline(u, r, x, z, C, w, B, F, J, O) {
            if (z === C && w === B) return u;
            u = t(u, r, z, w, F, O);
            r = k(x, C, B, J);
            z = h(x, C, B, J);
            x = p(x, C, B, J);
            return n(u, r, z, x)
        }
        static GetBezierSamples(u, r, x, z) {
            const C = [],
                w = k(u, r, x, z),
                B = h(u, r, x, z);
            u = p(u, r, x, z);
            for (r = 0; 11 > r; ++r) x = n(.1 * r, w, B, u), C.push(x);
            return C
        }
    };
    const k = (q, u, r, x) => x - 3 * r + 3 * u - q,
        h = (q, u, r, x) => 3 * r - 6 * u + 3 * q,
        p = (q, u, r, x) => 3 * (u - q),
        n = (q, u, r, x) => ((u * q + r) * q + x) * q,
        m = (q, u, r, x) => 3 * u * q * q + 2 * r * q + x,
        t = (q, u, r, x, z, C) => {
            if (1 == q) return 1;
            for (var w = 0, B = 1, F = C[B]; 10 != B && F <= q;) B++, F = C[B], w += .1;
            B--;
            F = C[B];
            C = w + (q - F) / (C[B + 1] - F) * .1;
            B = k(u, r, x, z);
            F = h(u, r, x, z);
            u = p(u,
                r, x, z);
            r = m(C, B, F, u);
            if (0 !== r)
                if (.02 <= r)
                    for (w = 0; 4 > w; ++w) r = n(C, B, F, u) - q, x = m(C, B, F, u), C -= r / x;
                else {
                    r = w;
                    w += .1;
                    x = 0;
                    let J;
                    do C = r + (w - r) / 2, z = n(C, B, F, u) - q, 0 < z ? w = C : r = C, z = 1E-7 < Math.abs(z), J = 10 > ++x; while (z && J)
                }
            return C
        }
}
"use strict"; {
    const f = self.C3;

    function b(a) {
        f.IsString(a)
    }
    f.ProbabilityTable = class {
        constructor() {
            this._items = [];
            this._totalWeight = 0
        }
        Release() {
            this.Clear();
            this._items = null
        }
        Clear() {
            f.clear2DArray(this._items);
            this._totalWeight = 0
        }
        GetTotalWeight() {
            return this._totalWeight
        }
        Sample(a = Math.random() * this.GetTotalWeight()) {
            let d = 0;
            for (const [c, e] of this._items)
                if (d += c, a < d) return e;
            return 0
        }
        AddItem(a, d) {
            b(d);
            this._totalWeight += a;
            this._items.push([a, d])
        }
        RemoveItem(a, d) {
            b(d);
            const c = 0 === a;
            for (let e = 0; e < this._items.length; e++) {
                const k =
                    this._items[e],
                    h = k[1] === d;
                if ((c || k[0] === a) && h) {
                    this._items.splice(e, 1);
                    this._totalWeight -= k[0];
                    break
                }
            }
        }
        asJSON() {
            return JSON.stringify(this._items)
        }
        static fromJSON(a) {
            const d = new f.ProbabilityTable;
            a = JSON.parse(a);
            for (const c of a) d.AddItem(c[0], c[1]);
            return d
        }
    }
}
"use strict";
self.C3.Event = class {
    constructor(f, b) {
        this.type = f;
        this.cancelable = !!b;
        this.isAsync = this.propagationStopped = this.defaultPrevented = !1
    }
    preventDefault() {
        if (!this.cancelable) throw Error(`event '${this.type}' is not cancelable`);
        this.defaultPrevented = !0
    }
    stopPropagation() {
        if (!this.cancelable) throw Error(`event '${this.type}' cannot be stopped`);
        if (this.isAsync) throw Error(`cannot stop async event '${this.type}' propagation`);
        this.propagationStopped = !0
    }
};
"use strict"; {
    const f = self.C3;
    f.Event.Handler = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._type = b;
            this._captureListeners = [];
            this._captureListenersSet = new Set;
            this._listeners = [];
            this._listenersSet = new Set;
            this._fireDepth = 0;
            this._queueAddListeners = [];
            this._queueRemoveCaptureListeners = [];
            this._queueRemoveListeners = []
        }
        Release() {
            0 < this._fireDepth || (f.clearArray(this._captureListeners), this._captureListenersSet.clear(), f.clearArray(this._listeners), this._listenersSet.clear(), f.clearArray(this._queueAddListeners),
                f.clearArray(this._queueRemoveCaptureListeners), f.clearArray(this._queueRemoveListeners), f.Release(this))
        }
        _AddListener(b, a) {
            this._IsFiring() ? this._queueAddListeners.push([b, a]) : a ? this._captureListenersSet.has(b) || (this._captureListeners.push(b), this._captureListenersSet.add(b)) : this._listenersSet.has(b) || (this._listeners.push(b), this._listenersSet.add(b))
        }
        _RemoveListener(b, a) {
            this._IsFiring() ? a ? this._queueRemoveCaptureListeners.push(b) : this._queueRemoveListeners.push(b) : a ? this._captureListenersSet.has(b) &&
                (this._captureListenersSet.delete(b), f.arrayFindRemove(this._captureListeners, b)) : this._listenersSet.has(b) && (this._listenersSet.delete(b), f.arrayFindRemove(this._listeners, b))
        }
        _IsEmpty() {
            return !this._captureListeners.length && !this._listeners.length
        }
        _IsFiring() {
            return 0 < this._fireDepth
        }
        _ProcessQueuedListeners() {
            for (var b of this._queueAddListeners) this._AddListener(...b);
            f.clearArray(this._queueAddListeners);
            for (var a of this._queueRemoveListeners) this._listenersSet.delete(a);
            for (const d of this._queueRemoveCaptureListeners) this._captureListenersSet.delete(d);
            b = new Set(this._queueRemoveListeners);
            a = new Set(this._queueRemoveCaptureListeners);
            f.arrayRemoveAllInSet(this._listeners, b);
            f.arrayRemoveAllInSet(this._captureListeners, a);
            f.clearArray(this._queueRemoveCaptureListeners);
            f.clearArray(this._queueRemoveListeners)
        }
        _FireCancellable(b) {
            this._IncreaseFireDepth();
            let a = !1;
            for (let d = 0, c = this._captureListeners.length; d < c; ++d)
                if (this._captureListeners[d](b), b.propagationStopped) {
                    a = !0;
                    break
                }
            if (!a)
                for (let d = 0, c = this._listeners.length; d < c && (this._listeners[d](b), !b.propagationStopped); ++d);
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }
        _FireNonCancellable(b) {
            this._IncreaseFireDepth();
            for (let a = 0, d = this._captureListeners.length; a < d; ++a) this._captureListeners[a](b);
            for (let a = 0, d = this._listeners.length; a < d; ++a) this._listeners[a](b);
            this._DecreaseFireDepth();
            return !0
        }
        _IncreaseFireDepth() {
            this._fireDepth++
        }
        _DecreaseFireDepth() {
            this._fireDepth--;
            0 === this._fireDepth && (this._queueAddListeners.length || this._queueRemoveCaptureListeners.length || this._queueRemoveListeners.length) &&
                this._ProcessQueuedListeners()
        }
        SetDelayRemoveEventsEnabled(b) {
            b ? this._IncreaseFireDepth() : this._DecreaseFireDepth()
        }
        _FireAsync(b) {
            let a = [];
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                let e = this._captureListeners[d];
                a.push(f.Asyncify(() => e(b)))
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) {
                let e = this._listeners[d];
                a.push(f.Asyncify(() => e(b)))
            }
            return Promise.all(a).then(() => !b.defaultPrevented)
        }
        _FireAndWait_AsyncOptional(b) {
            const a = [];
            this._IncreaseFireDepth();
            for (let c = 0, e = this._captureListeners.length; c <
                e; ++c) {
                var d = this._captureListeners[c](b);
                d instanceof Promise && a.push(d)
            }
            for (let c = 0, e = this._listeners.length; c < e; ++c) d = this._listeners[c](b), d instanceof Promise && a.push(d);
            this._DecreaseFireDepth();
            return a.length ? Promise.all(a).then(() => !b.defaultPrevented) : !b.defaultPrevented
        }
        async _FireAndWaitAsync(b) {
            return await this._FireAndWait_AsyncOptional(b)
        }
        async _FireAndWaitAsyncSequential(b) {
            this._IncreaseFireDepth();
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                a instanceof Promise && await a
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), a instanceof Promise && await a;
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }* _FireAsGenerator(b) {
            this._IncreaseFireDepth();
            for (let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                f.IsIterator(a) && (yield* a)
            }
            for (let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), f.IsIterator(a) && (yield* a);
            this._DecreaseFireDepth()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Event.Dispatcher = class extends f.DefendedBase {
        constructor() {
            super();
            this._eventHandlers = new Map;
            this._dispatcherWasReleased = !1
        }
        Release() {
            if (this._dispatcherWasReleased) throw Error("already released");
            this.ClearEvents();
            this._dispatcherWasReleased = !0;
            f.Release(this)
        }
        WasReleased() {
            return this._dispatcherWasReleased
        }
        ClearEvents() {
            for (let b of this._eventHandlers.values()) b.Release();
            this._eventHandlers.clear()
        }
        _GetHandlerByType(b, a) {
            let d = this._eventHandlers.get(b);
            return d ? d : a ? (d =
                f.New(f.Event.Handler, b), this._eventHandlers.set(b, d), d) : null
        }
        HasAnyHandlerFor(b) {
            return this._eventHandlers.has(b)
        }
        addEventListener(b, a, d) {
            this._GetHandlerByType(b, !0)._AddListener(a, !!d)
        }
        removeEventListener(b, a, d) {
            let c = this._GetHandlerByType(b, !1);
            c && (c._RemoveListener(a, !!d), c._IsEmpty() && this._eventHandlers.delete(b))
        }
        dispatchEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? b.cancelable ? a._FireCancellable(b) : a._FireNonCancellable(b) : !0
        }
        dispatchEventAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return Promise.resolve(!0);
            b.isAsync = !0;
            return a._FireAsync(b)
        }
        async dispatchEventAndClearAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return !0;
            this._eventHandlers.delete(b.type);
            b.isAsync = !0;
            b = await a._FireAsync(b);
            a.Release();
            return b
        }
        async dispatchEventAndWaitAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsync(b) : !0
        }
        dispatchEventAndWait_AsyncOptional(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? a._FireAndWait_AsyncOptional(b) : !0
        }
        async dispatchEventAndWaitAsyncSequential(b) {
            const a =
                this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsyncSequential(b) : !0
        }
        dispatchGeneratorEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if (!a) return null;
            if (b.cancelable) throw Error("not supported");
            return a._FireAsGenerator(b)
        }
        SetDelayRemoveEventsEnabled(b) {
            for (const a of this._eventHandlers.values()) a.SetDelayRemoveEventsEnabled(b)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = "undefined" !== typeof requestIdleCallback;
    let a = [],
        d = -1,
        c = 0;

    function e(n) {
        d = b && 0 === c ? requestIdleCallback(k, {
            timeout: 35
        }) : setTimeout(k, 0 < c ? 1 : n)
    }

    function k(n) {
        d = -1;
        if (a.length) {
            var m = performance.now(),
                t = 0;
            do {
                h(a.shift());
                var q = performance.now();
                ++t;
                var u = (q - m) / t * 1.1
            } while (a.length && (b && 0 === c && "undefined" !== typeof n ? u < n.timeRemaining() : 12 > q - m + u)); - 1 === d && a.length && e(Math.max(16 - (q - m), 4))
        }
    }

    function h(n) {
        let m;
        try {
            m = n.func()
        } catch (t) {
            n.reject(t);
            return
        }
        n.resolve(m)
    }
    let p = f.QueryString.Has("disable-asyncify");
    p && console.warn("[Asyncify] Asyncify has been disabled due to disable-asyncify in the query string. Some work will now be done synchronously.");
    f.Asyncify = function(n) {
        let m = null;
        f.isDebug && (m = f.GetCallStack());
        return new Promise((t, q) => {
            a.push({
                func: n,
                resolve: t,
                reject: q,
                stack: m
            });
            p ? h(a.pop()) : -1 === d && e(16)
        })
    };
    f.Asyncify.SetHighThroughputMode = function(n) {
        if (n) ++c;
        else if (--c, 0 > c) throw Error("already turned off high throughput mode");
    }
}
"use strict"; {
    const f = self.C3;
    let b = -1;

    function a() {
        b = -1
    }
    f.FastGetDateNow = function() {
        -1 === b && (b = Date.now(), self.setTimeout(a, 16));
        return b
    };
    let d = -1,
        c = -1,
        e = new Set;

    function k() {
        c = d = -1;
        let h = Date.now();
        for (let p of e)
            if (p._CheckTimeout(h)) {
                let n = p._GetDeadline();
                if (-1 === c || n < c) c = n
            } else e.delete(p); - 1 !== c && (d = self.setTimeout(k, Math.max(c - h + 100, 1E3)))
    }
    f.IdleTimeout = class {
        constructor(h, p) {
            this._callback = h;
            this._timeout = 1E3 * p;
            this._deadline = 0;
            this._isActive = !1
        }
        Reset() {
            let h = f.FastGetDateNow();
            this._deadline = h + this._timeout;
            this._isActive || (e.add(this), this._isActive = !0); - 1 === d ? (c = this._deadline, d = self.setTimeout(k, this._timeout + 100)) : this._deadline < c && c > h + 1E3 && (self.clearTimeout(d), c = this._deadline, d = self.setTimeout(k, this._timeout + 100))
        }
        _CheckTimeout(h) {
            return h >= this._deadline ? this._callback() ? (this._deadline = h + this._timeout, !0) : this._isActive = !1 : !0
        }
        _GetDeadline() {
            return this._deadline
        }
        Cancel() {
            this._isActive && (e.delete(this), this._isActive = !1, 0 === e.size && -1 !== d && (self.clearTimeout(d), c = d = -1))
        }
        Release() {
            this.Cancel();
            this._callback = null
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Disposable = class b {
        constructor(a) {
            this._disposed = !1;
            this._disposeAction = a
        }
        Dispose() {
            this._disposed || (this._disposed = !0, this._disposeAction && (this._disposeAction(), this._disposeAction = null))
        }
        IsDisposed() {
            return this._disposed
        }
        Release() {
            this.Dispose()
        }
        static Release(a) {
            return new b(() => a.Release())
        }
        static From(a, d, c, e, k) {
            if ("undefined" === typeof e || null === e) e = !1;
            else if ("boolean" !== typeof e && "object" !== typeof e) throw new TypeError("invalid event listener options");
            k && (c = c.bind(k));
            if (d.includes(" ")) {
                d = d.split(" ");
                k = new f.CompositeDisposable;
                for (let h of d) a.addEventListener(h, c, e), k.Add(f.New(f.Disposable, () => a.removeEventListener(h, c, e)));
                return k
            }
            a.addEventListener(d, c, e);
            return f.New(f.Disposable, () => a.removeEventListener(d, c, e))
        }
    };
    f.StubDisposable = class extends f.Disposable {
        SetAction(b) {
            this._disposeAction = b
        }
    };
    f.CompositeDisposable = class extends f.Disposable {
        constructor(...b) {
            super();
            this._disposables = new Set;
            for (let a of b) this.Add(a)
        }
        Add(...b) {
            if (this._disposed) throw Error("already disposed");
            for (let a of b) this._disposables.add(a)
        }
        Remove(b) {
            if (this._disposed) throw Error("already disposed");
            this._disposables.delete(b)
        }
        RemoveAll() {
            if (this._disposed) throw Error("already disposed");
            if (this._disposables) {
                for (let b of this._disposables) b.Dispose();
                this._disposables.clear()
            }
        }
        IsDisposed() {
            return this._disposed
        }
        Dispose() {
            if (this._disposed) throw Error("already disposed");
            this._disposed = !0;
            for (let b of this._disposables) b.Dispose();
            this._disposables.clear();
            this._disposables = null
        }
        Release() {
            this.Dispose()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.KahanSum = class extends f.DefendedBase {
        constructor() {
            super();
            this._sum = this._t = this._y = this._c = 0
        }
        Add(b) {
            this._y = +b - this._c;
            this._t = this._sum + this._y;
            this._c = this._t - this._sum - this._y;
            this._sum = this._t
        }
        Subtract(b) {
            this._sum -= +b
        }
        Get() {
            return this._sum
        }
        Reset() {
            this._sum = this._t = this._y = this._c = 0
        }
        Set(b) {
            this._t = this._y = this._c = 0;
            this._sum = +b
        }
        Release() {}
    }
}
"use strict"; {
    const f = self.C3,
        b = {
            RBnode: function(a) {
                this.tree = a;
                this.left = this.right = this.tree.sentinel;
                this.parent = null;
                this.color = !1;
                this.key = null
            },
            RedBlackSet: function(a) {
                this.size = 0;
                this.sentinel = new b.RBnode(this);
                this.sentinel.color = !1;
                this.root = this.sentinel;
                this.root.parent = this.sentinel;
                this.compare = a || this.default_compare
            }
        };
    b.RedBlackSet.prototype.default_compare = function(a, d) {
        return a < d ? -1 : d < a ? 1 : 0
    };
    b.RedBlackSet.prototype.clone = function() {
        var a = new b.RedBlackSet(this.compare);
        a.insertAll(this);
        return a
    };
    b.RedBlackSet.prototype.clear = function() {
        this.size = 0;
        this.sentinel = new b.RBnode(this);
        this.sentinel.color = !1;
        this.root = this.sentinel;
        this.root.parent = this.sentinel
    };
    b.RedBlackSet.prototype.leftRotate = function(a) {
        var d = a.right;
        a.right = d.left;
        d.left != this.sentinel && (d.left.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.left ? a.parent.left = d : a.parent.right = d;
        d.left = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.rightRotate = function(a) {
        var d = a.left;
        a.left = d.right;
        d.right != this.sentinel &&
            (d.right.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.right ? a.parent.right = d : a.parent.left = d;
        d.right = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.insert = function(a) {
        if (this.contains(a)) this.get_(a).key = a;
        else {
            var d = new b.RBnode(this);
            d.key = a;
            a = this.sentinel;
            for (var c = this.root; c != this.sentinel;) a = c, c = 0 > this.compare(d.key, c.key) ? c.left : c.right;
            d.parent = a;
            a == this.sentinel ? this.root = d : 0 > this.compare(d.key, a.key) ? a.left = d : a.right = d;
            d.left = this.sentinel;
            d.right = this.sentinel;
            d.color = !0;
            this.insertFixup(d);
            this.size++
        }
    };
    b.RedBlackSet.prototype.insertFixup = function(a) {
        for (; a != this.sentinel && a != this.root && 1 == a.parent.color;)
            if (a.parent == a.parent.parent.left) {
                var d = a.parent.parent.right;
                1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.right && (a = a.parent, this.leftRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.rightRotate(a.parent.parent))
            } else d = a.parent.parent.left, 1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.left && (a = a.parent, this.rightRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.leftRotate(a.parent.parent));
        this.root.color = !1
    };
    b.RedBlackSet.prototype.delete_ = function(a) {
        var d = a.left == this.sentinel || a.right == this.sentinel ? a : this.successor_(a);
        var c = d.left != this.sentinel ? d.left : d.right;
        c.parent = d.parent;
        d.parent == this.sentinel ? this.root = c : d == d.parent.left ? d.parent.left = c : d.parent.right =
            c;
        d != a && (a.key = d.key);
        0 == d.color && this.deleteFixup(c);
        this.size--
    };
    b.RedBlackSet.prototype.deleteFixup = function(a) {
        for (; a != this.root && 0 == a.color;)
            if (a == a.parent.left) {
                var d = a.parent.right;
                1 == d.color && (d.color = !1, a.parent.color = !0, this.leftRotate(a.parent), d = a.parent.right);
                0 == d.left.color && 0 == d.right.color ? (d.color = !0, a = a.parent) : (0 == d.right.color && (d.left.color = !1, d.color = !0, this.rightRotate(d), d = a.parent.right), d.color = a.parent.color, a.parent.color = !1, d.right.color = !1, this.leftRotate(a.parent),
                    a = this.root)
            } else d = a.parent.left, 1 == d.color && (d.color = !1, a.parent.color = !0, this.rightRotate(a.parent), d = a.parent.left), 0 == d.right.color && 0 == d.left.color ? (d.color = !0, a = a.parent) : (0 == d.left.color && (d.right.color = !1, d.color = !0, this.leftRotate(d), d = a.parent.left), d.color = a.parent.color, a.parent.color = !1, d.left.color = !1, this.rightRotate(a.parent), a = this.root);
        a.color = !1
    };
    b.RedBlackSet.prototype.remove = function(a) {
        a = this.get_(a);
        if (a != this.sentinel) {
            var d = a.key;
            this.delete_(a);
            return d
        }
        return null
    };
    b.RedBlackSet.prototype.removeSwapped =
        function(a, d) {
            this.remove(d)
        };
    b.RedBlackSet.prototype.min = function(a) {
        for (; a.left != this.sentinel;) a = a.left;
        return a
    };
    b.RedBlackSet.prototype.max = function(a) {
        for (; a.right != this.sentinel;) a = a.right;
        return a
    };
    b.RedBlackSet.prototype.successor_ = function(a) {
        if (a.right != this.sentinel) return this.min(a.right);
        for (var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.predeccessor_ = function(a) {
        if (a.left != this.sentinel) return this.max(a.left);
        for (var d = a.parent; d != this.sentinel &&
            a == d.left;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.successor = function(a) {
        if (0 < this.size) {
            a = this.get_(a);
            if (a == this.sentinel) return null;
            if (a.right != this.sentinel) return this.min(a.right).key;
            for (var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.predecessor = function(a) {
        if (0 < this.size) {
            a = this.get_(a);
            if (a == this.sentinel) return null;
            if (a.left != this.sentinel) return this.max(a.left).key;
            for (var d = a.parent; d != this.sentinel &&
                a == d.left;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.getMin = function() {
        return this.min(this.root).key
    };
    b.RedBlackSet.prototype.getMax = function() {
        return this.max(this.root).key
    };
    b.RedBlackSet.prototype.get_ = function(a) {
        for (var d = this.root; d != this.sentinel && 0 != this.compare(d.key, a);) d = 0 > this.compare(a, d.key) ? d.left : d.right;
        return d
    };
    b.RedBlackSet.prototype.contains = function(a) {
        return null != this.get_(a).key
    };
    b.RedBlackSet.prototype.getValues = function() {
        var a = [];
        this.forEach(function(d) {
            a.push(d)
        });
        return a
    };
    b.RedBlackSet.prototype.insertAll = function(a) {
        if ("array" == b.typeOf(a))
            for (var d = 0; d < a.length; d++) this.insert(a[d]);
        else if ("function" == b.typeOf(a.forEach)) a.forEach(this.insert, this);
        else if ("function" == b.typeOf(a.getValues))
            for (a = a.getValues(), d = 0; d < a.length; d++) this.insert(a[d]);
        else if ("object" == b.typeOf(a))
            for (d in a) this.insert(a[d])
    };
    b.RedBlackSet.prototype.removeAll = function(a) {
        if ("array" == b.typeOf(a))
            for (var d = 0; d < a.length; d++) this.remove(a[d]);
        else if ("function" == b.typeOf(a.forEach)) a.forEach(this.removeSwapped, this);
        else if ("function" == b.typeOf(a.getValues))
            for (a = a.getValues(), d = 0; d < a.length; d++) this.remove(a[d]);
        else if ("object" == b.typeOf(a))
            for (d in a) this.remove(a[d])
    };
    b.RedBlackSet.prototype.containsAll = function(a) {
        if ("array" == b.typeOf(a)) {
            for (var d = 0; d < a.length; d++)
                if (!this.contains(a[d])) return !1;
            return !0
        }
        if ("function" == b.typeOf(a.forEach)) return a.every(this.contains, this);
        if ("function" == b.typeOf(a.getValues)) {
            a = a.getValues();
            for (d =
                0; d < a.length; d++)
                if (!this.contains(a[d])) return !1;
            return !0
        }
        if ("object" == b.typeOf(a)) {
            for (d in a)
                if (!this.contains(a[d])) return !1;
            return !0
        }
    };
    b.RedBlackSet.prototype.range = function(a, d) {
        var c = [];
        this.traverseFromTo(function(e) {
            c.push(e)
        }, a, d);
        return c
    };
    b.RedBlackSet.prototype.traverse = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.min(this.root); c != this.sentinel && !a.call(d, c.key, this);) c = this.successor_(c)
    };
    b.RedBlackSet.prototype.traverseFrom = function(a, d, c) {
        if (!this.isEmpty())
            for (d = this.get_(d); d !=
                this.sentinel && !a.call(c, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseTo = function(a, d, c) {
        if (!this.isEmpty()) {
            var e = this.min(this.root);
            for (d = this.get_(d); e != d && !a.call(c, e.key, this);) e = this.successor_(e)
        }
    };
    b.RedBlackSet.prototype.traverseFromTo = function(a, d, c, e) {
        if (!this.isEmpty())
            for (d = this.get_(d), c = this.get_(c); d != c && !a.call(e, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseBackwards = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.max(this.root); c != this.sentinel &&
                !a.call(d, c.key, this);) c = this.predeccessor_(c)
    };
    b.RedBlackSet.prototype.forEach = function(a, d) {
        if (!this.isEmpty())
            for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.call(d, c.key, c.key, this)
    };
    b.RedBlackSet.prototype.some = function(a, d) {
        if (this.isEmpty()) return !1;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c))
            if (a.call(d, c.key, c.key, this)) return !0;
        return !1
    };
    b.RedBlackSet.prototype.every = function(a, d) {
        if (this.isEmpty()) return !1;
        for (var c = this.min(this.root); c != this.sentinel; c =
            this.successor_(c))
            if (!a.call(d, c.key, c.key, this)) return !1;
        return !0
    };
    b.RedBlackSet.prototype.map = function(a, d) {
        var c = [];
        if (this.isEmpty()) return c;
        for (var e = this.min(this.root); e != this.sentinel; e = this.successor_(e)) c.push(a.call(d, e.key, e.key, this));
        return c
    };
    b.RedBlackSet.prototype.filter = function(a, d) {
        var c = [];
        if (this.isEmpty()) return c;
        for (var e = this.min(this.root); e != this.sentinel; e = this.successor_(e)) a.call(d, e.key, e.key, this) && c.push(e.key);
        return c
    };
    b.RedBlackSet.prototype.getCount = function() {
        return this.size
    };
    b.RedBlackSet.prototype.isEmpty = function() {
        return 0 == this.size
    };
    b.RedBlackSet.prototype.isSubsetOf = function(a) {
        var d = b.getCount(a);
        if (this.getCount() > d) return !1;
        d = 0;
        if (this.isEmpty()) return !0;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) b.contains.call(a, a, c.key) && d++;
        return d == this.getCount()
    };
    b.RedBlackSet.prototype.intersection = function(a) {
        var d = new b.RedBlackSet(this.compare);
        if (this.isEmpty()) return d;
        for (var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.contains.call(a,
            c.key, c.key, this) && d.insert(c.key);
        return d
    };
    f.RedBlackSet = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._rbSet = new b.RedBlackSet(a);
            this._enableQueue = !1;
            this._queueInsert = new Set;
            this._queueRemove = new Set
        }
        Add(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.delete(a) : this._queueInsert.add(a) : this._rbSet.insert(a)
        }
        Remove(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.add(a) : this._queueInsert.delete(a) : this._rbSet.remove(a)
        }
        Has(a) {
            return this._enableQueue ? this._queueInsert.has(a) ?
                !0 : !this._queueRemove.has(a) && this._rbSet.contains(a) : this._rbSet.contains(a)
        }
        Clear() {
            this._rbSet.clear();
            this._queueInsert.clear();
            this._queueRemove.clear()
        }
        toArray() {
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            return this._rbSet.getValues()
        }
        GetSize() {
            return this._rbSet.getCount() + this._queueInsert.size - this._queueRemove.size
        }
        IsEmpty() {
            return 0 === this.GetSize()
        }
        Front() {
            if (this.IsEmpty()) throw Error("empty set");
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this._rbSet;
            return a.min(a.root).key
        }
        Shift() {
            if (this.IsEmpty()) throw Error("empty set");
            if (this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this.Front();
            this.Remove(a);
            return a
        }
        SetQueueingEnabled(a) {
            a = !!a;
            if (this._enableQueue !== a && (this._enableQueue = a, !a)) {
                for (const d of this._queueRemove) this._rbSet.remove(d);
                this._queueRemove.clear();
                for (const d of this._queueInsert) this._rbSet.insert(d);
                this._queueInsert.clear()
            }
        }
        ForEach(a) {
            this._rbSet.forEach(a)
        }* values() {
            if (!this.IsEmpty()) {
                var a =
                    this._rbSet;
                for (let d = a.min(a.root); d != a.sentinel; d = a.successor_(d)) yield d.key
            }
        }[Symbol.iterator]() {
            return this.values()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.PromiseThrottle = class {
        constructor(b = f.hardwareConcurrency) {
            this._maxParallel = b;
            this._queue = [];
            this._activeCount = 0
        }
        Add(b) {
            return new Promise((a, d) => {
                this._queue.push({
                    func: b,
                    resolve: a,
                    reject: d
                });
                this._MaybeStartNext()
            })
        }
        _FindInQueue(b) {
            for (let a = 0, d = this._queue.length; a < d; ++a)
                if (this._queue[a].func === b) return a;
            return -1
        }
        RemoveAndResolve(b, a) {
            b = this._FindInQueue(b);
            if (-1 === b) throw Error("cannot find promise to resolve");
            this._queue[b].resolve(a);
            this._queue.splice(b, 1)
        }
        RemoveAndReject(b,
            a) {
            b = this._FindInQueue(b);
            if (-1 === b) throw Error("cannot find promise to reject");
            this._queue[b].reject(a);
            this._queue.splice(b, 1)
        }
        async _MaybeStartNext() {
            if (this._queue.length && !(this._activeCount >= this._maxParallel)) {
                this._activeCount++;
                var b = this._queue.shift();
                try {
                    const a = await b.func();
                    b.resolve(a)
                } catch (a) {
                    b.reject(a)
                }
                this._activeCount--;
                this._MaybeStartNext()
            }
        }
        static async Batch(b, a) {
            const d = [];
            let c = !1;
            const e = async h => {
                    for (;
                        (h = a.pop()) && !c;) try {
                        d.push(await h())
                    } catch (p) {
                        throw c = !0, p;
                    }
                },
                k = [];
            for (; b--;) k.push(e());
            await Promise.all(k);
            return d
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.RateLimiter = class {
        constructor(b, a, d) {
            this._callback = b;
            this._interval = a;
            this._intervalOnBattery = d || 2 * a;
            this._timerId = -1;
            this._lastCallTime = -Infinity;
            this._timerCallFunc = () => this._OnTimer();
            this._canRunImmediate = this._ignoreReset = !1;
            this._callbackArguments = null
        }
        SetCanRunImmediate(b) {
            this._canRunImmediate = !!b
        }
        _GetInterval() {
            return "undefined" !== typeof f.Battery && f.Battery.IsOnBatteryPower() ? this._intervalOnBattery : this._interval
        }
        Call(...b) {
            if (-1 === this._timerId) {
                this._callbackArguments =
                    b;
                b = f.FastGetDateNow();
                var a = b - this._lastCallTime,
                    d = this._GetInterval();
                a >= d && this._canRunImmediate ? (this._lastCallTime = b, this._RunCallback()) : this._timerId = self.setTimeout(this._timerCallFunc, Math.max(d - a, 4))
            }
        }
        _RunCallback() {
            this._ignoreReset = !0;
            const b = this._callbackArguments;
            this._callbackArguments = null;
            b ? this._callback(...b) : this._callback();
            this._ignoreReset = !1
        }
        Reset() {
            this._ignoreReset || (this._CancelTimer(), this._callbackArguments = null, this._lastCallTime = f.FastGetDateNow())
        }
        _OnTimer() {
            this._timerId = -1;
            this._lastCallTime = f.FastGetDateNow();
            this._RunCallback()
        }
        _CancelTimer() {
            -1 !== this._timerId && (self.clearTimeout(this._timerId), this._timerId = -1)
        }
        Release() {
            this._CancelTimer();
            this._timerCallFunc = this._callbackArguments = this._callback = null
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SVGRasterManager = class {
        constructor() {
            this._images = new Map;
            this._allowNpotSurfaces = !1;
            this._redrawCallback = this._releaseResultCallback = this._rasterAtSizeCallback = this._getBaseSizeCallback = null
        }
        SetNpotSurfaceAllowed(b) {
            this._allowNpotSurfaces = !!b
        }
        IsNpotSurfaceAllowed() {
            return this._allowNpotSurfaces
        }
        SetGetBaseSizeCallback(b) {
            this._getBaseSizeCallback = b
        }
        GetBaseSize(b) {
            if (!this._getBaseSizeCallback) throw Error("no get base size callback set");
            return this._getBaseSizeCallback(b)
        }
        SetRasterAtSizeCallback(b) {
            this._rasterAtSizeCallback =
                b
        }
        RasterAtSize(b, a, d, c, e, k) {
            if (!this._rasterAtSizeCallback) throw Error("no raster at size callback set");
            return this._rasterAtSizeCallback(b, a, d, c, e, k)
        }
        SetReleaseResultCallback(b) {
            this._releaseResultCallback = b
        }
        ReleaseResult(b) {
            if (!this._releaseResultCallback) throw Error("no release result callback set");
            this._releaseResultCallback(b)
        }
        SetRedrawCallback(b) {
            this._redrawCallback = b
        }
        Redraw() {
            if (!this._redrawCallback) throw Error("no redraw callback set");
            this._redrawCallback()
        }
        AddImage(b) {
            let a = this._images.get(b);
            a || (a = f.New(f.SVGRasterImage, this, b), this._images.set(b, a));
            a.IncReference();
            return a
        }
        _RemoveImage(b) {
            this._images.delete(b.GetDataSource())
        }
        OnTexturesChanged() {
            for (const b of this._images.values()) b.ReleaseRasterizedResult(), b.ForceRasterAgain()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SVGRasterImage = class {
        constructor(b, a) {
            this._manager = b;
            this._dataSource = a;
            this._baseHeight = this._baseWidth = this._refCount = 0;
            this._getBaseSizePromise = this._manager.GetBaseSize(a).then(d => {
                this._baseWidth = d[0];
                this._baseHeight = d[1];
                this._manager.Redraw()
            }).catch(d => {
                console.error("[SVG] Error loading SVG: ", d);
                this._hadError = !0;
                this._manager.Redraw()
            });
            this._rasterImageHeight = this._rasterImageWidth = this._rasterSurfaceHeight = this._rasterSurfaceWidth = 0;
            this._isRasterizing = !1;
            this._rasterizedResult =
                null;
            this._hadError = this._forceRaster = !1
        }
        Release() {
            if (0 >= this._refCount) throw Error("already released");
            this._refCount--;
            0 === this._refCount && this._Release()
        }
        ReleaseRasterizedResult() {
            this._rasterizedResult && (this._manager.ReleaseResult(this._rasterizedResult), this._rasterizedResult = null)
        }
        _Release() {
            this.ReleaseRasterizedResult();
            this._manager._RemoveImage(this);
            this._manager = null
        }
        GetDataSource() {
            return this._dataSource
        }
        IncReference() {
            this._refCount++
        }
        HasReferences() {
            return 0 < this._refCount
        }
        GetRasterizedResult() {
            return this._rasterizedResult
        }
        ForceRasterAgain() {
            this._forceRaster = !0
        }
        async StartRasterForSize(b, a, d) {
            if (0 !== a && 0 !== d && !this._hadError && !this._isRasterizing) {
                var c = f.nextHighestPowerOfTwo(Math.ceil(a)),
                    e = f.nextHighestPowerOfTwo(Math.ceil(d)),
                    k = Math.max(c, e);
                2048 < k && (k = 2048 / k, a *= k, d *= k, c = Math.min(Math.ceil(c * k), 2048), e = Math.min(Math.ceil(e * k), 2048));
                a < c && d < e && (d = a / d, c / e > d ? (a = e * d, d = e) : (a = c, d = c / d));
                this._manager.IsNpotSurfaceAllowed() && (c = Math.ceil(a), e = Math.ceil(d));
                c <= this._rasterSurfaceWidth && e <= this._rasterSurfaceHeight && !this._forceRaster || (this._isRasterizing = !0, this._rasterSurfaceWidth = c, this._rasterSurfaceHeight = e, b = await this._manager.RasterAtSize(this._dataSource, b, this._rasterSurfaceWidth, this._rasterSurfaceHeight, a, d), this._manager && (this.ReleaseRasterizedResult(), this._rasterizedResult = b, this._rasterImageWidth = a, this._rasterImageHeight = d, this._forceRaster = this._isRasterizing = !1, this._manager.Redraw()))
            }
        }
        WhenBaseSizeReady() {
            return this._getBaseSizePromise
        }
        GetBaseWidth() {
            return this._baseWidth
        }
        GetBaseHeight() {
            return this._baseHeight
        }
        GetRasterWidth() {
            return this._rasterImageWidth
        }
        GetRasterHeight() {
            return this._rasterImageHeight
        }
        HadError() {
            return this._hadError
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.UTF8_BOM = "\ufeff";
    const b = new Set([..."0123456789"]);
    f.IsNumericChar = function(n) {
        return b.has(n)
    };
    const a = new Set([..." \t\n\r\u00a0\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000"]);
    f.IsWhitespaceChar = function(n) {
        return a.has(n)
    };
    f.FilterWhitespace = function(n) {
        return [...n].filter(m => !f.IsWhitespaceChar(m)).join("")
    };
    f.IsStringAllWhitespace = function(n) {
        for (const m of n)
            if (!f.IsWhitespaceChar(m)) return !1;
        return !0
    };
    f.IsUnprintableChar =
        function(n) {
            return 1 === n.length && 32 > n.charCodeAt(0)
        };
    f.FilterUnprintableChars = function(n) {
        return [...n].filter(m => !f.IsUnprintableChar(m)).join("")
    };
    const d = new Set([..."0123456789.+-e"]);
    f.IsStringNumber = function(n) {
        n = n.trim();
        if (!n.length) return !1;
        let m = n.charAt(0);
        if ("-" !== m && !b.has(m)) return !1;
        for (let t of n)
            if (!d.has(t)) return !1;
        return !0
    };
    f.RemoveTrailingDigits = function(n) {
        let m = n.length;
        for (; 0 < m;) {
            let t = n.charAt(m - 1);
            if (!f.IsNumericChar(t)) break;
            --m
        }
        return n.substr(0, m)
    };
    f.IncrementNumberAtEndOf =
        function(n) {
            let m = f.RemoveTrailingDigits(n);
            n = (n = n.substr(m.length)) ? (parseInt(n, 10) + 1).toString() : "2";
            return m + n
        };
    const c = new Map([
        ["&", "&amp;"],
        ["<", "&lt;"],
        [">", "&gt;"],
        ['"', "&quot;"],
        ["'", "&#39;"]
    ]);

    function e(n) {
        return c.get(n)
    }
    const k = /[&<>"']/g;
    f.EscapeHTML = function(n) {
        return n.replace(k, e)
    };
    f.EscapeJS = function(n) {
        n = f.ReplaceAll(n, "\\", "\\\\");
        n = f.ReplaceAll(n, '"', '\\"');
        n = f.ReplaceAll(n, "\t", "\\t");
        n = f.ReplaceAll(n, "\r", "");
        return f.ReplaceAll(n, "\n", "\\n")
    };
    f.EscapeXML = function(n) {
        n = f.ReplaceAll(n,
            "&", "&amp;");
        n = f.ReplaceAll(n, "<", "&lt;");
        n = f.ReplaceAll(n, ">", "&gt;");
        return f.ReplaceAll(n, '"', "&quot;")
    };
    const h = /[-[\]{}()*+?.,\\^$|#\s]/g;
    f.EscapeRegex = function(n) {
        return n.replace(h, "\\$&")
    };
    f.FindAll = function(n, m, t = !1) {
        if (!m) return [];
        t || (n = n.toLowerCase(), m = m.toLowerCase());
        t = m.length;
        var q = 0;
        let u = [];
        for (; - 1 < (q = n.indexOf(m, q));) u.push(q), q += t;
        return u
    };
    f.ReplaceAll = function(n, m, t) {
        return n.replaceAll(m, () => t)
    };
    f.ReplaceAllCaseInsensitive = function(n, m, t) {
        return n.replace(new RegExp(f.EscapeRegex(m),
            "gi"), () => t)
    };
    f.SetElementContent = function(n, m) {
        "string" === typeof m ? n.textContent = m : m.isPlainText() ? n.textContent = m.toString() : (n.innerHTML = m.toHTML(), m instanceof f.BBString && m.attachLinkHandlers(n))
    };
    f.StringLikeEquals = function(n, m) {
        return n instanceof f.HtmlString || n instanceof f.BBString ? n.equals(m) : m instanceof f.HtmlString || m instanceof f.BBString ? m.equals(n) : n === m
    };
    f.StringSubstitute = function(n, ...m) {
        let t = n;
        for (let q = 0, u = m.length; q < u; ++q) {
            const r = `{${q}}`;
            if (!n.includes(r)) throw Error(`missing placeholder '${r}' in string substitution`);
            t = t.replace(r, m[q].toString())
        }
        return t
    };
    f.StringSubstituteAllowMissing = function(n, ...m) {
        let t = n,
            q = -1,
            u = -1;
        for (let r = 0, x = m.length; r < x; ++r) {
            const z = `{${r}}`;
            n.includes(z) ? (u = r, t = t.replace(z, m[r].toString())) : -1 === q && (q = r)
        }
        if (0 <= q && 0 <= u && q < u) throw Error(`missing placeholder '${q}' in string substitution`);
        return t
    };
    f.StringSubstituteMap = function(n, m) {
        for (let [t, q] of Object.entries(m)) n = n.replaceAll(t, q.toString());
        return n
    };
    f.SortAZCaseInsensitive = function(n, m) {
        n = n.toLowerCase();
        m = m.toLowerCase();
        return n >
            m ? 1 : n < m ? -1 : 0
    };
    f.FormatDataSize = function(n, m) {
        m = "common." + (m ? "dataRates" : "dataSizes") + ".";
        const t = self.langSub;
        if (1024 > n) return t(m + "bytes", n);
        if (1048576 > n) return n /= 1024, n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n), t(m + "kilobytes", n);
        if (1073741824 > n) return n /= 1048576, n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n), t(m + "megabytes", n);
        if (1099511627776 > n) return n /= 1073741824, n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n), t(m + "gigabytes", n);
        n /= 1099511627776;
        n = 10 > n ? Math.round(10 * n) / 10 : Math.round(n);
        return t(m + "terabytes",
            n)
    };
    const p = {
        approximate: !1,
        days: !0,
        hours: !0,
        minutes: !0,
        seconds: !0
    };
    f.FormatTime = function(n, m) {
        m = Object.assign({}, p, m);
        f.Lang.PushContext("common.time");
        const t = [],
            q = self.lang,
            u = self.langPluralSub;
        if (m.days) {
            var r = Math.floor(n / 86400);
            0 < r && (n -= 86400 * r, t.push(u(".days", null, r)))
        }
        m.hours && (r = Math.floor(n / 3600), 0 < r || t.length) && (n -= 3600 * r, t.push(u(".hours", null, r)));
        m.minutes && (r = Math.floor(n / 60), 0 < r || t.length || !m.seconds) && (n -= 60 * r, t.push(u(".minutes", null, r)));
        m.seconds && t.push(u(".seconds", null, Math.floor(n %
            60)));
        n = (m.approximate ? q(".approx-prefix") : "") + t.join(q(".separator"));
        f.Lang.PopContext();
        return n
    };
    f.ZeroPad = function(n, m) {
        let t = 0 > n ? "-" : "";
        n = Math.abs(n);
        n = n.toString();
        m -= n.length;
        for (let q = 0; q < m; ++q) t += "0";
        return t + n
    };
    f.StringToTitleCase = function(n) {
        return n.toLowerCase().replace(/\b\w/g, m => m.toUpperCase())
    };
    f.CompareVersionStrings = function(n, m) {
        n = n.split(".").map(t => t.trim());
        m = m.split(".").map(t => t.trim());
        f.resizeArray(n, 4, "0");
        f.resizeArray(m, 4, "0");
        n = n.map(t => parseInt(t, 10));
        m = m.map(t => parseInt(t,
            10));
        for (let t = 0; 4 > t; ++t) {
            const q = n[t] - m[t];
            if (0 !== q) return 0 > q ? -1 : 1
        }
        return 0
    };
    f.CreateGUID = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, n => {
            const m = Math.floor(16 * Math.random());
            return ("x" === n ? m : m & 3 | 8).toString(16)
        })
    };
    f.StringHammingDistance = function(n, m) {
        if (n.length !== m.length) throw Error("strings must be same length");
        let t = 0;
        for (let q = 0, u = n.length; q < u; ++q) n.charAt(q) !== m.charAt(q) && ++t;
        return t
    };
    f.StringLevenshteinDistance = function(n, m) {
        if (0 === n.length) return m.length;
        if (0 === m.length) return n.length;
        let t, q, u, r;
        if (n.length > m.length) {
            var x = n;
            n = m;
            m = x
        }
        r = Array(n.length + 1);
        for (x = 0; x <= n.length; x++) r[x] = x;
        for (x = 1; x <= m.length; x++) {
            q = x;
            for (t = 1; t <= n.length; t++) u = m[x - 1] === n[t - 1] ? r[t - 1] : Math.min(r[t - 1] + 1, Math.min(q + 1, r[t] + 1)), r[t - 1] = q, q = u;
            r[n.length] = q
        }
        return r[n.length]
    }
}
"use strict"; {
    const f = self.C3,
        b = new Map([
            ["b", "strong"],
            ["i", "em"],
            ["s", "s"],
            ["u", "u"],
            ["sub", "sub"],
            ["sup", "sup"],
            ["small", "small"],
            ["mark", "mark"],
            ["a1", "a"],
            ["a2", "a"],
            ["a3", "a"],
            ["a4", "a"],
            ["a5", "a"],
            ["a6", "a"],
            ["a7", "a"],
            ["a8", "a"],
            ["a9", "a"],
            ["bad", ["span", "bbCodeBad"]],
            ["good", ["span", "bbCodeGood"]],
            ["info", ["span", "bbCodeInfo"]],
            ["h1", ["span", "bbCodeH1"]],
            ["h2", ["span", "bbCodeH2"]],
            ["h3", ["span", "bbCodeH3"]],
            ["h4", ["span", "bbCodeH4"]],
            ["item", ["span", "bbCodeItem"]]
        ]),
        a = /\[(\/?)([a-zA-Z0-9]+)\]/g,
        d = /\[(\/?)([^\[]*?)\]/g;
    let c = null,
        e = 0;

    function k(p, n, m) {
        var t = b.get(m);
        if (t) {
            if ("string" === typeof t) {
                if ("a" !== t || n) return "<" + n + t + ">";
                n = parseInt(m.substring(1), 10) - 1;
                if (0 > n || n >= c.length) throw Error("invalid bbcode link substitution");
                t = c[n];
                if ("string" === typeof t) return `<a href="${c[n]}">`;
                if ("function" === typeof t) return `<a class="bblink${n}">`;
                throw new TypeError("invalid bbcode link action");
            }
            if (Array.isArray(t)) return p = t[0], t = t[1], n ? "</" + p + ">" : `<${p} class="${t}">`
        } else return "class" === m ? n ? "</span>" : `<span class="bbclass${e++}">` :
            p
    }
    const h = /\n/g;
    f.BBString = class {
        constructor(p, n) {
            this._bbstr = n && n.noEscape ? p : f.EscapeHTML(p);
            this._htmlstr = "";
            this._convertLineBreaks = !1;
            this._linkActions = [];
            if (n && (this._convertLineBreaks = !!n.convertLineBreaks, n.links)) {
                if (9 < n.links.length) throw Error("too many links");
                this._linkActions = n.links
            }
            this._hasAnyBBtags = this._bbstr.includes("[");
            this._needsLineBreakConversion = this._convertLineBreaks && this._bbstr.includes("\n");
            this._isPlain = !this._hasAnyBBtags && !this._needsLineBreakConversion && !this._bbstr.includes("&");
            this._hasParsedFragments = !1;
            this._fragments = []
        }
        toString() {
            return this._bbstr
        }
        valueOf() {
            return this._bbstr
        }
        isPlainText() {
            return this._isPlain
        }
        toPlainText() {
            return this._hasAnyBBtags ? this._bbstr.replace(a, "") : this._bbstr
        }
        toHTML() {
            if (this._isPlain) return this._bbstr;
            if (!this._htmlstr && this._bbstr) {
                let p = this._bbstr;
                this._hasAnyBBtags && (e = 0, c = this._linkActions, p = p.replace(a, k), c = null);
                this._needsLineBreakConversion && (p = p.replace(h, "<br>"));
                this._htmlstr = p
            }
            return this._htmlstr
        }
        attachLinkHandlers(p) {
            if (this._linkActions.length)
                for (let n =
                        0, m = this._linkActions.length; n < m; ++n) {
                    const t = this._linkActions[n];
                    if ("function" !== typeof t) continue;
                    const q = p.querySelector(".bblink" + n);
                    if (!q) throw Error("unable to attach BBString link handler");
                    q.onclick = t
                }
        }
        equals(p) {
            return p instanceof f.HtmlString ? this.toHTML() === p.toHTML() : p instanceof f.BBString ? this._bbstr === p._bbstr : this._bbstr === p
        }
        toFragmentList() {
            if (this._hasParsedFragments) return this._fragments;
            const p = this._bbstr,
                n = [];
            let m = d.lastIndex = 0;
            for (var t; null !== (t = d.exec(p));) {
                var q = t.index;
                if (0 < q && "\\" === p.charAt(q - 1)) continue;
                var u = t[0],
                    r = t[1];
                t = t[2];
                const x = p.substring(m, q);
                m = q + u.length;
                x && this._fragments.push({
                    text: x,
                    styles: n.slice(0)
                });
                if (t)
                    if (r)
                        for (t = t.toLowerCase(), q = n.length - 1; 0 <= q; --q) {
                            if (n[q].tag === t) {
                                n.splice(q, 1);
                                break
                            }
                        } else q = t, u = null, r = t.indexOf("="), -1 !== r ? (q = t.substring(0, r).toLowerCase(), u = t.substring(r + 1)) : q = q.toLowerCase(), n.push({
                            tag: q,
                            param: u
                        })
            }
            m < p.length && this._fragments.push({
                text: p.substring(m),
                styles: n.slice(0)
            });
            for (const x of this._fragments) x.text = this._ProcessBBCodeEscapeSequences(x.text);
            this._hasParsedFragments = !0;
            return this._fragments
        }
        _ProcessBBCodeEscapeSequences(p) {
            p = f.ReplaceAll(p, "\\[", "[");
            return f.ReplaceAll(p, "\\\\", "\\")
        }
        static StripTags(p) {
            return f.New(f.BBString, p, {
                noEscape: !0
            }).toPlainText()
        }
        static StripAnyTags(p) {
            return p.replace(d, "")
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.WordWrap = class {
        constructor() {
            this._lines = []
        }
        GetLines() {
            return this._lines
        }
        GetLineCount() {
            return this._lines.length
        }
        _MeasureLine(b, a) {
            let d = 0,
                c = 0,
                e = 0,
                k = 0,
                h = 0;
            for (const p of b) - 1 === p.width && (b = a(p.text, p.styles), p.width = b.width, p.height = b.height, p.fontBoundingBoxAscent = b.fontBoundingBoxAscent || 0, p.fontBoundingBoxDescent = b.fontBoundingBoxDescent || 0, p.topToAlphabeticDistance = b.topToAlphabeticDistance || 0), d += p.width, c = Math.max(c, p.height), e = Math.max(e, p.fontBoundingBoxAscent), k = Math.max(k,
                p.fontBoundingBoxDescent), h = Math.max(h, p.topToAlphabeticDistance);
            return {
                width: d,
                height: c,
                fontBoundingBoxAscent: e,
                fontBoundingBoxDescent: k,
                topToAlphabeticDistance: h
            }
        }
        _AddLine(b, a, d, c, e, k) {
            this._lines.push({
                fragments: b,
                width: a,
                height: d,
                fontBoundingBoxAscent: c,
                fontBoundingBoxDescent: e,
                topToAlphabeticDistance: k
            })
        }
        WordWrap(b, a, d, c, e) {
            "string" === typeof b && (b = [{
                text: b,
                styles: []
            }]);
            f.clearArray(this._lines);
            if (!(!b.length || 1 === b.length && !b[0].text.length || 2 > d)) {
                if (1 === b.length) {
                    var k = b[0];
                    const h = k.text;
                    k = k.styles;
                    if (100 >= h.length && !h.includes("\n")) {
                        let {
                            width: p,
                            height: n,
                            fontBoundingBoxAscent: m,
                            fontBoundingBoxDescent: t,
                            topToAlphabeticDistance: q
                        } = a(h, k);
                        p += e;
                        m = m || 0;
                        t = t || 0;
                        q = q || 0;
                        if (p <= d) {
                            this._AddLine([{
                                text: h,
                                styles: k,
                                width: p,
                                height: n,
                                fontBoundingBoxAscent: m,
                                fontBoundingBoxDescent: t,
                                topToAlphabeticDistance: q
                            }], p, n, m, t, q);
                            return
                        }
                    }
                }
                if ("word" === c) c = this._TokeniseWords(b);
                else {
                    c = [];
                    for (const h of b) f.appendArray(c, [...h.text].map(p => [{
                        text: p,
                        styles: h.styles
                    }]))
                }
                this._WrapText(c, a, d, e)
            }
        }
        _TokeniseWords(b) {
            const a = [];
            let d = [],
                c = !1;
            for (const k of b) {
                var e = k.text;
                b = k.styles;
                for (const h of e) "\n" === h ? (0 < d.length && a.push(d), a.push([{
                    text: "\n",
                    styles: b
                }]), d = []) : 0 === d.length ? (d.push({
                    text: h,
                    styles: b
                }), c = f.IsWhitespaceChar(h)) : (e = f.IsWhitespaceChar(h), e === c ? (e = d[d.length - 1], e.styles === b ? e.text += h : d.push({
                    text: h,
                    styles: b
                })) : (a.push(d), d = [], d.push({
                    text: h,
                    styles: b
                }), c = e))
            }
            0 < d.length && a.push(d);
            return a
        }
        _CopyLine(b) {
            return b.map(a => ({
                text: a.text,
                styles: a.styles,
                width: a.width,
                height: a.height,
                fontBoundingBoxAscent: a.fontBoundingBoxAscent,
                fontBoundingBoxDescent: a.fontBoundingBoxDescent,
                topToAlphabeticDistance: a.topToAlphabeticDistance
            }))
        }
        _AddWordToLine(b, a) {
            var d = b.length ? b[b.length - 1] : null;
            let c = 0;
            d && a[0].styles === d.styles && (d.text += a[0].text, d.width = -1, d.height = -1, d.fontBoundingBoxAscent = -1, d.fontBoundingBoxDescent = -1, d.topToAlphabeticDistance = -1, c = 1);
            for (d = a.length; c < d; ++c) {
                const e = a[c];
                b.push({
                    text: e.text,
                    styles: e.styles,
                    width: -1,
                    height: -1,
                    fontBoundingBoxAscent: -1,
                    fontBoundingBoxDescent: -1,
                    topToAlphabeticDistance: -1
                })
            }
        }
        _WrapText(b,
            a, d, c) {
            let e = [],
                k = 0,
                h = 0,
                p = 0,
                n = 0;
            var m = 0;
            for (const t of b) {
                if (1 === t.length && "\n" === t[0].text) {
                    0 === h && (m = a(" ", t[0].styles), h = m.height, p = m.fontBoundingBoxAscent || 0, n = m.fontBoundingBoxDescent || 0, m = m.topToAlphabeticDistance || 0);
                    this._AddLine(e, k, h, p, n, m);
                    e = [];
                    m = n = p = h = k = 0;
                    continue
                }
                b = this._CopyLine(e);
                this._AddWordToLine(b, t);
                const q = this._MeasureLine(b, a),
                    u = q.width;
                u >= d ? (0 < e.length && this._AddLine(e, k, h, p, n, m), e = [], f.IsStringAllWhitespace(t[0].text) ? m = n = p = h = k = 0 : (this._AddWordToLine(e, t), m = this._MeasureLine(e,
                    a), k = m.width, h = m.height, p = m.fontBoundingBoxAscent, n = m.fontBoundingBoxDescent, m = m.topToAlphabeticDistance)) : (e = b, k = u, h = q.height, p = q.fontBoundingBoxAscent, n = q.fontBoundingBoxDescent, m = q.topToAlphabeticDistance)
            }
            0 < e.length && this._AddLine(e, k, h, p, n, m);
            this._TrimLinesTrailingWhitespace(a, c)
        }
        _TrimLinesTrailingWhitespace(b, a) {
            for (const c of this._lines) {
                const e = c.fragments;
                if (!e.length) continue;
                let k = e[e.length - 1];
                var d = k.text;
                const h = d.trimEnd();
                if (!h) c.width -= k.width, e.pop();
                else if (h.length < d.length) {
                    d =
                        b(h, k.styles).width;
                    const p = k.width - d;
                    k.width = d;
                    k.text = h;
                    c.width -= p
                }
                0 !== a && 0 < e.length && (k = e[e.length - 1], k.width += a, c.width += a)
            }
        }
        Clear() {
            f.clearArray(this._lines)
        }
        GetMaxLineWidth() {
            return this._lines.reduce((b, a) => Math.max(b, a.width), 0)
        }
        GetTotalLineHeight() {
            return this._lines.reduce((b, a) => b + a.height, 0)
        }
    }
}
"use strict";
self.C3.Gfx = {
    AreMat4sEqual(f, b) {
        return f[0] === b[0] && f[1] === b[1] && f[2] === b[2] && f[3] === b[3] && f[4] === b[4] && f[5] === b[5] && f[6] === b[6] && f[7] === b[7] && f[8] === b[8] && f[9] === b[9] && f[10] === b[10] && f[11] === b[11] && f[12] === b[12] && f[13] === b[13] && f[14] === b[14] && f[15] === b[15]
    }
};
"use strict"; {
    const f = self.C3,
        b = [0, 0, 0, 0, 0, 0, 0, 0],
        a = self.glMatrix,
        d = a.vec3,
        c = a.mat4,
        e = d.fromValues(0, 0, 0);
    new f.Quad(0, 0, 1, 0, 1, 1, 0, 1);
    f.Gfx.RendererBase = class {
        constructor() {
            this._height = this._width = 0;
            this._cam = d.fromValues(0, 0, 100);
            this._look = d.fromValues(0, 0, 0);
            this._up = d.fromValues(0, 1, 0);
            this._worldScale = d.fromValues(1, 1, 1);
            this._matP = c.create();
            this._matMV = c.create();
            this._lastMV = c.create();
            this._allShaderPrograms = [];
            this._shaderProgramsByName = new Map;
            this._spSmoothLineFill = this._spSmoothEllipseOutline = this._spSmoothEllipseFill =
                this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._stateGroups = new Map;
            this._currentStateGroup = null;
            this._blendModeTable = [];
            this._namedBlendModeMap = new Map;
            this._frameNumber = this._currentZ = this._baseZ = 0;
            this._enableMipmaps = !0
        }
        FillIndexBufferData(k) {
            let h = 0,
                p = k.length,
                n = 0;
            for (; h < p;) k[h++] = n, k[h++] = n + 1, k[h++] = n + 2, k[h++] = n, k[h++] = n + 2, k[h++] = n + 3, n += 4
        }
        _ClearState() {
            this._currentZ = this._baseZ =
                0;
            this._spSmoothLineFill = this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._ClearAllShaderPrograms()
        }
        InitState() {
            this._ClearState();
            this._currentStateGroup = null
        }
        OnDeviceOrContextLost() {
            for (const k of this._allShaderPrograms) k.Release();
            this._ClearState()
        }
        Project(k, h, p, n, m) {
            const t = this._matMV,
                q = this._matP;
            for (let u = 0, r = b.length; u < r; ++u) b[u] =
                0;
            b[0] = t[0] * k + t[4] * h + t[12];
            b[1] = t[1] * k + t[5] * h + t[13];
            b[2] = t[2] * k + t[6] * h + t[14];
            b[3] = t[3] * k + t[7] * h + t[15];
            b[4] = q[0] * b[0] + q[4] * b[1] + q[8] * b[2] + q[12] * b[3];
            b[5] = q[1] * b[0] + q[5] * b[1] + q[9] * b[2] + q[13] * b[3];
            b[6] = q[2] * b[0] + q[6] * b[1] + q[10] * b[2] + q[14] * b[3];
            b[7] = -b[2];
            0 !== b[7] && (b[7] = 1 / b[7], b[4] *= b[7], b[5] *= b[7], b[6] *= b[7], m[0] = (.5 * b[4] + .5) * p, m[1] = (.5 * b[5] + .5) * n)
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetNearZ() {
            return 1
        }
        GetFarZ() {
            return 1E4
        }
        SetCameraXYZ(k, h, p) {
            this._cam[0] = k * this._worldScale[0];
            this._cam[1] = h * this._worldScale[1];
            this._cam[2] = p
        }
        SetLookXYZ(k, h, p) {
            this._look[0] = k * this._worldScale[0];
            this._look[1] = h * this._worldScale[1];
            this._look[2] = p
        }
        ResetModelView(k) {
            c.lookAt(this._matMV, this._cam, this._look, k || this._up);
            c.scale(this._matMV, this._matMV, this._worldScale)
        }
        Translate(k, h) {
            if (0 !== k || 0 !== h) e[0] = k, e[1] = h, e[2] = 0, c.translate(this._matMV, this._matMV, e)
        }
        Scale(k, h) {
            if (1 !== k || 1 !== h) e[0] = k, e[1] = h, e[2] = 1, c.scale(this._matMV, this._matMV, e)
        }
        RotateZ(k) {
            0 !== k && c.rotateZ(this._matMV, this._matMV,
                k)
        }
        _AddShaderProgram(k) {
            this._allShaderPrograms.push(k);
            this._shaderProgramsByName.set(k.GetName(), k)
        }
        _RemoveShaderProgram(k) {
            const h = this._allShaderPrograms.indexOf(k); - 1 !== h && this._allShaderPrograms.splice(h, 1);
            this._shaderProgramsByName.delete(k.GetName())
        }
        _ClearAllShaderPrograms() {
            f.clearArray(this._allShaderPrograms);
            this._shaderProgramsByName.clear()
        }
        GetShaderProgramByName(k) {
            return this._shaderProgramsByName.get(k) || null
        }
        GetTextureFillShaderProgram() {
            return this._spTextureFill
        }
        SetTextureFillMode() {
            this.SetProgram(this._spTextureFill)
        }
        GetPointsRenderingProgram() {
            return this._spPoints
        }
        SetPointsRenderingProgram() {
            this.SetProgram(this._spPoints)
        }
        SetTilemapFillMode() {
            this.SetProgram(this._spTilemapFill)
        }
        SetColorFillMode() {
            this.SetProgram(this._spColorFill)
        }
        SetLinearGradientFillMode() {
            this.SetProgram(this._spLinearGradientFill)
        }
        SetHardEllipseFillMode() {
            this.SetProgram(this._spHardEllipseFill)
        }
        SetHardEllipseOutlineMode() {
            this.SetProgram(this._spHardEllipseOutline)
        }
        SetSmoothEllipseFillMode() {
            this.SetProgram(this._spSmoothEllipseFill)
        }
        SetSmoothEllipseOutlineMode() {
            this.SetProgram(this._spSmoothEllipseOutline)
        }
        SetSmoothLineFillMode() {
            this.SetProgram(this._spSmoothLineFill)
        }
        _SetCurrentStateGroup(k) {
            this._currentStateGroup =
                k
        }
        GetCurrentStateGroup() {
            return this._currentStateGroup
        }
        AcquireStateGroup(k, h, p, n) {
            const m = f.Gfx.StateGroup.MakeKey(k, h, p, n);
            let t = this._stateGroups.get(m);
            t || (t = f.New(f.Gfx.StateGroup, this, k, h, p, n), this._stateGroups.set(m, t));
            t.AddRef();
            return t
        }
        ReleaseStateGroup(k) {
            k.DecRef();
            0 === k._GetRefCount() && (this._currentStateGroup === k && (this._currentStateGroup = null), this._stateGroups.delete(k.GetKey()), k.Release())
        }
        _InitBlendModeData(k) {
            f.clearArray(this._blendModeTable);
            this._namedBlendModeMap.clear();
            for (const h of k) {
                k = h[0];
                const p = h[1],
                    n = h[2];
                this._blendModeTable.push([p, n]);
                this._namedBlendModeMap.set(k, {
                    srcBlend: p,
                    destBlend: n
                })
            }
        }
        _GetBlendByIndex(k) {
            return this._blendModeTable[k]
        }
        GetSrcBlendByIndex(k) {
            return this._GetBlendByIndex(k)[0]
        }
        GetDestBlendByIndex(k) {
            return this._GetBlendByIndex(k)[1]
        }
        GetNamedBlend(k) {
            k = this._namedBlendModeMap.get(k);
            if ("undefined" === typeof k) throw Error("invalid blend name");
            return k
        }
        SetBaseZ(k) {
            this._baseZ = k
        }
        GetBaseZ() {
            return this._baseZ
        }
        SetCurrentZ(k) {
            this._currentZ =
                k;
            this._currentStateGroup = null
        }
        GetCurrentZ() {
            return this._currentZ
        }
        ClearRect(k, h, p, n) {
            this.ClearRect4(k, h, p, n, 0, 0, 0, 0)
        }
        ClearRect2(k) {
            this.ClearRect4(k.getLeft(), k.getTop(), k.width(), k.height(), 0, 0, 0, 0)
        }
        ClearRect3(k, h) {
            this.ClearRect4(k.getLeft(), k.getTop(), k.width(), k.height(), h.getR(), h.getG(), h.getB(), h.getA())
        }
        GetNumVertexComponents() {
            return 3
        }
        Finish() {
            this.EndBatch(!0);
            this._frameNumber++
        }
        GetFrameNumber() {
            return this._frameNumber
        }
        IncrementFrameNumber() {
            this._frameNumber++
        }
        SetMipmapsEnabled(k) {
            this._enableMipmaps = !!k
        }
        AreMipmapsEnabled() {
            return this._enableMipmaps
        }
        IsWebGL() {
            return !1
        }
        IsWebGPU() {
            return !1
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Gfx.StateGroup = class {
        constructor(b, a, d, c, e) {
            this._renderer = b;
            this._refCount = 0;
            this._shaderProgram = null;
            this._shaderProgramName = "";
            this._blendMode = d;
            this._color = f.New(f.Color);
            this._color.set(c);
            this._zElevation = e;
            "string" === typeof a ? this._shaderProgramName = a : (this._shaderProgram = a, this._shaderProgramName = this._shaderProgram.GetName())
        }
        Release() {
            if (0 < this._refCount) throw Error("releasing state group still in use");
            this._shaderProgram = this._renderer = null;
            this._shaderProgramName = ""
        }
        Apply() {
            const b =
                this._renderer;
            b.SetProgram(this._shaderProgram);
            b.SetBlendMode(this._blendMode);
            b.SetColor(this._color);
            b.SetCurrentZ(this._zElevation);
            b._SetCurrentStateGroup(this)
        }
        GetKey() {
            return f.Gfx.StateGroup.MakeKey(this._shaderProgramName, this._blendMode, this._color, this._zElevation)
        }
        AddRef() {
            ++this._refCount
        }
        DecRef() {
            --this._refCount
        }
        _GetRefCount() {
            return this._refCount
        }
        OnContextLost() {
            this._shaderProgram = null
        }
        OnContextRestored(b) {
            this._shaderProgram = b.GetShaderProgramByName(this._shaderProgramName);
            if (!this._shaderProgram) throw Error("failed to restore shader program");
        }
        static MakeKey(b, a, d, c) {
            return ("string" === typeof b ? b : b.GetName()) + "," + a + "," + d.getR() + "," + d.getG() + "," + d.getB() + "," + d.getA() + "," + c
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = f.New(f.Quad);

    function a(d, c, e) {
        const k = e.getTlx(),
            h = e.getTly(),
            p = e.getTrx() - k,
            n = e.getTry() - h,
            m = e.getBlx() - k;
        e = e.getBly() - h;
        return [k + p * d + m * c, h + n * d + e * c]
    }
    f.Gfx.MeshPoint = class {
        constructor(d, c, e) {
            this._mesh = d;
            this._col = c;
            this._row = e;
            this._v = this._u = this._zElevation = this._y = this._x = 0
        }
        _Init(d, c, e, k) {
            this._x = d;
            this._y = c;
            this._u = e;
            this._v = k
        }
        GetX() {
            return this._x
        }
        SetX(d) {
            this._x !== d && (this._x = d, this._mesh._SetPointsChanged())
        }
        GetY() {
            return this._y
        }
        SetY(d) {
            this._y !== d && (this._y = d, this._mesh._SetPointsChanged())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetZElevation(d) {
            this._zElevation !==
                d && (this._zElevation = Math.max(d, 0), this._mesh._SetPointsChanged())
        }
        GetU() {
            return this._u
        }
        SetU(d) {
            this._u = d
        }
        GetV() {
            return this._v
        }
        SetV(d) {
            this._v = d
        }
        _Interpolate_TexRect(d, c, e) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            this._u = f.lerp(e.getLeft(), e.getRight(), d._u);
            this._v = f.lerp(e.getTop(), e.getBottom(), d._v)
        }
        _Interpolate_TexQuad(d, c, e) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            [this._u, this._v] = a(d._u, d._v, e)
        }
        SaveToJson() {
            return {
                x: this.GetX(),
                y: this.GetY(),
                z: this.GetZElevation(),
                u: this.GetU(),
                v: this.GetV()
            }
        }
        LoadFromJson(d) {
            this.SetX(d.x);
            this.SetY(d.y);
            d.hasOwnProperty("z") && this.SetZElevation(d.z);
            this.SetU(d.u);
            this.SetV(d.v)
        }
        GetMesh() {
            return this._mesh
        }
        GetColumn() {
            return this._col
        }
        GetRow() {
            return this._row
        }
    };
    f.Gfx.Mesh = class {
        constructor(d, c, e) {
            if (2 > d || 2 > c) throw Error("invalid mesh size");
            this._hsize = d;
            this._vsize = c;
            this._owner = e || null;
            this._pts = [];
            this._minY = this._minX = 0;
            this._maxY = this._maxX = 1;
            this._pointsChanged = this._hasAnyZElevation = !1;
            e = d - 1;
            const k = c - 1;
            for (let h = 0; h < c; ++h) {
                const p = [];
                for (let n = 0; n < d; ++n) {
                    const m = f.New(f.Gfx.MeshPoint, this, n, h),
                        t = n / e,
                        q = h / k;
                    m._Init(t, q, t, q);
                    p.push(m)
                }
                this._pts.push(p)
            }
        }
        Release() {
            f.clearArray(this._pts)
        }
        GetHSize() {
            return this._hsize
        }
        GetVSize() {
            return this._vsize
        }
        GetOwner() {
            return this._owner
        }
        _GetPoints() {
            return this._pts
        }
        _SetPointsChanged() {
            this._pointsChanged = !0
        }
        _MaybeComputeBounds() {
            if (this._pointsChanged) {
                var d = Infinity,
                    c = Infinity,
                    e = -Infinity,
                    k = -Infinity;
                this._hasAnyZElevation = !1;
                for (const h of this._pts)
                    for (const p of h) {
                        const n =
                            p.GetX(),
                            m = p.GetY();
                        d = Math.min(d, n);
                        c = Math.min(c, m);
                        e = Math.max(e, n);
                        k = Math.max(k, m);
                        0 < p.GetZElevation() && (this._hasAnyZElevation = !0)
                    }
                this._minX = d;
                this._minY = c;
                this._maxX = e;
                this._maxY = k;
                this._pointsChanged = !1
            }
        }
        GetMinX() {
            this._MaybeComputeBounds();
            return this._minX
        }
        GetMinY() {
            this._MaybeComputeBounds();
            return this._minY
        }
        GetMaxX() {
            this._MaybeComputeBounds();
            return this._maxX
        }
        GetMaxY() {
            this._MaybeComputeBounds();
            return this._maxY
        }
        HasAnyZElevation() {
            this._MaybeComputeBounds();
            return this._hasAnyZElevation
        }
        GetMeshPointAt(d,
            c) {
            d = Math.floor(d);
            c = Math.floor(c);
            return 0 > d || d >= this._hsize || 0 > c || c >= this._vsize ? null : this._pts[c][d]
        }
        CalculateTransformedMesh(d, c, e) {
            const k = e instanceof f.Rect;
            if (d.GetHSize() !== this.GetHSize() || d.GetVSize() !== this.GetVSize()) throw Error("source mesh wrong size");
            d = d._pts;
            const h = this._pts;
            for (let p = 0, n = h.length; p < n; ++p) {
                const m = d[p],
                    t = h[p];
                for (let q = 0, u = t.length; q < u; ++q) {
                    const r = m[q],
                        x = t[q];
                    k ? x._Interpolate_TexRect(r, c, e) : x._Interpolate_TexQuad(r, c, e)
                }
            }
        }
        Draw(d) {
            const c = this._pts;
            let e = c[0];
            for (let k =
                    1, h = c.length; k < h; ++k) {
                const p = c[k];
                let n = e[0],
                    m = p[0];
                for (let t = 1, q = p.length; t < q; ++t) {
                    const u = e[t],
                        r = p[t];
                    b.set(n.GetU(), n.GetV(), u.GetU(), u.GetV(), r.GetU(), r.GetV(), m.GetU(), m.GetV());
                    d.Quad3D2(n.GetX(), n.GetY(), n.GetZElevation(), u.GetX(), u.GetY(), u.GetZElevation(), r.GetX(), r.GetY(), r.GetZElevation(), m.GetX(), m.GetY(), m.GetZElevation(), b);
                    n = u;
                    m = r
                }
                e = p
            }
        }
        Outline(d, c) {
            c || (c = (n, m) => [n, m]);
            const e = this._pts;
            let k = e[0];
            for (let n = 1, m = e.length; n < m; ++n) {
                const t = e[n];
                var h = k[0],
                    p = t[0];
                for (let q = 1, u = t.length; q <
                    u; ++q) {
                    const r = k[q],
                        x = t[q],
                        [z, C] = c(h.GetX(), h.GetY());
                    h = h.GetZElevation();
                    const [w, B] = c(r.GetX(), r.GetY()), F = r.GetZElevation(), [J, O] = c(x.GetX(), x.GetY()), G = x.GetZElevation(), [I, P] = c(p.GetX(), p.GetY());
                    p = p.GetZElevation();
                    d.Line3D(z, C, h, w, B, F);
                    d.Line3D(z, C, h, J, O, G);
                    d.Line3D(z, C, h, I, P, p);
                    q === u - 1 && d.Line3D(w, B, F, J, O, G);
                    n === m - 1 && d.Line3D(I, P, p, J, O, G);
                    h = r;
                    p = x
                }
                k = t
            }
        }
        InsertPolyMeshVertices(d) {
            d = d.pointsArr();
            const c = [],
                e = this.GetHSize() - 1,
                k = this.GetVSize() - 1,
                h = 1 / e,
                p = 1 / k,
                n = e - 1,
                m = k - 1;
            let t = d[0],
                q = d[1],
                u = f.clamp(Math.floor(t *
                    e), 0, n),
                r = f.clamp(Math.floor(q * k), 0, m),
                x = 0,
                z = 0,
                C = 0;
            var w = -1;
            const B = () => {
                t = f.clamp(f.lerp(t, x, C), 0, 1);
                q = f.clamp(f.lerp(q, z, C), 0, 1);
                c.push(t, q)
            };
            for (let F = 0, J = d.length; F < J; F += 2)
                for (t = d[F], q = d[F + 1], c.push(t, q), u = f.clamp(Math.floor(t * e), 0, n), r = f.clamp(Math.floor(q * k), 0, m), w = (F + 2) % J, x = d[w], z = d[w + 1], w = -1;;) {
                    if (1E6 < c.length) throw Error("Too many mesh poly points");
                    const O = u * h,
                        G = r * p,
                        I = (u + 1) * h,
                        P = (r + 1) * p;
                    f.isPointInTriangleInclusive(t, q, O, G, I, G, I, P);
                    if (0 !== w && (C = f.rayIntersectExtended(t, q, x, z, O, G, I, P, -.001),
                            0 <= C && .99999999 >= C)) {
                        B();
                        w = 0;
                        continue
                    }
                    if (0 < r && 2 !== w && (C = f.rayIntersectExtended(t, q, x, z, O, G, I, G, .001), 0 <= C && .99999999 >= C)) {
                        B();
                        r--;
                        w = 4;
                        continue
                    }
                    if (u < n && 3 !== w && (C = f.rayIntersectExtended(t, q, x, z, I, G, I, P, .001), 0 <= C && .99999999 >= C)) {
                        B();
                        u++;
                        w = 1;
                        continue
                    }
                    if (0 < u && 1 !== w && (C = f.rayIntersectExtended(t, q, x, z, O, G, O, P, .001), 0 <= C && .99999999 >= C)) {
                        B();
                        u--;
                        w = 3;
                        continue
                    }
                    if (r < m && 4 !== w && (C = f.rayIntersectExtended(t, q, x, z, O, P, I, P, .001), 0 <= C && .99999999 >= C)) {
                        B();
                        r++;
                        w = 2;
                        continue
                    }
                    break
                }
            return f.New(f.CollisionPoly, c)
        }
        TransformCollisionPoly(d,
            c) {
            d = this._TransformPolyPoints(d);
            this._SimplifyPoly(d);
            c.setPoints(d)
        }
        _TransformPolyPoints(d) {
            const c = [];
            d = d.pointsArr();
            for (let e = 0, k = d.length; e < k; e += 2) {
                const [h, p] = this.TransformPoint(d[e], d[e + 1]);
                c.push(h, p)
            }
            return c
        }
        TransformPoint(d, c) {
            var e = this.GetHSize() - 1,
                k = this.GetVSize() - 1,
                h = 1 / e,
                p = 1 / k;
            e = f.clamp(Math.floor(d * e), 0, e - 1);
            const n = f.clamp(Math.floor(c * k), 0, k - 1);
            k = e * h;
            const m = n * p,
                t = (e + 1) * h,
                q = (n + 1) * p,
                u = this.GetMeshPointAt(e, n),
                r = this.GetMeshPointAt(e + 1, n + 1),
                x = f.isPointInTriangleInclusive(d, c, k,
                    m, t, m, t, q);
            h = x ? k + h : k;
            p = x ? m : m + p;
            e = this.GetMeshPointAt(e + (x ? 1 : 0), n + (x ? 0 : 1));
            const [z, C, w] = f.triangleCartesianToBarycentric(d, c, k, m, h, p, t, q);
            return f.triangleBarycentricToCartesian(z, C, w, u.GetX(), u.GetY(), e.GetX(), e.GetY(), r.GetX(), r.GetY())
        }
        _SimplifyPoly(d) {
            const c = [];
            let e = d[0],
                k = d[1],
                h = e - d[d.length - 2],
                p = k - d[d.length - 1];
            for (let m = 0, t = d.length; m < t; m += 2) {
                var n = (m + 2) % t;
                const q = d[n];
                n = d[n + 1];
                const u = q - e,
                    r = n - k,
                    x = 1E-7 > Math.abs(r) && 1E-7 > Math.abs(p) && Math.sign(u) === Math.sign(h);
                (!(1E-7 > Math.abs(u) && 1E-7 > Math.abs(h) &&
                    Math.sign(r) === Math.sign(p) || x) && 1E-7 < Math.abs(u / h - r / p) || 0 == u && 0 === r) && c.push(e, k);
                e = q;
                k = n;
                h = u;
                p = r
            }
            6 <= c.length && c.length < d.length && f.shallowAssignArray(d, c)
        }
        SaveToJson() {
            return {
                cols: this.GetHSize(),
                rows: this.GetVSize(),
                points: this._pts.map(d => d.map(c => c.SaveToJson()))
            }
        }
        LoadFromJson(d) {
            const c = this.GetHSize(),
                e = this.GetVSize();
            if (d.cols !== c || d.rows !== e) throw Error("mesh data wrong size");
            d = d.points;
            for (let k = 0; k < e; ++k) {
                const h = d[k];
                for (let p = 0; p < c; ++p) this.GetMeshPointAt(p, k).LoadFromJson(h[p])
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new Set(["rgba8", "rgb8", "rgba4", "rgb5_a1", "rgb565"]),
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = new Set(["default", "low", "high"]),
        c = new Set(["clamp-to-edge", "repeat", "mirror-repeat"]);

    function e(n, m) {
        let t, q;
        switch (n) {
            case "rgba8":
                n = m.RGBA8;
                q = t = m.RGBA;
                m = m.UNSIGNED_BYTE;
                break;
            case "rgb8":
                n = m.RGB8;
                q = t = m.RGB;
                m = m.UNSIGNED_BYTE;
                break;
            case "rgba4":
                n = m.RGBA4;
                q = t = m.RGBA;
                m = m.UNSIGNED_SHORT_4_4_4_4;
                break;
            case "rgb5_a1":
                n = m.RGB5_A1;
                q = t = m.RGBA;
                m = m.UNSIGNED_SHORT_5_5_5_1;
                break;
            case "rgb565":
                n =
                    m.RGB565;
                q = t = m.RGB;
                m = m.UNSIGNED_SHORT_5_6_5;
                break;
            default:
                throw Error("invalid pixel format");
        }
        return {
            sizedinternalformat: n,
            internalformat: t,
            format: q,
            type: m
        }
    }
    const k = {
            wrapX: "clamp-to-edge",
            wrapY: "clamp-to-edge",
            sampling: "trilinear",
            anisotropy: 0,
            pixelFormat: "rgba8",
            mipMap: !0,
            mipMapQuality: "default",
            premultiplyAlpha: !0,
            isSvg: !1,
            width: -1,
            height: -1
        },
        h = {
            premultiplyAlpha: !0,
            flipY: !1
        },
        p = new Set;
    f.Gfx.WebGLRendererTexture = class {
        constructor(n) {
            this._renderer = n;
            this._texture = null;
            this._height = this._width = 0;
            this._isStatic = !0;
            this._wrapY = this._wrapX = "clamp-to-edge";
            this._sampling = "trilinear";
            this._anisotropy = 0;
            this._pixelFormat = "rgba8";
            this._isMipMapped = !1;
            this._mipMapQuality = "default";
            this._refCount = 0
        }
        _CreateStatic(n, m) {
            if (!("undefined" !== typeof HTMLImageElement && n instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && n instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && n instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && n instanceof OffscreenCanvas || n instanceof ImageData || n instanceof ArrayBuffer) && null !== n) throw Error("invalid texture source");
            m = Object.assign({}, k, m);
            if (this._texture) throw Error("already created texture");
            this._wrapX = m.wrapX;
            this._wrapY = m.wrapY;
            this._sampling = m.sampling;
            this._anisotropy = m.anisotropy;
            this._pixelFormat = m.pixelFormat;
            this._isMipMapped = !!m.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = m.mipMapQuality;
            if (!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if (!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !0;
            if (n instanceof ArrayBuffer || null === n || m.isSvg) {
                if (this._width = m.width, this._height = m.height, n instanceof ArrayBuffer && n.byteLength !== this._width * this._height * 4) throw Error("ArrayBuffer wrong size");
            } else this._width = n.width, this._height = n.height;
            if (0 >= this._width || 0 >= this._height) throw Error("invalid texture data size");
            if (m.isSvg) {
                var t = f.CreateCanvas(this._width,
                    this._height);
                t.getContext("2d").drawImage(n, 0, 0, this._width, this._height);
                n = t
            }
            var q = f.isPOT(this._width) && f.isPOT(this._height);
            t = this._renderer.GetMaxTextureSize();
            if (this._width > t || this._height > t) throw Error("texture data exceeds maximum texture size");
            t = this._renderer.GetContext();
            var u = this._renderer.GetWebGLVersionNumber();
            this._texture = t.createTexture();
            t.bindTexture(t.TEXTURE_2D, this._texture);
            t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, m.premultiplyAlpha);
            m = e(this._pixelFormat, t);
            if (this._renderer.SupportsNPOTTextures() ||
                q || !this._IsTiled()) 2 <= u ? (t.texStorage2D(t.TEXTURE_2D, this._isMipMapped ? Math.floor(Math.log2(Math.max(this._width, this._height)) + 1) : 1, m.sizedinternalformat, this._width, this._height), n instanceof ArrayBuffer ? t.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, this._width, this._height, m.format, m.type, new Uint8Array(n)) : null !== n && t.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, m.format, m.type, n)) : n instanceof ArrayBuffer ? t.texImage2D(t.TEXTURE_2D, 0, m.internalformat, this._width, this._height, 0, m.format, m.type, new Uint8Array(n)) : null ===
                n ? t.texImage2D(t.TEXTURE_2D, 0, m.internalformat, this._width, this._height, 0, m.format, m.type, null) : t.texImage2D(t.TEXTURE_2D, 0, m.internalformat, m.format, m.type, n);
            else {
                if (null === n) throw Error("cannot pass null data when creating a NPOT tiled texture without NPOT support");
                n instanceof ArrayBuffer && (n = new ImageData(new Uint8ClampedArray(n), this._width, this._height));
                n instanceof ImageData && (q = f.CreateCanvas(this._width, this._height), q.getContext("2d").putImageData(n, 0, 0), n = q);
                q = f.CreateCanvas(f.nextHighestPowerOfTwo(this._width),
                    f.nextHighestPowerOfTwo(this._height));
                u = q.getContext("2d");
                u.imageSmoothingEnabled = "nearest" !== this._sampling;
                u.drawImage(n, 0, 0, this._width, this._height, 0, 0, q.width, q.height);
                t.texImage2D(t.TEXTURE_2D, 0, m.internalformat, m.format, m.type, q)
            }
            null !== n && this._SetTextureParameters(t);
            t.bindTexture(t.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            p.add(this)
        }
        _CreateDynamic(n, m, t) {
            t = Object.assign({}, k, t);
            if (this._texture) throw Error("already created texture");
            this._wrapX = t.wrapX;
            this._wrapY =
                t.wrapY;
            this._sampling = t.sampling;
            this._pixelFormat = t.pixelFormat;
            this._isMipMapped = !!t.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = t.mipMapQuality;
            if (!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if (!a.has(this._sampling)) throw Error("invalid sampling");
            if (!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if (!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !1;
            this._width = Math.floor(n);
            this._height = Math.floor(m);
            n = f.isPOT(this._width) && f.isPOT(this._height);
            m = this._renderer.GetMaxTextureSize();
            if (0 >= this._width || 0 >= this._height) throw Error("invalid texture size");
            if (this._width > m || this._height > m) throw Error("texture exceeds maximum texture size");
            if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !n) throw Error("non-power-of-two tiled textures not supported");
            n = this._renderer.GetContext();
            m = this._renderer.GetWebGLVersionNumber();
            this._texture = n.createTexture();
            n.bindTexture(n.TEXTURE_2D, this._texture);
            n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, t.premultiplyAlpha);
            t = e(this._pixelFormat, n);
            n.texImage2D(n.TEXTURE_2D, 0, 2 <= m ? t.sizedinternalformat : t.internalformat, this._width, this._height, 0, t.format, t.type, null);
            this._SetTextureParameters(n);
            n.bindTexture(n.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            p.add(this)
        }
        _GetMipMapHint(n) {
            if ("default" === this._mipMapQuality) return this._isStatic ? n.NICEST : n.FASTEST;
            if ("low" === this._mipMapQuality) return n.FASTEST;
            if ("high" === this._mipMapQuality) return n.NICEST;
            throw Error("invalid mipmap quality");
        }
        _IsTiled() {
            return "clamp-to-edge" !== this._wrapX || "clamp-to-edge" !== this._wrapY
        }
        _GetTextureWrapMode(n, m) {
            if ("clamp-to-edge" === m) return n.CLAMP_TO_EDGE;
            if ("repeat" === m) return n.REPEAT;
            if ("mirror-repeat" === m) return n.MIRRORED_REPEAT;
            throw Error("invalid wrap mode");
        }
        _SetTextureParameters(n) {
            var m = f.isPOT(this._width) && f.isPOT(this._height);
            n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, this._GetTextureWrapMode(n, this._wrapX));
            n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T,
                this._GetTextureWrapMode(n, this._wrapY));
            "nearest" === this._sampling ? (n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST), this._isMipMapped = !1) : (n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.LINEAR), (m || this._renderer.SupportsNPOTTextures()) && this._isMipMapped ? (n.hint(n.GENERATE_MIPMAP_HINT, this._GetMipMapHint(n)), n.generateMipmap(n.TEXTURE_2D), m = "trilinear" === this._sampling && !this._renderer.HasMajorPerformanceCaveat(), n.texParameteri(n.TEXTURE_2D,
                n.TEXTURE_MIN_FILTER, m ? n.LINEAR_MIPMAP_LINEAR : n.LINEAR_MIPMAP_NEAREST)) : (n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.LINEAR), this._isMipMapped = !1));
            (m = this._renderer._GetAnisotropicExtension()) && 0 < this._anisotropy && "nearest" !== this._sampling && n.texParameterf(n.TEXTURE_2D, m.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this._anisotropy, this._renderer._GetMaxAnisotropy()))
        }
        _Update(n, m) {
            if (!("undefined" !== typeof HTMLImageElement && n instanceof HTMLImageElement || "undefined" !== typeof HTMLVideoElement && n instanceof HTMLVideoElement || "undefined" !== typeof HTMLCanvasElement && n instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && n instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && n instanceof OffscreenCanvas || n instanceof ImageData)) throw Error("invalid texture source");
            if (!this._texture || 0 >= this._refCount) throw Error("texture not created");
            if (this._isStatic) throw Error("cannot update static texture");
            m = Object.assign({}, h, m);
            const t = n.width || n.videoWidth,
                q = n.height || n.videoHeight;
            var u = this._renderer.GetWebGLVersionNumber();
            const r = this._renderer.GetContext();
            r.bindTexture(r.TEXTURE_2D, this._texture);
            r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, m.premultiplyAlpha);
            r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, !!m.flipY);
            m = e(this._pixelFormat, r);
            u = 2 <= u ? m.sizedinternalformat : m.internalformat;
            try {
                if (this._width === t && this._height === q) {
                    const x = f.isPOT(this._width) && f.isPOT(this._height);
                    r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, m.format, m.type, n);
                    (x || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (r.hint(r.GENERATE_MIPMAP_HINT,
                        this._GetMipMapHint(r)), r.generateMipmap(r.TEXTURE_2D))
                } else {
                    this._width = t;
                    this._height = q;
                    const x = f.isPOT(this._width) && f.isPOT(this._height);
                    if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !x) throw Error("non-power-of-two tiled textures not supported");
                    r.texImage2D(r.TEXTURE_2D, 0, u, m.format, m.type, n);
                    (x || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (r.hint(r.GENERATE_MIPMAP_HINT, this._GetMipMapHint(r)), r.generateMipmap(r.TEXTURE_2D))
                }
            } catch (x) {
                console.error("Error updating WebGL texture: ",
                    x)
            }
            r.bindTexture(r.TEXTURE_2D, null);
            this._renderer._ResetLastTexture()
        }
        _Delete() {
            if (0 < this._refCount) throw Error("texture still has references");
            if (!this._texture) throw Error("already deleted texture");
            p.delete(this);
            this._renderer.GetContext().deleteTexture(this._texture);
            this._texture = null
        }
        IsValid() {
            return !!this._texture
        }
        _GetTexture() {
            return this._texture
        }
        GetRenderer() {
            return this._renderer
        }
        AddReference() {
            this._refCount++
        }
        SubtractReference() {
            if (0 >= this._refCount) throw Error("no more references");
            this._refCount--
        }
        GetReferenceCount() {
            return this._refCount
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsStatic() {
            return this._isStatic
        }
        GetEstimatedMemoryUsage() {
            let n = this._width * this._height;
            switch (this._pixelFormat) {
                case "rgba8":
                    n *= 4;
                    break;
                case "rgb8":
                    n *= 3;
                    break;
                case "rgba4":
                case "rgb5_a1":
                case "rgb565":
                    n *= 2
            }
            this._isMipMapped && (n += Math.floor(n / 3));
            return n
        }
        static OnContextLost() {
            p.clear()
        }
        static allTextures() {
            return p.values()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new Set(["nearest", "bilinear", "trilinear"]),
        a = {
            sampling: "trilinear",
            alpha: !0,
            depth: !1,
            readback: !0,
            isDefaultSize: !0,
            multisampling: 0
        },
        d = new Set;
    f.Gfx.WebGLRenderTarget = class {
        constructor(c) {
            this._renderer = c;
            this._renderBuffer = this._texture = this._frameBuffer = null;
            this._height = this._width = 0;
            this._isDefaultSize = !0;
            this._sampling = "trilinear";
            this._alpha = !0;
            this._depth = !1;
            this._readback = !0;
            this._multisampling = 0
        }
        _Create(c, e, k) {
            k = Object.assign({}, a, k);
            const h = this._renderer.GetWebGLVersionNumber();
            if (this._texture || this._renderBuffer) throw Error("already created render target");
            this._sampling = k.sampling;
            this._alpha = !!k.alpha;
            this._depth = !!k.depth;
            this._readback = !!k.readback;
            this._isDefaultSize = !!k.isDefaultSize;
            this._multisampling = k.multisampling;
            if (!b.has(this._sampling)) throw Error("invalid sampling");
            if (0 < this._multisampling && (2 > h || this._readback)) throw Error("invalid use of multisampling");
            2 > h && (this._readback = !0);
            this._width = c;
            this._height = e;
            if (0 >= this._width || 0 >= this._height) throw Error("invalid render target size");
            c = this._renderer.GetContext();
            this._frameBuffer = c.createFramebuffer();
            c.bindFramebuffer(c.FRAMEBUFFER, this._frameBuffer);
            this._readback ? (this._texture = this._renderer.CreateDynamicTexture(this._width, this._height, {
                sampling: this._sampling,
                pixelFormat: this._alpha ? "rgba8" : "rgb8",
                mipMap: !1
            }), e = this._texture._GetTexture(), c.framebufferTexture2D(c.FRAMEBUFFER, c.COLOR_ATTACHMENT0, c.TEXTURE_2D, e, 0)) : (this._renderBuffer = c.createRenderbuffer(), c.bindRenderbuffer(c.RENDERBUFFER, this._renderBuffer), e = this._alpha ?
                c.RGBA8 : c.RGB8, 0 < this._multisampling && ((k = c.getInternalformatParameter(c.RENDERBUFFER, e, c.SAMPLES)) && k[0] ? (k = k[0], this._multisampling > k && (this._multisampling = k)) : this._multisampling = 0), 0 === this._multisampling ? c.renderbufferStorage(c.RENDERBUFFER, e, this._width, this._height) : c.renderbufferStorageMultisample(c.RENDERBUFFER, this._multisampling, e, this._width, this._height), c.framebufferRenderbuffer(c.FRAMEBUFFER, c.COLOR_ATTACHMENT0, c.RENDERBUFFER, this._renderBuffer), c.bindRenderbuffer(c.RENDERBUFFER, null));
            e = this._renderer._GetDepthBuffer();
            this._depth && e && c.framebufferRenderbuffer(c.FRAMEBUFFER, c.DEPTH_ATTACHMENT, c.RENDERBUFFER, e);
            c.bindFramebuffer(c.FRAMEBUFFER, null);
            d.add(this)
        }
        _Resize(c, e) {
            if (this._width !== c || this._height !== e) this._width = c, this._height = e, c = this._renderer.GetContext(), c.bindFramebuffer(c.FRAMEBUFFER, this._frameBuffer), this._texture ? this._texture._Update(new ImageData(this._width, this._height)) : (c.bindRenderbuffer(c.RENDERBUFFER, this._renderBuffer), c.renderbufferStorage(c.RENDERBUFFER,
                this._alpha ? c.RGBA8 : c.RGB8, this._width, this._height), c.bindRenderbuffer(c.RENDERBUFFER, null)), e = this._renderer._GetDepthBuffer(), this._depth && e && c.framebufferRenderbuffer(c.FRAMEBUFFER, c.DEPTH_ATTACHMENT, c.RENDERBUFFER, e), c.bindFramebuffer(c.FRAMEBUFFER, null)
        }
        _Delete() {
            if (!this._texture && !this._renderBuffer) throw Error("already deleted render target");
            d.delete(this);
            const c = this._renderer.GetContext();
            c.bindFramebuffer(c.FRAMEBUFFER, this._frameBuffer);
            this._texture ? (c.framebufferTexture2D(c.FRAMEBUFFER,
                c.COLOR_ATTACHMENT0, c.TEXTURE_2D, null, 0), this._renderer.DeleteTexture(this._texture), this._texture = null) : this._renderBuffer && (c.framebufferRenderbuffer(c.FRAMEBUFFER, c.COLOR_ATTACHMENT0, c.RENDERBUFFER, null), c.deleteRenderbuffer(this._renderBuffer), this._renderBuffer = null);
            c.bindFramebuffer(c.FRAMEBUFFER, null);
            2 <= this._renderer.GetWebGLVersionNumber() && (c.bindFramebuffer(c.READ_FRAMEBUFFER, null), c.bindFramebuffer(c.DRAW_FRAMEBUFFER, null));
            c.deleteFramebuffer(this._frameBuffer);
            this._frameBuffer = this._renderer.GetBatchState().currentFramebuffer =
                null
        }
        _GetFramebuffer() {
            return this._frameBuffer
        }
        GetWebGLRenderer() {
            return this._renderer
        }
        GetTexture() {
            return this._texture
        }
        IsLinearSampling() {
            return "nearest" !== this._sampling
        }
        HasAlpha() {
            return this._alpha
        }
        IsReadback() {
            return this._readback
        }
        HasDepthBuffer() {
            return this._depth
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsDefaultSize() {
            return this._isDefaultSize
        }
        GetMultisampling() {
            return this._multisampling
        }
        GetOptions() {
            const c = {
                sampling: this._sampling,
                alpha: this._alpha,
                readback: this._readback
            };
            this._isDefaultSize || (c.width = this._width, c.height = this._height);
            return c
        }
        IsCompatibleWithOptions(c) {
            c = Object.assign({}, a, c);
            return "nearest" !== c.sampling !== this.IsLinearSampling() || !!c.alpha !== this.HasAlpha() || 2 <= this._renderer.GetWebGLVersionNumber() && !!c.readback !== this.IsReadback() ? !1 : "number" === typeof c.width || "number" === typeof c.height ? !this.IsDefaultSize() && this.GetWidth() === c.width && this.GetHeight() === c.height : this.IsDefaultSize()
        }
        _GetWebGLTexture() {
            return this._texture ? this._texture._GetTexture() :
                null
        }
        GetEstimatedMemoryUsage() {
            return this._texture ? this._texture.GetEstimatedMemoryUsage() : this._width * this._height * (this._alpha ? 4 : 3)
        }
        static async DebugReadPixelsToBlob(c, e) {
            c = await c.ReadBackRenderTargetToImageData(e, !0);
            return await f.ImageDataToBlob(c)
        }
        static OnContextLost() {
            d.clear()
        }
        static allRenderTargets() {
            return d.values()
        }
        static ResizeAll(c, e) {
            for (const k of d) k.IsDefaultSize() && k._Resize(c, e)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.mat4,
        c = new Set("aPos aTex aPoints matP matMV samplerFront samplerBack destStart destEnd srcStart srcEnd srcOriginStart srcOriginEnd pixelSize seconds layerScale layerAngle layoutStart layoutEnd color color2_ pointTexStart pointTexEnd zElevation tileSize tileSpacing outlineThickness".split(" "));
    f.Gfx.WebGLShaderProgram = class {
        static async Compile(e, k, h, p) {
            const n = e.GetContext(),
                m = n.createShader(n.FRAGMENT_SHADER);
            n.shaderSource(m, k);
            n.compileShader(m);
            k = n.createShader(n.VERTEX_SHADER);
            n.shaderSource(k, h);
            n.compileShader(k);
            const t = n.createProgram();
            n.attachShader(t, m);
            n.attachShader(t, k);
            n.bindAttribLocation(t, 0, "aPos");
            n.bindAttribLocation(t, 1, "aTex");
            n.bindAttribLocation(t, 2, "aPoints");
            n.linkProgram(t);
            const q = e._GetParallelShaderCompileExtension();
            q ? await e._WaitForObjectReady(() => n.getProgramParameter(t, q.COMPLETION_STATUS_KHR)) : await f.Wait(5);
            if (!n.getShaderParameter(m, n.COMPILE_STATUS)) throw p = n.getShaderInfoLog(m), n.deleteShader(m), n.deleteShader(k),
                n.deleteProgram(t), Error("Error compiling fragment shader: " + p);
            if (!n.getShaderParameter(k, n.COMPILE_STATUS)) throw p = n.getShaderInfoLog(k), n.deleteShader(m), n.deleteShader(k), n.deleteProgram(t), Error("Error compiling vertex shader: " + p);
            if (!n.getProgramParameter(t, n.LINK_STATUS)) throw p = n.getProgramInfoLog(t), n.deleteShader(m), n.deleteShader(k), n.deleteProgram(t), Error("Error linking shader program: " + p);
            (e = f.FilterUnprintableChars(n.getProgramInfoLog(t) || "").trim()) && !f.IsStringAllWhitespace(e) &&
                console.info(`[WebGL] Shader program '${p}' compilation log: `, e);
            n.deleteShader(m);
            n.deleteShader(k);
            return t
        }
        static async Create(e, k, h, p) {
            h = await f.Gfx.WebGLShaderProgram.Compile(e, k.src, h, p);
            return new f.Gfx.WebGLShaderProgram(e, h, k, p)
        }
        constructor(e, k, h, p) {
            const n = e.GetContext();
            var m = e.GetBatchState();
            e.EndBatch();
            n.useProgram(k);
            this._gl = n;
            this._renderer = e;
            this._name = p;
            this._shaderProgram = k;
            this._isDeviceTransform = "<default-device-transform>" === p;
            p = n.getAttribLocation(k, "aPos");
            const t = n.getAttribLocation(k,
                "aTex");
            k = n.getAttribLocation(k, "aPoints"); - 1 !== p && (n.bindBuffer(n.ARRAY_BUFFER, e._vertexBuffer), n.vertexAttribPointer(p, e.GetNumVertexComponents(), n.FLOAT, !1, 0, 0), n.enableVertexAttribArray(p)); - 1 !== t && (n.bindBuffer(n.ARRAY_BUFFER, e._texcoordBuffer), n.vertexAttribPointer(t, 2, n.FLOAT, !1, 0, 0), n.enableVertexAttribArray(t)); - 1 !== k && (n.bindBuffer(n.ARRAY_BUFFER, e._pointBuffer), n.vertexAttribPointer(k, 4, n.FLOAT, !1, 0, 0), n.enableVertexAttribArray(k));
            n.bindBuffer(n.ARRAY_BUFFER, null);
            this._uMatP = new f.Gfx.WebGLShaderUniform(this,
                "matP", "mat4");
            this._uMatMV = new f.Gfx.WebGLShaderUniform(this, "matMV", "mat4");
            this._uColor = new f.Gfx.WebGLShaderUniform(this, "color", "vec4");
            this._uSamplerFront = new f.Gfx.WebGLShaderUniform(this, "samplerFront", "sampler");
            this._uPointTexStart = new f.Gfx.WebGLShaderUniform(this, "pointTexStart", "vec2");
            this._uPointTexEnd = new f.Gfx.WebGLShaderUniform(this, "pointTexEnd", "vec2");
            this._uZElevation = new f.Gfx.WebGLShaderUniform(this, "zElevation", "float");
            this._uTileSize = new f.Gfx.WebGLShaderUniform(this, "tileSize",
                "vec2");
            this._uTileSpacing = new f.Gfx.WebGLShaderUniform(this, "tileSpacing", "vec2");
            this._uColor2 = new f.Gfx.WebGLShaderUniform(this, "color2_", "vec4");
            this._uOutlineThickness = new f.Gfx.WebGLShaderUniform(this, "outlineThickness", "float");
            this._uSamplerBack = new f.Gfx.WebGLShaderUniform(this, "samplerBack", "sampler");
            this._uDestStart = new f.Gfx.WebGLShaderUniform(this, "destStart", "vec2");
            this._uDestEnd = new f.Gfx.WebGLShaderUniform(this, "destEnd", "vec2");
            this._uSrcStart = new f.Gfx.WebGLShaderUniform(this,
                "srcStart", "vec2");
            this._uSrcEnd = new f.Gfx.WebGLShaderUniform(this, "srcEnd", "vec2");
            this._uSrcOriginStart = new f.Gfx.WebGLShaderUniform(this, "srcOriginStart", "vec2");
            this._uSrcOriginEnd = new f.Gfx.WebGLShaderUniform(this, "srcOriginEnd", "vec2");
            this._uPixelSize = new f.Gfx.WebGLShaderUniform(this, "pixelSize", "vec2");
            this._uSeconds = new f.Gfx.WebGLShaderUniform(this, "seconds", "float");
            this._uLayerScale = new f.Gfx.WebGLShaderUniform(this, "layerScale", "float");
            this._uLayerAngle = new f.Gfx.WebGLShaderUniform(this,
                "layerAngle", "float");
            this._uLayoutStart = new f.Gfx.WebGLShaderUniform(this, "layoutStart", "vec2");
            this._uLayoutEnd = new f.Gfx.WebGLShaderUniform(this, "layoutEnd", "vec2");
            this._hasAnyOptionalUniforms = !!(this._uPixelSize.IsUsed() || this._uSeconds.IsUsed() || this._uSamplerBack.IsUsed() || this._uDestStart.IsUsed() || this._uDestEnd.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed() || this._uLayerScale.IsUsed() || this._uLayerAngle.IsUsed() ||
                this._uLayoutStart.IsUsed() || this._uLayoutEnd.IsUsed());
            this._extendBoxHorizontal = h.extendBoxHorizontal || 0;
            this._extendBoxVertical = h.extendBoxVertical || 0;
            this._crossSampling = !!h.crossSampling;
            this._mustPreDraw = !!h.mustPreDraw;
            this._preservesOpaqueness = !!h.preservesOpaqueness;
            this._animated = !!h.animated;
            e = h.parameters || [];
            this._uCustomParameters = [];
            this._usesDest = this._uDestStart.IsUsed() || this._uDestEnd.IsUsed();
            this._usesAnySrcRectOrPixelSize = this._uPixelSize.IsUsed() || this._uSrcStart.IsUsed() ||
                this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed();
            this._needsPostDrawOrExtendBox = this._crossSampling || this._usesDest || 0 !== this._extendBoxHorizontal || 0 !== this._extendBoxVertical;
            this._hasCurrentMatMV = this._hasCurrentMatP = !1;
            this._uColor.Init4f(1, 1, 1, 1);
            this._uColor2.Init4f(1, 1, 1, 1);
            this._uSamplerFront.Init1i(0);
            this._uSamplerBack.Init1i(1);
            this._uPointTexStart.Init2f(0, 0);
            this._uPointTexEnd.Init2f(1, 1);
            this._uZElevation.Init1f(0);
            this._uTileSize.Init2f(0, 0);
            this._uTileSpacing.Init2f(0,
                0);
            this._uDestStart.Init2f(0, 0);
            this._uDestEnd.Init2f(1, 1);
            this._uSrcStart.Init2f(0, 0);
            this._uSrcEnd.Init2f(0, 0);
            this._uSrcOriginStart.Init2f(0, 0);
            this._uSrcOriginEnd.Init2f(0, 0);
            this._uPixelSize.Init2f(0, 0);
            this._uLayerScale.Init1f(1);
            this._uLayerAngle.Init1f(0);
            this._uSeconds.Init1f(0);
            this._uLayoutStart.Init2f(0, 0);
            this._uLayoutEnd.Init2f(0, 0);
            this._uOutlineThickness.Init1f(1);
            for (const q of e) e = q[2], h = new f.Gfx.WebGLShaderUniform(this, q[0], e), "color" === e ? h.Init3f(0, 0, 0) : h.Init1f(0), this._uCustomParameters.push(h);
            this._isDeviceTransform ? this._UpdateDeviceTransformUniforms(m.currentMatP) : (this.UpdateMatP(m.currentMatP, !0), this.UpdateMatMV(m.currentMV, !0));
            m = m.currentShader;
            n.useProgram(m ? m._shaderProgram : null)
        }
        Release() {
            this._gl.deleteProgram(this._shaderProgram);
            this._shaderProgram = null;
            this._renderer._RemoveShaderProgram(this);
            this._renderer = this._gl = null
        }
        GetName() {
            return this._name
        }
        GetWebGLContext() {
            return this._gl
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        UsesDest() {
            return this._usesDest
        }
        UsesCrossSampling() {
            return this._crossSampling
        }
        MustPreDraw() {
            return this._mustPreDraw
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        ExtendsBox() {
            return 0 !==
                this._extendBoxHorizontal || 0 !== this._extendBoxVertical
        }
        GetBoxExtendHorizontal() {
            return this._extendBoxHorizontal
        }
        GetBoxExtendVertical() {
            return this._extendBoxVertical
        }
        UsesAnySrcRectOrPixelSize() {
            return this._usesAnySrcRectOrPixelSize
        }
        NeedsPostDrawOrExtendsBox() {
            return this._needsPostDrawOrExtendBox
        }
        GetParameterCount() {
            return this._uCustomParameters.length
        }
        GetParameterType(e) {
            return this._uCustomParameters[e].GetType()
        }
        AreCustomParametersAlreadySetInBatch(e) {
            for (let k = 0, h = e.length; k < h; ++k)
                if (!this._uCustomParameters[k].IsSetToCustomInBatch(e[k])) return !1;
            return !0
        }
        SetCustomParametersInBatch(e) {
            for (let k = 0, h = e.length; k < h; ++k) this._uCustomParameters[k].SetBatchValueCustom(e[k])
        }
        AreOptionalUniformsAlreadySetInBatch(e, k, h, p, n, m, t, q, u) {
            return this._uSamplerBack.IsUsed() || this._uPixelSize.IsUsed() && !this._uPixelSize.IsSetTo2InBatch(n, m) || this._uDestStart.IsUsed() && !this._uDestStart.IsSetTo2InBatch(e.getLeft(), e.getTop()) || this._uDestEnd.IsUsed() && !this._uDestEnd.IsSetTo2InBatch(e.getRight(), e.getBottom()) || this._uLayerScale.IsUsed() && !this._uLayerScale.IsSetTo1InBatch(t) ||
                this._uLayerAngle.IsUsed() && !this._uLayerAngle.IsSetTo1InBatch(q) || this._uSrcStart.IsUsed() && !this._uSrcStart.IsSetTo2InBatch(k.getLeft(), k.getTop()) || this._uSrcEnd.IsUsed() && !this._uSrcEnd.IsSetTo2InBatch(k.getRight(), k.getBottom()) || this._uSrcOriginStart.IsUsed() && !this._uSrcOriginStart.IsSetTo2InBatch(h.getLeft(), h.getTop()) || this._uSrcOriginEnd.IsUsed() && !this._uSrcOriginEnd.IsSetTo2InBatch(h.getRight(), h.getBottom()) || this._uLayoutStart.IsUsed() && !this._uLayoutStart.IsSetTo2InBatch(p.getLeft(),
                    p.getTop()) || this._uLayoutEnd.IsUsed() && !this._uLayoutEnd.IsSetTo2InBatch(p.getTop(), p.getBottom()) || this._uSeconds.IsUsed() && !this._uSeconds.IsSetTo1InBatch(u) ? !1 : !0
        }
        SetOptionalUniformsInBatch(e, k, h, p, n, m, t, q, u) {
            this._uSamplerBack.IsUsed() || (this._uPixelSize.IsUsed() && this._uPixelSize.SetBatch2(n, m), this._uDestStart.IsUsed() && this._uDestStart.SetBatch2(e.getLeft(), e.getTop()), this._uDestEnd.IsUsed() && this._uDestEnd.SetBatch2(e.getRight(), e.getBottom()), this._uLayerScale.IsUsed() && this._uLayerScale.SetBatch1(t),
                this._uLayerAngle.IsUsed() && this._uLayerAngle.SetBatch1(q), this._uSrcStart.IsUsed() && this._uSrcStart.SetBatch2(k.getLeft(), k.getTop()), this._uSrcEnd.IsUsed() && this._uSrcEnd.SetBatch2(k.getRight(), k.getBottom()), this._uSrcOriginStart.IsUsed() && this._uSrcOriginStart.SetBatch2(h.getLeft(), h.getTop()), this._uSrcOriginEnd.IsUsed() && this._uSrcOriginEnd.SetBatch2(h.getRight(), h.getBottom()), this._uLayoutStart.IsUsed() && this._uLayoutStart.SetBatch2(p.getLeft(), p.getTop()), this._uLayoutEnd.IsUsed() && this._uLayoutEnd.SetBatch2(p.getTop(),
                    p.getBottom()), this._uSeconds.IsUsed() && this._uSeconds.SetBatch1(u))
        }
        IsAnimated() {
            return this._animated
        }
        UpdateMatP(e, k) {
            this._hasCurrentMatP && !k || this._isDeviceTransform || (this._uMatP.IsUsed() && this._uMatP.UpdateMatrix4fv(e), this._hasCurrentMatP = !0)
        }
        SetMatPStale() {
            this._hasCurrentMatP = !1
        }
        UpdateMatMV(e, k) {
            this._hasCurrentMatMV && !k || this._isDeviceTransform || (this._uMatMV.IsUsed() && this._uMatMV.UpdateMatrix4fv(e), this._hasCurrentMatMV = !0)
        }
        SetMatMVStale() {
            this._hasCurrentMatMV = !1
        }
        _UpdateDeviceTransformUniforms(e) {
            if (!this._isDeviceTransform) throw Error("not device transform shader");
            this._uMatP.UpdateMatrix4fv(e);
            e = this._renderer;
            var k = e.GetWidth() / 2,
                h = e.GetHeight() / 2;
            const p = e._worldScale,
                n = a.fromValues(k * p[0], h * p[1], 100 * self.devicePixelRatio);
            k = a.fromValues(k * p[0], h * p[1], 0);
            h = d.create();
            d.lookAt(h, n, k, e._up);
            d.scale(h, h, p);
            this._uMatMV.UpdateMatrix4fv(h)
        }
        UpdateColor(e) {
            this._uColor.IsUsed() && this._uColor.Update4f(e[0], e[1], e[2], e[3])
        }
        static GetReservedUniformNames() {
            return c
        }
        static GetDefaultVertexShaderSource(e) {
            e = e ? "highmedp" : "mediump";
            return ["#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nattribute highp vec3 aPos;",
                `attribute ${e} vec2 aTex;`, `varying ${e} vec2 vTex;`, "uniform highp mat4 matP;\nuniform highp mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPos, 1.0);\n\tvTex = aTex;\n}"
            ].join("\n")
        }
        static GetTextureFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, vTex) * color;\n}"
        }
        static GetTilemapFragmentShaderSource() {
            return "#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nvarying highmedp vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nuniform highmedp vec2 srcStart;\nuniform highmedp vec2 pixelSize;\nuniform highmedp vec2 tileSize;\nuniform highmedp vec2 tileSpacing;\nvoid main(void) {\n\thighmedp vec2 tile = floor(vTex);\n\thighmedp vec2 tex = fract(vTex);\n\thighmedp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);\n\thighmedp vec2 lowerBound = tileOrigin + pixelSize / 2.0;\n\thighmedp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;\n\tgl_FragColor = texture2D(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;\n}"
        }
        static GetPointVertexShaderSource() {
            return "attribute vec4 aPoints;\nvarying float pointOpacity;\nuniform float zElevation;\nuniform mat4 matP;\nuniform mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPoints.xy, zElevation, 1.0);\n\tgl_PointSize = aPoints.z;\n\tpointOpacity = aPoints.w;\n}"
        }
        static GetPointFragmentShaderSource() {
            return "uniform lowp sampler2D samplerFront;\nvarying lowp float pointOpacity;\nuniform mediump vec2 pointTexStart;\nuniform mediump vec2 pointTexEnd;\nuniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, mix(pointTexStart, pointTexEnd, gl_PointCoord)) * color * pointOpacity;\n}"
        }
        static GetColorFillFragmentShaderSource() {
            return "uniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = color;\n}"
        }
        static GetLinearGradientFillFragmentShaderSource() {
            return "precision lowp float;\nvarying mediump vec2 vTex;\nuniform vec4 color;\nuniform vec4 color2_;\nvec3 fromLinear(vec3 linearRGB)\n{\n\tbvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n\tvec3 higher = vec3(1.055) * pow(abs(linearRGB), vec3(1.0/2.4)) - vec3(0.055);\n\tvec3 lower = linearRGB * vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvec3 toLinear(vec3 sRGB)\n{\n\tbvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n\tvec3 higher = pow(abs((sRGB + vec3(0.055))/vec3(1.055)), vec3(2.4));\n\tvec3 lower = sRGB/vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvoid main(void) {\n\tvec3 linearGrad = mix(toLinear(color.rgb), toLinear(color2_.rgb), vTex.x);\n\tfloat a = mix(color.a, color2_.a, vTex.x);\n\tgl_FragColor = vec4(fromLinear(linearGrad) * a, a);\n}"
        }
        static GetSmoothLineFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tlowp float f = 1.0 - abs(vTex.y - 0.5) * 2.0;\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float f = step(diffSq.x + diffSq.y, 0.25);\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump float innerF = step(distSq, 0.25);\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm * outlineThickness;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float outerF = step(innerEdgeSq.x + innerEdgeSq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
        static GetSmoothEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float f = smoothstep(halfNormSq.x + halfNormSq.y, innerEdgeSq.x + innerEdgeSq.y, diffSq.x + diffSq.y);\n\tgl_FragColor = color * f;\n}"
        }
        static GetSmoothEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 pxNorm = pixelSize * norm;\n\tmediump vec2 innerEdge1 = halfNorm - pxNorm;\n\tmediump vec2 innerEdge1Sq = innerEdge1 * innerEdge1;\n\tmediump float innerF = smoothstep(halfNormSq.x + halfNormSq.y, innerEdge1Sq.x + innerEdge1Sq.y, distSq);\n\tmediump vec2 innerEdge2 = halfNorm - pxNorm * outlineThickness;\n\tmediump vec2 innerEdge2Sq = innerEdge2 * innerEdge2;\n\tmediump vec2 innerEdge3 = halfNorm - pxNorm * (outlineThickness + 1.0);\n\tmediump vec2 innerEdge3Sq = innerEdge3 * innerEdge3;\n\tmediump float outerF = smoothstep(innerEdge3Sq.x + innerEdge3Sq.y, innerEdge2Sq.x + innerEdge2Sq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new Map([
            ["float", 1],
            ["percent", 1],
            ["sampler", 1],
            ["vec2", 2],
            ["vec3", 3],
            ["color", 3],
            ["vec4", 4],
            ["mat4", 16]
        ]);
    f.Gfx.WebGLShaderUniform = class {
        constructor(a, d, c) {
            if (!b.has(c)) throw Error("invalid uniform type");
            this._owner = a;
            this._gl = this._owner.GetWebGLContext();
            this._name = d;
            this._type = c;
            this._isColorType = "color" === this._type;
            this._location = this._gl.getUniformLocation(this._owner.GetShaderProgram(), d);
            this._isUsed = !!this._location;
            a = b.get(c);
            this._lastValue = new Float32Array(a);
            this._lastBatchValue =
                new Float32Array(a)
        }
        Release() {
            this._location = this._gl = this._owner = null
        }
        IsUsed() {
            return this._isUsed
        }
        GetType() {
            return this._type
        }
        IsColorType() {
            return this._isColorType
        }
        Init1f(a) {
            this.IsUsed() && (this._lastValue[0] = a, this._lastBatchValue.set(this._lastValue), this._gl.uniform1f(this._location, a))
        }
        Init1i(a) {
            this.IsUsed() && (this._lastValue[0] = a, this._lastBatchValue.set(this._lastValue), this._gl.uniform1i(this._location, a))
        }
        Init2f(a, d) {
            this.IsUsed() && (this._lastValue[0] = a, this._lastValue[1] = d, this._lastBatchValue.set(this._lastValue),
                this._gl.uniform2f(this._location, a, d))
        }
        Init3f(a, d, c) {
            this.IsUsed() && (this._lastValue[0] = a, this._lastValue[1] = d, this._lastValue[2] = c, this._lastBatchValue.set(this._lastValue), this._gl.uniform3f(this._location, a, d, c))
        }
        Init4f(a, d, c, e) {
            this.IsUsed() && (this._lastValue[0] = a, this._lastValue[1] = d, this._lastValue[2] = c, this._lastValue[3] = e, this._lastBatchValue.set(this._lastValue), this._gl.uniform4f(this._location, a, d, c, e))
        }
        Update1f(a) {
            a = Math.fround(a);
            const d = this._lastValue;
            d[0] !== a && (d[0] = a, this._gl.uniform1f(this._location,
                a))
        }
        Update1i(a) {
            const d = this._lastValue;
            d[0] !== a && (d[0] = a, this._gl.uniform1i(this._location, a))
        }
        Update2f(a, d) {
            a = Math.fround(a);
            d = Math.fround(d);
            const c = this._lastValue;
            if (c[0] !== a || c[1] !== d) c[0] = a, c[1] = d, this._gl.uniform2f(this._location, a, d)
        }
        Update3f(a, d, c) {
            a = Math.fround(a);
            d = Math.fround(d);
            c = Math.fround(c);
            const e = this._lastValue;
            if (e[0] !== a || e[1] !== d || e[2] !== c) e[0] = a, e[1] = d, e[2] = c, this._gl.uniform3f(this._location, a, d, c)
        }
        Update4f(a, d, c, e) {
            a = Math.fround(a);
            d = Math.fround(d);
            c = Math.fround(c);
            e = Math.fround(e);
            const k = this._lastValue;
            if (k[0] !== a || k[1] !== d || k[2] !== c || k[3] !== e) k[0] = a, k[1] = d, k[2] = c, k[3] = e, this._gl.uniform4f(this._location, a, d, c, e)
        }
        UpdateMatrix4fv(a) {
            const d = this._lastValue;
            f.Gfx.AreMat4sEqual(d, a) || (f.typedArraySet16(d, a, 0), this._gl.uniformMatrix4fv(this._location, !1, a))
        }
        IsSetToCustomInBatch(a) {
            const d = this._lastBatchValue;
            return this.IsColorType() ? d[0] === Math.fround(a.getR()) && d[1] === Math.fround(a.getG()) && d[2] === Math.fround(a.getB()) : d[0] === Math.fround(a)
        }
        SetBatchValueCustom(a) {
            const d =
                this._lastBatchValue;
            this.IsColorType() ? (d[0] = a.getR(), d[1] = a.getG(), d[2] = a.getB()) : d[0] = a
        }
        IsSetTo1InBatch(a) {
            return this._lastBatchValue[0] === Math.fround(a)
        }
        IsSetTo2InBatch(a, d) {
            const c = this._lastBatchValue;
            return c[0] === Math.fround(a) && c[1] === Math.fround(d)
        }
        SetBatch1(a) {
            this._lastBatchValue[0] = a
        }
        SetBatch2(a, d) {
            const c = this._lastBatchValue;
            c[0] = a;
            c[1] = d
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4;
    f.Gfx.BatchState = class {
        constructor(c) {
            this.renderer = c;
            this.currentMV = d.create();
            this.currentMatP = d.create();
            this.currentFramebuffer = null;
            this.currentColor = a.fromValues(1, 1, 1, 1);
            this.currentShader = null;
            this.pointTexCoords = new f.Rect;
            this.clearColor = f.New(f.Color, 0, 0, 0, 0)
        }
    };
    f.Gfx.WebGLBatchJob = class {
        constructor(c) {
            const e = new ArrayBuffer(96);
            this._type = 0;
            this._batchState = c;
            this._gl = c.renderer.GetContext();
            this._indexCount = this._startIndex = 0;
            this._texParam =
                null;
            this._mat4param = new Float32Array(e, 0, 16);
            this._colorParam = new Float32Array(e, 64, 4);
            this._srcOriginRect = new Float32Array(e, 80, 4);
            this._shaderParams = []
        }
        InitQuad(c, e) {
            this._type = 1;
            this._startIndex = c;
            this._indexCount = e
        }
        DoQuad() {
            const c = this._gl;
            c.drawElements(c.TRIANGLES, this._indexCount, c.UNSIGNED_SHORT, this._startIndex)
        }
        InitSetTexture(c) {
            this._type = 2;
            this._texParam = c
        }
        DoSetTexture() {
            const c = this._gl,
                e = this._texParam;
            c.bindTexture(c.TEXTURE_2D, e ? e._GetTexture() : null)
        }
        InitSetColor(c) {
            this._type = 3;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetColor() {
            const c = this._colorParam,
                e = this._batchState;
            a.copy(e.currentColor, c);
            e.currentShader.UpdateColor(c)
        }
        InitSetGradientColor(c) {
            this._type = 19;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetGradientColor() {
            const c = this._colorParam,
                e = this._batchState.currentShader;
            e._uColor2.IsUsed() && e._uColor2.Update4f(c[0], c[1], c[2], c[3])
        }
        InitSetBlend(c, e) {
            this._type = 4;
            this._startIndex = c;
            this._indexCount = e
        }
        DoSetBlend() {
            this._gl.blendFunc(this._startIndex, this._indexCount)
        }
        InitUpdateModelView(c) {
            this._type =
                5;
            d.copy(this._mat4param, c)
        }
        DoUpdateModelView() {
            const c = this._batchState,
                e = c.renderer._allShaderPrograms,
                k = c.currentShader,
                h = this._mat4param;
            for (let p = 0, n = e.length; p < n; ++p) {
                const m = e[p];
                m === k ? m.UpdateMatMV(h, !0) : m.SetMatMVStale()
            }
            d.copy(c.currentMV, h)
        }
        InitSetRenderTarget(c, e, k) {
            this._type = 6;
            this._texParam = c;
            this._startIndex = e ? 1 : 0;
            e && d.copy(this._mat4param, k)
        }
        DoSetRenderTarget() {
            var c = this._gl,
                e = this._texParam;
            const k = 0 !== this._startIndex,
                h = this._mat4param,
                p = this._batchState,
                n = p.renderer;
            if (e) {
                const m =
                    e._GetFramebuffer();
                p.currentFramebuffer = m;
                c.bindFramebuffer(c.FRAMEBUFFER, m);
                c = e.GetWidth();
                e = e.GetHeight()
            } else p.currentFramebuffer = null, c.bindFramebuffer(c.FRAMEBUFFER, null), c = n.GetScissoredViewportWidth(), e = n.GetScissoredViewportHeight();
            k && n._UpdateViewportBatch(c, e, h)
        }
        InitClearSurface(c) {
            this._type = 7;
            c.writeToTypedArray(this._mat4param, 0)
        }
        InitClearSurface2(c, e, k, h) {
            this._type = 7;
            const p = this._mat4param;
            p[0] = c;
            p[1] = e;
            p[2] = k;
            p[3] = h
        }
        DoClearSurface() {
            const c = this._gl;
            var e = this._mat4param,
                k = this._batchState;
            const h = k.clearColor;
            (k = k.renderer._isScissorViewport && f.isDebug) && c.disable(c.SCISSOR_TEST);
            const p = e[0],
                n = e[1],
                m = e[2];
            e = e[3];
            h.equalsRgba(p, n, m, e) || (c.clearColor(p, n, m, e), h.setRgba(p, n, m, e));
            c.clear(c.COLOR_BUFFER_BIT);
            k && c.enable(c.SCISSOR_TEST)
        }
        InitClearRect(c, e, k, h, p, n, m, t) {
            this._type = 8;
            const q = this._mat4param;
            q[0] = c;
            q[1] = e;
            q[2] = k;
            q[3] = h;
            q[4] = p;
            q[5] = n;
            q[6] = m;
            q[7] = t
        }
        DoClearRectangle() {
            const c = this._gl;
            var e = this._mat4param,
                k = this._batchState;
            const h = k.renderer;
            k = k.clearColor;
            h._isScissorViewport ||
                c.enable(c.SCISSOR_TEST);
            c.scissor(e[0], e[1], e[2], e[3]);
            const p = e[4],
                n = e[5],
                m = e[6];
            e = e[7];
            k.equalsRgba(p, n, m, e) || (c.clearColor(p, n, m, e), k.setRgba(p, n, m, e));
            c.clear(c.COLOR_BUFFER_BIT);
            h._isScissorViewport ? c.scissor(0, 0, h._viewportScissorWidth, h._viewportScissorHeight) : c.disable(c.SCISSOR_TEST)
        }
        InitSetPointTexCoords(c) {
            this._type = 13;
            c.writeToTypedArray(this._mat4param, 0)
        }
        DoSetPointTextureCoords() {
            const c = this._mat4param;
            this._batchState.pointTexCoords.set(c[0], c[1], c[2], c[3])
        }
        InitPoints(c, e) {
            this._type =
                9;
            this._startIndex = c;
            this._indexCount = 1;
            this._mat4param[0] = e
        }
        DoPoints() {
            const c = this._gl,
                e = this._batchState,
                k = e.renderer._spPoints;
            c.useProgram(k._shaderProgram);
            k.UpdateMatP(e.currentMatP, !1);
            k.UpdateMatMV(e.currentMV, !1);
            var h = e.pointTexCoords;
            k._uPointTexStart.IsUsed() && k._uPointTexStart.Update2f(h.getLeft(), h.getTop());
            k._uPointTexEnd.IsUsed() && k._uPointTexEnd.Update2f(h.getRight(), h.getBottom());
            h = this._mat4param[0];
            k._uZElevation.IsUsed() && k._uZElevation.Update1f(h);
            k._uColor.IsUsed() && (h = e.currentColor,
                k._uColor.Update4f(h[0], h[1], h[2], h[3]));
            c.drawArrays(c.POINTS, this._startIndex / 4, this._indexCount);
            c.useProgram(e.currentShader._shaderProgram)
        }
        InitSetProgram(c) {
            this._type = 10;
            this._texParam = c
        }
        DoSetProgram() {
            var c = this._gl;
            const e = this._batchState,
                k = this._texParam;
            e.currentShader = k;
            c.useProgram(k._shaderProgram);
            k.UpdateMatP(e.currentMatP, !1);
            k.UpdateMatMV(e.currentMV, !1);
            k._uColor.IsUsed() && (c = e.currentColor, k._uColor.Update4f(c[0], c[1], c[2], c[3]))
        }
        InitSetProgramParameters() {
            this._type = 11
        }
        DoSetProgramParameters() {
            const c =
                this._batchState.currentShader;
            c._hasAnyOptionalUniforms && this._DoSetOptionalUniformProgramParameters(c);
            c._uCustomParameters.length && this._DoUpdateCustomProgramParameters(c)
        }
        _DoSetOptionalUniformProgramParameters(c) {
            const e = this._gl,
                k = this._mat4param,
                h = this._colorParam,
                p = this._srcOriginRect;
            if (c._uSamplerBack.IsUsed()) {
                const n = this._batchState.renderer,
                    m = this._texParam;
                n._lastTexture1 !== m && (e.activeTexture(e.TEXTURE1), e.bindTexture(e.TEXTURE_2D, m ? m._GetTexture() : null), n._lastTexture1 = m, e.activeTexture(e.TEXTURE0))
            }
            c._uPixelSize.IsUsed() &&
                c._uPixelSize.Update2f(k[0], k[1]);
            c._uDestStart.IsUsed() && c._uDestStart.Update2f(k[2], k[3]);
            c._uDestEnd.IsUsed() && c._uDestEnd.Update2f(k[4], k[5]);
            c._uLayerScale.IsUsed() && c._uLayerScale.Update1f(k[6]);
            c._uLayerAngle.IsUsed() && c._uLayerAngle.Update1f(k[7]);
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(k[12], k[13]);
            c._uSrcEnd.IsUsed() && c._uSrcEnd.Update2f(k[14], k[15]);
            c._uSrcOriginStart.IsUsed() && c._uSrcOriginStart.Update2f(p[0], p[1]);
            c._uSrcOriginEnd.IsUsed() && c._uSrcOriginEnd.Update2f(p[2], p[3]);
            c._uLayoutStart.IsUsed() &&
                c._uLayoutStart.Update2f(h[0], h[1]);
            c._uLayoutEnd.IsUsed() && c._uLayoutEnd.Update2f(h[2], h[3]);
            c._uSeconds.IsUsed() && c._uSeconds.Update1f(this._startIndex)
        }
        _DoUpdateCustomProgramParameters(c) {
            c = c._uCustomParameters;
            const e = this._shaderParams;
            for (let k = 0, h = c.length; k < h; ++k) {
                const p = c[k],
                    n = e[k];
                p.IsColorType() ? p.Update3f(n.getR(), n.getG(), n.getB()) : p.Update1f(n)
            }
        }
        InitInvalidateFramebuffer(c) {
            this._type = 12;
            this._texParam = c
        }
        DoInvalidateFramebuffer() {
            const c = this._gl,
                e = this._texParam,
                k = this._batchState.currentFramebuffer;
            e !== k && c.bindFramebuffer(c.FRAMEBUFFER, e);
            c.invalidateFramebuffer(c.FRAMEBUFFER, [c.COLOR_ATTACHMENT0]);
            e !== k && c.bindFramebuffer(c.FRAMEBUFFER, k)
        }
        InitBlitFramebuffer(c, e, k) {
            this._type = 15;
            const h = this._mat4param,
                p = this._batchState.renderer;
            h[0] = c.GetWidth();
            h[1] = c.GetHeight();
            h[2] = e ? e.GetWidth() : p.GetWidth();
            h[3] = e ? e.GetHeight() : p.GetHeight();
            h[4] = c.IsLinearSampling() ? 1 : 0;
            h[5] = "stretch" === k;
            k = this._shaderParams;
            f.clearArray(k);
            k.push(c._GetFramebuffer());
            k.push(e ? e._GetFramebuffer() : null)
        }
        DoBlitFramebuffer() {
            var c =
                this._mat4param,
                e = this._shaderParams;
            const k = this._gl;
            var h = c[0],
                p = c[1],
                n = c[2];
            const m = c[3],
                t = 0 !== c[4];
            c = 0 !== c[5];
            const q = e[1];
            k.bindFramebuffer(k.READ_FRAMEBUFFER, e[0]);
            k.bindFramebuffer(k.DRAW_FRAMEBUFFER, q);
            c ? k.blitFramebuffer(0, 0, h, p, 0, 0, n, m, k.COLOR_BUFFER_BIT, t ? k.LINEAR : k.NEAREST) : (e = Math.min(h, n), h = Math.min(p, m), n = Math.max(p - m, 0), p = Math.max(m - p, 0), k.blitFramebuffer(0, n, e, h + n, 0, p, e, h + p, k.COLOR_BUFFER_BIT, k.NEAREST))
        }
        InitStartQuery(c) {
            this._type = 16;
            this._texParam = c
        }
        DoStartQuery() {
            this._texParam.BeginTimeElapsed();
            this._texParam = null
        }
        InitEndQuery(c) {
            this._type = 17;
            this._texParam = c
        }
        DoEndQuery() {
            this._texParam.EndTimeElapsed();
            this._texParam = null
        }
        InitSetEllipseParams(c, e, k) {
            this._type = 18;
            const h = this._mat4param;
            h[0] = c;
            h[1] = e;
            h[2] = k
        }
        DoSetEllipseParams() {
            const c = this._batchState.currentShader,
                e = this._mat4param;
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(e[0], e[1]);
            c._uOutlineThickness.IsUsed() && c._uOutlineThickness.Update1f(e[2])
        }
        InitSetTilemapInfo(c, e, k, h, p, n, m) {
            this._type = 14;
            const t = this._mat4param;
            c.writeToTypedArray(t,
                0);
            t[4] = 1 / e;
            t[5] = 1 / k;
            t[6] = h / e;
            t[7] = p / k;
            t[8] = n / e;
            t[9] = m / k
        }
        DoSetTilemapInfo() {
            const c = this._batchState.currentShader,
                e = this._mat4param;
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(e[0], e[1]);
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(e[4], e[5]);
            c._uTileSize.IsUsed() && c._uTileSize.Update2f(e[6], e[7]);
            c._uTileSpacing.IsUsed() && c._uTileSpacing.Update2f(e[8], e[9])
        }
        InitClearDepth() {
            this._type = 20
        }
        DoClearDepth() {
            const c = this._gl;
            c.clear(c.DEPTH_BUFFER_BIT)
        }
        InitSetDepthEnabled(c) {
            this._type = 21;
            this._startIndex =
                c ? 1 : 0
        }
        DoSetDepthEnabled() {
            const c = this._gl;
            0 === this._startIndex ? (c.disable(c.DEPTH_TEST), c.depthMask(!1)) : (c.enable(c.DEPTH_TEST), c.depthMask(!0))
        }
        Run() {
            switch (this._type) {
                case 1:
                    this.DoQuad();
                    break;
                case 2:
                    this.DoSetTexture();
                    break;
                case 3:
                    this.DoSetColor();
                    break;
                case 4:
                    this.DoSetBlend();
                    break;
                case 5:
                    this.DoUpdateModelView();
                    break;
                case 6:
                    this.DoSetRenderTarget();
                    break;
                case 7:
                    this.DoClearSurface();
                    break;
                case 8:
                    this.DoClearRectangle();
                    break;
                case 9:
                    this.DoPoints();
                    break;
                case 10:
                    this.DoSetProgram();
                    break;
                case 11:
                    this.DoSetProgramParameters();
                    break;
                case 12:
                    this.DoInvalidateFramebuffer();
                    break;
                case 13:
                    this.DoSetPointTextureCoords();
                    break;
                case 14:
                    this.DoSetTilemapInfo();
                    break;
                case 15:
                    this.DoBlitFramebuffer();
                    break;
                case 16:
                    this.DoStartQuery();
                    break;
                case 17:
                    this.DoEndQuery();
                    break;
                case 18:
                    this.DoSetEllipseParams();
                    break;
                case 19:
                    this.DoSetGradientColor();
                    break;
                case 20:
                    this.DoClearDepth();
                    break;
                case 21:
                    this.DoSetDepthEnabled()
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = {
            timeout: 60
        },
        a = new f.Color(0, 0, 0, 1),
        d = new Set(["left", "center", "right"]),
        c = new Set(["top", "center", "bottom"]),
        e = new Set(["word", "character"]),
        k = new Set;
    f.FontManager && f.FontManager.addEventListener("fontload", q => {
        q = q.font.GetName();
        for (const u of k)(u.IsBBCodeEnabled() || f.equalsNoCase(u.GetFontName(), q)) && u._SetTextChanged()
    });

    function h(q, u, r, x, z, C) {
        u ? "Gecko" === f.Platform.BrowserEngine ? q.strokeText(r, x, z, C) : q.strokeText(r, x, z) : "Gecko" === f.Platform.BrowserEngine ? q.fillText(r, x,
            z, C) : q.fillText(r, x, z)
    }

    function p(q, u, r, x, z, C) {
        u ? q.strokeRect(r, x, z, C) : q.fillRect(r, x, z, C)
    }

    function n(q) {
        return 4 / 3 * q
    }
    let m = !1,
        t = !1;
    f.Gfx.RendererText = class {
        constructor(q, u) {
            u = Object.assign({}, b, u);
            this._renderer = q;
            this._fontName = "Arial";
            this._fontSize = 16;
            this._lineHeight = 0;
            this._isItalic = this._isBold = !1;
            this._colorStr = "black";
            this._isBBcodeEnabled = !1;
            this.onloadfont = null;
            this._alreadyLoadedFonts = new Set;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._text = "";
            this._bbString = null;
            this._wrappedText =
                f.New(f.WordWrap);
            this._wrapMode = "word";
            this._isUpdating = this._textChanged = !1;
            this._isAsync = !0;
            this._drawMaxCharCount = -1;
            this._height = this._width = this._cssHeight = this._cssWidth = this._drawCharCount = 0;
            this._zoom = 1;
            this._changed = !1;
            this._measureContextTop = this._measureContext = this._textContext = this._textCanvas = null;
            this._lastCanvasHeight = this._lastCanvasWidth = -1;
            this._lastTextCanvasFillStyle = this._lastMeasureCanvasFont = this._lastTextCanvasFont = "";
            this._lastTextCanvasLineWidth = this._lastTextCanvasOpacity =
                1;
            this._measureTextCallback = (r, x) => this._MeasureText(r, x);
            this._texture = null;
            this._textureHeight = this._textureWidth = 0;
            this._rcTex = new f.Rect;
            this._scaleFactor = 1;
            this._needToRecreateTexture = !1;
            this._textureTimeout = new f.IdleTimeout(() => {
                this.ReleaseTexture();
                this._SetTextCanvasSize(8, 8)
            }, u.timeout);
            this.ontextureupdate = null;
            this._wasReleased = !1;
            k.add(this)
        }
        Release() {
            this.onloadfont = null;
            this._alreadyLoadedFonts.clear();
            this._measureTextCallback = this._measureContextTop = this._measureContext = this._textContext =
                this._textCanvas = this._bbString = null;
            this._textureTimeout.Release();
            this.ontextureupdate = null;
            this.ReleaseTexture();
            this._wrappedText.Clear();
            this._renderer = this._wrappedText = null;
            this._wasReleased = !0;
            k.delete(this)
        }
        _SetChanged() {
            this._changed = !0
        }
        _SetTextChanged() {
            this._SetChanged();
            this._wrappedText.Clear();
            this._textChanged = !0
        }
        SetIsAsync(q) {
            this._isAsync = !!q
        }
        IsAsync() {
            return this._isAsync
        }
        SetBBCodeEnabled(q) {
            q = !!q;
            this._isBBcodeEnabled !== q && (q = (this._isBBcodeEnabled = q) ? "alphabetic" : "top", this._textContext &&
                (this._textContext.textBaseline = q), this._measureContext && (this._measureContext.textBaseline = q), this._SetTextChanged())
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetFontName(q) {
            q || (q = "serif");
            this._fontName !== q && (this._fontName = q, this._SetTextChanged())
        }
        GetFontName() {
            return this._fontName
        }
        SetFontSize(q) {
            .1 > q && (q = .1);
            this._fontSize !== q && (this._fontSize = q, this._SetTextChanged())
        }
        SetLineHeight(q) {
            this._lineHeight !== q && (this._lineHeight = q, this._SetChanged())
        }
        SetBold(q) {
            q = !!q;
            this._isBold !== q && (this._isBold =
                q, this._SetTextChanged())
        }
        SetItalic(q) {
            q = !!q;
            this._isItalic !== q && (this._isItalic = q, this._SetTextChanged())
        }
        SetDrawMaxCharacterCount(q) {
            q = Math.floor(q);
            this._drawMaxCharCount !== q && (this._drawMaxCharCount = q, this._SetChanged())
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(q, u) {
            for (let r = q.length - 1; 0 <= r; --r) {
                const x = q[r];
                if (x.tag === u) return x
            }
            return null
        }
        _HasStyleTag(q, u) {
            return !!this._GetStyleTag(q, u)
        }
        _GetFontString(q, u) {
            let r = [];
            (this._isBold || this._HasStyleTag(u, "b")) && r.push("bold");
            (this._isItalic || this._HasStyleTag(u, "i")) && r.push("italic");
            var x = this._GetStyleTag(u, "size");
            x = x ? parseFloat(x.param) : this._fontSize;
            q ? r.push(x + "pt") : r.push(x * this._scaleFactor * this._zoom * self.devicePixelRatio + "pt");
            q = this._fontName;
            (u = this._GetStyleTag(u, "font")) && u.param && (q = u.param, this.onloadfont && !this._alreadyLoadedFonts.has(q) && (this.onloadfont(q), this._alreadyLoadedFonts.add(q)));
            q && r.push('"' + q + '"');
            return r.join(" ")
        }
        SetColor(q) {
            q instanceof f.Color && (q = q.getCssRgb());
            this._colorStr !==
                q && (this._colorStr = q, this._SetChanged())
        }
        SetColorRgb(q, u, r) {
            a.setRgb(q, u, r);
            this.SetColor(a)
        }
        SetHorizontalAlignment(q) {
            if (!d.has(q)) throw Error("invalid horizontal alignment");
            this._horizontalAlign !== q && (this._horizontalAlign = q, this._SetChanged())
        }
        SetVerticalAlignment(q) {
            if (!c.has(q)) throw Error("invalid vertical alignment");
            this._verticalAlign !== q && (this._verticalAlign = q, this._SetChanged())
        }
        SetWordWrapMode(q) {
            if (!e.has(q)) throw Error("invalid word wrap mode");
            this._wrapMode !== q && (this._wrapMode =
                q, this._SetTextChanged())
        }
        SetText(q) {
            this._text !== q && (this._text = q, this._SetTextChanged())
        }
        SetSize(q, u, r) {
            "undefined" === typeof r && (r = 1);
            if (!(0 >= q || 0 >= q || this._cssWidth === q && this._cssHeight === u && this._zoom === r)) {
                1 === this._zoom !== (1 === r) && (this._needToRecreateTexture = !0);
                var x = this._cssWidth,
                    z = this._zoom;
                this._cssWidth = q;
                this._cssHeight = u;
                this._zoom = r;
                q = self.devicePixelRatio;
                this._width = this._cssWidth * this._zoom * q;
                this._height = this._cssHeight * this._zoom * q;
                q = Math.max(this._width, this._height);
                u = Math.min(this._renderer.GetMaxTextureSize(),
                    2048);
                r = 1;
                q > u && (r = u / q, this._width = Math.min(this._width * r, u), this._height = Math.min(this._height * r, u));
                this._scaleFactor = r;
                0 < this._textureWidth && 0 < this._textureHeight && this._zoom === z && this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight);
                this._cssWidth !== x ? this._SetTextChanged() : this._SetChanged()
            }
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            return this._wrappedText.GetTotalLineHeight() + this._wrappedText.GetLineCount() * (this._lineHeight + 4) - this._lineHeight
        }
        GetTexture() {
            this._textureTimeout.Reset();
            this._MaybeUpdate();
            return this._texture
        }
        _MaybeUpdate() {
            this._texture && !this._changed && !this._textChanged || this._isUpdating || 0 >= this._width || 0 >= this._height || (this._changed = !1, this._isUpdating = !0, this._isAsync ? f.Asyncify(() => this._DoUpdate()) : this._DoUpdate())
        }
        _DoUpdate() {
            this._wasReleased || (this._SetTextCanvasSize(Math.ceil(this._width), Math.ceil(this._height)),
                this._MaybeWrapText(), this._DrawTextToCanvas(), this._UpdateTexture(), this._textureTimeout.Reset(), this._isUpdating = !1)
        }
        _SetTextCanvasSize(q, u) {
            this._textCanvas || (this._textCanvas = f.CreateCanvas(16, 16));
            let r = !1;
            if (this._lastCanvasWidth !== q || this._lastCanvasHeight !== u) this._lastCanvasWidth = q, this._lastCanvasHeight = u, this._textCanvas.width = q, this._textCanvas.height = u, r = !0;
            this._textContext || (this._textContext = this._textCanvas.getContext("2d"), r = !0);
            r ? (this._textContext.textBaseline = this._isBBcodeEnabled ?
                "alphabetic" : "top", this._textContext.font = this._lastTextCanvasFont, this._textContext.fillStyle = this._lastTextCanvasFillStyle, this._textContext.strokeStyle = this._lastTextCanvasFillStyle, this._textContext.globalAlpha = this._lastTextCanvasOpacity, this._textContext.lineWidth = this._lastTextCanvasLineWidth) : this._textContext.clearRect(0, 0, q, u)
        }
        _MaybeCreateMeasureContext() {
            this._measureContext || (this._measureContext = f.CreateCanvas(16, 16).getContext("2d"), this._measureContextTop = f.CreateCanvas(16, 16).getContext("2d"),
                this._measureContext.textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top", this._measureContextTop.textBaseline = "top")
        }
        _SetMeasureFontString(q) {
            this._lastMeasureCanvasFont !== q && (this._lastMeasureCanvasFont = q, this._measureContext.font = q, this._measureContextTop.font = q)
        }
        _SupportsFontBoundingBoxMeasurements() {
            if (!m) {
                m = !0;
                this._MaybeCreateMeasureContext();
                const q = this._measureContext.measureText("test");
                t = "number" === typeof q.fontBoundingBoxAscent && "number" === typeof q.fontBoundingBoxDescent
            }
            return t
        }
        _MaybeWrapText() {
            this._textChanged &&
                (this._MaybeCreateMeasureContext(), !this._isBBcodeEnabled || this._bbString && this._bbString.toString() === this._text || (this._bbString = new f.BBString(this._text, {
                    noEscape: !0
                })), this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, 0), this._textChanged = !1)
        }
        _MeasureText(q, u) {
            this._SetMeasureFontString(this._GetFontString(!0, u));
            u = (u = this._GetStyleTag(u, "size")) ? parseFloat(u.param) : this._fontSize;
            const r = this._measureContext.measureText(q);
            let x = 0;
            this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements() && (q = this._measureContextTop.measureText(q), x = r.fontBoundingBoxAscent - q.fontBoundingBoxAscent);
            return {
                width: r.width,
                height: n(u),
                fontBoundingBoxAscent: r.fontBoundingBoxAscent || 0,
                fontBoundingBoxDescent: r.fontBoundingBoxDescent || 0,
                topToAlphabeticDistance: x
            }
        }
        _SetDrawFontString(q) {
            this._lastTextCanvasFont !== q && (this._lastTextCanvasFont = q, this._textContext.font = q)
        }
        _SetDrawCanvasColor(q) {
            this._lastTextCanvasFillStyle !== q && (this._lastTextCanvasFillStyle =
                q, this._textContext.fillStyle = q, this._textContext.strokeStyle = q)
        }
        _SetDrawCanvasOpacity(q) {
            this._lastTextCanvasOpacity !== q && (this._lastTextCanvasOpacity = q, this._textContext.globalAlpha = q)
        }
        _SetDrawCanvasLineWith(q) {
            this._lastTextCanvasLineWidth !== q && (this._lastTextCanvasLineWidth = q, this._textContext.lineWidth = q)
        }
        _DrawTextToCanvas() {
            this._drawCharCount = 0;
            const q = this._scaleFactor * this._zoom * self.devicePixelRatio,
                u = (4 + this._lineHeight) * q;
            var r = 0;
            const x = this._wrappedText.GetLines();
            if (0 !== x.length) {
                var z =
                    this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements(),
                    C = x[0].height * q;
                "center" === this._verticalAlign ? (r = x.reduce((w, B) => w + B.height * q + u, 0) - u, r = Math.max(this._height / 2 - r / 2, 0), z && (C = x[0].topToAlphabeticDistance * q)) : "bottom" === this._verticalAlign && (r = x.reduce((w, B) => w + B.height * q + u, 0) - this._lineHeight * q, r = this._height - r - (z ? x[x.length - 1].fontBoundingBoxDescent * q : 0) - 2);
                for (let w = 0, B = x.length; w < B; ++w) {
                    z = x[w];
                    const F = z.height * q,
                        J = r;
                    if (this._isBBcodeEnabled) {
                        if (r += 0 === w ? C : F, 0 < w && r > this._height -
                            4 * q) break
                    } else if (0 < w && r >= this._height - F) break;
                    0 <= J && this._DrawTextLine(z, r, q);
                    this._isBBcodeEnabled || (r += F);
                    r += u
                }
            }
        }
        _DrawTextLine(q, u, r) {
            let x = 0;
            "center" === this._horizontalAlign ? x = (this._width - q.width * r) / 2 : "right" === this._horizontalAlign && (x = this._width - q.width * r);
            for (const z of q.fragments) this._DrawTextFragment(z, x, u, r, q.height), x += z.width * r
        }
        _DrawTextFragment(q, u, r, x, z) {
            const C = this._textContext,
                w = z / 16;
            z = q.width * x;
            const B = q.height * x,
                F = q.height / 16;
            var J = (4 + this._lineHeight) * x;
            const O = q.styles;
            q =
                q.text;
            if (-1 !== this._drawMaxCharCount) {
                if (this._drawCharCount >= this._drawMaxCharCount) return;
                this._drawCharCount + q.length > this._drawMaxCharCount && (q = q.substr(0, this._drawMaxCharCount - this._drawCharCount), z = this._MeasureText(q, O).width * x);
                this._drawCharCount += q.length
            }
            const G = this._GetStyleTag(O, "background"),
                I = this._HasStyleTag(O, "u"),
                P = this._HasStyleTag(O, "s");
            if ((!f.IsStringAllWhitespace(q) || G || I || P) && !this._HasStyleTag(O, "hide")) {
                var Q = this._GetStyleTag(O, "offsetx");
                u += Q ? parseFloat(Q.param) * x :
                    0;
                Q = this._GetStyleTag(O, "offsety");
                r += Q ? parseFloat(Q.param) * x : 0;
                G && (this._SetDrawCanvasColor(G.param), C.fillRect(u, r - B, z, B + J));
                J = this._GetStyleTag(O, "color");
                this._SetDrawCanvasColor(J ? J.param : this._colorStr);
                J = this._GetStyleTag(O, "opacity");
                this._SetDrawCanvasOpacity(J ? parseFloat(J.param) / 100 : 1);
                (J = this._HasStyleTag(O, "stroke")) && this._SetDrawCanvasLineWith(F * this._scaleFactor * this._zoom);
                I && p(C, J, u, r + x * w, z, x * w);
                P && p(C, J, u, r - B / 4, z, x * F);
                this._SetDrawFontString(this._GetFontString(!1, O));
                h(C, J, q, u,
                    r, z);
                !J && (this._SetDrawCanvasLineWith(F * this._scaleFactor * this._zoom), x = this._GetStyleTag(O, "outline")) && (this._SetDrawCanvasColor(x.param), h(C, !0, q, u, r, z))
            }
        }
        _UpdateTexture() {
            if (!this._renderer.IsContextLost() && (this._textureWidth = Math.ceil(this._width), this._textureHeight = Math.ceil(this._height), this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight), this._needToRecreateTexture && (this.ReleaseTexture(), this._needToRecreateTexture = !1), this._texture || (this._texture = this._renderer.CreateDynamicTexture(this._textureWidth,
                    this._textureHeight, {
                        mipMap: 1 === this._zoom,
                        mipMapQuality: "high"
                    })), this._renderer.UpdateTexture(this._textCanvas, this._texture), this.ontextureupdate)) this.ontextureupdate()
        }
        GetTexRect() {
            return this._rcTex
        }
        ReleaseTexture() {
            this._texture && (this._renderer.IsContextLost() || this._renderer.DeleteTexture(this._texture), this._texture = null)
        }
        static OnContextLost() {
            for (const q of k) q.ReleaseTexture()
        }
        static GetAll() {
            return k.values()
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor(a) {
            this._gl = a.GetContext();
            this._version = a.GetWebGLVersionNumber();
            this._timerExt = a._GetDisjointTimerQueryExtension();
            this._query = null;
            this._hasResult = this._isActive = !1;
            this._result = 0;
            this._query = 1 === this._version ? this._timerExt.createQueryEXT() : this._gl.createQuery()
        }
        Release() {
            this._DeleteQueryObject();
            this._timerExt = this._gl = null;
            this._hasResult = !1
        }
        _DeleteQueryObject() {
            this._query && (1 === this._version ? this._timerExt.deleteQueryEXT(this._query) : this._gl.deleteQuery(this._query),
                this._query = null)
        }
        BeginTimeElapsed() {
            if (this._isActive) throw Error("query already active");
            1 === this._version ? this._timerExt.beginQueryEXT(this._timerExt.TIME_ELAPSED_EXT, this._query) : this._gl.beginQuery(this._timerExt.TIME_ELAPSED_EXT, this._query);
            this._isActive = !0
        }
        EndTimeElapsed() {
            if (!this._isActive) throw Error("query not active");
            1 === this._version ? this._timerExt.endQueryEXT(this._timerExt.TIME_ELAPSED_EXT) : this._gl.endQuery(this._timerExt.TIME_ELAPSED_EXT);
            this._isActive = !1
        }
        CheckForResult() {
            if (this._query &&
                !this._hasResult && !this._isActive) {
                var a = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_AVAILABLE_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT_AVAILABLE);
                var d = this._gl.getParameter(this._timerExt.GPU_DISJOINT_EXT);
                a && !d && (this._result = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT), this._result /= 1E9, this._hasResult = !0);
                (a ||
                    d) && this._DeleteQueryObject()
            }
        }
        HasResult() {
            return this._hasResult
        }
        GetResult() {
            if (!this._hasResult) throw Error("no result available");
            return this._result
        }
    }
    f.Gfx.WebGLTimeElapsedQuery = class {
        constructor(a) {
            this._renderer = a;
            this._frameNumber = a.GetFrameNumber();
            this._isActive = !1;
            this._parentQuery = null;
            this._isNested = !1;
            this._realQuery = null;
            this._queries = []
        }
        Release() {
            for (const a of this._queries) a instanceof b && a.Release();
            f.clearArray(this._queries);
            this._renderer = this._realQuery = this._parentQuery = null
        }
        BeginTimeElapsed() {
            if (this._isActive) throw Error("query already active");
            const a = this._renderer._GetTimeQueryStack();
            0 < a.length ? (this._isNested = !0, this._parentQuery = a[a.length - 1], this._parentQuery._EndReal(), this._parentQuery._queries.push(this)) : (this._isNested = !1, this._parentQuery = null);
            this._isActive = !0;
            a.push(this);
            this._StartReal()
        }
        EndTimeElapsed() {
            if (!this._isActive) throw Error("query not active");
            if (this._renderer._GetTimeQueryStack().pop() !== this) throw Error("can only end most nested query");
            this._isActive = !1;
            this._EndReal();
            this._parentQuery && (this._parentQuery._StartReal(),
                this._parentQuery = null)
        }
        _StartReal() {
            this._realQuery = f.New(b, this._renderer);
            this._queries.push(this._realQuery);
            this._realQuery.BeginTimeElapsed()
        }
        _EndReal() {
            this._realQuery.EndTimeElapsed();
            this._realQuery = null
        }
        CheckForResult() {
            for (const a of this._queries) a.CheckForResult()
        }
        IsNested() {
            return this._isNested
        }
        HasResult() {
            return this._queries.every(a => a.HasResult())
        }
        GetResult() {
            return this._queries.reduce((a, d) => a + d.GetResult(), 0)
        }
        GetFrameNumber() {
            return this._frameNumber
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Gfx.WebGLQueryResultBuffer = class {
        constructor(b, a = 1E3) {
            this._renderer = b;
            this._maxQueries = a;
            this._buffer = [];
            this._renderer._AddQueryResultBuffer(this)
        }
        Release() {
            this.Clear();
            this._renderer._RemoveQueryResultBuffer(this);
            this._renderer = null
        }
        Clear() {
            for (const b of this._buffer) b.Release();
            f.clearArray(this._buffer)
        }
        AddTimeElapsedQuery() {
            const b = new f.Gfx.WebGLTimeElapsedQuery(this._renderer);
            this._buffer.push(b);
            this._buffer.length > this._maxQueries && this._buffer.shift().Release();
            return b
        }
        CheckForResults(b) {
            for (const a of this._buffer) {
                if (a.GetFrameNumber() >=
                    b) break;
                if (a.IsNested()) break;
                a.CheckForResult()
            }
        }
        GetFrameRangeResultSum(b, a) {
            if (a <= b) return NaN;
            let d = 0;
            for (const c of this._buffer) {
                if (c.GetFrameNumber() >= a) break;
                if (!(c.GetFrameNumber() < b))
                    if (c.HasResult()) d += c.GetResult();
                    else return NaN
            }
            return d
        }
        DeleteAllBeforeFrameNumber(b) {
            for (let a = 0, d = this._buffer.length; a < d; ++a) {
                const c = this._buffer[a];
                if (c.GetFrameNumber() < b) c.Release();
                else {
                    0 < a && this._buffer.splice(0, a);
                    break
                }
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        e = {
            powerPreference: "default",
            enableGpuProfiling: !0,
            alpha: !1,
            lowLatency: !1,
            depth: !1,
            maxWebGLVersion: 2
        },
        k = new Set(["default", "low-power", "high-performance"]),
        h = new f.Quad(0, 0, 1, 0, 1, 1, 0, 1),
        p = a.fromValues(0, 0, 0),
        n = a.fromValues(0, 0, 0),
        m = c.create(),
        t = new f.Quad,
        q = new f.Rect;
    let u = null;
    f.isDebug && (self.debug_lose_context = function() {
        u ? u.loseContext() : console.warn("WEBGL_lose_context not supported")
    }, self.debug_restore_context = function() {
        u ? u.restoreContext() :
            console.warn("WEBGL_lose_context not supported")
    });
    const r = new Set;
    let x = -1;

    function z() {
        x = -1;
        for (const w of r) w.checkFunc() && (w.resolve(), r.delete(w));
        0 < r.size && (x = self.requestAnimationFrame(z))
    }

    function C(w, B, F) {
        if (2 <= F && (F = w.getContext("webgl2", B))) return {
            gl: F,
            version: 2
        };
        F = w.getContext("webgl", B);
        if (!F) try {
            F = w.getContext("experimental-webgl", B)
        } catch (J) {
            console.warn("Error requesting 'experimental-webgl' context: ", J)
        }
        return {
            gl: F,
            version: 1
        }
    }
    f.Gfx.WebGLRenderer = class extends f.Gfx.RendererBase {
        constructor(w,
            B) {
            super();
            B = Object.assign({}, e, B);
            if (!k.has(B.powerPreference)) throw Error("invalid power preference");
            let F = !1;
            const J = {
                alpha: !!B.alpha,
                depth: !1,
                antialias: !1,
                powerPreference: B.powerPreference,
                failIfMajorPerformanceCaveat: !0
            };
            B.lowLatency && (J.desynchronized = !0, J.preserveDrawingBuffer = !0);
            let O = C(w, J, B.maxWebGLVersion);
            O.gl || (F = !0, J.failIfMajorPerformanceCaveat = !1, O = C(w, J, B.maxWebGLVersion));
            if (!O.gl) throw Error("failed to initialise WebGL context");
            this._gl = w = O.gl;
            this._attribs = w.getContextAttributes();
            B.lowLatency && !this._attribs.desynchronized && console.info("[WebGLRenderer] Low-latency mode specified but is not supported here");
            this._versionString = w.getParameter(w.VERSION);
            this._version = O.version;
            this._lastBackbufferHeight = this._lastBackbufferWidth = 0;
            this._isDepthEnabled = this._usesDepthBuffer = !!B.depth;
            this._depthBuffer = null;
            this._isAutoSizeDepthBuffer = !0;
            this._depthBufferHeight = this._depthBufferWidth = 0;
            this._pointBuffer = this._indexBuffer = this._texcoordBuffer = this._vertexBuffer = null;
            this._vertexData =
                new Float32Array(8E3 * this.GetNumVertexComponents());
            this._indexData = new Uint16Array(12E3);
            this._texcoordData = new Float32Array(16E3);
            this._pointData = new Float32Array(32E3);
            this._lastVertexPtr = this._pointPtr = this._texPtr = this._vertexPtr = 0;
            this._spDeviceTransformTextureFill = this._lastProgram = null;
            this._batch = [];
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = null;
            this._lastPointZ = 0;
            this._batchState = f.New(f.Gfx.BatchState, this);
            this._lastColor = f.New(f.Color, 1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 =
                null;
            this._lastDestBlend = this._lastSrcBlend = 0;
            this._lineWidth = 1;
            this._lineWidthStack = [this._lineWidth];
            this._lineCap = 1;
            this._lineCapStack = [this._lineCap];
            this._lineOffset = .5;
            this._lineOffsetStack = [this._lineOffset];
            this._isScissorViewport = !1;
            this._viewportScissorHeight = this._viewportScissorWidth = -1;
            this._lastPointTexCoords = new f.Rect;
            this._maxTextureSize = -1;
            this._highpPrecision = this._maxPointSize = this._minPointSize = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._extensions = [];
            this._hasMajorPerformanceCaveat = F;
            this._isInitialisingAfterContextRestored = !1;
            this._anisotropicExt = this._parallelShaderCompileExt = null;
            this._maxAnisotropy = 0;
            this._isGpuProfilingEnabled = !!B.enableGpuProfiling;
            this._timerExt = null;
            this._allQueryResultBuffers = new Set;
            this._timeQueryStack = [];
            this.FillIndexBufferData(this._indexData)
        }
        IsWebGL() {
            return !0
        }
        async InitState() {
            super.InitState();
            var w = this._gl,
                B = this.GetNumVertexComponents();
            this._lastColor.setRgba(1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 =
                null;
            this._pointPtr = this._vertexPtr = 0;
            this._lastVertexPtr = 8E3 * B - 4 * B;
            f.clearArray(this._batch);
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = this._lastProgram = null;
            this._lastPointTexCoords.set(0, 0, 1, 1);
            this._lastPointZ = 0;
            B = this._batchState;
            B.currentShader = null;
            B.currentFramebuffer = null;
            d.set(B.currentColor, 1, 1, 1, 1);
            B.clearColor.setRgba(0, 0, 0, 0);
            B.pointTexCoords.set(0, 0, 1, 1);
            w.clearColor(0, 0, 0, 0);
            w.clear(w.COLOR_BUFFER_BIT);
            w.enable(w.BLEND);
            w.blendFunc(w.ONE, w.ONE_MINUS_SRC_ALPHA);
            this._lastSrcBlend =
                w.ONE;
            this._lastDestBlend = w.ONE_MINUS_SRC_ALPHA;
            this._InitBlendModes(w);
            w.disable(w.CULL_FACE);
            w.disable(w.STENCIL_TEST);
            w.disable(w.DITHER);
            this._usesDepthBuffer ? (w.enable(w.DEPTH_TEST), w.depthMask(!0), w.depthFunc(w.LEQUAL)) : (w.disable(w.DEPTH_TEST), w.depthMask(!1));
            this._isDepthEnabled = this._usesDepthBuffer;
            this._pointBuffer = w.createBuffer();
            w.bindBuffer(w.ARRAY_BUFFER, this._pointBuffer);
            w.bufferData(w.ARRAY_BUFFER, this._pointData.byteLength, w.DYNAMIC_DRAW);
            this._vertexBuffer = w.createBuffer();
            w.bindBuffer(w.ARRAY_BUFFER,
                this._vertexBuffer);
            w.bufferData(w.ARRAY_BUFFER, this._vertexData.byteLength, w.DYNAMIC_DRAW);
            this._texcoordBuffer = w.createBuffer();
            w.bindBuffer(w.ARRAY_BUFFER, this._texcoordBuffer);
            w.bufferData(w.ARRAY_BUFFER, this._texcoordData.byteLength, w.DYNAMIC_DRAW);
            this._indexBuffer = w.createBuffer();
            w.bindBuffer(w.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            w.bufferData(w.ELEMENT_ARRAY_BUFFER, this._indexData, w.STATIC_DRAW);
            w.activeTexture(w.TEXTURE0);
            w.bindTexture(w.TEXTURE_2D, null);
            this._maxTextureSize = w.getParameter(w.MAX_TEXTURE_SIZE);
            B = w.getParameter(w.ALIASED_POINT_SIZE_RANGE);
            this._minPointSize = B[0];
            this._maxPointSize = B[1];
            B = w.getShaderPrecisionFormat(w.VERTEX_SHADER, w.HIGH_FLOAT);
            const F = w.getShaderPrecisionFormat(w.FRAGMENT_SHADER, w.HIGH_FLOAT);
            this._highpPrecision = B && F ? Math.min(B.precision, F.precision) : 0;
            2048 < this._maxPointSize && (this._maxPointSize = 2048);
            this._extensions = w.getSupportedExtensions();
            if (B = w.getExtension("WEBGL_debug_renderer_info")) this._unmaskedVendor = w.getParameter(B.UNMASKED_VENDOR_WEBGL), this._unmaskedRenderer =
                w.getParameter(B.UNMASKED_RENDERER_WEBGL);
            this._parallelShaderCompileExt = w.getExtension("KHR_parallel_shader_compile");
            f.isDebug && (u = w.getExtension("WEBGL_lose_context"));
            if (this._isGpuProfilingEnabled)
                if (1 === this.GetWebGLVersionNumber()) {
                    if ("Chromium" !== f.Platform.BrowserEngine || 81 <= f.Platform.BrowserVersionNumber || "undefined" !== typeof document) this._timerExt = w.getExtension("EXT_disjoint_timer_query")
                } else this._timerExt = w.getExtension("EXT_disjoint_timer_query_webgl2") || w.getExtension("EXT_disjoint_timer_query");
            this._maxAnisotropy = (this._anisotropicExt = w.getExtension("EXT_texture_filter_anisotropic")) ? w.getParameter(this._anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            w = f.Gfx.WebGLShaderProgram;
            B = w.GetDefaultVertexShaderSource(!1);
            w = [
                [w.GetTextureFillFragmentShaderSource(), B, "<default>"],
                [w.GetTextureFillFragmentShaderSource(), B, "<default-device-transform>"],
                [w.GetPointFragmentShaderSource(), w.GetPointVertexShaderSource(), "<point>"],
                [w.GetColorFillFragmentShaderSource(), B, "<fill>"],
                [w.GetLinearGradientFillFragmentShaderSource(),
                    B, "<lineargradient>"
                ],
                [w.GetHardEllipseFillFragmentShaderSource(), B, "<hardellipse>"],
                [w.GetHardEllipseOutlineFragmentShaderSource(), B, "<hardellipseoutline>"],
                [w.GetSmoothEllipseFillFragmentShaderSource(), B, "<smoothellipse>"],
                [w.GetSmoothEllipseOutlineFragmentShaderSource(), B, "<smoothellipseoutline>"],
                [w.GetSmoothLineFillFragmentShaderSource(), B, "<smoothline>"],
                [w.GetTilemapFragmentShaderSource(), w.GetDefaultVertexShaderSource(!0), "<tilemap>"]
            ];
            w = await Promise.all(w.map(J => this.CreateShaderProgram({
                    src: J[0]
                },
                J[1], J[2])));
            this._spTextureFill = w[0];
            this._spDeviceTransformTextureFill = w[1];
            this._spPoints = w[2];
            this._spColorFill = w[3];
            this._spLinearGradientFill = w[4];
            this._spHardEllipseFill = w[5];
            this._spHardEllipseOutline = w[6];
            this._spSmoothEllipseFill = w[7];
            this._spSmoothEllipseOutline = w[8];
            this._spSmoothLineFill = w[9];
            this._spTilemapFill = w[10];
            this.SetTextureFillMode()
        }
        async CreateShaderProgram(w, B, F) {
            w = await f.Gfx.WebGLShaderProgram.Create(this, w, B, F);
            this._AddShaderProgram(w);
            return w
        }
        ResetLastProgram() {
            this._lastProgram =
                null
        }
        SetSize(w, B, F) {
            if (this._width !== w || this._height !== B || F) {
                this.EndBatch();
                F = this._gl;
                var J = this._batchState;
                this._width = w;
                this._height = B;
                w = this.GetScissoredViewportWidth();
                B = this.GetScissoredViewportHeight();
                this._UpdateViewportRenderer(w, B, this._width, this._height);
                this._UpdateViewportBatch(w, B, this._matP);
                this._spDeviceTransformTextureFill && (F.useProgram(this._spDeviceTransformTextureFill.GetShaderProgram()), this._spDeviceTransformTextureFill._UpdateDeviceTransformUniforms(this._matP), this._lastProgram =
                    this._spDeviceTransformTextureFill, this._batchState.currentShader = this._spDeviceTransformTextureFill);
                F.bindTexture(F.TEXTURE_2D, null);
                F.activeTexture(F.TEXTURE1);
                F.bindTexture(F.TEXTURE_2D, null);
                F.activeTexture(F.TEXTURE0);
                this._lastTexture1 = this._lastTexture0 = null;
                this._usesDepthBuffer && this._isAutoSizeDepthBuffer && this._SetDepthBufferSize(this._width, this._height);
                this._currentRenderTarget && this._currentRenderTarget._Resize(this._width, this._height);
                F.bindFramebuffer(F.FRAMEBUFFER, null);
                this._currentRenderTarget =
                    null;
                J.currentFramebuffer = null
            }
        }
        _SetDepthBufferSize(w, B) {
            const F = this._gl;
            if (this._depthBuffer) {
                if (this._depthBufferWidth === w && this._depthBufferHeight === B) return;
                F.deleteRenderbuffer(this._depthBuffer)
            }
            this._depthBuffer = F.createRenderbuffer();
            F.bindRenderbuffer(F.RENDERBUFFER, this._depthBuffer);
            F.renderbufferStorage(F.RENDERBUFFER, 2 <= this._version ? F.DEPTH_COMPONENT24 : F.DEPTH_COMPONENT16, w, B);
            F.bindRenderbuffer(F.RENDERBUFFER, null);
            this._depthBufferWidth = w;
            this._depthBufferHeight = B
        }
        SetFixedSizeDepthBuffer(w,
            B) {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !1, this._SetDepthBufferSize(w, B))
        }
        SetAutoSizeDepthBuffer() {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !0, this._SetDepthBufferSize(this._width, this._height))
        }
        _UpdateViewportRenderer(w, B, F, J) {
            this._cam[2] = 100;
            c.lookAt(this._matMV, this._cam, this._look, this._up);
            var O = w / B,
                G = this.GetNearZ();
            c.perspective(this._matP, 45, O, G, this.GetFarZ());
            O = [0, 0];
            G = [0, 0];
            const I = self.devicePixelRatio;
            this.Project(0, 0, w, B, O);
            this.Project(1, 1, w, B, G);
            this._worldScale[0] =
                I / (G[0] - O[0]);
            this._worldScale[1] = -I / (G[1] - O[1]);
            this._lastBackbufferWidth = F;
            this._lastBackbufferHeight = J
        }
        _UpdateViewportBatch(w, B, F) {
            const J = this._batchState;
            this._gl.viewport(0, 0, w, B);
            w = this._allShaderPrograms;
            B = J.currentShader;
            for (let O = 0, G = w.length; O < G; ++O) {
                const I = w[O];
                I === B ? I.UpdateMatP(F, !0) : I.SetMatPStale()
            }
            c.copy(J.currentMatP, F)
        }
        SetViewportScissor(w, B) {
            const F = this._gl;
            if (this._width === w && this._height === B) this._isScissorViewport && (this.EndBatch(), F.disable(F.SCISSOR_TEST), this._isScissorViewport = !1, this._viewportScissorHeight = this._viewportScissorWidth = -1, this.SetSize(this._width, this._height, !0));
            else if (this._isScissorViewport || (this.EndBatch(), F.enable(F.SCISSOR_TEST), this._isScissorViewport = !0), this._viewportScissorWidth !== w || this._viewportScissorHeight !== B) this.EndBatch(), F.scissor(0, 0, w, B), this._viewportScissorWidth = w, this._viewportScissorHeight = B, this.SetSize(this._width, this._height, !0)
        }
        RemoveViewportScissor() {
            const w = this._gl;
            this._isScissorViewport && (this.EndBatch(), w.disable(w.SCISSOR_TEST),
                this._isScissorViewport = !1);
            this._viewportScissorHeight = this._viewportScissorWidth = -1
        }
        GetScissoredViewportWidth() {
            return this._isScissorViewport ? this._viewportScissorWidth : this.GetWidth()
        }
        GetScissoredViewportHeight() {
            return this._isScissorViewport ? this._viewportScissorHeight : this.GetHeight()
        }
        UpdateModelView() {
            f.Gfx.AreMat4sEqual(this._lastMV, this._matMV) || (this.PushBatch().InitUpdateModelView(this._matMV), c.copy(this._lastMV, this._matMV), this._topOfBatch = 0)
        }
        GetBatchState() {
            return this._batchState
        }
        PushBatch() {
            const w =
                this._batch;
            this._batchPtr === w.length && w.push(new f.Gfx.WebGLBatchJob(this._batchState));
            return w[this._batchPtr++]
        }
        EndBatch() {
            0 === this._batchPtr || this.IsContextLost() || (this._WriteBuffers(), this._ExecuteBatch(), this._topOfBatch = this._pointPtr = this._texPtr = this._vertexPtr = this._batchPtr = 0)
        }
        _WriteBuffers() {
            const w = this._gl;
            0 < this._pointPtr && (w.bindBuffer(w.ARRAY_BUFFER, this._pointBuffer), w.bufferSubData(w.ARRAY_BUFFER, 0, this._pointData.subarray(0, this._pointPtr)));
            0 < this._vertexPtr && (w.bindBuffer(w.ARRAY_BUFFER,
                this._vertexBuffer), w.bufferSubData(w.ARRAY_BUFFER, 0, this._vertexData.subarray(0, this._vertexPtr)), w.bindBuffer(w.ARRAY_BUFFER, this._texcoordBuffer), w.bufferSubData(w.ARRAY_BUFFER, 0, this._texcoordData.subarray(0, this._texPtr)))
        }
        _ExecuteBatch() {
            const w = this._batch;
            for (let B = 0, F = this._batchPtr; B < F; ++B) w[B].Run()
        }
        GetOpacity() {
            return this._lastColor.getA()
        }
        SetColorRgba(w, B, F, J) {
            const O = this._lastColor;
            O.equalsRgba(w, B, F, J) || (O.setRgba(w, B, F, J), this.PushBatch().InitSetColor(O), this._topOfBatch = 0, this._currentStateGroup =
                null)
        }
        SetOpacity(w) {
            const B = this._lastColor;
            B.getA() !== w && (B.setA(w), this.PushBatch().InitSetColor(B), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetColor(w) {
            const B = this._lastColor;
            B.equals(w) || (B.set(w), this.PushBatch().InitSetColor(B), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        ResetColor() {
            this.SetColorRgba(1, 1, 1, 1)
        }
        GetColor() {
            return this._lastColor
        }
        SetTexture(w) {
            w !== this._lastTexture0 && (this.PushBatch().InitSetTexture(w), this._lastTexture0 = w, this._topOfBatch = 0)
        }
        _ResetLastTexture() {
            this._lastTexture0 =
                null
        }
        SetBlendMode(w) {
            w = this._GetBlendByIndex(w);
            this._SetBlend(w[0], w[1])
        }
        SetNamedBlendMode(w) {
            w = this.GetNamedBlend(w);
            this._SetBlend(w.srcBlend, w.destBlend)
        }
        _SetBlend(w, B) {
            if (w !== this._lastSrcBlend || B !== this._lastDestBlend) this.PushBatch().InitSetBlend(w, B), this._lastSrcBlend = w, this._lastDestBlend = B, this._topOfBatch = 0, this._currentStateGroup = null
        }
        IsPremultipliedAlphaBlend() {
            return this._lastSrcBlend === this._gl.ONE && this._lastDestBlend === this._gl.ONE_MINUS_SRC_ALPHA
        }
        SetAlphaBlend() {
            this._SetBlend(this._gl.ONE,
                this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetNoPremultiplyAlphaBlend() {
            this._SetBlend(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetCopyBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ZERO)
        }
        Rect(w) {
            this.Rect2(w.getLeft(), w.getTop(), w.getRight(), w.getBottom())
        }
        Rect2(w, B, F, J) {
            this.Quad2(w, B, F, B, F, J, w, J)
        }
        _ExtendQuadBatch() {
            let w = this._vertexPtr;
            w >= this._lastVertexPtr && (this.EndBatch(), w = 0);
            1 === this._topOfBatch ? this._batch[this._batchPtr - 1]._indexCount += 6 : (this.PushBatch().InitQuad(w, 6), this._topOfBatch = 1)
        }
        _WriteQuadToVertexBuffer(w) {
            w.writeToTypedArray3D(this._vertexData,
                this._vertexPtr, this._baseZ + this._currentZ);
            this._vertexPtr += 12
        }
        Quad(w) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(w);
            h.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad2(w, B, F, J, O, G, I, P) {
            this._ExtendQuadBatch();
            const Q = this._vertexData;
            let T = this._vertexPtr;
            const X = this._baseZ + this._currentZ;
            Q[T++] = w;
            Q[T++] = B;
            Q[T++] = X;
            Q[T++] = F;
            Q[T++] = J;
            Q[T++] = X;
            Q[T++] = O;
            Q[T++] = G;
            Q[T++] = X;
            Q[T++] = I;
            Q[T++] = P;
            Q[T++] = X;
            this._vertexPtr = T;
            h.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3(w, B) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(w);
            B.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad4(w, B) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(w);
            B.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D(w, B, F, J, O, G, I, P, Q, T, X, Z, fa) {
            this._ExtendQuadBatch();
            const ia = this._vertexData;
            let ba = this._vertexPtr;
            const xa = this._baseZ + this._currentZ;
            ia[ba++] = w;
            ia[ba++] = B;
            ia[ba++] = xa + F;
            ia[ba++] = J;
            ia[ba++] = O;
            ia[ba++] =
                xa + G;
            ia[ba++] = I;
            ia[ba++] = P;
            ia[ba++] = xa + Q;
            ia[ba++] = T;
            ia[ba++] = X;
            ia[ba++] = xa + Z;
            this._vertexPtr = ba;
            fa.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D2(w, B, F, J, O, G, I, P, Q, T, X, Z, fa) {
            this._ExtendQuadBatch();
            const ia = this._vertexData;
            let ba = this._vertexPtr;
            const xa = this._baseZ + this._currentZ;
            ia[ba++] = w;
            ia[ba++] = B;
            ia[ba++] = xa + F;
            ia[ba++] = J;
            ia[ba++] = O;
            ia[ba++] = xa + G;
            ia[ba++] = I;
            ia[ba++] = P;
            ia[ba++] = xa + Q;
            ia[ba++] = T;
            ia[ba++] = X;
            ia[ba++] = xa + Z;
            this._vertexPtr = ba;
            fa.writeToTypedArray(this._texcoordData,
                this._texPtr);
            this._texPtr += 8
        }
        FullscreenQuad(w, B) {
            c.copy(m, this._lastMV);
            a.copy(p, this._cam);
            a.copy(n, this._look);
            this._cam[0] = 0;
            this._cam[1] = 0;
            this._cam[2] = 100 * self.devicePixelRatio;
            this._look[0] = 0;
            this._look[1] = 0;
            this._look[2] = 0;
            this.ResetModelView();
            this.UpdateModelView();
            if (this._isScissorViewport) {
                w = this._viewportScissorWidth / 2;
                var F = this._viewportScissorHeight / 2;
                q.set(-w, F, -w + this._viewportScissorWidth, F - this._viewportScissorHeight);
                t.setFromRect(q);
                q.set(0, 0, this._viewportScissorWidth / this._width,
                    this._viewportScissorHeight / this._height);
                this.Quad3(t, q)
            } else if ("crop" === w && this._currentRenderTarget && B) {
                w = this._width / 2;
                F = this._height / 2;
                const G = B.GetWidth();
                B = B.GetHeight();
                var J = this._currentRenderTarget.GetWidth(),
                    O = this._currentRenderTarget.GetHeight();
                J = Math.min(J, G);
                const I = Math.min(O, B),
                    P = Math.max(B - O, 0);
                O = Math.max(O - B, 0);
                q.set(-w, F - O, -w + J, F - I - O);
                t.setFromRect(q);
                q.set(0, P, J, I + P);
                q.divide(G, B);
                this.Quad3(t, q)
            } else {
                let [G, I] = this.GetRenderTargetSize(this._currentRenderTarget);
                w = G / 2;
                F = I /
                    2;
                this.Rect2(-w, F, w, -F)
            }
            c.copy(this._matMV, m);
            a.copy(this._cam, p);
            a.copy(this._look, n);
            this.UpdateModelView()
        }
        ConvexPoly(w) {
            var B = w.length / 2;
            if (3 > B) throw Error("need at least 3 points");
            B -= 2;
            const F = B - 1,
                J = w[0],
                O = w[1];
            for (let G = 0; G < B; G += 2) {
                const I = 2 * G,
                    P = w[I + 2],
                    Q = w[I + 3],
                    T = w[I + 4],
                    X = w[I + 5];
                G === F ? this.Quad2(J, O, P, Q, T, X, T, X) : this.Quad2(J, O, P, Q, T, X, w[I + 6], w[I + 7])
            }
        }
        Line(w, B, F, J) {
            var O = f.angleTo(w, B, F, J),
                G = .5 * this._lineWidth;
            const I = Math.sin(O) * G;
            O = Math.cos(O) * G;
            G = this._lineCap;
            2 === G ? this.LinePreCalc_LineCap2(w,
                B, 0, F, J, 0, I, O) : 1 === G ? this.LinePreCalc_LineCap1(w, B, 0, F, J, 0, I, O) : this.LinePreCalc_LineCap0(w, B, 0, F, J, 0, I, O)
        }
        Line3D(w, B, F, J, O, G) {
            var I = f.angleTo(w, B, J, O),
                P = .5 * this._lineWidth;
            const Q = Math.sin(I) * P;
            I = Math.cos(I) * P;
            P = this._lineCap;
            2 === P ? this.LinePreCalc_LineCap2(w, B, F, J, O, G, Q, I) : 1 === P ? this.LinePreCalc_LineCap1(w, B, F, J, O, G, Q, I) : this.LinePreCalc_LineCap0(w, B, F, J, O, G, Q, I)
        }
        LinePreCalc_LineCap2(w, B, F, J, O, G, I, P) {
            var Q = this._lineOffset;
            w = w + Q - P;
            B = B + Q - I;
            J = J + Q + P;
            O = O + Q + I;
            Q = 2 * P;
            const T = 2 * I;
            this.Quad3D2(w + I, B - P, F,
                J + I, O - P, G, J - I - Q, O + P - T, G, w - I + Q, B + P + T, F, h)
        }
        LinePreCalc_LineCap1(w, B, F, J, O, G, I, P) {
            const Q = this._lineOffset;
            w = w + Q - P;
            B = B + Q - I;
            J = J + Q + P;
            O = O + Q + I;
            this.Quad3D2(w + I, B - P, F, J + I, O - P, G, J - I, O + P, G, w - I, B + P, F, h)
        }
        LinePreCalc_LineCap0(w, B, F, J, O, G, I, P) {
            const Q = this._lineOffset;
            w += Q;
            B += Q;
            J += Q;
            O += Q;
            this.Quad3D2(w + I, B - P, F, J + I, O - P, G, J - I, O + P, G, w - I, B + P, F, h)
        }
        TexturedLine(w, B, F, J, O, G) {
            var I = f.angleTo(w, B, F, J),
                P = .5 * this._lineWidth;
            const Q = Math.sin(I) * P;
            I = Math.cos(I) * P;
            P = this._lineCap;
            2 === P ? this.TexturedLinePreCalc_LineCap2(w, B,
                F, J, Q, I, O, G) : 1 === P ? this.TexturedLinePreCalc_LineCap1(w, B, F, J, Q, I, O, G) : this.TexturedLinePreCalc_LineCap0(w, B, F, J, Q, I, O, G)
        }
        TexturedLinePreCalc_LineCap2(w, B, F, J, O, G, I, P) {
            var Q = this._lineOffset;
            w = w + Q - G;
            B = B + Q - O;
            F = F + Q + G;
            J = J + Q + O;
            Q = 2 * G;
            const T = 2 * O;
            t.set(w + O, B - G, F + O, J - G, F - O - Q, J + G - T, w - O + Q, B + G + T);
            q.set(I, 0, P, 0);
            this.Quad3(t, q)
        }
        TexturedLinePreCalc_LineCap1(w, B, F, J, O, G, I, P) {
            const Q = this._lineOffset;
            w = w + Q - G;
            B = B + Q - O;
            F = F + Q + G;
            J = J + Q + O;
            t.set(w + O, B - G, F + O, J - G, F - O, J + G, w - O, B + G);
            q.set(I, 0, P, 0);
            this.Quad3(t, q)
        }
        TexturedLinePreCalc_LineCap0(w,
            B, F, J, O, G, I, P) {
            const Q = this._lineOffset;
            w += Q;
            B += Q;
            F += Q;
            J += Q;
            t.set(w + O, B - G, F + O, J - G, F - O, J + G, w - O, B + G);
            q.set(I, 0, P, 0);
            this.Quad3(t, q)
        }
        LineRect(w, B, F, J) {
            const O = .5 * this._lineWidth,
                G = this._lineCap;
            2 === G ? this._LineRectPreCalc_LineCap2(w, B, F, J, O) : 1 === G ? this._LineRectPreCalc_LineCap1(w, B, F, J, O) : this._LineRectPreCalc_LineCap0(w, B, F, J, O)
        }
        _LineRectPreCalc_LineCap2(w, B, F, J, O) {
            this.LinePreCalc_LineCap2(w, B, 0, F, B, 0, 0, O);
            this.LinePreCalc_LineCap2(F, B, 0, F, J, 0, O, 0);
            this.LinePreCalc_LineCap2(F, J, 0, w, J, 0, 0, -O);
            this.LinePreCalc_LineCap2(w,
                J, 0, w, B, 0, -O, 0)
        }
        _LineRectPreCalc_LineCap1(w, B, F, J, O) {
            this.LinePreCalc_LineCap1(w, B, 0, F, B, 0, 0, O);
            this.LinePreCalc_LineCap1(F, B, 0, F, J, 0, O, 0);
            this.LinePreCalc_LineCap1(F, J, 0, w, J, 0, 0, -O);
            this.LinePreCalc_LineCap1(w, J, 0, w, B, 0, -O, 0)
        }
        _LineRectPreCalc_LineCap0(w, B, F, J, O) {
            this.LinePreCalc_LineCap0(w, B, 0, F, B, 0, 0, O);
            this.LinePreCalc_LineCap0(F, B, 0, F, J, 0, O, 0);
            this.LinePreCalc_LineCap0(F, J, 0, w, J, 0, 0, -O);
            this.LinePreCalc_LineCap0(w, J, 0, w, B, 0, -O, 0)
        }
        LineRect2(w) {
            this.LineRect(w.getLeft(), w.getTop(), w.getRight(),
                w.getBottom())
        }
        LineQuad(w) {
            var B = f.angleTo(w.getTlx(), w.getTly(), w.getTrx(), w.getTry()),
                F = .5 * this._lineWidth;
            const J = Math.sin(B) * F;
            B = Math.cos(B) * F;
            F = this._lineCap;
            2 === F ? this._LineQuadPreCalc_LineCap2(w, J, B) : 1 === F ? this._LineQuadPreCalc_LineCap1(w, J, B) : this._LineQuadPreCalc_LineCap0(w, J, B)
        }
        _LineQuadPreCalc_LineCap2(w, B, F) {
            this.LinePreCalc_LineCap2(w.getTlx(), w.getTly(), 0, w.getTrx(), w.getTry(), 0, B, F);
            this.LinePreCalc_LineCap2(w.getTrx(), w.getTry(), 0, w.getBrx(), w.getBry(), 0, F, -B);
            this.LinePreCalc_LineCap2(w.getBrx(),
                w.getBry(), 0, w.getBlx(), w.getBly(), 0, -B, -F);
            this.LinePreCalc_LineCap2(w.getBlx(), w.getBly(), 0, w.getTlx(), w.getTly(), 0, -F, B)
        }
        _LineQuadPreCalc_LineCap1(w, B, F) {
            this.LinePreCalc_LineCap1(w.getTlx(), w.getTly(), 0, w.getTrx(), w.getTry(), 0, B, F);
            this.LinePreCalc_LineCap1(w.getTrx(), w.getTry(), 0, w.getBrx(), w.getBry(), 0, F, -B);
            this.LinePreCalc_LineCap1(w.getBrx(), w.getBry(), 0, w.getBlx(), w.getBly(), 0, -B, -F);
            this.LinePreCalc_LineCap1(w.getBlx(), w.getBly(), 0, w.getTlx(), w.getTly(), 0, -F, B)
        }
        _LineQuadPreCalc_LineCap0(w,
            B, F) {
            this.LinePreCalc_LineCap0(w.getTlx(), w.getTly(), 0, w.getTrx(), w.getTry(), 0, B, F);
            this.LinePreCalc_LineCap0(w.getTrx(), w.getTry(), 0, w.getBrx(), w.getBry(), 0, F, -B);
            this.LinePreCalc_LineCap0(w.getBrx(), w.getBry(), 0, w.getBlx(), w.getBly(), 0, -B, -F);
            this.LinePreCalc_LineCap0(w.getBlx(), w.getBly(), 0, w.getTlx(), w.getTly(), 0, -F, B)
        }
        SetLineWidth(w) {
            this._lineWidth = w;
            this._lineWidthStack[this._lineWidthStack.length - 1] = w
        }
        GetLineWidth() {
            return this._lineWidth
        }
        PushLineWidth(w) {
            if (100 <= this._lineWidthStack.length) throw Error("pushed too many line widths - check push/pop pairs");
            this._lineWidthStack.push(w);
            this._lineWidth = w
        }
        PopLineWidth() {
            if (1 >= this._lineWidthStack.length) throw Error("cannot pop last line width - check push/pop pairs");
            this._lineWidthStack.pop();
            this._lineWidth = this._lineWidthStack[this._lineWidthStack.length - 1]
        }
        SetLineCapButt() {
            this._lineCap = 0;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapSquare() {
            this._lineCap = 1;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapZag() {
            this._lineCap = 2;
            this._lineCapStack[this._lineCapStack.length -
                1] = 0
        }
        PushLineCap(w) {
            if ("butt" === w) this.PushLineCapButt();
            else if ("square" === w) this.PushLineCapSquare();
            else if ("zag" === w) this.PushLineCapZag();
            else throw Error("invalid line cap");
        }
        PushLineCapButt() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(0);
            this._lineCap = 0
        }
        PushLineCapSquare() {
            if (100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(1);
            this._lineCap = 1
        }
        PushLineCapZag() {
            if (100 <=
                this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(2);
            this._lineCap = 2
        }
        PopLineCap() {
            if (1 >= this._lineCapStack.length) throw Error("cannot pop last line cap - check push/pop pairs");
            this._lineCapStack.pop();
            this._lineCap = this._lineCapStack[this._lineCapStack.length - 1]
        }
        SetLineOffset(w) {
            this._lineOffset = w;
            this._lineOffsetStack[this._lineOffsetStack.length - 1] = w
        }
        GetLineOffset() {
            return this._lineOffset
        }
        PushLineOffset(w) {
            if (100 <= this._lineOffsetStack.length) throw Error("pushed too many line offsets - check push/pop pairs");
            this._lineOffsetStack.push(w);
            this._lineOffset = w
        }
        PopLineOffset() {
            if (1 >= this._lineOffsetStack.length) throw Error("cannot pop last line offset - check push/pop pairs");
            this._lineOffsetStack.pop();
            this._lineOffset = this._lineOffsetStack[this._lineOffsetStack.length - 1]
        }
        StartRenderingPoints(w) {
            this._lastPointTexCoords.equals(w) || (this._lastPointTexCoords.copy(w), this.PushBatch().InitSetPointTexCoords(w), this._topOfBatch = 0)
        }
        FinishRenderingPoints() {}
        Point(w, B, F, J) {
            7996 <= this._pointPtr && this.EndBatch();
            let O =
                this._pointPtr;
            var G = this._baseZ + this._currentZ;
            2 === this._topOfBatch && this._lastPointZ === G ? this._batch[this._batchPtr - 1]._indexCount++ : (this.PushBatch().InitPoints(O, G), this._topOfBatch = 2, this._lastPointZ = G);
            G = this._pointData;
            G[O++] = w;
            G[O++] = B;
            G[O++] = F;
            G[O++] = J;
            this._pointPtr = O
        }
        SetProgram(w) {
            this._lastProgram !== w && (this.PushBatch().InitSetProgram(w), this._lastProgram = w, this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetDeviceTransformTextureFillMode() {
            this.SetProgram(this._spDeviceTransformTextureFill)
        }
        SetGradientColor(w) {
            this.PushBatch().InitSetGradientColor(w);
            this._topOfBatch = 0
        }
        SetEllipseParams(w, B, F = 1) {
            this.PushBatch().InitSetEllipseParams(w, B, F);
            this._topOfBatch = 0
        }
        SetTilemapInfo(w, B, F, J, O, G, I) {
            if (this._lastProgram !== this._spTilemapFill) throw Error("must set tilemap fill mode first");
            this.PushBatch().InitSetTilemapInfo(w, B, F, J, O, G, I);
            this._topOfBatch = 0
        }
        SetProgramParameters(w, B, F, J, O, G, I, P, Q, T, X) {
            const Z = this._lastProgram;
            var fa = Z._hasAnyOptionalUniforms;
            const ia = !!X.length;
            if (fa && !Z.AreOptionalUniformsAlreadySetInBatch(B, F, J, O, G, I, P, Q, T) || ia && !Z.AreCustomParametersAlreadySetInBatch(X)) {
                var ba =
                    this.PushBatch();
                ba.InitSetProgramParameters();
                fa && (Z.SetOptionalUniformsInBatch(B, F, J, O, G, I, P, Q, T), fa = ba._mat4param, fa[0] = G, fa[1] = I, B.writeToTypedArray(fa, 2), fa[6] = P, fa[7] = Q, F.writeToTypedArray(fa, 12), B = ba._colorParam, O.writeToTypedArray(B, 0), O = B[1], B[1] = B[3], B[3] = O, J.writeToTypedArray(ba._srcOriginRect, 0), ba._startIndex = T, Z._uSamplerBack.IsUsed() ? ba._texParam = w ? w.GetTexture() : null : ba._texParam = null);
                ia && (Z.SetCustomParametersInBatch(X), f.shallowAssignArray(ba._shaderParams, X));
                this._topOfBatch =
                    0
            }
        }
        ClearRgba(w, B, F, J) {
            this.PushBatch().InitClearSurface2(w, B, F, J);
            this._topOfBatch = 0
        }
        Clear(w) {
            this.PushBatch().InitClearSurface(w);
            this._topOfBatch = 0
        }
        ClearRect4(w, B, F, J, O, G, I, P) {
            0 > F || 0 > J || (this.PushBatch().InitClearRect(w, B, F, J, O, G, I, P), this._topOfBatch = 0)
        }
        Start() {}
        Finish() {
            super.Finish();
            this._gl.flush()
        }
        ClearDepth() {
            this._usesDepthBuffer && this._currentRenderTarget && this._currentRenderTarget.HasDepthBuffer() && (this.PushBatch().InitClearDepth(), this._topOfBatch = 0)
        }
        SetDepthEnabled(w) {
            w = !!w;
            this._isDepthEnabled !==
                w && this._usesDepthBuffer && (this._isDepthEnabled = w, this.PushBatch().InitSetDepthEnabled(w), this._topOfBatch = 0)
        }
        _GetDepthBuffer() {
            return this._depthBuffer
        }
        CheckForQueryResults() {
            for (const w of this._allQueryResultBuffers) w.CheckForResults(this._frameNumber)
        }
        IsContextLost() {
            return !this._gl || this._gl.isContextLost() || this._isInitialisingAfterContextRestored
        }
        OnContextLost() {
            super.OnDeviceOrContextLost();
            f.Gfx.WebGLRendererTexture.OnContextLost();
            f.Gfx.WebGLRenderTarget.OnContextLost();
            f.Gfx.RendererText.OnContextLost();
            for (const w of this._allQueryResultBuffers) w.Clear();
            this._extensions = [];
            this._anisotropicExt = this._parallelShaderCompileExt = this._timerExt = null;
            this._maxAnisotropy = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._depthBuffer = this._spDeviceTransformTextureFill = this._lastProgram = null;
            for (const w of this._stateGroups.values()) w.OnContextLost()
        }
        async OnContextRestored() {
            this._isInitialisingAfterContextRestored = !0;
            await this.InitState();
            this._isInitialisingAfterContextRestored = !1;
            for (const w of this._stateGroups.values()) w.OnContextRestored(this);
            this.SetSize(this._width, this._height, !0)
        }
        CreateStaticTexture(w, B) {
            if (this.IsContextLost()) throw Error("context lost");
            this.EndBatch();
            const F = f.New(f.Gfx.WebGLRendererTexture, this);
            F._CreateStatic(w, B);
            return F
        }
        CreateStaticTextureAsync(w, B) {
            if (this.IsContextLost()) return Promise.reject("context lost");
            B = Object.assign({}, B);
            const F = B.wrapX && "clamp-to-edge" !== B.wrapX || B.wrapY && "clamp-to-edge" !== B.wrapY;
            if (!f.Supports.ImageBitmapOptions || !this.SupportsNPOTTextures() && F) return f.Supports.ImageBitmap ?
                createImageBitmap(w).then(J => f.Asyncify(() => this.CreateStaticTexture(J, B))) : w instanceof Blob ? f.BlobToImage(w, !0).then(J => this.CreateStaticTextureAsync(J, B)) : "undefined" !== typeof HTMLImageElement && w instanceof HTMLImageElement && "function" === typeof w.decode ? w.decode().then(() => f.Asyncify(() => this.CreateStaticTexture(w, B))) : f.Asyncify(() => this.CreateStaticTexture(w, B));
            B.premultiplyAlpha = !1;
            return createImageBitmap(w, {
                premultiplyAlpha: "premultiply"
            }).then(J => f.Asyncify(() => this.CreateStaticTexture(J,
                B)))
        }
        CreateDynamicTexture(w, B, F) {
            this.EndBatch();
            const J = f.New(f.Gfx.WebGLRendererTexture, this);
            J._CreateDynamic(w, B, F);
            return J
        }
        UpdateTexture(w, B, F) {
            this.EndBatch();
            B._Update(w, F)
        }
        DeleteTexture(w) {
            w && (w.SubtractReference(), 0 < w.GetReferenceCount() || (this.EndBatch(), w === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null), w === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0),
                this._lastTexture1 = null), w._Delete()))
        }
        CreateRenderTarget(w) {
            let B = this._width,
                F = this._height,
                J = !0;
            w && ("number" === typeof w.width && (B = w.width, J = !1), "number" === typeof w.height && (F = w.height, J = !1));
            if (0 >= B || 0 >= F) throw Error("invalid size");
            this.EndBatch();
            const O = f.New(f.Gfx.WebGLRenderTarget, this);
            O._Create(B, F, Object.assign({
                isDefaultSize: J
            }, w));
            this._currentRenderTarget = null;
            this._batchState.currentFramebuffer = null;
            return O
        }
        SetRenderTarget(w) {
            if (w !== this._currentRenderTarget) {
                if (w) {
                    w.IsDefaultSize() &&
                        w._Resize(this._width, this._height);
                    var B = w.GetWidth();
                    var F = w.GetHeight();
                    var J = B;
                    var O = F
                } else B = this._width, F = this._height, J = this.GetScissoredViewportWidth(), O = this.GetScissoredViewportHeight();
                var G = this._lastBackbufferWidth !== B || this._lastBackbufferHeight !== F;
                G && this._UpdateViewportRenderer(J, O, B, F);
                this.PushBatch().InitSetRenderTarget(w, G, this._matP);
                this._currentRenderTarget = w;
                this._topOfBatch = 0
            }
        }
        GetRenderTarget() {
            return this._currentRenderTarget
        }
        GetRenderTargetSize(w) {
            return w ? [w.GetWidth(),
                w.GetHeight()
            ] : [this._width, this._height]
        }
        CopyRenderTarget(w, B = "stretch") {
            2 > this._version || this._currentRenderTarget && 0 < this._currentRenderTarget.GetMultisampling() ? (this.SetCopyBlend(), this.ResetColor(), this.DrawRenderTarget(w, B)) : (this.PushBatch().InitBlitFramebuffer(w, this._currentRenderTarget, B), this._topOfBatch = 0)
        }
        DrawRenderTarget(w, B = "stretch") {
            w = w.GetTexture();
            if (!w) throw Error("not a texture-backed render target");
            this.SetTexture(w);
            this.FullscreenQuad(B, w)
        }
        InvalidateRenderTarget(w) {
            2 > this._version ||
                (this.PushBatch().InitInvalidateFramebuffer(w._GetFramebuffer()), this._topOfBatch = 0)
        }
        DeleteRenderTarget(w) {
            this.SetRenderTarget(null);
            this.EndBatch();
            const B = w.GetTexture();
            B === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null);
            B === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null);
            w._Delete()
        }
        async ReadBackRenderTargetToImageData(w,
            B, F) {
            this.EndBatch();
            const J = this._currentRenderTarget;
            if (w) {
                var O = w.GetWidth();
                var G = w.GetHeight();
                var I = w._GetFramebuffer()
            } else O = this.GetWidth(), G = this.GetHeight(), I = null;
            let P = w = 0;
            var Q = O,
                T = G;
            F && (w = f.clamp(Math.floor(F.getLeft()), 0, O - 1), P = f.clamp(Math.floor(F.getTop()), 0, G - 1), Q = F.width(), Q = 0 === Q ? O - w : f.clamp(Math.floor(Q), 0, O - w), T = F.height(), T = 0 === T ? G - P : f.clamp(Math.floor(T), 0, G - P), P = G - (P + T));
            const X = this._gl;
            X.bindFramebuffer(X.FRAMEBUFFER, I);
            G = () => {
                X.bindFramebuffer(X.FRAMEBUFFER, null);
                this._currentRenderTarget =
                    null;
                this._batchState.currentFramebuffer = null;
                this.SetRenderTarget(J)
            };
            if (!B && 2 <= this.GetWebGLVersionNumber()) {
                X.bindFramebuffer(X.READ_FRAMEBUFFER, I);
                I = X.createBuffer();
                F = Q * T * 4;
                O = X.PIXEL_PACK_BUFFER;
                X.bindBuffer(O, I);
                X.bufferData(O, F, X.STREAM_READ);
                X.readPixels(w, P, Q, T, X.RGBA, X.UNSIGNED_BYTE, 0);
                X.bindFramebuffer(X.READ_FRAMEBUFFER, null);
                X.bindBuffer(O, null);
                G();
                const Z = X.fenceSync(X.SYNC_GPU_COMMANDS_COMPLETE, 0);
                await this._WaitForObjectReady(() => X.getSyncParameter(Z, X.SYNC_STATUS) === X.SIGNALED);
                X.deleteSync(Z);
                B = new ImageData(Q, T);
                X.bindBuffer(O, I);
                X.getBufferSubData(O, 0, new Uint8Array(B.data.buffer), 0, F);
                X.bindBuffer(O, null);
                X.deleteBuffer(I)
            } else B = new ImageData(Q, T), X.readPixels(w, P, Q, T, X.RGBA, X.UNSIGNED_BYTE, new Uint8Array(B.data.buffer)), G();
            return B
        }
        StartQuery(w) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitStartQuery(w), this._topOfBatch = 0)
        }
        EndQuery(w) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitEndQuery(w), this._topOfBatch = 0)
        }
        _WaitForObjectReady(w) {
            const B = new Promise(F =>
                r.add({
                    resolve: F,
                    checkFunc: w
                })); - 1 === x && (x = self.requestAnimationFrame(z));
            return B
        }
        IsDesynchronized() {
            return !!this._attribs.desynchronized
        }
        GetEstimatedBackBufferMemoryUsage() {
            return this._width * this._height * (this._attribs.alpha ? 4 : 3)
        }
        GetEstimatedRenderBufferMemoryUsage() {
            let w = 0;
            for (const B of f.Gfx.WebGLRenderTarget.allRenderTargets()) B.GetTexture() || (w += B.GetEstimatedMemoryUsage());
            return w
        }
        GetEstimatedTextureMemoryUsage() {
            let w = 0;
            for (const B of f.Gfx.WebGLRendererTexture.allTextures()) w += B.GetEstimatedMemoryUsage();
            return w
        }
        GetEstimatedTotalMemoryUsage() {
            return this.GetEstimatedBackBufferMemoryUsage() + this.GetEstimatedRenderBufferMemoryUsage() + this.GetEstimatedTextureMemoryUsage()
        }
        GetWebGLVersionString() {
            return this._versionString
        }
        GetWebGLVersionNumber() {
            return this._version
        }
        GetDisplayName() {
            return "webgl" + this.GetWebGLVersionNumber()
        }
        SupportsNPOTTextures() {
            return 2 <= this.GetWebGLVersionNumber()
        }
        GetMaxTextureSize() {
            return this._maxTextureSize
        }
        GetMinPointSize() {
            return this._minPointSize
        }
        GetMaxPointSize() {
            return this._maxPointSize
        }
        SupportsHighP() {
            return 0 !==
                this._highpPrecision
        }
        GetHighPPrecision() {
            return this._highpPrecision
        }
        GetUnmaskedVendor() {
            return this._unmaskedVendor
        }
        GetUnmaskedRenderer() {
            return this._unmaskedRenderer
        }
        GetExtensions() {
            return this._extensions
        }
        HasMajorPerformanceCaveat() {
            return this._hasMajorPerformanceCaveat
        }
        SupportsGPUProfiling() {
            return !!this._timerExt
        }
        _GetDisjointTimerQueryExtension() {
            return this._timerExt
        }
        _GetParallelShaderCompileExtension() {
            return this._parallelShaderCompileExt
        }
        _GetAnisotropicExtension() {
            return this._anisotropicExt
        }
        _GetMaxAnisotropy() {
            return this._maxAnisotropy
        }
        _AddQueryResultBuffer(w) {
            this._allQueryResultBuffers.add(w)
        }
        _RemoveQueryResultBuffer(w) {
            this._allQueryResultBuffers.delete(w)
        }
        _GetTimeQueryStack() {
            return this._timeQueryStack
        }
        GetContext() {
            return this._gl
        }
        _InitBlendModes(w) {
            this._InitBlendModeData([
                ["normal",
                    w.ONE, w.ONE_MINUS_SRC_ALPHA
                ],
                ["additive", w.ONE, w.ONE],
                ["xor", w.ONE, w.ONE_MINUS_SRC_ALPHA],
                ["copy", w.ONE, w.ZERO],
                ["destination-over", w.ONE_MINUS_DST_ALPHA, w.ONE],
                ["source-in", w.DST_ALPHA, w.ZERO],
                ["destination-in", w.ZERO, w.SRC_ALPHA],
                ["source-out", w.ONE_MINUS_DST_ALPHA, w.ZERO],
                ["destination-out", w.ZERO, w.ONE_MINUS_SRC_ALPHA],
                ["source-atop", w.DST_ALPHA, w.ONE_MINUS_SRC_ALPHA],
                ["destination-atop", w.ONE_MINUS_DST_ALPHA, w.SRC_ALPHA]
            ])
        }
        CreateRendererText() {
            return f.New(f.Gfx.RendererText, this)
        }
        CreateWebGLText() {
            return this.CreateRendererText()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X;
    let a = null;
    const d = new Set;

    function c(p, n) {
        const m = p[0] - n[0];
        return 0 !== m ? m : p[1] - n[1]
    }
    const e = [],
        k = [];
    let h = !1;
    self.IRuntime = class {
        constructor(p, n) {
            a = p;
            Object.defineProperties(this, {
                assets: {
                    value: a.GetAssetManager().GetIAssetManager(),
                    writable: !1
                },
                objects: {
                    value: n,
                    writable: !1
                },
                globalVars: {
                    value: {},
                    writable: !1
                },
                projectName: {
                    value: a.GetProjectName(),
                    writable: !1
                },
                projectVersion: {
                    value: a.GetProjectVersion(),
                    writable: !1
                },
                storage: {
                    value: new self.IStorage(a),
                    writable: !1
                },
                isInWorker: {
                    value: a.IsInWorker(),
                    writable: !1
                }
            });
            a.UserScriptDispatcher().addEventListener("keydown", m => {
                d.has(m.key) ? m.stopPropagation() : d.add(m.key)
            });
            a.UserScriptDispatcher().addEventListener("keyup", m => d.delete(m.key));
            a.Dispatcher().addEventListener("window-blur", () => d.clear());
            a.IsInWorker() && (self.alert = m => {
                h || (h = !0, console.warn("[Construct 3] alert() was called from a Web Worker, because the project 'Use worker' setting is enabled. This method is not normally available in a Web Worker. Construct has implemented the alert for you, but note that other features may be missing in worker mode. You may wish to disable 'Use worker', or use a more convenient function like console.log(). For more information please refer to the scripting section of the manual."));
                return this.alert(m)
            })
        }
        _InitGlobalVars(p) {
            Object.defineProperties(this.globalVars, p)
        }
        addEventListener(p, n) {
            a.UserScriptDispatcher().addEventListener(p, n)
        }
        removeEventListener(p, n) {
            a.UserScriptDispatcher().removeEventListener(p, n)
        }
        callFunction(p, ...n) {
            b.RequireString(p);
            const m = a.GetEventSheetManager(),
                t = m.GetFunctionBlockByName(p);
            if (!t) throw Error(`cannot find function name '${p}'`);
            if (!t.IsEnabled()) return t.GetDefaultReturnValue();
            if (n.length < t.GetFunctionParameterCount()) throw Error(`not enough function parameters passed for '${p}' (${n.length} passed, ${t.GetFunctionParameterCount()} expected)`);
            const q = t.GetEventBlock();
            p = null;
            var u = m.GetCurrentEvent();
            u && (u = u.GetSolModifiersIncludingParents(), 0 < u.length && (p = u, m.PushCleanSol(u)));
            n = q.RunAsExpressionFunctionCall(q.GetSolModifiersIncludingParents(), t.GetReturnType(), t.GetDefaultReturnValue(), ...n);
            p && m.PopSol(p);
            return n
        }
        setReturnValue(p) {
            const n = a.GetEventStack().GetCurrentExpFuncStackFrame();
            if (!n) throw Error("not in a function which returns a value");
            switch (n.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof p && n.SetFunctionReturnValue(p);
                    break;
                case 2:
                    "string" === typeof p && n.SetFunctionReturnValue(p);
                    break;
                case 3:
                    "number" !== typeof p && "string" !== typeof p || n.SetFunctionReturnValue(p)
            }
        }
        get dt() {
            return a.GetDt()
        }
        get gameTime() {
            return a.GetGameTime()
        }
        get wallTime() {
            return a.GetWallTime()
        }
        random() {
            return a.Random()
        }
        get layout() {
            return a.GetMainRunningLayout().GetILayout()
        }
        getLayout(p) {
            const n = a.GetLayoutManager();
            if ("number" === typeof p || "string" === typeof p) p = n.GetLayout(p);
            else throw new TypeError("expected string or number");
            if (!p) throw Error("invalid layout");
            return p.GetILayout()
        }
        getAllLayouts() {
            return a.GetLayoutManager().GetAllLayouts().map(p => p.GetILayout())
        }
        goToLayout(p) {
            const n = a.GetLayoutManager();
            if ("number" === typeof p || "string" === typeof p) p = n.GetLayout(p);
            else throw new TypeError("expected string or number");
            if (!p) throw Error("invalid layout");
            n.IsPendingChangeMainLayout() || n.ChangeMainLayout(p)
        }
        get keyboard() {
            const p = a._GetCommonScriptInterfaces().keyboard;
            if (!p) throw Error("runtime.keyboard used but Keyboard object missing - add it to your project first");
            return p
        }
        get mouse() {
            const p = a._GetCommonScriptInterfaces().mouse;
            if (!p) throw Error("runtime.mouse used but Mouse object missing - add it to your project first");
            return p
        }
        get touch() {
            const p = a._GetCommonScriptInterfaces().touch;
            if (!p) throw Error("runtime.touch used but Touch object missing - add it to your project first");
            return p
        }
        invokeDownload(p, n) {
            b.RequireString(p);
            b.RequireString(n);
            a.InvokeDownload(p, n)
        }
        getInstanceByUid(p) {
            b.RequireFiniteNumber(p);
            return (p = a.GetInstanceByUID(p)) ? p.GetInterfaceClass() :
                null
        }
        sortZOrder(p, n) {
            b.RequireFunction(n);
            const m = a.GetCurrentLayout();
            for (var t of p) {
                p = a._UnwrapIWorldInstance(t);
                var q = p.GetWorldInfo();
                e.push([q.GetLayer().GetIndex(), q.GetZIndex()]);
                k.push(p)
            }
            if (0 !== e.length) {
                e.sort(c);
                k.sort((u, r) => n(u.GetInterfaceClass(), r.GetInterfaceClass()));
                t = !1;
                for (let u = 0, r = e.length; u < r; ++u) {
                    p = k[u];
                    q = m.GetLayerByIndex(e[u][0]);
                    const x = e[u][1],
                        z = q._GetInstances();
                    z[x] !== p && (z[x] = p, p.GetWorldInfo()._SetLayer(q), q.SetZIndicesChanged(), t = !0)
                }
                t && a.UpdateRender();
                f.clearArray(e);
                f.clearArray(k)
            }
        }
        alert(p) {
            return a.PostComponentMessageToDOMAsync("runtime", "alert", {
                message: p + (a.IsInWorker() ? " [via Web Worker]" : "")
            })
        }
    }
}
"use strict"; {
    const f = self.C3;
    let b = null;
    self.IAssetManager = class {
        constructor(a) {
            b = a;
            Object.defineProperties(this, {
                isWebMOpusSupported: {
                    value: b.IsAudioFormatSupported("audio/webm; codecs=opus"),
                    writable: !1
                }
            })
        }
        fetchText(a) {
            return b.FetchText(a)
        }
        fetchJson(a) {
            return b.FetchJson(a)
        }
        fetchBlob(a) {
            return b.FetchBlob(a)
        }
        fetchArrayBuffer(a) {
            return b.FetchArrayBuffer(a)
        }
        getProjectFileUrl(a) {
            return b.GetProjectFileUrl(a)
        }
        getMediaFileUrl(a) {
            f.IsRelativeURL(a) && (a = a.toLowerCase());
            return b.GetMediaFileUrl(a, b.GetMediaSubfolder())
        }
        get mediaFolder() {
            return b.GetMediaSubfolder()
        }
        async decodeWebMOpus(a,
            d) {
            if (this.isWebMOpusSupported) throw Error("decodeWebMOpus(): not supported because WebM Opus is supported by the platform");
            d = await b.GetRuntime()._WasmDecodeWebMOpus(d);
            d = new Float32Array(d);
            a = a.createBuffer(1, d.length, 48E3);
            a.getChannelData(0).set(d);
            return a
        }
        loadScripts(...a) {
            return b.LoadScripts(...a)
        }
        compileWebAssembly(a) {
            return b.CompileWebAssembly(a)
        }
        loadStyleSheet(a) {
            return b.LoadStyleSheet(a)
        }
    }
}
"use strict"; {
    const f = self.C3X;
    self.IStorage = class {
        constructor(b) {
            this._storage = b._GetProjectStorage()
        }
        getItem(b) {
            f.RequireString(b);
            return this._storage.getItem(b)
        }
        setItem(b, a) {
            f.RequireString(b);
            return this._storage.setItem(b, a)
        }
        removeItem(b) {
            f.RequireString(b);
            return this._storage.removeItem(b)
        }
        clear() {
            return this._storage.clear()
        }
        keys() {
            return this._storage.keys()
        }
    }
}
"use strict"; {
    const f = self.C3X,
        b = new WeakMap;
    self.IObjectClass = class {
        constructor(a) {
            b.set(this, a);
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                }
            });
            a.GetRuntime()._MapScriptInterface(this, a)
        }
        addEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        getAllInstances() {
            return b.get(this).GetInstances().map(a => a.GetInterfaceClass())
        }
        getFirstInstance() {
            const a =
                b.get(this).GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }
        getPickedInstances() {
            return b.get(this).GetCurrentSol().GetInstances().map(a => a.GetInterfaceClass())
        }
        getFirstPickedInstance() {
            const a = b.get(this).GetCurrentSol().GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }* instances() {
            for (const a of b.get(this).GetInstances()) yield a.GetInterfaceClass()
        }* pickedInstances() {
            for (const a of b.get(this).GetCurrentSol().GetInstances()) yield a.GetInterfaceClass()
        }
        setInstanceClass(a) {
            f.RequireFunction(a);
            if (0 < b.get(this).GetInstanceCount()) throw Error("setInstanceClass() called too late, because instances have already been created - call in runOnStartup");
            b.get(this)._SetUserScriptInstanceClass(a)
        }
        createInstance(a, d, c, e) {
            f.RequireNumber(d);
            f.RequireNumber(c);
            if ("number" !== typeof a && "string" !== typeof a) throw new TypeError("invalid layer parameter");
            const k = b.get(this),
                h = k.GetRuntime();
            a = h.GetMainRunningLayout().GetLayer(a);
            if (!a) throw Error("invalid layer");
            d = h.CreateInstance(k, a, d, c, e);
            e && a.SortAndAddSceneGraphInstancesByZIndex(d);
            e = h.GetEventSheetManager();
            e.BlockFlushingInstances(!0);
            d._TriggerOnCreatedOnSelfAndRelated();
            e.BlockFlushingInstances(!1);
            return d.GetInterfaceClass()
        }
    }
}
"use strict"; {
    const f = self.C3X,
        b = new WeakMap;
    self.ILayout = class {
        constructor(a) {
            b.set(this, a);
            const d = [],
                c = a.GetEffectList(),
                e = c.GetAllEffectTypes().length;
            for (let k = 0; k < e; ++k) d.push(new self.IEffectInstance(c, k));
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                },
                index: {
                    value: a.GetIndex(),
                    writable: !1
                },
                effects: {
                    value: d,
                    writable: !1
                }
            })
        }
        addEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            f.RequireString(a);
            f.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        get width() {
            return b.get(this).GetWidth()
        }
        set width(a) {
            b.get(this).SetWidth(a)
        }
        get height() {
            return b.get(this).GetHeight()
        }
        set height(a) {
            b.get(this).SetHeight(a)
        }
        scrollTo(a, d) {
            f.RequireNumber(a);
            f.RequireNumber(d);
            const c = b.get(this);
            c.SetScrollX(a);
            c.SetScrollY(d)
        }
        getLayer(a) {
            const d = b.get(this);
            if ("number" === typeof a || "string" === typeof a) a = d.GetLayer(a);
            else throw new TypeError("expected string or number");
            return a ?
                a.GetILayer() : null
        }
        getAllLayers() {
            return b.get(this).GetLayers().map(a => a.GetILayer())
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap;
    self.ILayer = class {
        constructor(d) {
            a.set(this, d);
            const c = [],
                e = d.GetEffectList(),
                k = e.GetAllEffectTypes().length;
            for (let h = 0; h < k; ++h) c.push(new self.IEffectInstance(e, h));
            Object.defineProperties(this, {
                name: {
                    value: d.GetName(),
                    writable: !1
                },
                index: {
                    value: d.GetIndex(),
                    writable: !1
                },
                layout: {
                    value: d.GetLayout().GetILayout(),
                    writable: !1
                },
                effects: {
                    value: c,
                    writable: !1
                }
            })
        }
        static _Unwrap(d) {
            return a.get(d)
        }
        get isVisible() {
            return a.get(this).IsVisible()
        }
        set isVisible(d) {
            a.get(this).SetVisible(d)
        }
        get opacity() {
            return a.get(this).GetOpacity()
        }
        set opacity(d) {
            d = f.clamp(+d,
                0, 1);
            isNaN(d) || a.get(this).SetOpacity(d)
        }
        getViewport() {
            return a.get(this).GetViewport().toDOMRect()
        }
        cssPxToLayer(d, c, e = 0) {
            b.RequireNumber(d);
            b.RequireNumber(c);
            b.RequireNumber(e);
            const k = a.get(this),
                h = k.GetRuntime();
            return k.CanvasCssToLayer(d - h.GetCanvasClientX(), c - h.GetCanvasClientY(), e)
        }
        layerToCssPx(d, c, e = 0) {
            b.RequireNumber(d);
            b.RequireNumber(c);
            b.RequireNumber(e);
            const k = a.get(this),
                h = k.GetRuntime(),
                [p, n] = k.LayerToCanvasCss(d, c, e);
            return [p + h.GetCanvasClientX(), n + h.GetCanvasClientY()]
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(k) {
        let h = d.get(k);
        if (h) return h;
        h = f.New(f.Event.Dispatcher);
        d.set(k, h);
        return h
    }
    let e = null;
    self.IInstance = class {
        constructor() {
            a.set(this, e);
            const k = {
                runtime: {
                    value: e.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                objectType: {
                    value: e.GetObjectClass().GetIObjectClass(),
                    writable: !1
                },
                uid: {
                    value: e.GetUID(),
                    writable: !1
                }
            };
            e._GetInstVarsScriptDescriptor(k);
            e._GetBehaviorsScriptDescriptor(k);
            Object.defineProperties(this, k);
            e.GetRuntime()._MapScriptInterface(this,
                e)
        }
        static _Init(k) {
            e = k
        }
        static _GetInitInst() {
            return e
        }
        _Release() {
            const k = d.get(this);
            k && (k.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(k, h, p) {
            b.RequireString(k);
            b.RequireFunction(h);
            c(this).addEventListener(k, h, p)
        }
        removeEventListener(k, h, p) {
            b.RequireString(k);
            b.RequireFunction(h);
            c(this).removeEventListener(k, h, p)
        }
        dispatchEvent(k) {
            c(this).dispatchEvent(k)
        }
        destroy() {
            const k = a.get(this);
            k.GetRuntime().DestroyInstance(k)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = self.IInstance,
        d = self.ILayer,
        c = new WeakMap,
        e = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        k = new Map([...e.entries()].map(p => [p[1], p[0]])),
        h = f.New(f.Color);
    self.IWorldInstance = class p extends a {
        constructor() {
            super();
            var n = a._GetInitInst();
            c.set(this, n);
            const m = [];
            var t = n.GetWorldInfo();
            if (n = t.GetInstanceEffectList()) {
                t = t.GetObjectClass().GetEffectList().GetAllEffectTypes().length;
                for (let q = 0; q < t; ++q) m.push(new self.IEffectInstance(n, q))
            }
            Object.defineProperties(this, {
                effects: {
                    value: m,
                    writable: !1
                }
            })
        }
        get layout() {
            return c.get(this).GetWorldInfo().GetLayout().GetILayout()
        }
        get layer() {
            return c.get(this).GetWorldInfo().GetLayer().GetILayer()
        }
        get x() {
            return c.get(this).GetWorldInfo().GetX()
        }
        set x(n) {
            n = +n;
            const m = c.get(this).GetWorldInfo();
            isNaN(n) || m.GetX() === n || (m.SetX(n), m.SetBboxChanged())
        }
        get y() {
            return c.get(this).GetWorldInfo().GetY()
        }
        set y(n) {
            n = +n;
            const m = c.get(this).GetWorldInfo();
            isNaN(n) || m.GetY() === n || (m.SetY(n), m.SetBboxChanged())
        }
        get zElevation() {
            return c.get(this).GetWorldInfo().GetZElevation()
        }
        set zElevation(n) {
            n = +n;
            const m = c.get(this),
                t = m.GetWorldInfo();
            isNaN(n) || t.GetZElevation() === n || (t.SetZElevation(n), m.GetRuntime().UpdateRender())
        }
        get totalZElevation() {
            return c.get(this).GetWorldInfo().GetTotalZElevation()
        }
        get width() {
            return c.get(this).GetWorldInfo().GetWidth()
        }
        set width(n) {
            n = +n;
            const m = c.get(this).GetWorldInfo();
            isNaN(n) || m.GetWidth() === n || (m.SetWidth(n), m.SetBboxChanged())
        }
        get height() {
            return c.get(this).GetWorldInfo().GetHeight()
        }
        set height(n) {
            n = +n;
            const m = c.get(this).GetWorldInfo();
            isNaN(n) || m.GetHeight() === n || (m.SetHeight(n), m.SetBboxChanged())
        }
        get angle() {
            return c.get(this).GetWorldInfo().GetAngle()
        }
        set angle(n) {
            n = f.clampAngle(+n);
            const m = c.get(this).GetWorldInfo();
            isNaN(n) || m.GetAngle() === n || (m.SetAngle(n), m.SetBboxChanged())
        }
        get angleDegrees() {
            return f.toDegrees(this.angle)
        }
        set angleDegrees(n) {
            this.angle = f.toRadians(n)
        }
        getBoundingBox() {
            return c.get(this).GetWorldInfo().GetBoundingBox().toDOMRect()
        }
        getBoundingQuad() {
            return c.get(this).GetWorldInfo().GetBoundingQuad().toDOMQuad()
        }
        get isVisible() {
            return c.get(this).GetWorldInfo().IsVisible()
        }
        set isVisible(n) {
            n = !!n;
            const m = c.get(this),
                t = m.GetWorldInfo();
            t.IsVisible() !== n && (t.SetVisible(n), m.GetRuntime().UpdateRender())
        }
        get opacity() {
            return c.get(this).GetWorldInfo().GetOpacity()
        }
        set opacity(n) {
            n = f.clamp(+n, 0, 1);
            const m = c.get(this),
                t = m.GetWorldInfo();
            isNaN(n) || t.GetOpacity() === n || (t.SetOpacity(n), m.GetRuntime().UpdateRender())
        }
        set colorRgb(n) {
            b.RequireArray(n);
            if (3 > n.length) throw Error("expected 3 elements");
            h.setRgb(n[0], n[1], n[2]);
            n = c.get(this);
            const m = n.GetWorldInfo();
            m.GetUnpremultipliedColor().equalsIgnoringAlpha(h) ||
                (m.SetUnpremultipliedColor(h), n.GetRuntime().UpdateRender())
        }
        get colorRgb() {
            const n = c.get(this).GetWorldInfo().GetUnpremultipliedColor();
            return [n.getR(), n.getG(), n.getB()]
        }
        set blendMode(n) {
            b.RequireString(n);
            n = e.get(n);
            if ("number" !== typeof n) throw Error("invalid blend mode");
            const m = c.get(this);
            m.GetWorldInfo().SetBlendMode(n);
            m.GetRuntime().UpdateRender()
        }
        get blendMode() {
            return k.get(c.get(this).GetWorldInfo().GetBlendMode())
        }
        moveToTop() {
            c.get(this).GetWorldInfo().ZOrderMoveToTop()
        }
        moveToBottom() {
            c.get(this).GetWorldInfo().ZOrderMoveToBottom()
        }
        moveToLayer(n) {
            b.RequireInstanceOf(n,
                d);
            n = d._Unwrap(n);
            if (!n) throw Error("invalid layer");
            c.get(this).GetWorldInfo().ZOrderMoveToLayer(n)
        }
        moveAdjacentToInstance(n, m) {
            b.RequireInstanceOf(n, p);
            c.get(this).GetWorldInfo().ZOrderMoveAdjacentToInstance(c.get(n), m)
        }
        containsPoint(n, m) {
            b.RequireNumber(n);
            b.RequireNumber(m);
            return c.get(this).GetWorldInfo().ContainsPoint(+n, +m)
        }
        testOverlap(n) {
            b.RequireInstanceOf(n, p);
            const m = c.get(this);
            n = c.get(n);
            return m.GetRuntime().GetCollisionEngine().TestOverlap(m, n)
        }
        testOverlapSolid() {
            var n = c.get(this);
            return (n = n.GetRuntime().GetCollisionEngine().TestOverlapSolid(n)) ? n.GetInterfaceClass() : null
        }
        getParent() {
            const n = c.get(this).GetParent();
            return n ? n.GetInterfaceClass() : null
        }
        getTopParent() {
            const n = c.get(this).GetTopParent();
            return n ? n.GetInterfaceClass() : null
        }* parents() {
            for (const n of c.get(this).parents()) yield n.GetInterfaceClass()
        }
        getChildCount() {
            return c.get(this).GetChildCount()
        }
        getChildAt(n) {
            return (n = c.get(this).GetChildAt(n)) ? n.GetInterfaceClass() : null
        }* children() {
            for (const n of c.get(this).children()) yield n.GetInterfaceClass()
        }* allChildren() {
            for (const n of c.get(this).allChildren()) yield n.GetInterfaceClass()
        }
        addChild(n,
            m) {
            b.RequireInstanceOf(n, p);
            b.RequireOptionalObject(m);
            m || (m = {});
            const t = c.get(this);
            n = c.get(n);
            t.AddChild(n, m)
        }
        removeChild(n) {
            b.RequireInstanceOf(n, p);
            const m = c.get(this);
            n = c.get(n);
            m.RemoveChild(n)
        }
        removeFromParent() {
            const n = c.get(this);
            n.HasParent() && n.GetParent().RemoveChild(n)
        }
        createMesh(n, m) {
            b.RequireFiniteNumber(n);
            b.RequireFiniteNumber(m);
            c.get(this).GetWorldInfo().CreateMesh(n, m)
        }
        releaseMesh() {
            const n = c.get(this).GetWorldInfo();
            n.ReleaseMesh();
            n.SetBboxChanged()
        }
        setMeshPoint(n, m, t) {
            b.RequireFiniteNumber(n);
            b.RequireFiniteNumber(m);
            b.RequireObject(t);
            const q = c.get(this).GetWorldInfo();
            q.SetMeshPoint(n, m, t) && q.SetBboxChanged()
        }
        getMeshSize() {
            var n = c.get(this).GetWorldInfo();
            if (!n.HasMesh()) return [0, 0];
            n = n.GetSourceMesh();
            return [n.GetHSize(), n.GetVSize()]
        }
    }
}
"use strict"; {
    const f = self.C3X,
        b = new WeakMap;
    self.IDOMInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            b.set(this, self.IInstance._GetInitInst())
        }
        getElement() {
            return b.get(this).GetSdkInstance()._GetElementInDOMMode()
        }
        focus() {
            b.get(this).GetSdkInstance().FocusElement()
        }
        blur() {
            b.get(this).GetSdkInstance().BlurElement()
        }
        setCssStyle(a, d) {
            f.RequireString(a);
            b.get(this).GetSdkInstance().SetElementCSSStyle(a, d)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(k) {
        let h = d.get(k);
        if (h) return h;
        h = f.New(f.Event.Dispatcher);
        d.set(k, h);
        return h
    }
    let e = null;
    self.IBehaviorInstance = class {
        constructor() {
            a.set(this, e);
            const k = {
                runtime: {
                    value: e.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                behavior: {
                    value: e.GetBehavior().GetIBehavior(),
                    writable: !1
                }
            };
            Object.defineProperties(this, k)
        }
        static _Init(k) {
            e = k
        }
        static _GetInitInst() {
            return e
        }
        get instance() {
            return a.get(this).GetObjectInstance().GetInterfaceClass()
        }
        _Release() {
            const k =
                d.get(this);
            k && (k.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(k, h, p) {
            b.RequireString(k);
            b.RequireFunction(h);
            c(this).addEventListener(k, h, p)
        }
        removeEventListener(k, h, p) {
            b.RequireString(k);
            b.RequireFunction(h);
            c(this).removeEventListener(k, h, p)
        }
        dispatchEvent(k) {
            c(this).dispatchEvent(k)
        }
    }
}
"use strict"; {
    const f = new WeakMap;
    self.IBehavior = class {
        constructor(b) {
            f.set(this, b);
            b = {
                runtime: {
                    value: b.GetRuntime().GetIRuntime(),
                    writable: !1
                }
            };
            Object.defineProperties(this, b)
        }
        getAllInstances() {
            return f.get(this).GetInstances().map(b => b.GetInterfaceClass())
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = new WeakMap;
    self.IEffectInstance = class {
        constructor(d, c) {
            a.set(this, d);
            Object.defineProperties(this, {
                index: {
                    value: c,
                    writable: !1
                }
            })
        }
        get name() {
            return a.get(this).GetAllEffectTypes()[this.index].GetName()
        }
        get isActive() {
            return a.get(this).IsEffectIndexActive(this.index)
        }
        set isActive(d) {
            d = !!d;
            const c = a.get(this);
            c.IsEffectIndexActive(this.index) !== d && (c.SetEffectIndexActive(this.index, d), c.UpdateActiveEffects(), c.GetRuntime().UpdateRender())
        }
        setParameter(d, c) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const e = a.get(this);
            var k = e.GetEffectParametersForIndex(this.index);
            if (0 > d || d >= k.length) throw new RangeError("invalid effect parameter index");
            const h = k[d];
            if (h instanceof f.Color) {
                if (!Array.isArray(c) || 3 > c.length) throw new TypeError("expected array with 3 elements");
                d = c[0];
                k = c[1];
                c = c[2];
                if (h.equalsRgb(d, k, c)) return;
                h.setRgb(d, k, c)
            } else {
                if ("number" !== typeof c) throw new TypeError("expected number");
                if (h === c) return;
                k[d] = c
            }
            e.IsEffectIndexActive(this.index) && e.GetRuntime().UpdateRender()
        }
        getParameter(d) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const c = a.get(this).GetEffectParametersForIndex(this.index);
            if (0 > d || d >= c.length) throw new RangeError("invalid effect parameter index");
            d = c[d];
            return d instanceof f.Color ? [d.getR(), d.getG(), d.getB()] : d
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new Set(["local", "remote"]),
        a = new Map([
            ["mp4", "video/mp4"],
            ["webm", "video/webm"],
            ["m4a", "audio/mp4"],
            ["mp3", "audio/mpeg"],
            ["js", "application/javascript"],
            ["wasm", "application/wasm"],
            ["svg", "image/svg+xml"],
            ["html", "text/html"]
        ]);

    function d(e) {
        if (!e) return "";
        e = e.split(".");
        if (2 > e.length) return "";
        e = e[e.length - 1].toLowerCase();
        return a.get(e) || ""
    }

    function c(e) {
        return new Promise((k, h) => {
            const p = document.createElement("script");
            p.onload = k;
            p.onerror = h;
            p.async = !1;
            p.type = "module";
            p.src =
                e;
            document.head.appendChild(p)
        })
    }
    f.AssetManager = class extends f.DefendedBase {
        constructor(e, k) {
            super();
            var h = k.exportType;
            this._runtime = e;
            this._localUrlBlobs = new Map;
            this._localBlobUrlCache = new Map;
            this._localBlobSWUrls = new Map;
            this._isCordova = "cordova" === h;
            this._isiOSCordova = !!k.isiOSCordova;
            this._isFileProtocol = "file:" === location.protocol;
            this._swClientId = k.swClientId;
            this._supportedAudioFormats = k.supportedAudioFormats || {};
            this._audioFiles = new Map;
            this._preloadSounds = !1;
            this._iconsSubfolder = this._fontsSubfolder =
                this._mediaSubfolder = "";
            this._defaultLoadPolicy = "html5" === h || "scirra-arcade" === h || "instant-games" === h ? "remote" : "local";
            this._allAssets = [];
            this._assetsByUrl = new Map;
            this._webFonts = [];
            this._loadPromises = [];
            this._hasFinishedInitialLoad = !1;
            this._lastLoadProgress = this._assetSizeLoaded = this._totalAssetSizeToLoad = 0;
            this._hasHadErrorLoading = !1;
            this._loadingRateLimiter = f.New(f.RateLimiter, () => this._FireLoadingProgressEvent(), 50);
            this._promiseThrottle = new f.PromiseThrottle(Math.max(f.hardwareConcurrency, 8));
            if (e = k.previewImageBlobs) {
                (h = k.previewProjectFileBlobs) && Object.assign(e, h);
                (h = k.projectData) && (e["data.json"] = h);
                for (const [p, n] of Object.entries(e)) this._localUrlBlobs.set(p.toLowerCase(), n)
            }
            if (k = k.previewProjectFileSWUrls)
                for (const [p, n] of Object.entries(k)) this._localBlobSWUrls.set(p, n);
            this._iAssetManager = new self.IAssetManager(this)
        }
        Release() {
            this._localUrlBlobs.clear();
            for (const e of this._localBlobUrlCache.values()) e.startsWith("blob:") && URL.revokeObjectURL(e);
            this._localBlobUrlCache.clear();
            for (const e of this._allAssets) e.Release();
            f.clearArray(this._allAssets);
            this._assetsByUrl.clear();
            f.clearArray(this._loadPromises);
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        _SetMediaSubfolder(e) {
            this._mediaSubfolder = e
        }
        GetMediaSubfolder() {
            return this._mediaSubfolder
        }
        _SetFontsSubfolder(e) {
            this._fontsSubfolder = e
        }
        GetFontsSubfolder() {
            return this._fontsSubfolder
        }
        _SetIconsSubfolder(e) {
            this._iconsSubfolder = e
        }
        GetIconsSubfolder() {
            return this._iconsSubfolder
        }
        _HasLocalUrlBlob(e) {
            return this._localUrlBlobs.has(e.toLowerCase())
        }
        _GetLocalUrlBlob(e) {
            return this._localUrlBlobs.get(e.toLowerCase()) ||
                null
        }
        GetLocalUrlAsBlobUrl(e) {
            if (!this._HasLocalUrlBlob(e)) return e;
            e = e.toLowerCase();
            var k = this._localBlobUrlCache.get(e);
            k || (k = this._GetLocalUrlBlob(e), k = URL.createObjectURL(k), this._localBlobUrlCache.set(e, k));
            return k
        }
        FetchBlob(e, k) {
            k = k || this._defaultLoadPolicy;
            const h = this._GetLocalUrlBlob(e);
            if (h) return Promise.resolve(h);
            if (f.IsRelativeURL(e)) {
                const p = e.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlob(p) : "local" === k ? this._promiseThrottle.Add(() => f.FetchBlob(p)) :
                    f.FetchBlob(p)
            }
            return f.FetchBlob(e)
        }
        FetchArrayBuffer(e) {
            const k = this._GetLocalUrlBlob(e);
            if (k) return f.BlobToArrayBuffer(k);
            if (f.IsRelativeURL(e)) {
                const h = e.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsArrayBuffer(h) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => f.FetchArrayBuffer(h)) : f.FetchArrayBuffer(h)
            }
            return f.FetchArrayBuffer(e)
        }
        FetchText(e) {
            const k = this._GetLocalUrlBlob(e);
            if (k) return f.BlobToString(k);
            if (f.IsRelativeURL(e)) {
                const h =
                    e.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsText(h) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => f.FetchText(h)) : f.FetchText(h)
            }
            return f.FetchText(e)
        }
        async FetchJson(e) {
            e = await this.FetchText(e);
            return JSON.parse(e)
        }
        _CordovaFetchLocalFileAs(e, k) {
            return this._runtime.PostComponentMessageToDOMAsync("runtime", "cordova-fetch-local-file", {
                filename: e,
                as: k
            })
        }
        CordovaFetchLocalFileAsText(e) {
            return this._CordovaFetchLocalFileAs(e, "text")
        }
        async CordovaFetchLocalFileAsBlob(e) {
            const k =
                await this._CordovaFetchLocalFileAs(e, "buffer");
            e = d(e);
            return new Blob([k], {
                type: e
            })
        }
        async CordovaFetchLocalFileAsBlobURL(e) {
            e = e.toLowerCase();
            var k = this._localBlobUrlCache.get(e);
            if (k) return k;
            k = await this.CordovaFetchLocalFileAsBlob(e);
            k = URL.createObjectURL(k);
            this._localBlobUrlCache.set(e, k);
            return k
        }
        CordovaFetchLocalFileAsArrayBuffer(e) {
            return this._CordovaFetchLocalFileAs(e, "buffer")
        }
        GetMediaFileUrl(e) {
            return this._HasLocalUrlBlob(e) ? this.GetLocalUrlAsBlobUrl(e) : this._mediaSubfolder + e.toLowerCase()
        }
        GetProjectFileUrl(e,
            k = "") {
            if (f.IsAbsoluteURL(e)) {
                if (k) throw Error("cannot specify subfolder with remote URL");
                return Promise.resolve(e)
            }
            return this._HasLocalUrlBlob(e) ? Promise.resolve(this.GetLocalUrlAsBlobUrl(e)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(k + e) : Promise.resolve(k + e.toLowerCase())
        }
        GetProjectFileIframeUrl(e) {
            if (f.IsAbsoluteURL(e)) return Promise.resolve(e);
            var k = e.indexOf("?"),
                h = -1 === k ? "" : e.substr(k);
            k = -1 === k ? e : e.substr(0, k);
            return this._HasLocalUrlBlob(k) ? (e = this._localBlobSWUrls.get(k) ||
                this.GetLocalUrlAsBlobUrl(k), !e.startsWith("blob:") && this._swClientId && (e = new URL(e), h = new URLSearchParams(h), h.set("__c3_client_id", this._swClientId), e.search = h.toString(), e = e.toString()), Promise.resolve(e)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(k) : Promise.resolve(e.toLowerCase())
        }
        LoadProjectFileUrl(e) {
            return this.GetProjectFileUrl(e)
        }
        LoadImage(e) {
            if (e.loadPolicy && !b.has(e.loadPolicy)) throw Error("invalid load policy");
            let k = this._assetsByUrl.get(e.url);
            if (k) return k;
            k = f.New(f.ImageAsset, this, {
                url: e.url,
                size: e.size || 0,
                loadPolicy: e.loadPolicy || this._defaultLoadPolicy
            });
            this._allAssets.push(k);
            this._assetsByUrl.set(k.GetURL(), k);
            this._hasFinishedInitialLoad || (this._totalAssetSizeToLoad += k.GetSize(), this._loadPromises.push(k.Load().then(() => this._AddLoadedSize(k.GetSize()))));
            return k
        }
        async WaitForAllToLoad() {
            try {
                await Promise.all(this._loadPromises), this._lastLoadProgress = 1
            } catch (e) {
                console.error("Error loading: ", e), this._hasHadErrorLoading = !0, this._FireLoadingProgressEvent()
            }
        }
        SetInitialLoadFinished() {
            this._hasFinishedInitialLoad = !0
        }
        HasHadErrorLoading() {
            return this._hasHadErrorLoading
        }
        _AddLoadedSize(e) {
            this._assetSizeLoaded += e;
            this._loadingRateLimiter.Call()
        }
        _FireLoadingProgressEvent() {
            const e = f.New(f.Event, "loadingprogress");
            this._lastLoadProgress = f.clamp(this._assetSizeLoaded / this._totalAssetSizeToLoad, 0, 1);
            e.progress = this._lastLoadProgress;
            this._runtime.Dispatcher().dispatchEvent(e)
        }
        GetLoadProgress() {
            return this._lastLoadProgress
        }
        _SetWebFonts(e) {
            f.shallowAssignArray(this._webFonts, e);
            this._webFonts.length && this._loadPromises.push(this._LoadWebFonts())
        }
        _LoadWebFonts() {
            if ("undefined" ===
                typeof FontFace) return Promise.resolve();
            const e = [];
            for (const [k, h, p] of this._webFonts) this._totalAssetSizeToLoad += p, e.push(this._LoadWebFont(k, h).then(() => this._AddLoadedSize(p)));
            return Promise.all(e)
        }
        async _LoadWebFont(e, k) {
            try {
                const h = await this.GetProjectFileUrl(k, this._fontsSubfolder),
                    p = new FontFace(e, `url('${h}')`);
                this._runtime.IsInWorker() ? self.fonts.add(p) : document.fonts.add(p);
                await p.load()
            } catch (h) {
                console.warn(`[C3 runtime] Failed to load web font '${e}': `, h)
            }
        }
        IsAudioFormatSupported(e) {
            return !!this._supportedAudioFormats[e]
        }
        _SetAudioFiles(e,
            k) {
            this._preloadSounds = !!k;
            for (const [h, p, n] of e) this._audioFiles.set(h, {
                fileName: h,
                formats: p.map(m => ({
                    type: m[0],
                    fileExtension: m[1],
                    fullName: h + m[1],
                    fileSize: m[2]
                })),
                isMusic: n
            })
        }
        GetPreferredAudioFile(e) {
            e = this._audioFiles.get(e.toLowerCase());
            if (!e) return null;
            let k = null;
            for (const h of e.formats)
                if (k || "audio/webm; codecs=opus" !== h.type || (k = h), this.IsAudioFormatSupported(h.type)) return h;
            return k
        }
        GetProjectAudioFileUrl(e) {
            return (e = this.GetPreferredAudioFile(e)) ? {
                url: this.GetMediaFileUrl(e.fullName),
                type: e.type
            } : null
        }
        GetAudioToPreload() {
            if (this._preloadSounds) {
                const e = [];
                for (const k of this._audioFiles.values()) {
                    if (k.isMusic) continue;
                    const h = this.GetPreferredAudioFile(k.fileName);
                    h && e.push({
                        originalUrl: k.fileName,
                        url: this.GetMediaFileUrl(h.fullName),
                        type: h.type,
                        fileSize: h.fileSize
                    })
                }
                return e
            }
            return []
        }
        GetIAssetManager() {
            return this._iAssetManager
        }
        async LoadScripts(...e) {
            const k = await Promise.all(e.map(h => this.GetProjectFileUrl(h)));
            this._runtime.IsInWorker() ? 1 === e.length ? (e = e[0], await self.c3_import((f.IsRelativeURL(e) ?
                "./" : "") + e)) : (e = e.map(h => `import "${f.IsRelativeURL(h)?"./":""}${h}";`).join("\n"), e = URL.createObjectURL(new Blob([e], {
                type: "application/javascript"
            })), await self.c3_import(e)) : await Promise.all(k.map(h => c(h)))
        }
        async CompileWebAssembly(e) {
            if (WebAssembly.compileStreaming) return e = await this.GetProjectFileUrl(e), await WebAssembly.compileStreaming(fetch(e));
            e = await f.FetchArrayBuffer(e);
            return await WebAssembly.compile(e)
        }
        async LoadStyleSheet(e) {
            e = await this.GetProjectFileUrl(e);
            return await this._runtime.PostComponentMessageToDOMAsync("runtime",
                "add-stylesheet", {
                    url: e
                })
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Asset = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._assetManager = b;
            this._runtime = b.GetRuntime();
            this._url = a.url;
            this._size = a.size;
            this._loadPolicy = a.loadPolicy;
            this._blob = null;
            this._isLoaded = !1;
            this._loadPromise = null
        }
        Release() {
            this._blob = this._runtime = this._assetManager = this._loadPromise = null
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        Load() {
            return "local" === this._loadPolicy || this._blob ? (this._isLoaded = !0, Promise.resolve()) : this._loadPromise ? this._loadPromise :
                this._loadPromise = this._assetManager.FetchBlob(this._url, this._loadPolicy).then(b => {
                    this._isLoaded = !0;
                    this._loadPromise = null;
                    return this._blob = b
                }).catch(b => console.error("Error loading resource: ", b))
        }
        IsLoaded() {
            return this._isLoaded
        }
        GetBlob() {
            return this._blob ? Promise.resolve(this._blob) : this._loadPromise ? this._loadPromise : this._assetManager.FetchBlob(this._url, this._loadPolicy)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new f.PromiseThrottle,
        a = new Set;
    f.ImageAsset = class extends f.Asset {
        constructor(d, c) {
            super(d, c);
            this._webglTexture = this._texturePromise = null;
            this._refCount = 0;
            this._imageHeight = this._imageWidth = -1;
            a.add(this)
        }
        Release() {
            this.ReleaseTexture();
            if (0 !== this._refCount) throw Error("released image asset which still has texture references");
            this._texturePromise = null;
            a.delete(this);
            super.Release()
        }
        static OnWebGLContextLost() {
            for (const d of a) d._texturePromise = null, d._webglTexture = null, d._refCount =
                0
        }
        LoadStaticTexture(d, c) {
            c = c || {};
            this._refCount++;
            if (this._webglTexture) return Promise.resolve(this._webglTexture);
            if (this._texturePromise) return this._texturePromise;
            c.anisotropy = this._runtime.GetCanvasManager().GetTextureAnisotropy();
            return this._texturePromise = this.GetBlob().then(e => b.Add(() => d.CreateStaticTextureAsync(e, c).then(k => {
                this._texturePromise = null;
                if (0 === this._refCount) return d.DeleteTexture(k), null;
                this._webglTexture = k;
                this._imageWidth = k.GetWidth();
                this._imageHeight = k.GetHeight();
                return this._webglTexture
            }))).catch(e => {
                console.error("Failed to load texture: ", e);
                throw e;
            })
        }
        ReleaseTexture() {
            if (0 >= this._refCount) throw Error("texture released too many times");
            this._refCount--;
            0 === this._refCount && this._webglTexture && (this._webglTexture.GetRenderer().DeleteTexture(this._webglTexture), this._webglTexture = null)
        }
        GetTexture() {
            return this._webglTexture
        }
        GetWidth() {
            return this._imageWidth
        }
        GetHeight() {
            return this._imageHeight
        }
        async LoadToDrawable() {
            const d = await this.GetBlob();
            return f.Supports.ImageBitmapOptions ? await createImageBitmap(d, {
                premultiplyAlpha: "none"
            }) : f.Supports.ImageBitmap ? await createImageBitmap(d) : await f.BlobToImage(d)
        }
    }
}
"use strict"; {
    const f = self.C3;

    function b(a, d) {
        return a.GetWorldInfo()._GetLastCachedZIndex() - d.GetWorldInfo()._GetLastCachedZIndex()
    }
    f.RenderCell = class extends f.DefendedBase {
        constructor(a, d, c) {
            super();
            this._grid = a;
            this._x = d;
            this._y = c;
            this._instances = [];
            this._isSorted = !0;
            this._pendingRemoval = new Set;
            this._isAnyPendingRemoval = !1
        }
        Release() {
            f.clearArray(this._instances);
            this._pendingRemoval.clear();
            this._grid = null
        }
        Reset() {
            f.clearArray(this._instances);
            this._isSorted = !0;
            this._pendingRemoval.clear();
            this._isAnyPendingRemoval = !1
        }
        SetChanged() {
            this._isSorted = !1
        }
        IsEmpty() {
            if (!this._instances.length) return !0;
            if (this._instances.length > this._pendingRemoval.size) return !1;
            this._FlushPending();
            return !0
        }
        Insert(a) {
            this._pendingRemoval.has(a) ? (this._pendingRemoval.delete(a), 0 === this._pendingRemoval.size && (this._isAnyPendingRemoval = !1)) : (this._instances.push(a), this._isSorted = 1 === this._instances.length)
        }
        Remove(a) {
            this._pendingRemoval.add(a);
            this._isAnyPendingRemoval = !0;
            50 <= this._pendingRemoval.size && this._FlushPending()
        }
        _FlushPending() {
            this._isAnyPendingRemoval &&
                (this._instances.length === this._pendingRemoval.size ? this.Reset() : (f.arrayRemoveAllInSet(this._instances, this._pendingRemoval), this._pendingRemoval.clear(), this._isAnyPendingRemoval = !1))
        }
        _EnsureSorted() {
            this._isSorted || (this._instances.sort(b), this._isSorted = !0)
        }
        Dump(a) {
            this._FlushPending();
            this._EnsureSorted();
            this._instances.length && a.push(this._instances)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.RenderGrid = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = f.New(f.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = f.New(f.RenderCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            return Math.floor(b / this._cellWidth)
        }
        YToCell(b) {
            return Math.floor(b / this._cellHeight)
        }
        Update(b, a, d) {
            if (a)
                for (let c = a.getLeft(), e = a.getRight(); c <= e; ++c)
                    for (let k = a.getTop(), h =
                            a.getBottom(); k <= h; ++k) {
                        if (d && d.containsPoint(c, k)) continue;
                        const p = this.GetCell(c, k, !1);
                        p && (p.Remove(b), p.IsEmpty() && this._cells.Delete(c, k))
                    }
            if (d)
                for (let c = d.getLeft(), e = d.getRight(); c <= e; ++c)
                    for (let k = d.getTop(), h = d.getBottom(); k <= h; ++k) a && a.containsPoint(c, k) || this.GetCell(c, k, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                e = this.XToCell(b.getRight());
            for (b = this.YToCell(b.getBottom()); d <= e; ++d)
                for (let k = c; k <= b; ++k) {
                    const h = this.GetCell(d, k, !1);
                    h &&
                        h.Dump(a)
                }
        }
        MarkRangeChanged(b) {
            let a = b.getLeft();
            const d = b.getTop(),
                c = b.getRight();
            for (b = b.getBottom(); a <= c; ++a)
                for (let e = d; e <= b; ++e) {
                    const k = this.GetCell(a, e, !1);
                    k && k.SetChanged()
                }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new f.Rect,
        a = new f.Quad,
        d = [],
        c = new f.Rect,
        e = new f.Rect,
        k = self.glMatrix.vec3,
        h = k.fromValues(0, 1, 0);

    function p(m, t) {
        return m.GetWorldInfo()._GetLastCachedZIndex() - t.GetWorldInfo()._GetLastCachedZIndex()
    }

    function n(m, t) {
        return m.GetWorldInfo().GetZElevation() - t.GetWorldInfo().GetZElevation()
    }
    f.Layer = class extends f.DefendedBase {
        constructor(m, t, q) {
            super();
            this._layout = m;
            this._runtime = m.GetRuntime();
            this._name = q[0];
            this._index = t;
            this._sid = q[2];
            this._isVisible = !!q[3];
            this._backgroundColor =
                f.New(f.Color);
            this._backgroundColor.setFromJSON(q[4].map(u => u / 255));
            this._isTransparent = !!q[5];
            this._parallaxX = q[6];
            this._parallaxY = q[7];
            this._color = f.New(f.Color, 1, 1, 1, q[8]);
            this._premultipliedColor = f.New(f.Color);
            this._isForceOwnTexture = q[9];
            this._renderAs3d = q[17];
            this._useRenderCells = q[10];
            this._scaleRate = q[11];
            this._blendMode = q[12];
            this._curRenderTarget = null;
            this._scale = 1;
            this._zElevation = q[16];
            this._angle = 0;
            this._isAngleEnabled = !0;
            this._viewport = f.New(f.Rect);
            this._viewportZ0 = f.New(f.Rect);
            this._startupInitialInstances = [];
            this._initialInstances = [];
            this._createdGlobalUids = [];
            this._initialUIDsToInstanceData = new Map;
            this._instances = [];
            this._anyInstanceZElevated = this._zIndicesUpToDate = !1;
            this._effectList = f.New(f.EffectList, this, q[15]);
            this._renderGrid = null;
            this._lastRenderList = [];
            this._isRenderListUpToDate = !1;
            this._lastRenderCells = f.New(f.Rect, 0, 0, -1, -1);
            this._curRenderCells = f.New(f.Rect, 0, 0, -1, -1);
            this._iLayer = new self.ILayer(this);
            this._UpdatePremultipliedColor();
            this._useRenderCells &&
                (this._renderGrid = f.New(f.RenderGrid, this._runtime.GetOriginalViewportWidth(), this._runtime.GetOriginalViewportHeight()));
            for (const u of q[14]) m = this._runtime.GetObjectClassByIndex(u[1]), this._layout._AddInitialObjectClass(m), m.GetDefaultInstanceData() || (m.SetDefaultInstanceData(u), m._SetDefaultLayerIndex(this._index)), this._initialInstances.push(u), this._initialUIDsToInstanceData.set(u[2], u);
            f.shallowAssignArray(this._startupInitialInstances, this._initialInstances)
        }
        static Create(m, t, q) {
            return f.New(f.Layer,
                m, t, q)
        }
        Release() {
            this._runtime = this._layout = null
        }
        GetInitialInstanceData(m) {
            return this._initialUIDsToInstanceData.get(m)
        }
        CreateInitialInstances(m) {
            const t = this._layout.IsFirstVisit();
            let q = 0;
            const u = this._initialInstances;
            for (let x = 0, z = u.length; x < z; ++x) {
                var r = u[x];
                const C = this._runtime.GetObjectClassByIndex(r[1]);
                let w = !0;
                if (!C.HasPersistBehavior() || t) r = this._runtime.CreateInstanceFromData(r, this, !0), m.push(r), C.IsGlobal() && (w = !1, this._createdGlobalUids.push(r.GetUID()));
                w && (u[q] = u[x], ++q)
            }
            f.truncateArray(u,
                q);
            this._runtime.FlushPendingInstances();
            this.SetZIndicesChanged()
        }
        _AddInstance(m, t) {
            const q = m.GetWorldInfo();
            if (q.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.push(m);
            0 !== q.GetZElevation() && (this._anyInstanceZElevated = !0);
            t && this._useRenderCells && m.GetWorldInfo().SetBboxChanged();
            this.SetZIndicesChanged()
        }
        _MaybeAddInstance(m) {
            this._instances.includes(m) || (this._instances.push(m), 0 !== m.GetWorldInfo().GetZElevation() && (this._anyInstanceZElevated = !0), this.SetZIndicesChanged())
        }
        _PrependInstance(m,
            t) {
            const q = m.GetWorldInfo();
            if (q.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.unshift(m);
            0 !== q.GetZElevation() && (this._anyInstanceZElevated = !0);
            this.SetZIndicesChanged();
            t && this._useRenderCells && m.GetWorldInfo().SetBboxChanged()
        }
        _RemoveInstance(m, t) {
            const q = this._instances.indexOf(m);
            0 > q || (t && this._useRenderCells && m.GetWorldInfo()._RemoveFromRenderCells(), this._instances.splice(q, 1), this.SetZIndicesChanged(), this._MaybeResetAnyInstanceZElevatedFlag())
        }
        _SetAnyInstanceZElevated() {
            this._anyInstanceZElevated = !0
        }
        _MaybeResetAnyInstanceZElevatedFlag() {
            0 === this._instances.length && (this._anyInstanceZElevated = !1)
        }
        _SortInstancesByLastCachedZIndex(m) {
            if (m) {
                m = new Set;
                for (var t of this._instances) {
                    var q = t.GetWorldInfo()._GetLastCachedZIndex();
                    0 <= q && m.add(q)
                }
                t = -1;
                for (const u of this._instances)
                    if (q = u.GetWorldInfo(), !(0 <= q._GetLastCachedZIndex())) {
                        for (++t; m.has(t);) ++t;
                        q._SetZIndex(t)
                    }
            }
            this._instances.sort(p)
        }
        _Start() {}
        _End() {
            for (const m of this._instances) m.GetObjectClass().IsGlobal() || this._runtime.DestroyInstance(m);
            this._runtime.FlushPendingInstances();
            f.clearArray(this._instances);
            this._anyInstanceZElevated = !1;
            this.SetZIndicesChanged()
        }
        RecreateInitialObjects(m, t, q, u, r) {
            const x = this._runtime.GetEventSheetManager(),
                z = this._runtime.GetAllObjectClasses(),
                C = m.IsFamily(),
                w = [];
            for (const J of this._initialInstances) {
                var B = J[0];
                if (t.containsPoint(B[0], B[1])) {
                    B = z[J[1]];
                    if (B !== m)
                        if (C) {
                            if (!m.FamilyHasMember(B)) continue
                        } else continue;
                    B = this;
                    var F = this._runtime.GetCurrentLayout();
                    this.GetLayout() !== F && ((B = F.GetLayerByName(this.GetName())) ||
                        (B = F.GetLayerByIndex(this.GetIndex())));
                    F = this._runtime.CreateInstanceFromData(J, B, !1, void 0, void 0, !1, r);
                    B.SortAndAddSceneGraphInstancesByZIndex(F);
                    B = F.GetWorldInfo();
                    B.OffsetXY(q, u);
                    B.SetBboxChanged();
                    x.BlockFlushingInstances(!0);
                    F._TriggerOnCreatedOnSelfAndRelated();
                    x.BlockFlushingInstances(!1);
                    w.push(F)
                }
            }
            return w
        }
        GetInstanceCount() {
            return this._instances.length
        }
        GetLayout() {
            return this._layout
        }
        GetName() {
            return this._name
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        GetRuntime() {
            return this._runtime
        }
        GetDevicePixelRatio() {
            return this._runtime.GetDevicePixelRatio()
        }
        GetEffectList() {
            return this._effectList
        }
        UsesRenderCells() {
            return this._useRenderCells
        }
        GetRenderGrid() {
            return this._renderGrid
        }
        SetRenderListStale() {
            this._isRenderListUpToDate = !1
        }
        IsVisible() {
            return this._isVisible
        }
        SetVisible(m) {
            m = !!m;
            this._isVisible !== m && (this._isVisible = m, this._runtime.UpdateRender())
        }
        GetViewport() {
            return this._viewport
        }
        GetViewportForZ(m, t) {
            var q = this._viewportZ0;
            if (0 === m) t.copy(q);
            else {
                const u = this.Get2DScaleFactorToZ(m);
                m = q.midX();
                const r = q.midY(),
                    x = .5 * q.width() / u;
                q = .5 * q.height() / u;
                t.set(m - x, r - q, m + x, r + q)
            }
        }
        GetOpacity() {
            return this._color.getA()
        }
        SetOpacity(m) {
            m = f.clamp(m, 0, 1);
            this._color.getA() !== m && (this._color.setA(m), this._UpdatePremultipliedColor(),
                this._runtime.UpdateRender())
        }
        _UpdatePremultipliedColor() {
            this._premultipliedColor.copy(this._color);
            this._premultipliedColor.premultiply()
        }
        GetPremultipliedColor() {
            return this._premultipliedColor
        }
        HasDefaultColor() {
            return this._color.equalsRgba(1, 1, 1, 1)
        }
        GetScaleRate() {
            return this._scaleRate
        }
        SetScaleRate(m) {
            this._scaleRate !== m && (this._scaleRate = m, this._runtime.UpdateRender())
        }
        GetParallaxX() {
            return this._parallaxX
        }
        GetParallaxY() {
            return this._parallaxY
        }
        SetParallax(m, t) {
            if (this._parallaxX !== m || this._parallaxY !==
                t)
                if (this._parallaxX = m, this._parallaxY = t, this._runtime.UpdateRender(), 1 !== this._parallaxX || 1 !== this._parallaxY)
                    for (const q of this._instances) q.GetObjectClass()._SetAnyInstanceParallaxed(!0)
        }
        SetParallaxX(m) {
            this.SetParallax(m, this.GetParallaxY())
        }
        SetParallaxY(m) {
            this.SetParallax(this.GetParallaxX(), m)
        }
        SetZElevation(m) {
            m = +m;
            this._zElevation !== m && (this._zElevation = m, this._runtime.UpdateRender())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetAngle(m) {
            this._angle = f.clampAngle(m)
        }
        GetAngle() {
            return this._isAngleEnabled ?
                f.clampAngle(this._layout.GetAngle() + this._angle) : 0
        }
        GetOwnAngle() {
            return this._angle
        }
        HasInstances() {
            return 0 < this._instances.length
        }
        _GetInstances() {
            return this._instances
        }
        GetBackgroundColor() {
            return this._backgroundColor
        }
        IsTransparent() {
            return this._isTransparent
        }
        SetTransparent(m) {
            this._isTransparent = !!m
        }
        IsForceOwnTexture() {
            return this._isForceOwnTexture
        }
        SetForceOwnTexture(m) {
            this._isForceOwnTexture = !!m
        }
        RendersIn2DMode() {
            return !this.GetRuntime().Uses3DFeatures() || !this._renderAs3d
        }
        SetBlendMode(m) {
            this._blendMode !==
                m && (this._blendMode = m, this._runtime.UpdateRender())
        }
        GetBlendMode() {
            return this._blendMode
        }
        IsTransformCompatibleWith(m) {
            return this === m || this._parallaxX === m._parallaxX && this._parallaxY === m._parallaxY && this._scale === m._scale && this._scaleRate === m._scaleRate && this._angle === m._angle
        }
        _RemoveAllInstancesInSet(m) {
            0 !== m.size && 0 < f.arrayRemoveAllInSet(this._instances, m) && (this._MaybeResetAnyInstanceZElevatedFlag(), this.SetZIndicesChanged())
        }
        SetZIndicesChanged() {
            this._isRenderListUpToDate = this._zIndicesUpToDate = !1
        }
        _UpdateZIndices() {
            if (!this._zIndicesUpToDate) {
                this._instances.sort(n);
                if (this._useRenderCells)
                    for (let m = 0, t = this._instances.length; m < t; ++m) {
                        const q = this._instances[m].GetWorldInfo();
                        q._SetZIndex(m);
                        this._renderGrid.MarkRangeChanged(q.GetRenderCellRange())
                    } else
                        for (let m = 0, t = this._instances.length; m < t; ++m) this._instances[m].GetWorldInfo()._SetZIndex(m);
                this._zIndicesUpToDate = !0
            }
        }
        MoveInstanceAdjacent(m, t, q) {
            var u = m.GetWorldInfo();
            t = t.GetWorldInfo();
            if (u.GetLayer() !== this || t.GetLayer() !== this) throw Error("can't arrange Z order unless both objects on this layer");
            u = u.GetZIndex();
            t = t.GetZIndex();
            if (u === t + (q ? 1 : -1)) return !1;
            f.arrayRemove(this._instances, u);
            u < t && t--;
            q && t++;
            t === this._instances.length ? this._instances.push(m) : this._instances.splice(t, 0, m);
            this.SetZIndicesChanged();
            return !0
        }
        _MergeSortedZArrays(m, t) {
            const q = [];
            let u = 0,
                r = 0,
                x = m.length,
                z = t.length;
            for (; u < x && r < z;) {
                const C = m[u],
                    w = t[r];
                C.GetWorldInfo()._GetLastCachedZIndex() < w.GetWorldInfo()._GetLastCachedZIndex() ? (q.push(C), ++u) : (q.push(w), ++r)
            }
            for (; u < x; ++u) q.push(m[u]);
            for (; r < z; ++r) q.push(t[r]);
            return q
        }
        _MergeAllSortedZArrays_pass(m) {
            const t = [],
                q = m.length;
            for (let u = 0; u < q - 1; u += 2) t.push(this._MergeSortedZArrays(m[u], m[u + 1]));
            1 === q % 2 && t.push(m[q - 1]);
            return t
        }
        _MergeAllSortedZArrays(m) {
            for (; 1 < m.length;) m = this._MergeAllSortedZArrays_pass(m);
            return m[0]
        }
        _GetRenderCellInstancesToDraw() {
            this._UpdateZIndices();
            f.clearArray(d);
            this._renderGrid.QueryRange(this._viewport, d);
            return d.length ? 1 === d.length ? d[0] : this._MergeAllSortedZArrays(d) : []
        }
        _IsOpaque() {
            return !this.UsesOwnTexture() && !this.IsTransparent()
        }
        ShouldDraw() {
            return this.IsVisible() && 0 < this.GetOpacity() &&
                (this.HasInstances() || !this.IsTransparent())
        }
        UsesOwnTexture() {
            return this.IsForceOwnTexture() || !this.HasDefaultColor() || 0 !== this.GetBlendMode() || this._effectList.HasAnyActiveEffect()
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        _CanFastPathDrawLayer(m) {
            if (0 === m.length) return !0;
            if (2 <= m.length) return !1;
            m = m[0].GetShaderProgram();
            return !m.MustPreDraw() && !m.UsesDest() && !m.UsesCrossSampling() && this.HasDefaultColor()
        }
        Get2DScaleFactorToZ(m) {
            const t = this.GetCameraZ();
            return t / (t - m)
        }
        GetCameraZ() {
            return 100 /
                this.GetNormalScale()
        }
        _SetTransform(m, t = 0, q = 0) {
            const u = this._runtime.GetRenderScale();
            t = (this._viewport.midX() + t) * u;
            q = (this._viewport.midY() + q) * u;
            const r = this.GetCameraZ();
            m.SetCameraXYZ(t, q, r);
            m.SetLookXYZ(t, q, r - 100);
            t = this.GetAngle();
            0 === t ? k.set(h, 0, 1, 0) : k.set(h, Math.sin(t), Math.cos(t), 0);
            m.ResetModelView(h);
            m.Scale(u, u);
            m.UpdateModelView()
        }
        Draw(m, t, q) {
            const u = this._runtime.GetCanvasManager(),
                r = this.UsesOwnTexture();
            var x = null;
            let z = null;
            if (this._runtime.IsGPUProfiling() && m.SupportsGPUProfiling()) {
                const C =
                    u.GetLayerTimingsBuffer(this);
                C && (z = C.AddTimeElapsedQuery(), m.StartQuery(z))
            }
            r ? (x = {
                sampling: this._runtime.GetSampling()
            }, "low" === u.GetCurrentFullscreenScalingQuality() && (x.width = u.GetDrawWidth(), x.height = u.GetDrawHeight()), x = this._runtime.GetAdditionalRenderTarget(x), m.SetRenderTarget(x), this.IsTransparent() && m.ClearRgba(0, 0, 0, 0)) : m.SetRenderTarget(t);
            this.IsTransparent() || m.Clear(this._backgroundColor);
            this._curRenderTarget = x || t;
            this._SetTransform(m);
            m.SetBaseZ(this.GetZElevation());
            m.SetDepthEnabled(this.GetRuntime().Uses3DFeatures() &&
                this._renderAs3d);
            this.GetNormalScale() > Number.EPSILON && (this._UpdateZIndices(), this._useRenderCells && 0 === this.GetZElevation() && !this._anyInstanceZElevated ? this._DrawInstances_RenderCells(m) : this._DrawInstances(m, this._instances));
            m.SetBaseZ(0);
            m.SetCurrentZ(0);
            m.SetCameraXYZ(0, 0, 100);
            m.SetLookXYZ(0, 0, 0);
            r && (m.SetDepthEnabled(!1), this._DrawLayerOwnTextureToRenderTarget(m, x, t, q));
            z && m.EndQuery(z);
            this._curRenderTarget = null
        }
        _DrawInstances(m, t) {
            const q = this._viewport,
                u = this._curRenderTarget;
            let r = null;
            for (let x = 0, z = t.length; x < z; ++x) {
                const C = t[x];
                if (C === r) continue;
                r = C;
                const w = C.GetWorldInfo();
                w.IsVisible() && w.IsInViewport(q) && (w.HasAnyActiveEffect() ? this._DrawInstanceWithEffectsAndRestore(C, w, m, u) : this._DrawInstance(C, w, m))
            }
        }
        _DrawInstances_RenderCells(m) {
            var t = this._renderGrid;
            const q = this._curRenderCells,
                u = this._lastRenderCells,
                r = this._viewport;
            q.set(t.XToCell(r.getLeft()), t.YToCell(r.getTop()), t.XToCell(r.getRight()), t.YToCell(r.getBottom()));
            this._isRenderListUpToDate && q.equals(u) ? t = this._lastRenderList :
                (t = this._GetRenderCellInstancesToDraw(), this._isRenderListUpToDate = !0, u.copy(q));
            this._DrawInstances(m, t);
            t !== this._lastRenderList && f.shallowAssignArray(this._lastRenderList, t)
        }
        _DrawInstance(m, t, q) {
            t = t.GetRendererStateGroup();
            q.GetCurrentStateGroup() !== t && t.Apply();
            m.Draw(q)
        }
        _DrawInstanceWithEffectsAndRestore(m, t, q, u) {
            this._DrawInstanceWithEffects(m, t, q, u, null) && this._SetTransform(q)
        }
        _DrawInstanceWithEffects(m, t, q, u, r) {
            const x = t.GetInstanceEffectList().GetActiveEffectTypes();
            if (1 === x.length) {
                const z =
                    x[0],
                    C = z.GetShaderProgram();
                if (!C.NeedsPostDrawOrExtendsBox() && t.HasDefaultColor() && !m.MustPreDraw()) return this._DrawInstanceWithEffects_FastPath(m, t, z, C, q), !1
            }
            m = f.RenderEffectChain(q, this._runtime, m, u, x, r);
            q.SetBaseZ(this.GetZElevation());
            return m
        }
        _DrawInstanceWithEffects_FastPath(m, t, q, u, r) {
            r.SetProgram(u);
            r.SetBlendMode(t.GetBlendMode());
            u.IsAnimated() && this._runtime.UpdateRender();
            let x = 0,
                z = 0;
            if (u.UsesAnySrcRectOrPixelSize()) {
                const [C, w] = m.GetCurrentSurfaceSize();
                x = 1 / C;
                z = 1 / w;
                (u = m.GetCurrentTexRect()) ?
                e.copy(u): e.set(0, 0, 0, 0)
            }
            q = t.GetInstanceEffectList().GetEffectParametersForIndex(q.GetIndex());
            r.SetCurrentZ(t.GetZElevation());
            r.SetProgramParameters(null, c, e, e, t.GetBoundingBox(), x, z, this.GetOwnScale(), this.GetAngle(), this._runtime.GetGameTime(), q);
            m.Draw(r)
        }
        _DrawLayerOwnTextureToRenderTarget(m, t, q, u) {
            const r = this._effectList.GetActiveEffectTypes(),
                x = this._runtime;
            if (this._CanFastPathDrawLayer(r)) {
                m.SetRenderTarget(q);
                if (1 === r.length) {
                    var z = r[0];
                    q = z.GetShaderProgram();
                    m.SetProgram(q);
                    e.set(0, 0,
                        1, 1);
                    z = this._effectList.GetEffectParametersForIndex(z.GetIndex());
                    m.SetProgramParameters(null, c, e, e, this._viewport, 1 / x.GetDrawWidth(), 1 / x.GetDrawHeight(), this.GetNormalScale(), this.GetAngle(), x.GetGameTime(), z);
                    q.IsAnimated() && x.UpdateRender()
                } else m.SetTextureFillMode();
                u && 0 === this._blendMode && this.HasDefaultColor() && 0 === r.length ? m.CopyRenderTarget(t) : (m.SetBlendMode(this._blendMode), m.SetColor(this._premultipliedColor), m.DrawRenderTarget(t));
                m.InvalidateRenderTarget(t);
                x.ReleaseAdditionalRenderTarget(t)
            } else f.RenderEffectChain(m,
                x, this, q, r)
        }
        GetOwnScale() {
            return this._scale
        }
        SetOwnScale(m) {
            this._scale !== m && (this._scale = m, this._layout.BoundScrolling(), this._runtime.UpdateRender())
        }
        GetRenderScale() {
            return this.GetNormalScale() * this._runtime.GetRenderScale()
        }
        GetDisplayScale() {
            return this.GetNormalScale() * this._runtime.GetDisplayScale()
        }
        GetNormalScale() {
            return (this._scale * this._layout.GetScale() - 1) * this._scaleRate + 1
        }
        UpdateViewport() {
            this._isAngleEnabled = !1;
            let [m, t] = this.CanvasCssToLayer(0, 0);
            this._isAngleEnabled = !0;
            this._runtime.IsPixelRoundingEnabled() &&
                (m = Math.round(m), t = Math.round(t));
            var q = 1 / this.GetNormalScale();
            const u = this._viewportZ0;
            u.set(m, t, m + this._runtime.GetViewportWidth() * q, t + this._runtime.GetViewportHeight() * q);
            q = this.GetAngle();
            0 !== q && (b.copy(u), b.offset(-u.midX(), -u.midY()), a.setFromRotatedRect(b, q), a.getBoundingBox(b), b.offset(u.midX(), u.midY()), u.copy(b));
            this.GetViewportForZ(this._zElevation, this._viewport)
        }
        CanvasCssToLayer(m, t, q = 0) {
            return this._CanvasToLayer(m, t, q, this.GetDisplayScale())
        }
        DrawSurfaceToLayer(m, t, q = 0) {
            return this._CanvasToLayer(m,
                t, q, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _CanvasToLayer(m, t, q, u) {
            var r = this._runtime.GetParallaxXOrigin(),
                x = this._runtime.GetParallaxYOrigin();
            r = (this._layout.GetScrollX() - r) * this._parallaxX + r;
            x = (this._layout.GetScrollY() - x) * this._parallaxY + x;
            var z = this.GetNormalScale(),
                C = this._runtime.GetViewportWidth() / z;
            z = this._runtime.GetViewportHeight() / z;
            m = r - C / 2 + m / u;
            t = x - z / 2 + t / u;
            C = this.GetAngle();
            0 !== C && (m -= r, t -= x, u = Math.cos(C), C = Math.sin(C), z = m * u - t * C, t = t * u + m * C, m = z, m += r, t += x);
            0 !== q && (r = this._viewportZ0.midX(),
                x = this._viewportZ0.midY(), q = this.Get2DScaleFactorToZ(q), m = (m - r) / q + r, t = (t - x) / q + x);
            return [m, t]
        }
        CanvasCssToLayer_DefaultTransform(m, t) {
            const q = this._scale,
                u = this._scaleRate,
                r = this._parallaxX,
                x = this._parallaxY,
                z = this._angle;
            this._parallaxY = this._parallaxX = this._scaleRate = this._scale = 1;
            this._angle = 0;
            m = this.CanvasCssToLayer(m, t);
            this._scale = q;
            this._scaleRate = u;
            this._parallaxX = r;
            this._parallaxY = x;
            this._angle = z;
            return m
        }
        LayerToCanvasCss(m, t, q = 0) {
            return this._LayerToCanvas(m, t, q, this.GetDisplayScale())
        }
        LayerToDrawSurface(m,
            t, q = 0) {
            return this._LayerToCanvas(m, t, q, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _LayerToCanvas(m, t, q, u) {
            var r = this._runtime,
                x = this._layout;
            if (0 !== q) {
                var z = this._viewportZ0.midX(),
                    C = this._viewportZ0.midY();
                q = this.Get2DScaleFactorToZ(q);
                m = (m - z) * q + z;
                t = (t - C) * q + C
            }
            z = r.GetParallaxXOrigin();
            C = r.GetParallaxYOrigin();
            z = (x.GetScrollX() - z) * this._parallaxX + z;
            x = (x.GetScrollY() - C) * this._parallaxY + C;
            q = this.GetAngle();
            if (0 !== q) {
                m -= z;
                t -= x;
                C = Math.cos(-q);
                q = Math.sin(-q);
                const w = m * C - t * q;
                t = t * C + m * q;
                m = w;
                m += z;
                t +=
                    x
            }
            q = this.GetNormalScale();
            C = r.GetViewportWidth() / q;
            r = r.GetViewportHeight() / q;
            return [(m - (z - C / 2)) * u, (t - (x - r / 2)) * u]
        }
        _GetLayerToDrawSurfaceScale(m, t) {
            m *= this.GetRenderScale() * this.GetDevicePixelRatio();
            0 !== t && (m *= this.Get2DScaleFactorToZ(t));
            return m
        }
        _SaveToJson() {
            return {
                s: this.GetOwnScale(),
                a: this.GetOwnAngle(),
                vl: this._viewport.getLeft(),
                vt: this._viewport.getTop(),
                vr: this._viewport.getRight(),
                vb: this._viewport.getBottom(),
                v: this.IsVisible(),
                bc: this._backgroundColor.toJSON(),
                t: this.IsTransparent(),
                px: this.GetParallaxX(),
                py: this.GetParallaxY(),
                c: this._color.toJSON(),
                sr: this.GetScaleRate(),
                fx: this._effectList.SaveToJson(),
                cg: this._createdGlobalUids
            }
        }
        _LoadFromJson(m) {
            this._scale = m.s;
            this._angle = m.a;
            this._viewport.set(m.vl, m.vt, m.vr, m.vb);
            this._isVisible = !!m.v;
            this._backgroundColor.setFromJSON(m.bc);
            this._isTransparent = !!m.t;
            this._parallaxX = m.px;
            this._parallaxY = m.py;
            this._color.setFromJSON(m.c);
            this._scaleRate = m.sr;
            f.shallowAssignArray(this._createdGlobalUids, m.cg);
            f.shallowAssignArray(this._initialInstances, this._startupInitialInstances);
            const t = new Set(this._createdGlobalUids);
            let q = 0;
            for (let u = 0, r = this._initialInstances.length; u < r; ++u) t.has(this._initialInstances[u][2]) || (this._initialInstances[q] = this._initialInstances[u], ++q);
            f.truncateArray(this._initialInstances, q);
            this._effectList.LoadFromJson(m.fx);
            this._SortInstancesByLastCachedZIndex(!1);
            this.SetZIndicesChanged()
        }
        GetILayer() {
            return this._iLayer
        }
        SortAndAddSceneGraphInstancesByZIndex(m) {
            if (!this._instances.includes(m))
                if (m.HasChildren()) {
                    const t = [...m.allChildren()];
                    t.push(m);
                    t.sort((q, u) => {
                        q = q.GetWorldInfo().GetSceneGraphZIndex();
                        u = u.GetWorldInfo().GetSceneGraphZIndex();
                        return q - u
                    });
                    for (const q of t) this._AddInstance(q, !0)
                } else this._AddInstance(m, !0)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3Debugger,
        a = f.New(f.Rect),
        d = f.New(f.Rect),
        c = f.New(f.Rect);
    f.Layout = class extends f.DefendedBase {
        constructor(e, k, h) {
            super();
            this._layoutManager = e;
            this._runtime = e.GetRuntime();
            this._name = h[0];
            this._originalWidth = h[1];
            this._originalHeight = h[2];
            this._width = h[1];
            this._height = h[2];
            this._isUnboundedScrolling = !!h[3];
            this._eventSheetName = h[4];
            this._eventSheet = null;
            this._sid = h[5];
            this._index = k;
            this._scrollY = this._scrollX = 0;
            this._scale = 1;
            this._angle = 0;
            this._initialObjectClasses = new Set;
            this._textureLoadedTypes = new Set;
            this._textureLoadPendingPromises = new Set;
            this._createdInstances = [];
            this._initialNonWorld = [];
            this._layers = [];
            this._layersByName = new Map;
            this._layersBySid = new Map;
            this._effectList = f.New(f.EffectList, this, h[8]);
            this._curRenderTarget = null;
            this._persistData = {};
            this._isFirstVisit = !0;
            this._iLayout = new self.ILayout(this);
            this._userScriptDispatcher = f.New(f.Event.Dispatcher);
            for (const p of h[6]) e = f.Layer.Create(this, this._layers.length, p), this._layers.push(e), this._layersByName.set(e.GetName().toLowerCase(),
                e), this._layersBySid.set(e.GetSID(), e);
            for (const p of h[7]) {
                h = this._runtime.GetObjectClassByIndex(p[1]);
                if (!h) throw Error("missing nonworld object class");
                h.GetDefaultInstanceData() || h.SetDefaultInstanceData(p);
                this._initialNonWorld.push(p);
                this._AddInitialObjectClass(h)
            }
        }
        Release() {
            for (const e of this._layers) e.Release();
            f.clearArray(this._layers);
            this._textureLoadPendingPromises.clear();
            this._runtime = this._layoutManager = this._eventSheet = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetIndex() {
            return this._index
        }
        GetEffectList() {
            return this._effectList
        }
        GetMinLayerScale() {
            let e =
                this._layers[0].GetNormalScale();
            for (let k = 1, h = this._layers.length; k < h; ++k) {
                const p = this._layers[k];
                if (0 !== p.GetParallaxX() || 0 !== p.GetParallaxY()) e = Math.min(e, p.GetNormalScale())
            }
            return e
        }
        SetScrollX(e) {
            if (!this._isUnboundedScrolling) {
                const k = this._runtime.GetViewportWidth() * (1 / this.GetMinLayerScale()) / 2;
                e > this._width - k && (e = this._width - k);
                e < k && (e = k)
            }
            this._scrollX !== e && (this._scrollX = e, this._runtime.UpdateRender())
        }
        GetScrollX() {
            return this._scrollX
        }
        SetScrollY(e) {
            if (!this._isUnboundedScrolling) {
                const k =
                    this._runtime.GetViewportHeight() * (1 / this.GetMinLayerScale()) / 2;
                e > this._height - k && (e = this._height - k);
                e < k && (e = k)
            }
            this._scrollY !== e && (this._scrollY = e, this._runtime.UpdateRender())
        }
        GetScrollY() {
            return this._scrollY
        }
        BoundScrolling() {
            this.SetScrollX(this.GetScrollX());
            this.SetScrollY(this.GetScrollY())
        }
        GetScale() {
            return this._scale
        }
        SetScale(e) {
            e = +e;
            this._scale !== e && (this._scale = e, this.BoundScrolling())
        }
        SetAngle(e) {
            this._angle = f.clampAngle(e)
        }
        GetAngle() {
            return this._angle
        }
        GetWidth() {
            return this._width
        }
        SetWidth(e) {
            !isFinite(e) ||
                1 > e || (this._width = e)
        }
        GetHeight() {
            return this._height
        }
        SetHeight(e) {
            !isFinite(e) || 1 > e || (this._height = e)
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetLayers() {
            return this._layers
        }
        GetLayerCount() {
            return this._layers.length
        }
        GetLayer(e) {
            return "number" === typeof e ? this.GetLayerByIndex(e) : this.GetLayerByName(e.toString())
        }
        GetLayerByIndex(e) {
            e = f.clamp(Math.floor(e), 0, this._layers.length - 1);
            return this._layers[e]
        }
        GetLayerByName(e) {
            return this._layersByName.get(e.toLowerCase()) || null
        }
        GetLayerBySID(e) {
            return this._layersBySid.get(e) ||
                null
        }
        HasOpaqueBottomLayer() {
            for (const e of this._layers)
                if (e.ShouldDraw()) return e._IsOpaque();
            return !1
        }
        IsFirstVisit() {
            return this._isFirstVisit
        }
        _GetInitialObjectClasses() {
            return [...this._initialObjectClasses]
        }
        _AddInitialObjectClass(e) {
            if (e.IsInContainer())
                for (const k of e.GetContainer().GetObjectTypes()) this._initialObjectClasses.add(k);
            else this._initialObjectClasses.add(e)
        }
        _GetTextureLoadedObjectTypes() {
            return [...this._textureLoadedTypes]
        }
        _Load(e, k) {
            if (e === this || !k) return Promise.resolve();
            e &&
                (f.CopySet(this._textureLoadedTypes, e._textureLoadedTypes), e._textureLoadedTypes.clear());
            e = [];
            for (const h of this._initialObjectClasses) this._textureLoadedTypes.has(h) || (e.push(h.LoadTextures(k)), this._textureLoadedTypes.add(h));
            return Promise.all(e)
        }
        async MaybeLoadTexturesFor(e) {
            if (e.IsFamily()) throw Error("cannot load textures for family");
            var k = this._runtime.GetWebGLRenderer();
            !k || k.IsContextLost() || this._textureLoadedTypes.has(e) || (this._textureLoadedTypes.add(e), k = e.LoadTextures(k), this._AddPendingTextureLoadPromise(k),
                await k, e.OnDynamicTextureLoadComplete(), this._runtime.UpdateRender())
        }
        _AddPendingTextureLoadPromise(e) {
            this._textureLoadPendingPromises.add(e);
            e.then(() => this._textureLoadPendingPromises.delete(e)).catch(() => this._textureLoadPendingPromises.delete(e))
        }
        WaitForPendingTextureLoadsToComplete() {
            return Promise.all([...this._textureLoadPendingPromises])
        }
        MaybeUnloadTexturesFor(e) {
            if (e.IsFamily() || 0 < e.GetInstanceCount()) throw Error("cannot unload textures");
            const k = this._runtime.GetWebGLRenderer();
            k && this._textureLoadedTypes.has(e) &&
                (this._textureLoadedTypes.delete(e), e.ReleaseTextures(k))
        }
        _Unload(e, k) {
            if (e !== this && k)
                for (const h of this._textureLoadedTypes) h.IsGlobal() || e._initialObjectClasses.has(h) || (h.ReleaseTextures(), this._textureLoadedTypes.delete(h))
        }
        _OnWebGLContextLost() {
            this._textureLoadedTypes.clear()
        }
        async _StartRunning(e) {
            const k = this._runtime,
                h = this._layoutManager,
                p = k.GetEventSheetManager();
            this._eventSheetName && (this._eventSheet = p.GetEventSheetByName(this._eventSheetName), this._eventSheet._UpdateDeepIncludes());
            h._SetMainRunningLayout(this);
            this._width = this._originalWidth;
            this._height = this._originalHeight;
            this._scrollX = k.GetOriginalViewportWidth() / 2;
            this._scrollY = k.GetOriginalViewportHeight() / 2;
            this.BoundScrolling();
            this._MoveGlobalObjectsToThisLayout(e);
            this._runtime.SetUsingCreatePromises(!0);
            this._CreateInitialInstances();
            this._isFirstVisit || this._CreatePersistedInstances();
            this._CreateAndLinkContainerInstances(this._createdInstances);
            this._CreateInitialNonWorldInstances();
            h.ClearPendingChangeLayout();
            k.FlushPendingInstances();
            this._runtime.SetUsingCreatePromises(!1);
            const n = this._runtime.GetCreatePromises();
            await Promise.all(n);
            f.clearArray(n);
            if (!k.IsLoadingState()) {
                for (const m of this._createdInstances) m.SetupInitialSceneGraphConnections();
                for (const m of this._createdInstances) m._TriggerOnCreated()
            }
            f.clearArray(this._createdInstances);
            await Promise.all([...this._initialObjectClasses].map(m => m.PreloadTexturesWithInstances(this._runtime.GetWebGLRenderer())));
            e && (k.Dispatcher().dispatchEvent(new f.Event("beforefirstlayoutstart")),
                await k.DispatchUserScriptEventAsyncWait(new f.Event("beforeprojectstart")));
            await this.DispatchUserScriptEventAsyncWait(new f.Event("beforelayoutstart"));
            k.IsLoadingState() || await k.TriggerAsync(f.Plugins.System.Cnds.OnLayoutStart, null, null);
            await this.DispatchUserScriptEventAsyncWait(new f.Event("afterlayoutstart"));
            e && (k.Dispatcher().dispatchEvent(new f.Event("afterfirstlayoutstart")), await k.DispatchUserScriptEventAsyncWait(new f.Event("afterprojectstart")));
            p._RunQueuedTriggers(h);
            await this.WaitForPendingTextureLoadsToComplete();
            this._isFirstVisit = !1
        }
        _MoveGlobalObjectsToThisLayout(e) {
            for (const h of this._runtime.GetAllObjectClasses())
                if (!h.IsFamily() && h.IsWorldType())
                    for (const p of h.GetInstances()) {
                        const n = p.GetWorldInfo();
                        var k = n.GetLayer();
                        k = f.clamp(k.GetIndex(), 0, this._layers.length - 1);
                        k = this._layers[k];
                        n._SetLayer(k);
                        k._MaybeAddInstance(p)
                    }
            if (!e)
                for (const h of this._layers) h._SortInstancesByLastCachedZIndex(!1)
        }
        _CreateInitialInstances() {
            for (const e of this._layers) e.CreateInitialInstances(this._createdInstances), e.UpdateViewport(),
                e._Start()
        }
        _CreatePersistedInstances() {
            let e = !1;
            for (const [h, p] of Object.entries(this._persistData)) {
                const n = this._runtime.GetObjectClassBySID(parseInt(h, 10));
                if (n && !n.IsFamily() && n.HasPersistBehavior()) {
                    for (const m of p) {
                        var k = null;
                        if (n.IsWorldType() && (k = this.GetLayerBySID(m.w.l), !k)) continue;
                        k = this._runtime.CreateInstanceFromData(n, k, !1, 0, 0, !0);
                        k.LoadFromJson(m);
                        e = !0;
                        this._createdInstances.push(k)
                    }
                    f.clearArray(p)
                }
            }
            for (const h of this._layers) h._SortInstancesByLastCachedZIndex(!0), h.SetZIndicesChanged();
            e && (this._runtime.FlushPendingInstances(), this._runtime._RefreshUidMap())
        }
        _CreateAndLinkContainerInstances(e) {
            for (const h of e) {
                if (!h.IsInContainer()) continue;
                const p = h.GetWorldInfo(),
                    n = h.GetIID();
                for (const m of h.GetObjectClass().GetContainer().objectTypes())
                    if (m !== h.GetObjectClass()) {
                        var k = m.GetInstances();
                        k.length > n ? h._AddSibling(k[n]) : (k = p ? this._runtime.CreateInstanceFromData(m, p.GetLayer(), !0, p.GetX(), p.GetY(), !0) : this._runtime.CreateInstanceFromData(m, null, !0, 0, 0, !0), this._runtime.FlushPendingInstances(),
                            m._UpdateIIDs(), h._AddSibling(k), e.push(k))
                    }
            }
        }
        _CreateInitialNonWorldInstances() {
            for (const e of this._initialNonWorld) this._runtime.GetObjectClassByIndex(e[1]).IsInContainer() || this._runtime.CreateInstanceFromData(e, null, !0)
        }
        _CreateGlobalNonWorlds() {
            const e = [],
                k = this._initialNonWorld;
            let h = 0;
            for (let p = 0, n = k.length; p < n; ++p) {
                const m = k[p],
                    t = this._runtime.GetObjectClassByIndex(m[1]);
                t.IsGlobal() ? t.IsInContainer() && t.GetContainer().HasAnyWorldType() || e.push(this._runtime.CreateInstanceFromData(m, null, !0)) :
                    (k[h] = m, ++h)
            }
            f.truncateArray(k, h);
            this._runtime.FlushPendingInstances();
            this._CreateAndLinkContainerInstances(e)
        }
        RecreateInitialObjects(e, k, h, p, n, m) {
            if (h) return h.RecreateInitialObjects(e, k, p, n, m);
            h = [];
            for (const t of this._layers) h.push(t.RecreateInitialObjects(e, k, p, n, m));
            return h.flat()
        }
        async _StopRunning() {
            const e = this._layoutManager;
            this._runtime.IsLoadingState() || await this._runtime.TriggerAsync(f.Plugins.System.Cnds.OnLayoutEnd, null, null);
            e.SetIsEndingLayout(!0);
            this._runtime.GetEventSheetManager().ClearAllScheduledWaits();
            this._isFirstVisit || this._SavePersistData();
            for (const k of this._layers) k._End();
            for (const k of this._runtime.GetAllObjectClasses())
                if (!(k.IsGlobal() || k.IsWorldType() || k.GetPlugin().IsSingleGlobal() || k.IsFamily())) {
                    for (const h of k.GetInstances()) this._runtime.DestroyInstance(h);
                    this._runtime.FlushPendingInstances()
                }
            e.SetIsEndingLayout(!1);
            e.GetMainRunningLayout() === this && e._SetMainRunningLayout(null)
        }
        _SaveInstanceToPersist(e) {
            const k = e.GetObjectClass().GetSID().toString();
            this._persistData.hasOwnProperty(k) ||
                (this._persistData[k] = []);
            this._persistData[k].push(e.SaveToJson())
        }
        _SavePersistData() {
            for (const e of this._layers) {
                e._UpdateZIndices();
                for (const k of e._GetInstances()) {
                    const h = k.GetObjectClass();
                    !h.IsGlobal() && h.HasPersistBehavior() && this._SaveInstanceToPersist(k)
                }
            }
        }
        ResetPersistData() {
            this._persistData = {};
            this._isFirstVisit = !0
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        UsesOwnTexture() {
            return "low" === this._runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality() || this._runtime.UsesAnyBackgroundBlending() ||
                "low-latency" === this._runtime.GetCompositingMode() || this._effectList.HasAnyActiveEffect() || this._runtime.Uses3DFeatures()
        }
        _CanFastPathDrawLayout(e) {
            return 0 === e.length ? !0 : 2 <= e.length ? !1 : !e[0].GetShaderProgram().MustPreDraw()
        }
        Draw(e) {
            var k = this._runtime.GetCanvasManager();
            const h = this.UsesOwnTexture();
            var p = null;
            h ? ("low-latency" !== this._runtime.GetCompositingMode() && (e.SetRenderTarget(null), e.ClearRgba(0, 0, 0, 0)), p = {
                sampling: this._runtime.GetSampling(),
                readback: this._runtime.UsesAnyBackgroundBlending() ||
                    this._effectList.HasAnyActiveEffect()
            }, "low" === k.GetCurrentFullscreenScalingQuality() && (p.width = k.GetDrawWidth(), p.height = k.GetDrawHeight()), p = this._runtime.GetAdditionalRenderTarget(p), e.SetRenderTarget(p)) : e.SetRenderTarget(null);
            this.HasOpaqueBottomLayer() || e.ClearRgba(0, 0, 0, 0);
            this._runtime.Uses3DFeatures() && e.ClearDepth();
            this._curRenderTarget = p;
            k = !0;
            for (const n of this._layers) n.UpdateViewport(), n.ShouldDraw() && (n.Draw(e, p, k), k = !1);
            h && (e.SetDepthEnabled(!1), this._DrawLayoutOwnTextureToRenderTarget(e,
                p));
            this._curRenderTarget = null
        }
        _DrawLayoutOwnTextureToRenderTarget(e, k) {
            const h = this._effectList.GetActiveEffectTypes(),
                p = this._runtime;
            if (this._CanFastPathDrawLayout(h)) {
                e.SetRenderTarget(null);
                if (1 === h.length) {
                    var n = h[0];
                    const m = n.GetShaderProgram();
                    e.SetProgram(m);
                    d.set(0, 0, 1, 1);
                    c.set(0, 0, p.GetViewportWidth(), p.GetViewportHeight());
                    n = this._effectList.GetEffectParametersForIndex(n.GetIndex());
                    e.SetProgramParameters(null, a, d, d, c, 1 / p.GetDrawWidth(), 1 / p.GetDrawHeight(), this.GetScale(), this.GetAngle(),
                        p.GetGameTime(), n);
                    m.IsAnimated() && p.UpdateRender()
                } else e.SetTextureFillMode();
                0 === h.length ? e.CopyRenderTarget(k) : (e.SetAlphaBlend(), e.ResetColor(), e.DrawRenderTarget(k));
                e.InvalidateRenderTarget(k);
                p.ReleaseAdditionalRenderTarget(k)
            } else f.RenderEffectChain(e, p, this, null, h)
        }
        _SaveToJson() {
            const e = {
                sx: this.GetScrollX(),
                sy: this.GetScrollY(),
                s: this.GetScale(),
                a: this.GetAngle(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                fv: this._isFirstVisit,
                persist: this._persistData,
                fx: this._effectList.SaveToJson(),
                layers: {}
            };
            for (const k of this._layers) e.layers[k.GetSID().toString()] = k._SaveToJson();
            return e
        }
        _LoadFromJson(e) {
            this._scrollX = e.sx;
            this._scrollY = e.sy;
            this._scale = e.s;
            this._angle = e.a;
            this._width = e.w;
            this._height = e.h;
            this._isFirstVisit = !!e.fv;
            this._persistData = e.persist;
            this._effectList.LoadFromJson(e.fx);
            for (const [k, h] of Object.entries(e.layers)) e = parseInt(k, 10), (e = this.GetLayerBySID(e)) && e._LoadFromJson(h)
        }
        GetILayout() {
            return this._iLayout
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(e) {
            e.layout =
                this.GetILayout();
            var k = this._runtime;
            (k = k.IsDebug() && !k.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(e);
            k && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(e) {
            e.layout = this.GetILayout();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(e)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.LayoutManager = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allLayouts = [];
            this._layoutsByName = new Map;
            this._layoutsBySid = new Map;
            this._mainRunningLayout = null;
            this._runningSubLayouts = [];
            this._firstLayout = null;
            this._isEndingLayout = 0;
            this._pendingChangeLayout = null
        }
        Release() {
            this._pendingChangeLayout = this._firstLayout = this._mainRunningLayout = this._runtime = null;
            f.clearArray(this._allLayouts);
            this._layoutsByName.clear();
            this._layoutsBySid.clear();
            f.clearArray(this._runningSubLayouts)
        }
        Create(b) {
            b =
                f.New(f.Layout, this, this._allLayouts.length, b);
            this._allLayouts.push(b);
            this._layoutsByName.set(b.GetName().toLowerCase(), b);
            this._layoutsBySid.set(b.GetSID(), b)
        }
        GetRuntime() {
            return this._runtime
        }
        SetFirstLayout(b) {
            this._firstLayout = b
        }
        GetFirstLayout() {
            if (this._firstLayout) return this._firstLayout;
            if (this._allLayouts.length) return this._allLayouts[0];
            throw Error("no first layout");
        }
        GetLayoutByName(b) {
            return this._layoutsByName.get(b.toLowerCase()) || null
        }
        GetLayoutBySID(b) {
            return this._layoutsBySid.get(b) ||
                null
        }
        GetLayoutByIndex(b) {
            b = f.clamp(Math.floor(b), 0, this._allLayouts.length - 1);
            return this._allLayouts[b]
        }
        GetLayout(b) {
            return "number" === typeof b ? this.GetLayoutByIndex(b) : this.GetLayoutByName(b.toString())
        }
        GetAllLayouts() {
            return this._allLayouts
        }
        _SetMainRunningLayout(b) {
            this._mainRunningLayout = b
        }
        GetMainRunningLayout() {
            return this._mainRunningLayout
        }
        _AddRunningSubLayout(b) {
            if (this._runningSubLayouts.includes(b)) throw Error("layout already running");
            this._runningSubLayouts.push(b)
        }
        _RemoveRunningSubLayout(b) {
            b =
                this._runningSubLayouts.indexOf(b);
            if (-1 === b) throw Error("layout not running");
            this._runningSubLayouts.splice(b, 1)
        }* runningLayouts() {
            this._mainRunningLayout && (yield this._mainRunningLayout);
            this._runningSubLayouts.length && (yield* this._runningSubLayouts)
        }
        IsLayoutRunning(b) {
            return this._mainRunningLayout === b || this._runningSubLayouts.includes(b)
        }
        SetIsEndingLayout(b) {
            if (b) this._isEndingLayout++;
            else {
                if (0 >= this._isEndingLayout) throw Error("already unset");
                this._isEndingLayout--
            }
        }
        IsEndingLayout() {
            return 0 <
                this._isEndingLayout
        }
        ChangeMainLayout(b) {
            this._pendingChangeLayout = b
        }
        ClearPendingChangeLayout() {
            this._pendingChangeLayout = null
        }
        IsPendingChangeMainLayout() {
            return !!this._pendingChangeLayout
        }
        GetPendingChangeMainLayout() {
            return this._pendingChangeLayout
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor() {
            this.runtime = this.renderer = null;
            this.surfaceHeight = this.surfaceWidth = this.drawHeight = this.drawWidth = 0;
            this.layoutRect = new f.Rect;
            this.rcTexBounce = new f.Rect;
            this.rcTexDest = new f.Rect;
            this.rcTexOrigin = new f.Rect;
            this.screenRect = new f.Rect;
            this.clearRect = new f.Rect;
            this.srcRect = new f.Rect;
            this.fxTex = [null, null];
            this.fxIndex = 0;
            this.otherFxIndex = 1;
            this.layerAngle = this.layerScale = this.boxExtendVertical = this.boxExtendHorizontal = 0;
            this.renderTarget = this.wi = this.inst =
                this.layer = this.layout = null;
            this.didChangeTransform = this.postDraw = this.preDraw = !1;
            this.opts = null
        }
        Clear() {
            this.opts = this.renderTarget = this.wi = this.inst = this.layer = this.layout = this.runtime = this.renderer = null
        }
        ShouldPreDraw(r) {
            r = r.GetShaderProgram();
            if (r.MustPreDraw()) return !0;
            if (this.inst) return r.UsesDest() && (0 !== this.wi.GetAngle() || 0 > this.wi.GetWidth() || 0 > this.wi.GetHeight()) || 0 !== this.boxExtendHorizontal || 0 !== this.boxExtendVertical || !this.wi.HasDefaultColor() || this.inst.MustPreDraw();
            if (this.layer) return !this.layer.HasDefaultColor()
        }
        ShouldPostDraw(r) {
            r =
                r.GetShaderProgram();
            return r.UsesDest() || r.UsesCrossSampling() || this.layout && "low" === this.runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality()
        }
        GetEffectRenderTarget(r) {
            if (0 !== r && 1 !== r) throw Error("invalid effect target");
            const x = this.fxTex;
            if (!x[r]) {
                var z = this.runtime;
                const C = z.GetCanvasManager();
                z = {
                    sampling: z.GetSampling()
                };
                "low" === C.GetCurrentFullscreenScalingQuality() && (z.width = C.GetDrawWidth(), z.height = C.GetDrawHeight());
                x[r] = C.GetAdditionalRenderTarget(z)
            }
            return x[r]
        }
        ReleaseEffectRenderTargets() {
            const r =
                this.fxTex,
                x = this.runtime.GetCanvasManager();
            r[0] && (x.ReleaseAdditionalRenderTarget(r[0]), r[0] = null);
            r[1] && (x.ReleaseAdditionalRenderTarget(r[1]), r[1] = null)
        }
    }
    const a = [];
    let d = 0;

    function c() {
        d === a.length && a.push(new b);
        return a[d++]
    }

    function e(r) {
        r.ReleaseEffectRenderTargets();
        r.Clear();
        d--
    }
    const k = new f.Quad;
    let h = !1;
    async function p(r, x, z) {
        x = await f.Gfx.WebGLRenderTarget.DebugReadPixelsToBlob(x, z);
        x = URL.createObjectURL(x);
        console.log("[FX] " + r + " " + (z ? "" : " [to display]") + ": ", x)
    }
    f.RenderEffectChain =
        function(r, x, z, C, w, B) {
            const F = c();
            F.renderer = r;
            F.runtime = x;
            if (z instanceof f.Instance) F.inst = z, F.wi = F.inst.GetWorldInfo();
            else if (z instanceof f.Layer) F.layer = z;
            else if (z instanceof f.Layout) F.layout = z;
            else throw Error("invalid effects object");
            z = x.GetCanvasManager();
            F.renderTarget = C;
            F.drawWidth = z.GetDrawWidth();
            F.drawHeight = z.GetDrawHeight();
            F.surfaceWidth = F.drawWidth;
            F.surfaceHeight = F.drawHeight;
            F.fxIndex = 0;
            F.otherFxIndex = 1;
            F.boxExtendHorizontal = 0;
            F.boxExtendVertical = 0;
            F.screenRect.set(0, 0, F.drawWidth,
                F.drawHeight);
            F.clearRect.set(0, 0, F.drawWidth, F.drawHeight);
            F.didChangeTransform = !1;
            F.opts = B;
            F.inst ? (C = F.wi, F.layerScale = C.GetLayer().GetRenderScale(), F.layerAngle = C.GetLayer().GetAngle(), F.layoutRect.copy(C.GetBoundingBox())) : F.layer ? (C = F.layer, F.layerScale = C.GetRenderScale(), F.layerAngle = C.GetAngle(), F.layoutRect.copy(C.GetViewport())) : (C = F.layout, F.layerScale = C.GetScale(), F.layerAngle = C.GetAngle(), F.layoutRect.set(0, 0, F.drawWidth, F.drawHeight));
            F.inst ? n(F, w) : (F.rcTexBounce.set(0, 0, F.drawWidth /
                F.surfaceWidth, F.drawHeight / F.surfaceHeight), F.rcTexDest.copy(F.rcTexBounce), F.rcTexOrigin.copy(F.rcTexBounce), F.rcTexBounce.swapTopBottom(), F.rcTexDest.swapTopBottom(), F.rcTexOrigin.swapTopBottom());
            r.SetAlphaBlend();
            r.ResetColor();
            r.SetBaseZ(0);
            r.SetCurrentZ(0);
            F.preDraw = F.ShouldPreDraw(w[0]);
            F.preDraw && m(F);
            r.ResetColor();
            C = w.length - 1;
            F.postDraw = F.ShouldPostDraw(w[C]);
            for (let J = 0, O = w.length; J < O; ++J) B = w[J], z = B.GetShaderProgram(), r.SetProgram(z), z.IsAnimated() && x.UpdateRender(), 0 !== J || F.preDraw ?
                (r.SetCopyBlend(), q(F, B, J === C && !F.postDraw, J)) : t(F, B), 0 === F.fxIndex ? (F.fxIndex = 1, F.otherFxIndex = 0) : (F.fxIndex = 0, F.otherFxIndex = 1);
            F.postDraw && u(F, w);
            r = F.didChangeTransform;
            e(F);
            h = !1;
            return r
        };

    function n(r, x) {
        for (let I = 0, P = x.length; I < P; ++I) {
            var z = x[I].GetShaderProgram();
            r.boxExtendHorizontal += z.GetBoxExtendHorizontal();
            r.boxExtendVertical += z.GetBoxExtendVertical()
        }
        var C = r.wi;
        x = C.GetLayer();
        z = x.GetAngle();
        var w = C.GetBoundingBox();
        C = C.GetTotalZElevation();
        let [B, F] = x.LayerToDrawSurface(w.getLeft(), w.getTop(),
            C), [J, O] = x.LayerToDrawSurface(w.getRight(), w.getBottom(), C);
        if (0 !== z) {
            const [I, P] = x.LayerToDrawSurface(w.getRight(), w.getTop(), C), [Q, T] = x.LayerToDrawSurface(w.getLeft(), w.getBottom(), C);
            x = Math.min(B, J, I, Q);
            J = Math.max(B, J, I, Q);
            B = x;
            x = Math.min(F, O, P, T);
            O = Math.max(F, O, P, T);
            F = x
        }
        x = r.screenRect;
        z = r.rcTexOrigin;
        w = r.rcTexDest;
        C = r.clearRect;
        const G = r.rcTexBounce;
        x.set(B, F, J, O);
        x.shuntY(r.drawHeight);
        z.copy(x);
        z.divide(r.surfaceWidth, r.surfaceHeight);
        z.swapTopBottom();
        x.inflate(r.boxExtendHorizontal, r.boxExtendVertical);
        w.copy(x);
        w.divide(r.surfaceWidth, r.surfaceHeight);
        w.swapTopBottom();
        C.copy(x);
        C.roundOuter();
        C.inflate(r.boxExtendHorizontal + 1, r.boxExtendVertical + 1);
        x.clamp(0, 0, r.drawWidth, r.drawHeight);
        C.clamp(0, 0, r.drawWidth, r.drawHeight);
        G.copy(x);
        G.divide(r.surfaceWidth, r.surfaceHeight);
        G.swapTopBottom()
    }

    function m(r) {
        const x = r.renderer;
        x.SetTextureFillMode();
        const z = r.GetEffectRenderTarget(r.fxIndex);
        x.SetRenderTarget(z);
        var C = r.opts;
        C && C.preTransform && C.preTransform();
        x.ClearRect2(r.clearRect);
        r.inst ? (x.SetColor(r.wi.GetPremultipliedColor()),
            x.SetCurrentZ(r.wi.GetTotalZElevation()), r.inst.Draw(x), x.SetCurrentZ(0)) : (C = (r.layer || r.layout).GetRenderTarget(), r.layer ? x.SetColor(r.layer.GetPremultipliedColor()) : x.ResetColor(), x.DrawRenderTarget(C), x.InvalidateRenderTarget(C), r.runtime.GetCanvasManager().ReleaseAdditionalRenderTarget(C));
        r.rcTexDest.clampFlipped(0, 1, 1, 0);
        r.fxIndex = 1;
        r.otherFxIndex = 0;
        h && p("Pre-draw", x, z)
    }

    function t(r, x) {
        const z = r.renderer,
            C = r.runtime,
            w = r.GetEffectRenderTarget(r.fxIndex);
        z.SetRenderTarget(w);
        var B = r.opts;
        B && B.preTransform &&
            B.preTransform();
        z.ClearRect2(r.clearRect);
        if (r.inst) {
            const [F, J] = r.inst.GetCurrentSurfaceSize();
            (B = r.inst.GetCurrentTexRect()) ? r.srcRect.copy(B): r.srcRect.set(0, 0, 0, 0);
            x = r.wi.GetInstanceEffectList().GetEffectParametersForIndex(x.GetIndex());
            z.SetProgramParameters(r.renderTarget, r.rcTexDest, r.srcRect, r.srcRect, r.layoutRect, 1 / F, 1 / J, r.layerScale, r.layerAngle, C.GetGameTime(), x);
            z.SetCurrentZ(r.wi.GetTotalZElevation());
            r.inst.Draw(z);
            z.SetCurrentZ(0);
            r.rcTexDest.clampFlipped(0, 1, 1, 0);
            r.screenRect.shuntY(r.drawHeight)
        } else x =
            (r.layer || r.layout).GetEffectList().GetEffectParametersForIndex(x.GetIndex()), z.SetProgramParameters(r.renderTarget, r.rcTexDest, r.rcTexBounce, r.rcTexOrigin, r.layoutRect, 1 / r.drawWidth, 1 / r.drawHeight, r.layerScale, r.layerAngle, C.GetGameTime(), x), r = (r.layer || r.layout).GetRenderTarget(), h && p("Layer target", z, r), z.DrawRenderTarget(r), z.InvalidateRenderTarget(r), C.GetCanvasManager().ReleaseAdditionalRenderTarget(r);
        h && p("First bounce", z, w)
    }

    function q(r, x, z, C) {
        const w = r.renderer,
            B = r.runtime;
        0 === C && r.preDraw &&
            r.inst && r.screenRect.shuntY(r.drawHeight);
        z ? (r.inst ? w.SetBlendMode(r.wi.GetBlendMode()) : r.layer && w.SetBlendMode(r.layer.GetBlendMode()), z = r.renderTarget, w.SetRenderTarget(z)) : (z = r.GetEffectRenderTarget(r.fxIndex), w.SetRenderTarget(z), w.ClearRect2(r.clearRect));
        x = r.inst ? r.wi.GetInstanceEffectList().GetEffectParametersForIndex(x.GetIndex()) : (r.layer || r.layout).GetEffectList().GetEffectParametersForIndex(x.GetIndex());
        w.SetProgramParameters(r.renderTarget, r.rcTexDest, r.rcTexBounce, r.rcTexOrigin, r.layoutRect,
            1 / r.surfaceWidth, 1 / r.surfaceHeight, r.layerScale, r.layerAngle, B.GetGameTime(), x);
        x = r.GetEffectRenderTarget(r.otherFxIndex);
        w.SetTexture(x.GetTexture());
        B.GetCanvasManager().SetDeviceTransform(w);
        r.didChangeTransform = !0;
        k.setFromRect(r.screenRect);
        w.Quad3(k, r.rcTexBounce);
        r.inst || w.InvalidateRenderTarget(x);
        h && p("Bounce " + C, w, z)
    }

    function u(r, x) {
        x = r.renderer;
        if (r.layout) x.SetTextureFillMode(), x.SetRenderTarget(r.renderTarget), r = r.GetEffectRenderTarget(r.otherFxIndex), x.CopyRenderTarget(r), x.InvalidateRenderTarget(r);
        else {
            var z = r.runtime.GetCanvasManager();
            "low" === z.GetCurrentFullscreenScalingQuality() ? (x.SetTextureFillMode(), z.SetDeviceTransform(x, z.GetDrawWidth(), z.GetDrawHeight()), r.didChangeTransform = !0) : x.SetDeviceTransformTextureFillMode();
            r.inst ? x.SetBlendMode(r.wi.GetBlendMode()) : r.layer && x.SetBlendMode(r.layer.GetBlendMode());
            x.SetRenderTarget(r.renderTarget);
            z = r.GetEffectRenderTarget(r.otherFxIndex);
            x.SetTexture(z.GetTexture());
            k.setFromRect(r.screenRect);
            x.Quad3(k, r.rcTexBounce);
            r.inst || x.InvalidateRenderTarget(z);
            h && p("Post-draw", x, r.renderTarget)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = /<(.+?)>/g;
    f.TimelineManager = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a;
            this._timelineDataManager = f.New(f.TimelineDataManager);
            this._pluginInstance = null;
            this._timelines = [];
            this._timelinesByName = new Map;
            this._objectClassToTimelineMap = new Map;
            this._timelinesCreatedByTemplate = new Map;
            this._scheduledTimelines = [];
            this._playingTimelines = [];
            this._isTickingTimelines = this._changingLayout = this._hasRuntimeListeners = !1;
            this._tickFunc = () => this._OnTick();
            this._tick2Func =
                () => this._OnTick2();
            this._beforeLayoutChange = () => this._OnBeforeChangeLayout();
            this._layoutChange = () => this._OnAfterChangeLayout();
            this._instanceDestroy = d => this._OnInstanceDestroy(d.instance);
            this._afterLoad = d => this._OnAfterLoad();
            this._destroyedWhileLoadingState = []
        }
        Release() {
            this.RemoveRuntimeListeners();
            this._afterLoad = this._instanceDestroy = this._layoutChange = this._beforeLayoutChange = this._tick2Func = this._tickFunc = null;
            for (const a of this._timelines) a.Stop(), a.Release();
            f.clearArray(this._timelines);
            this._timelines = null;
            this._timelineDataManager.Release();
            this._timelineDataManager = null;
            f.clearArray(this._scheduledTimelines);
            this._scheduledTimelines = null;
            f.clearArray(this._playingTimelines);
            this._playingTimelines = null;
            this._timelinesByName.clear();
            this._timelinesByName = null;
            this._objectClassToTimelineMap.clear();
            this._objectClassToTimelineMap = null;
            this._timelinesCreatedByTemplate.clear();
            this._timelinesCreatedByTemplate = null;
            f.clearArray(this._destroyedWhileLoadingState);
            this._runtime = this._destroyedWhileLoadingState =
                null
        }
        AddRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.addEventListener("pretick", this._tickFunc);
            a.addEventListener("tick2", this._tick2Func);
            a.addEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.addEventListener("layoutchange", this._layoutChange);
            a.addEventListener("instancedestroy", this._instanceDestroy);
            a.addEventListener("afterload", this._afterLoad)
        }
        RemoveRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.removeEventListener("pretick", this._tickFunc);
            a.removeEventListener("tick2",
                this._tick2Func);
            a.removeEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.removeEventListener("layoutchange", this._layoutChange);
            a.removeEventListener("instancedestroy", this._instanceDestroy);
            a.removeEventListener("afterload", this._afterLoad)
        }
        Create(a) {
            this._timelineDataManager.Add(a);
            a = f.TimelineState.CreateInitial(a, this);
            this.Add(a);
            this.SetTimelineObjectClassesToMap(a);
            this._timelinesCreatedByTemplate.set(a.GetName(), 0)
        }
        CreateFromTemplate(a) {
            var d = this.GetTimelineDataManager();
            a =
                a.GetTemplateName();
            d = d.Get(a);
            d = f.TimelineState.CreateFromTemplate(`${a}:${this._timelinesCreatedByTemplate.get(a)}`, d, this);
            this._IncreaseTemplateTimelinesCount(a);
            this.Add(d);
            return d
        }
        _IncreaseTemplateTimelinesCount(a) {
            this._timelinesCreatedByTemplate.set(a, this._timelinesCreatedByTemplate.get(a) + 1)
        }
        _SetCreatedTemplateTimelinesCount() {
            for (const a of this._timelines) {
                if (a.IsTemplate()) continue;
                const d = a.GetTemplateName();
                this._IncreaseTemplateTimelinesCount(d)
            }
        }
        _ClearCreatedTemplateTimelinesCount() {
            for (const a of this._timelinesCreatedByTemplate.keys()) this._timelinesCreatedByTemplate.set(a,
                0)
        }
        Add(a) {
            this._timelines.push(a);
            this._timelinesByName.set(a.GetName().toLowerCase(), a)
        }
        Remove(a) {
            a.IsTemplate() || (f.arrayFindRemove(this._timelines, a), f.arrayFindRemove(this._scheduledTimelines, a), f.arrayFindRemove(this._playingTimelines, a), this._timelinesByName.delete(a.GetName().toLowerCase()), this.RemoveTimelineFromObjectClassMap(a), a.IsReleased() || a.Release())
        }
        Trigger(a) {
            this._runtime.Trigger(a, this._pluginInstance, null)
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimelineDataManager() {
            return this._timelineDataManager
        }
        SetPluginInstance(a) {
            this._pluginInstance =
                a
        }
        GetPluginInstance() {
            return this._pluginInstance
        }* GetTimelines() {
            for (const a of this._timelines) yield a
        }
        SetTimelineObjectClassToMap(a, d) {
            this._objectClassToTimelineMap.has(a) || this._objectClassToTimelineMap.set(a, new Set);
            this._objectClassToTimelineMap.get(a).add(d)
        }
        SetTimelineObjectClassesToMap(a) {
            for (const d of a.GetObjectClasses()) this.SetTimelineObjectClassToMap(d, a)
        }
        RemoveTimelineFromObjectClassMap(a) {
            for (const [d, c] of this._objectClassToTimelineMap.entries()) c.has(a) && (c.delete(a), 0 === c.size &&
                this._objectClassToTimelineMap.delete(d))
        }
        GetTimelinesForObjectClass(a) {
            if (this._objectClassToTimelineMap.has(a)) return this._objectClassToTimelineMap.get(a)
        }
        GetTimelineOfTemplateForInstances(a, d) {
            if (d)
                for (const c of this._timelines)
                    if (d.every(e => c.HasTrackInstance(e.instance, e.trackId)) && c.GetName().includes(a.GetName())) return c
        }
        GetTimelineByName(a) {
            return this._timelinesByName.get(a.toLowerCase()) || null
        }
        GetScheduledOrPlayingTimelineByName(a) {
            for (const d of this._scheduledTimelines)
                if (d.GetName() ===
                    a) return d;
            for (const d of this._playingTimelines)
                if (d.GetName() === a) return d;
            return null
        }* GetTimelinesByName(a) {
            if (b.test(a)) {
                b.lastIndex = 0;
                let c;
                var d = new Set;
                do
                    if (c = b.exec(a)) {
                        const e = c[1].split(",");
                        for (const k of e) d.add(k)
                    }
                while (c);
                for (const e of d.values())(a = this.GetTimelineByName(e)) && (yield a);
                d.clear()
            } else(d = this.GetTimelineByName(a)) && (yield d)
        }* GetTimelinesByTags(a) {
            for (const d of this._timelines) d.HasTags(a) && (yield d)
        }
        AddScheduledTimeline(a) {
            this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a);
            this._MaybeEnableRuntimeListeners()
        }
        RemovePlayingTimeline(a) {
            f.arrayFindRemove(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        ScheduleTimeline(a) {
            this._playingTimelines.includes(a) ? (a.SetPlaying(!0), a.SetScheduled(!1), a.SetMarkedForRemoval(!1)) : (a.SetPlaying(!1), a.SetScheduled(!0), a.SetMarkedForRemoval(!1), this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a));
            this._MaybeEnableRuntimeListeners()
        }
        DeScheduleTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.ResolvePlayPromise();
            f.arrayFindRemove(this._scheduledTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        CompleteTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.SetMarkedForRemoval(!0)
        }
        CompleteTimelineAndResolve(a) {
            this.CompleteTimeline(a);
            a.ResolvePlayPromise()
        }
        _OnTick() {
            if (!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a = !1;
                for (this._isTickingTimelines = !0; this._scheduledTimelines.length;) {
                    var d = this._scheduledTimelines.pop();
                    d.SetInitialState();
                    this._playingTimelines.push(d)
                }
                d =
                    this._runtime.GetDt();
                var c = this._runtime.GetTimeScale();
                for (const e of this._playingTimelines) {
                    if (e.IsMarkedForRemoval()) continue;
                    const k = e.Tick(d, c);
                    !a && k && (a = !0)
                }
                this._isTickingTimelines = !1;
                a && this.GetRuntime().UpdateRender()
            }
        }
        _OnTick2() {
            if (!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a;
                for (const d of this._playingTimelines) d.IsMarkedForRemoval() && (a || (a = new Set), this._MaybeExecuteTimelineFinishTriggers(d), a.add(d));
                a && f.arrayRemoveAllInSet(this._playingTimelines,
                    a);
                this._MaybeDisableRuntimeListeners()
            }
        }
        _MaybeExecuteTimelineFinishTriggers(a) {
            a.IsReleased() || a.HasValidTracks() && a.IsComplete() && a.InitialStateSet() && a.FinishTriggers()
        }
        _MaybeEnableRuntimeListeners() {
            this._hasRuntimeListeners || (this._hasRuntimeListeners = !0)
        }
        _MaybeDisableRuntimeListeners() {
            this._playingTimelines.length || this._scheduledTimelines.length || this._isTickingTimelines || (this._hasRuntimeListeners = !1)
        }
        _OnBeforeChangeLayout() {
            for (this._changingLayout = !0; this._scheduledTimelines.length;) this.DeScheduleTimeline(this._scheduledTimelines.pop());
            const a = new Set;
            for (const d of this._playingTimelines) d._OnBeforeChangeLayout() && a.add(d);
            f.arrayRemoveAllInSet(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners();
            for (const d of this._timelines) d.CleanCaches()
        }
        _OnAfterChangeLayout() {
            this._changingLayout = !1
        }
        _OnInstanceDestroy(a) {
            var d = a.GetObjectClass();
            if (d = this.GetTimelinesForObjectClass(d))
                if (this._runtime.IsLoadingState()) this._destroyedWhileLoadingState.push(a);
                else
                    for (const c of d) c.IsTemplate() || (c.IsReleased() ? this.Remove(c) : c.HasValidTracks() ||
                        (this._MaybeExecuteTimelineFinishTriggers(c), this.Remove(c)))
        }
        _OnAfterLoad() {
            for (const a of this._destroyedWhileLoadingState) this._OnInstanceDestroy(a);
            f.clearArray(this._destroyedWhileLoadingState)
        }
        _SaveToJson() {
            return {
                timelinesJson: this._SaveTimelinesToJson(),
                scheduledTimelinesJson: this._SaveScheduledTimelinesToJson(),
                playingTimelinesJson: this._SavePlayingTimelinesToJson(),
                hasRuntimeListeners: this._hasRuntimeListeners,
                changingLayout: this._changingLayout,
                isTickingTimelines: this._isTickingTimelines
            }
        }
        _LoadFromJson(a) {
            a &&
                (this._ClearCreatedTemplateTimelinesCount(), this._LoadTimelinesFromJson(a.timelinesJson), this._LoadScheduledTimelinesFromJson(a.scheduledTimelinesJson), this._LoadPlayingTimelinesFromJson(a.playingTimelinesJson), this._hasRuntimeListeners = !a.hasRuntimeListeners, this._changingLayout = !!a.changingLayout, this._isTickingTimelines = !!a.isTickingTimelines, this._SetCreatedTemplateTimelinesCount(), this._MaybeEnableRuntimeListeners(), this._MaybeDisableRuntimeListeners())
        }
        _SaveTimelinesToJson() {
            return this._timelines.map(a =>
                a._SaveToJson())
        }
        _LoadTimelinesFromJson(a) {
            for (const d of a) {
                a = this.GetTimelineByName(d.name);
                if (!a) {
                    a = this._GetTemplateNameFromJson(d);
                    if (!a) continue;
                    a = this.GetTimelineByName(a);
                    a = this.CreateFromTemplate(a)
                }
                a._LoadFromJson(d);
                a.HasTracks() || this.Remove(a)
            }
        }
        _GetTemplateNameFromJson(a) {
            return (a = a.name.split(":")) && 2 === a.length ? a[0] : null
        }
        _SaveScheduledTimelinesToJson() {
            return this._SaveTimelines(this._scheduledTimelines)
        }
        _LoadScheduledTimelinesFromJson(a) {
            this._LoadTimelines(a, this._scheduledTimelines)
        }
        _SavePlayingTimelinesToJson() {
            return this._SaveTimelines(this._playingTimelines)
        }
        _LoadPlayingTimelinesFromJson(a) {
            this._LoadTimelines(a,
                this._playingTimelines)
        }
        _IsTimelineInJson(a, d) {
            for (const c of d)
                if (c === a.GetName()) return !0;
            return !1
        }
        _SaveTimelines(a) {
            return a.map(d => d.GetName())
        }
        _LoadTimelines(a, d) {
            var c = new Set;
            for (const e of d) this._IsTimelineInJson(e, a) || c.add(e);
            f.arrayRemoveAllInSet(d, c);
            c = e => k => k.GetName() === e;
            for (const e of a)(a = this.GetTimelineByName(e)) && (d.find(c(e)) || d.push(a))
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.TimelineState = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._runtime = d.GetRuntime();
            this._timelineManager = d;
            this._timelineDataItem = a;
            this._name = b;
            this._tracks = [];
            for (const c of this._timelineDataItem.GetTrackData().trackDataItems()) this._tracks.push(f.TrackState.Create(this, c));
            this._playResolve = this._playPromise = null;
            this._playheadTime = f.New(f.KahanSum);
            this._playheadTime.Set(0);
            this._playbackRate = 1;
            this._pingPongState = 0;
            this._currentRepeatCount = 1;
            this._initialStateSet =
                this._isScheduled = this._isPlaying = !1;
            this._complete = !0;
            this._markedForRemoval = this._released = !1;
            this._completedTick = -1;
            this._firstTick = this._finishedTriggers = this._isTemplate = this._implicitPause = !1;
            this._lastDelta = NaN;
            this._tags = [""];
            this._stringTags = "";
            this._tagsChanged = !1
        }
        static CreateInitial(b, a) {
            var d = a.GetTimelineDataManager();
            const c = d.GetNameId();
            d = d.Get(b[c]);
            b = f.New(f.TimelineState, b[c], d, a);
            b.SetIsTemplate(!0);
            return b
        }
        static CreateFromTemplate(b, a, d) {
            return f.New(f.TimelineState, b, a, d)
        }
        static get WORLD_INSTANCE_BOX_CHANGE() {
            return 1
        }
        static get LAYOUT_RENDER_CHANGE() {
            return f.nextHighestPowerOfTwo(1)
        }
        Release() {
            if (!this.IsReleased()) {
                this._timelineManager.DeScheduleTimeline(this);
                this._timelineManager.CompleteTimelineAndResolve(this);
                for (const b of this._tracks) b.Release();
                f.clearArray(this._tracks);
                this._tracks = null;
                this._playheadTime.Release();
                this._timelineDataItem = this._timelineManager = this._runtime = this._playheadTime = null;
                this._released = !0;
                this._playResolve = this._playPromise = null
            }
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetTracks() {
            return this._tracks
        }
        GetSimilarPropertyTracks(b, a, d) {
            const c = [];
            for (const e of this._tracks) {
                if (b !==
                    e.GetInstance()) continue;
                const k = e.GetPropertyTrack(d);
                k && a.constructor === k.GetSourceAdapter().constructor && c.push(k)
            }
            return c
        }
        HasTracks() {
            return !!this._tracks.length
        }
        GetTrackById(b) {
            for (const a of this._tracks)
                if (f.equalsNoCase(a.GetId(), b)) return a;
            return null
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        GetTemplateName() {
            return this._timelineDataItem.GetName()
        }
        GetTotalTime() {
            return this._timelineDataItem.GetTotalTime()
        }
        SetTotalTime(b) {
            this._timelineDataItem.SetTotalTime(b)
        }
        GetStep() {
            return this._timelineDataItem.GetStep()
        }
        SetStep(b) {
            this._timelineDataItem.SetStep(b)
        }
        GetInterpolationMode() {
            return this._timelineDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._timelineDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._timelineDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._timelineDataItem.GetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetTracks()) a.SetEase(b)
        }
        GetLoop() {
            return this._timelineDataItem.GetLoop()
        }
        SetLoop(b) {
            return this._timelineDataItem.SetLoop(b)
        }
        GetPingPong() {
            return this._timelineDataItem.GetPingPong()
        }
        SetPingPong(b) {
            return this._timelineDataItem.SetPingPong(b)
        }
        GetRepeatCount() {
            return this._timelineDataItem.GetRepeatCount()
        }
        SetPlaybackRate(b) {
            return this._playbackRate =
                b
        }
        GetPlaybackRate() {
            return this._playbackRate
        }
        IsForwardPlayBack() {
            return this.IsPlaying() ? 0 < this._playbackRate : !0
        }
        GetPlayPromise() {
            return this._playPromise ? this._playPromise : this._playPromise = new Promise(b => {
                this._playResolve = b
            })
        }
        ResolvePlayPromise() {
            this._playPromise && (this._playResolve(), this._playResolve = this._playPromise = null)
        }
        SetTags(b) {
            this._tags = f.TimelineState._GetTagArray(b);
            this._tagsChanged = !0
        }
        GetTags() {
            return this._tags
        }
        GetStringTags() {
            this._tagsChanged && (this._stringTags = this._tags.join(" "));
            this._tagsChanged = !1;
            return this._stringTags
        }
        HasTags(b) {
            return this._tags && this._tags.length ? (b = f.TimelineState._GetTagArray(b)) && b.length ? b.every(f.TimelineState._HasTag, this) : !1 : !1
        }
        OnStarted() {
            f.Plugins.Timeline.Cnds.SetTriggerTimeline(this);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineStarted);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineStartedByName);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineStartedByTags);
            this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnAnyTimelineStarted);
            f.Plugins.Timeline.Cnds.SetTriggerTimeline(null)
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            this._finishedTriggers || (this._finishedTriggers = !0, f.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineFinished), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineFinishedByName), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimelineFinishedByTags), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnAnyTimelineFinished),
                f.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        SetPlaying(b) {
            this._isPlaying = b
        }
        IsCompletedTick() {
            return this._completedTick === this._runtime.GetTickCount()
        }
        IsPlaying(b = !1) {
            return this.IsCompletedTick() || this.IsScheduled() && !b ? !0 : this._isPlaying
        }
        _IsPlaying() {
            return this.IsPlaying(!0)
        }
        IsPaused() {
            return this._IsPaused()
        }
        _IsPaused() {
            return this.IsReleased() || this.IsScheduled() || this._IsPlaying() || this.IsComplete() ? !1 : !0
        }
        SetScheduled(b) {
            this._isScheduled = b
        }
        IsScheduled() {
            return this._isScheduled
        }
        SetComplete(b) {
            this._complete =
                b;
            b = this.GetTime();
            if (0 >= b || b >= this.GetTotalTime()) this._complete = !0
        }
        IsComplete() {
            return this._complete
        }
        IsReleased() {
            return this._released
        }
        SetMarkedForRemoval(b) {
            this._markedForRemoval = b
        }
        IsMarkedForRemoval() {
            return this._markedForRemoval
        }
        SetImplicitPause(b) {
            this._implicitPause = b
        }
        IsImplicitPause() {
            return this._implicitPause
        }
        SetIsTemplate(b) {
            this._isTemplate = !!b
        }
        IsTemplate() {
            return this._isTemplate
        }
        InitialStateSet() {
            return this._initialStateSet
        }
        GetTime() {
            return this._playheadTime.Get()
        }
        SetTime(b) {
            const a =
                this.GetTime();
            this._SetTime(b);
            this.SetComplete(!1);
            this.IsComplete() || this.SetImplicitPause(!0);
            if (this._IsPlaying() || this.IsScheduled() || !this._initialStateSet) this._IsPlaying() || this.IsScheduled() || this._initialStateSet ? this._IsPlaying() ? this.Stop() : this.IsScheduled() && (this._timelineManager.DeScheduleTimeline(this), this.SetInitialStateFromSetTime()) : this.SetInitialStateFromSetTime();
            this._Interpolate(b, !1, !0, !0, a) && this.GetRuntime().UpdateRender();
            this._OnSetTime()
        }
        _SetTime(b) {
            0 > b ? this._playheadTime.Set(0) :
                b >= this.GetTotalTime() ? this._playheadTime.Set(this.GetTotalTime()) : this._playheadTime.Set(b)
        }
        _OnSetTime() {
            f.Plugins.Timeline && this.constructor === f.TimelineState && (f.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimeSet), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimeSetByName), this._timelineManager.Trigger(f.Plugins.Timeline.Cnds.OnTimeSetByTags), f.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        _CanResume() {
            if (!this.GetLoop())
                if (this.GetPingPong() &&
                    1 === this._pingPongState)
                    if (this.IsForwardPlayBack()) {
                        if (this.GetTime() >= this.GetTotalTime()) return !1
                    } else {
                        if (0 >= this.GetTime()) return !1
                    }
            else if (!this.GetLoop() && !this.GetPingPong())
                if (this.IsForwardPlayBack()) {
                    if (this.GetTime() >= this.GetTotalTime()) return !1
                } else if (0 >= this.GetTime()) return !1;
            return !0
        }
        Resume() {
            this.IsReleased() || this._CanResume() && this.Play(!0)
        }
        Play(b = !1) {
            return this.IsReleased() || this.IsScheduled() ? !1 : this._IsPlaying() && this.IsCompletedTick() ? this._SchedulePlayingTimeline() : this._IsPlaying() ||
                !this.IsComplete() && !b && !this.IsImplicitPause() ? !1 : this._ScheduleStoppedTimeline()
        }
        _SchedulePlayingTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.RemovePlayingTimeline(this);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        _ScheduleStoppedTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        Stop(b = !1) {
            this.IsReleased() || (this.SetComplete(b), this._timelineManager.CompleteTimeline(this), this.IsComplete() &&
                this.ResolvePlayPromise())
        }
        Reset(b = !0, a = !1) {
            if (!this.IsReleased()) {
                if (!this._IsPlaying() && this.IsScheduled()) return this._timelineManager.DeScheduleTimeline(this);
                if (!this.IsComplete()) {
                    this.Stop(!0);
                    this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                    var d = this.GetTime();
                    a = a ? this._InterpolateBeforeChangeLayout(d) : this._Interpolate(d, !1, !1, !0);
                    b && this._OnSetTime();
                    a && b && this.GetRuntime().UpdateRender()
                }
            }
        }
        ResetBeforeChangeLayout() {
            this.Reset(!1, !0)
        }
        _InterpolateBeforeChangeLayout(b) {
            this._Interpolate(b, !1, !1, !0, NaN, !1, !0)
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return !0;
            if (this.HasValidGlobalTracks()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        SetInitialStateFromSetTime() {
            this.SetInitialState(!0)
        }
        SetInitialState(b) {
            if (!this.IsMarkedForRemoval())
                if (b) {
                    this._firstTick = this._initialStateSet = !0;
                    for (const a of this._tracks) a.SetInitialState()
                } else if (this.SetPlaying(!0), this.SetScheduled(!1), this.OnStarted(), this.IsComplete()) {
                this._completedTick = -1;
                this._pingPongState = 0;
                this._currentRepeatCount = 1;
                this._finishedTriggers = this._complete = !1;
                this._firstTick = this._initialStateSet = !0;
                this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                for (const a of this._tracks) a.SetInitialState()
            } else {
                this._firstTick = !0;
                for (const a of this._tracks) a.SetResumeState()
            }
        }
        Tick(b, a) {
            if (0 !== b || 0 !== this._lastDelta) {
                this._lastDelta = b;
                var d = this.GetTime();
                this._SetTime(d + b * a * this._playbackRate);
                var c;
                this.GetLoop() || this.GetPingPong() ? this.GetLoop() &&
                    !this.GetPingPong() ? c = this._LoopCompleteCheck() : !this.GetLoop() && this.GetPingPong() ? c = this._PingPongCompleteCheck() : this.GetLoop() && this.GetPingPong() && (c = this._LoopPingPongCompleteCheck()) : c = this._SimpleCompleteCheck();
                if (c) {
                    for (const e of this._tracks) e.SetEndState();
                    this.Stop(!0);
                    this.OnCompleted();
                    return !0
                }
                return this._Interpolate(this.GetTime(), !0, !1, !1, d, !0)
            }
        }
        _Interpolate(b, a = !1, d = !1, c = !1, e = NaN, k = !1, h = !1) {
            let p = !1;
            for (var n of this._tracks) n.BeforeInterpolate();
            for (const m of this._tracks) {
                n =
                    b;
                if ("number" === typeof e) {
                    const t = this.GetTime() - m.GetStartOffset(),
                        q = e - m.GetStartOffset();
                    0 > t && 0 < q && (n = m.GetStartOffset(), this._SetTime(n))
                }
                n = m.Interpolate(n, a, d, c, this._firstTick, h);
                !p && n && (p = !0)
            }
            for (const m of this._tracks) m.AfterInterpolate();
            this._firstTick && k && (this._firstTick = !1);
            return p
        }
        _SimpleCompleteCheck() {
            if (this.IsForwardPlayBack()) {
                if (this.GetTime() >= this.GetTotalTime())
                    if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(0);
                    else return this._SetTime(this.GetTotalTime()), !0
            } else if (0 >= this.GetTime())
                if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(this.GetTotalTime());
                else return this._SetTime(0), !0;
            return !1
        }
        _LoopCompleteCheck() {
            this.IsForwardPlayBack() ? this.GetTime() >= this.GetTotalTime() && this._SetTime(0) : 0 >= this.GetTime() && this._SetTime(this.GetTotalTime());
            return !1
        }
        _PingPongCompleteCheck() {
            if (this.IsForwardPlayBack()) {
                if (this.GetTime() >= this.GetTotalTime())
                    if (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate()),
                        1 === this._pingPongState)
                        if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                        else return !0;
                else 0 === this._pingPongState && (this._pingPongState = 1)
            } else if (0 >= this.GetTime())
                if (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()), 1 === this._pingPongState)
                    if (this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                    else return !0;
            else 0 === this._pingPongState && (this._pingPongState = 1);
            return !1
        }
        _LoopPingPongCompleteCheck() {
            this.IsForwardPlayBack() ?
                this.GetTime() >= this.GetTotalTime() && (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate())) : 0 >= this.GetTime() && (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()));
            return !1
        }
        AddTrack() {
            var b = this._timelineDataItem.GetTrackData().AddEmptyTrackDataItem();
            b = f.TrackState.Create(this, b);
            this._tracks.push(b);
            return b
        }
        CleanCaches() {
            for (const b of this._tracks) b.CleanCaches()
        }
        ClearTrackInstances() {
            for (const b of this._tracks) b.ClearInstance()
        }
        SetTrackInstance(b,
            a) {
            if (a)
                for (const d of this._tracks) {
                    if (b) {
                        if (d.GetId() !== b) continue
                    } else if (d.HasInstance()) continue;
                    d.SetInstance(a);
                    this._timelineManager.SetTimelineObjectClassToMap(a.GetObjectClass(), this);
                    break
                }
        }
        HasTrackInstance(b, a) {
            for (const d of this._tracks)
                if (a) {
                    if (a === d.GetId() && b === d.GetInstance()) return !0
                } else if (b === d.GetInstance()) return !0;
            return !1
        }
        GetTrackInstance(b) {
            for (const a of this._tracks)
                if (b === a.GetInstance()) return a;
            return null
        }
        HasValidTracks() {
            return this._tracks.some(b => b.CanInstanceBeValid())
        }
        HasValidGlobalTracks() {
            return this._tracks.some(b =>
                b.CanInstanceBeValid() ? (b = b.GetObjectClass()) ? b.IsGlobal() : !1 : !1)
        }
        GetPropertyTrack(b) {
            for (const a of this.GetTracks())
                for (const d of a.GetPropertyTracks())
                    if (d.GetPropertyName() === b) return d
        }
        GetKeyframeWithTags(b) {
            b = b ? b.split(" ") : [];
            b = [...(new Set(b.map(a => a.toLowerCase().trim()))).values()];
            for (const a of this.GetTracks())
                for (const d of a.GetKeyframeDataItems())
                    if (b.every(c => d.HasTag(c))) return d
        }
        GetObjectClasses() {
            const b = [];
            for (const a of this.GetTracks()) b.push(a.GetObjectClass());
            return b.filter(a =>
                a)
        }
        _SaveToJson() {
            return {
                tracksJson: this._SaveTracksToJson(),
                name: this._name,
                playheadTime: this.GetTime(),
                playbackRate: this._playbackRate,
                pingPongState: this._pingPongState,
                currentRepeatCount: this._currentRepeatCount,
                isPlaying: this._isPlaying,
                isScheduled: this._isScheduled,
                initialStateSet: this._initialStateSet,
                finishedTriggers: this._finishedTriggers,
                complete: this._complete,
                released: this._released,
                markedForRemoval: this._markedForRemoval,
                completedTick: this._completedTick,
                implicitPause: this._implicitPause,
                isTemplate: this._isTemplate,
                tags: this._tags.join(" "),
                stringTags: this._stringTags,
                tagsChanged: this._tagsChanged,
                firstTick: this._firstTick
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadTracksFromJson(b.tracksJson), this._name = b.name, this._playheadTime.Set(b.playheadTime), this._playbackRate = b.playbackRate, this._pingPongState = b.pingPongState, this._currentRepeatCount = b.currentRepeatCount, this._isPlaying = !!b.isPlaying, this._isScheduled = !!b.isScheduled, this._initialStateSet = !!b.initialStateSet, this._finishedTriggers =
                b.hasOwnProperty("finishedTriggers") ? !!b.finishedTriggers : !1, this._complete = !!b.complete, this._released = !!b.released, this._markedForRemoval = !!b.markedForRemoval, this._completedTick = b.completedTick, this._implicitPause = !!b.implicitPause, this._isTemplate = !!b.isTemplate, this._tags = b.tags.split(" "), this._stringTags = b.stringTags, this._tagsChanged = !!b.tagsChanged, this._firstTick = !!b.firstTick)
        }
        _SaveTracksToJson() {
            return this._tracks.map(b => b._SaveToJson())
        }
        _LoadTracksFromJson(b) {
            b.forEach((a, d) => {
                this._tracks[d]._LoadFromJson(a)
            });
            this._tracks.filter(a => a.CanInstanceBeValid())
        }
        static _HasTag(b) {
            const a = this.GetTags();
            return "" === b ? 1 === a.length && "" === a[0] : a.includes(b)
        }
        static _GetTagArray(b) {
            if (f.IsArray(b)) return b.slice(0);
            if (f.IsString(b)) return b.split(" ")
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.TrackState = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._timeline = b;
            this._trackDataItem = a;
            this._trackData = a.GetTrackData();
            this._objectClassIndex = this._instanceUid = NaN;
            this._worldInfo = this._instance = null;
            this._isNested = 0 < a.GetStartOffset();
            this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
            this._lastKeyframeDataItem = null;
            this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            this._propertyTracks = [];
            for (const d of this._trackDataItem.GetPropertyTrackData().propertyTrackDataItems()) this._propertyTracks.push(f.PropertyTrackState.Create(this,
                d))
        }
        static Create(b, a) {
            return f.New(f.TrackState, b, a)
        }
        Release() {
            this._keyframeDataItems = null;
            for (const b of this._propertyTracks) b.Release();
            f.clearArray(this._propertyTracks);
            this._lastKeyframeDataItem = this._trackDataItem = this._worldInfo = this._instance = this._timeline = this._propertyTracks = null
        }
        CleanCaches() {
            for (const b of this._propertyTracks) b.CleanCaches();
            this._worldInfo = this._instance = null
        }
        GetTimeline() {
            return this._timeline
        }
        GetRuntime() {
            return this._timeline.GetRuntime()
        }
        GetKeyframeDataItems() {
            return this._keyframeDataItems ?
                this._keyframeDataItems : this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray()
        }
        GetPropertyTracks() {
            return this._propertyTracks
        }
        GetPropertyTrack(b) {
            for (const a of this._propertyTracks)
                if (a.GetPropertyName() === b) return a
        }
        MaybeGetInstance() {
            this._instance || this.GetInstance()
        }
        IsInstanceValid() {
            return this._instance ? !this._instance.IsDestroyed() : !1
        }
        CanInstanceBeValid() {
            var b = this.GetInstanceUID();
            return (b = this.GetRuntime().GetInstanceByUID(b)) ? !b.IsDestroyed() : !1
        }
        GetObjectClass() {
            const b =
                this.GetObjectClassIndex();
            if (-1 !== b) return this.GetRuntime().GetObjectClassByIndex(b)
        }
        ClearInstance() {
            this._instance = null;
            this._instanceUid = -1;
            this._worldInfo = null;
            this._objectClassIndex = -1
        }
        HasInstance() {
            return !!this._instance
        }
        GetInstance() {
            if (this._instance && this.IsInstanceValid()) return this._instance;
            const b = this.GetInstanceUID();
            return this._instance = this.GetRuntime().GetInstanceByUID(b)
        }
        SetInstance(b) {
            if (this._instance !== b) {
                this.CleanCaches();
                this._instance = b;
                this._objectClassIndex = b.GetObjectClass().GetIndex();
                this._instanceUid = b.GetUID();
                this._worldInfo = b.GetWorldInfo();
                for (const k of this.propertyTrackItems()) {
                    const h = k.sourceAdapter;
                    switch (k.propertyTrack.GetSourceAdapterId()) {
                        case "instance-variable":
                            h.GetEditorIndex();
                            var a = b.GetObjectClass(),
                                d = a.GetInstanceVariableIndexByName(k.name),
                                c = a.GetInstanceVariableName(d);
                            a = a.GetInstanceVariableType(d);
                            c === k.name && a === k.type && h.UpdateInstanceVariableIndex(d);
                            break;
                        case "behavior":
                            var e = k.behaviorType;
                            d = this.GetObjectClass();
                            c = b.GetObjectClass();
                            a = h.GetBehaviorType(c);
                            e && a && (e = e.GetName(), d.GetBehaviorIndexByName(e), c.GetBehaviorIndexByName(e), h.GetEditorIndex(), h.UpdateBehaviorTypeSid(a.GetSID()))
                    }
                }
            }
        }* propertyTrackItems() {
            for (const d of this._propertyTracks) {
                var b = d.GetSourceAdapter(),
                    a = this.GetObjectClass();
                const c = {
                    propertyTrack: d,
                    sourceAdapter: b
                };
                switch (d.GetSourceAdapterId()) {
                    case "world-instance":
                        c.property = d.GetPropertyName();
                        break;
                    case "instance-variable":
                        b = b.GetEditorIndex();
                        c.name = a.GetInstanceVariableName(b);
                        c.type = a.GetInstanceVariableType(b);
                        break;
                    case "effect":
                        a = a.GetEffectList();
                        b = b.GetEffectType(a);
                        c.effectType = b;
                        break;
                    case "behavior":
                        b = b.GetBehaviorType(a);
                        c.behaviorType = b;
                        break;
                    case "plugin":
                        c.plugin = a.GetPlugin()
                }
                yield c
            }
        }
        GetWorldInfo() {
            if (this._worldInfo && this.IsInstanceValid()) return this._worldInfo;
            const b = this.GetInstance();
            b && (this._worldInfo = b.GetWorldInfo());
            return this._worldInfo
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetInstanceUID() {
            return this._instanceUid ? this._instanceUid : this._trackDataItem.GetInstanceUID()
        }
        SetInstanceUID(b) {
            this._trackDataItem.SetInstanceUID(b)
        }
        GetInterpolationMode() {
            return this._trackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._trackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._trackDataItem.GetResultMode()
        }
        GetId() {
            return this._trackDataItem.GetId()
        }
        GetStartOffset() {
            return this._trackDataItem.GetStartOffset()
        }
        GetLocalTotalTime() {
            return this._trackDataItem.GetLocalTotalTime()
        }
        SetLocalTotalTime(b) {
            this._trackDataItem.SetLocalTotalTime(b)
        }
        SetResultMode(b) {
            this._trackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetKeyframeDataItems()) a.SetEase(b);
            for (const a of this.GetPropertyTracks()) a.SetEase(b)
        }
        GetEnable() {
            return this._trackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._trackDataItem.SetEnable(b)
        }
        GetObjectClassIndex() {
            return isNaN(this._objectClassIndex) ? this._trackDataItem.GetObjectClassIndex() : this._objectClassIndex
        }
        SetObjectClassIndex(b) {
            this._trackDataItem.SetObjectClassIndex(b)
        }
        SetOriginalWidth(b) {
            this._trackDataItem.SetOriginalWidth(b)
        }
        GetOriginalWidth() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalWidth() :
                this._trackDataItem.GetOriginalWidth()
        }
        SetOriginalHeight(b) {
            this._trackDataItem.SetOriginalHeight(b)
        }
        GetOriginalHeight() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalHeight() : this._trackDataItem.GetOriginalHeight()
        }
        SetInitialState() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid()) {
                for (var b of this._propertyTracks) b.SetInitialState();
                b = this.GetTimeline().IsForwardPlayBack() ? 0 : this.GetLocalTotalTime();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
                this.Interpolate(b)
            }
        }
        SetResumeState() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid()) {
                this._timeline.IsForwardPlayBack();
                var b = this._timeline.GetTime() - this.GetStartOffset();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                for (const a of this._propertyTracks) a.SetResumeState()
            }
        }
        SetEndState() {
            if (!this.GetTimeline().IsComplete() && (this.MaybeGetInstance(), this.IsInstanceValid() && !this._isNested)) {
                const b = this._timeline.GetTime(),
                    a = this.GetStartOffset() + this.GetLocalTotalTime();
                b >= a ? this.Interpolate(this.GetLocalTotalTime(), !0, !1, !0) : 0 >= b && this.Interpolate(0, !0, !1, !0)
            }
        }
        BeforeInterpolate() {
            for (const b of this._propertyTracks) b.BeforeInterpolate()
        }
        Interpolate(b, a = !1, d = !1, c = !1, e = !1, k = !1) {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() || k && this.GetObjectClass().IsGlobal()) return !1;
            b -= this.GetStartOffset();
            if (0 > b) return !1;
            this.MaybeSetInitialStateOfNestedTrack(b, a);
            this.MaybeTriggerKeyframeReachedConditions(b, a, e);
            e = k = !1;
            for (const h of this._propertyTracks) {
                const p =
                    h.Interpolate(b, d, !1, c);
                k || 0 === (p & f.TimelineState.WORLD_INSTANCE_BOX_CHANGE) || (k = !0);
                e || 0 === (p & f.TimelineState.LAYOUT_RENDER_CHANGE) || (e = !0)
            }
            this.MaybeSetEndStateOfNestedTrack(b, a);
            k && (b = this.GetWorldInfo()) && b.SetBboxChanged();
            return e
        }
        AfterInterpolate() {
            for (const b of this._propertyTracks) b.AfterInterpolate()
        }
        MaybeSetInitialStateOfNestedTrack(b, a) {
            if (a && this._isNested && !this._initialStateOfNestedSet) {
                if (this.GetTimeline().IsForwardPlayBack()) {
                    if (0 > b) return;
                    for (const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0)
                } else {
                    if (b > this.GetLocalTotalTime()) return;
                    for (const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0)
                }
                for (const d of this._propertyTracks) d.SetInitialState();
                this._initialStateOfNestedSet = !0
            }
        }
        MaybeSetEndStateOfNestedTrack(b, a) {
            if (a && this._isNested && !this._endStateOfNestedSet)
                if (this.GetTimeline().IsForwardPlayBack()) {
                    if (b >= this.GetLocalTotalTime()) {
                        for (const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0);
                        this._endStateOfNestedSet = !0
                    }
                } else if (0 >=
                b) {
                for (const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0);
                this._endStateOfNestedSet = !0
            }
        }
        MaybeTriggerKeyframeReachedConditions(b, a, d) {
            if (!d && a) return b = this.GetLastKeyFrameBeforeTime(b), b !== this._lastKeyframeDataItem && this.OnKeyframeReached(b), this._lastKeyframeDataItem = b
        }
        GetLastKeyFrameBeforeTime(b) {
            const a = this.GetTimeline();
            let d = this._trackData.GetKeyFrameDataItemAtTime(b, this._trackDataItem);
            return d ? d : a.IsForwardPlayBack() ? this._trackData.GetFirstKeyFrameDataItemLowerOrEqualThan(b, this._trackDataItem) :
                this._trackData.GetFirstKeyFrameDataItemHigherOrEqualThan(b, this._trackDataItem)
        }
        OnKeyframeReached(b) {
            if (f.Plugins.Timeline && this.GetTimeline().constructor === f.TimelineState) {
                var a = this.GetTimeline();
                f.Plugins.Timeline.Cnds.SetTriggerTimeline(a);
                f.Plugins.Timeline.Cnds.SetTriggerKeyframe(b);
                b = a.GetTimelineManager();
                b.Trigger(f.Plugins.Timeline.Cnds.OnAnyKeyframeReached);
                b.Trigger(f.Plugins.Timeline.Cnds.OnKeyframeReached);
                f.Plugins.Timeline.Cnds.SetTriggerTimeline(null);
                f.Plugins.Timeline.Cnds.SetTriggerKeyframe(null)
            }
        }
        AddKeyframe() {
            return this._trackDataItem.GetKeyframeData().AddEmptyKeyframeDataItem()
        }
        AddPropertyTrack() {
            var b =
                this._trackDataItem.GetPropertyTrackData().AddEmptyPropertyTrackDataItem();
            b = f.PropertyTrackState.Create(this, b);
            this._propertyTracks.push(b);
            return b
        }
        DeleteKeyframes(b) {
            this._trackDataItem.GetKeyframeData().DeleteKeyframeDataItems(b)
        }
        DeletePropertyKeyframes(b) {
            for (const a of this._propertyTracks) a.DeletePropertyKeyframes(b)
        }
        SaveState() {
            for (const b of this._propertyTracks) b.SaveState()
        }
        CompareInitialStateWithCurrent() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid())
                for (const b of this._propertyTracks) b.CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            this.MaybeGetInstance();
            if (this.IsInstanceValid()) {
                var b = !1;
                for (const a of this._propertyTracks) {
                    const d = a.CompareSaveStateWithCurrent();
                    !b && d && (b = !0)
                }
                b && (b = this.AddKeyframe(), b.SetTime(this.GetTimeline().GetTime()), b.SetEase("noease"), b.SetEnable(!0), b.SetTags(""))
            }
        }
        _SaveToJson() {
            var b = this.GetInstance();
            b = b ? b.GetUID() : this.GetInstanceUID();
            return {
                propertyTracksJson: this._SavePropertyTracksToJson(),
                lastKeyframeDataItemJson: this._SaveLastKeyframeDataItemToJson(),
                initialStateOfNestedSet: this._initialStateOfNestedSet,
                endStateOfNestedSet: this._endStateOfNestedSet,
                instanceUid: b
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadPropertyTracksFromJson(b.propertyTracksJson), this._LoadLastKeyframeDataItemFromJson(b.lastKeyframeDataItemJson), this._LoadInstanceFromJson(b.instanceUid), this._initialStateOfNestedSet = !1, b.hasOwnProperty.initialStateOfNestedSet && (this._initialStateOfNestedSet = b.initialStateOfNestedSet), this._endStateOfNestedSet = !1, b.hasOwnProperty.endStateOfNestedSet && (this._endStateOfNestedSet = b.endStateOfNestedSet))
        }
        _SaveLastKeyframeDataItemToJson() {
            return this._trackDataItem.GetKeyframeData().GetKeyframeDataItemIndex(this._lastKeyframeDataItem)
        }
        _SavePropertyTracksToJson() {
            return this._propertyTracks.map(b =>
                b._SaveToJson())
        }
        _LoadPropertyTracksFromJson(b) {
            b.forEach((a, d) => {
                this._propertyTracks[d]._LoadFromJson(a)
            })
        }
        _LoadInstanceFromJson(b) {
            if (f.IsFiniteNumber(b) && (b = this.GetRuntime().GetInstanceByUID(b))) {
                var a = this.GetTimeline();
                a.ClearTrackInstances();
                a.SetTrackInstance(this._trackDataItem.GetId(), b)
            }
        }
        _LoadLastKeyframeDataItemFromJson(b) {
            this._lastKeyframeDataItem = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemFromIndex(b)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.PropertyTrackState = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._track = b;
            this._propertyTrackDataItem = a;
            this._propertyTrackData = a.GetPropertyTrackData();
            this._sourceAdapter = this.GetSourceAdapter();
            this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }
        static Create(b, a) {
            return f.New(f.PropertyTrackState, b, a)
        }
        Release() {
            this._track = null;
            this._sourceAdapter && (this._sourceAdapter.Release(), this._sourceAdapter =
                null);
            this._propertyTrackData = this._propertyTrackDataItem = this._propertyKeyframeDataItems = null
        }
        GetTrack() {
            return this._track
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetTimeline() {
            return this._track.GetTimeline()
        }
        GetRuntime() {
            return this._track.GetRuntime()
        }
        GetInstance() {
            return this._track.GetInstance()
        }
        GetSourceAdapter() {
            if (this._sourceAdapter) return this._sourceAdapter;
            let b;
            switch (this._propertyTrackDataItem.GetSourceAdapterId()) {
                case "behavior":
                    b =
                        new f.PropertyTrackState.BehaviorSourceAdapter(this);
                    break;
                case "effect":
                    b = new f.PropertyTrackState.EffectSourceAdapter(this);
                    break;
                case "instance-variable":
                    b = new f.PropertyTrackState.InstanceVariableSourceAdapter(this);
                    break;
                case "plugin":
                    b = new f.PropertyTrackState.PluginSourceAdapter(this);
                    break;
                case "world-instance":
                    b = new f.PropertyTrackState.WorldInstanceSourceAdapter(this);
                    break;
                case "value":
                    b = new f.PropertyTrackState.ValueSourceAdapter(this)
            }
            return this._sourceAdapter = b
        }
        GetSourceAdapterId() {
            return this._propertyTrackDataItem.GetSourceAdapterId()
        }
        SetSourceAdapterId(b) {
            this._propertyTrackDataItem.SetSourceAdapterId(b)
        }
        GetSourceAdapterArgs() {
            return this._propertyTrackDataItem.GetSourceAdapterArguments()
        }
        SetSourceAdapterArgs(b) {
            this._propertyTrackDataItem.SetSourceAdapterArguments(b)
        }
        GetSourceAdapterValue() {
            return this.GetSourceAdapter().GetValue()
        }
        GetPropertyName() {
            return this._propertyTrackDataItem.GetProperty()
        }
        SetPropertyName(b) {
            this._propertyTrackDataItem.SetProperty(b)
        }
        GetPropertyType() {
            return this._propertyTrackDataItem.GetType()
        }
        SetPropertyType(b) {
            this._propertyTrackDataItem.SetType(b)
        }
        GetPropertyKeyframeType() {
            return this.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem).GetType()
        }
        GetMin() {
            return this._propertyTrackDataItem.GetMin()
        }
        SetMin(b) {
            this._propertyTrackDataItem.SetMin(b)
        }
        GetMax() {
            return this._propertyTrackDataItem.GetMax()
        }
        SetMax(b) {
            this._propertyTrackDataItem.SetMax(b)
        }
        GetEnable() {
            return this._propertyTrackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._propertyTrackDataItem.SetEnable(b)
        }
        GetInterpolationMode() {
            return this._propertyTrackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._propertyTrackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._propertyTrackDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._propertyTrackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for (const a of this.GetPropertyKeyframeDataItems()) a.SetEase(b)
        }
        GetPropertyKeyframeDataItems() {
            return this._propertyKeyframeDataItems ?
                this._propertyKeyframeDataItems : this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }* GetPropertyKeyframeValues() {
            for (const b of this.GetPropertyKeyframeDataItems()) yield b.GetValueWithResultMode()
        }
        CleanCaches() {
            this.GetSourceAdapter().CleanCaches()
        }
        GetCurrentState() {
            return this.GetSourceAdapter().GetCurrentState()
        }
        SetInitialState() {
            this.GetSourceAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetSourceAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetSourceAdapter().BeforeInterpolate()
        }
        Interpolate(b,
            a = !1, d = !1, c = !1) {
            var e = this._propertyTrackDataItem;
            let k = this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(b, e);
            k ? e = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherThan(b, e) : (k = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, e), e = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, e));
            return this.GetSourceAdapter().Interpolate(b, k, e, a, d, c)
        }
        AfterInterpolate() {
            this.GetSourceAdapter().AfterInterpolate()
        }
        static GetStartPropertyKeyframeForTime(b,
            a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            let c = a.GetPropertyKeyFrameDataItemAtTime(b, d);
            c || (c = a.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, d));
            return c
        }
        static GetEndPropertyKeyframeForTime(b, a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            return a.GetPropertyKeyFrameDataItemAtTime(b, d) ? a.GetFirstPropertyKeyFrameDataItemHigherThan(b, d) : a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, d)
        }
        AddPropertyKeyframe() {
            return this._propertyTrackDataItem.GetPropertyKeyframeData().AddEmptyPropertyKeyframeDataItem()
        }
        DeletePropertyKeyframes(b) {
            this._propertyTrackDataItem.GetPropertyKeyframeData().DeletePropertyKeyframeDataItems(b)
        }
        SaveState() {
            this.GetSourceAdapter().SaveState()
        }
        CompareInitialStateWithCurrent() {
            if (this.GetSourceAdapter().CompareInitialStateWithCurrent()) {
                const b =
                    this._propertyTrackData.GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem),
                    a = this.GetSourceAdapter().GetCurrentState();
                b.SetAbsoluteValue(a)
            }
        }
        CompareSaveStateWithCurrent() {
            const b = this.GetSourceAdapter().CompareSaveStateWithCurrent();
            b && this.AddPropertyKeyframeAtCurrentTime();
            this.GetSourceAdapter().ClearSaveState();
            return b
        }
        AddPropertyKeyframeAtCurrentTime() {
            const b = this.GetTimeline().GetTime(),
                a = this.GetSourceAdapter(),
                d = f.PropertyTrackState.GetStartPropertyKeyframeForTime(b, this),
                c =
                this.AddPropertyKeyframe();
            c.SetType(d.GetType());
            c.SetTime(b);
            c.SetEase(d.GetEase());
            c.SetEnable(!0);
            c.SetValue(a.GetValueAtTime());
            c.SetAbsoluteValue(a.GetCurrentState())
        }
        _SaveToJson() {
            return {
                sourceAdapterJson: this.GetSourceAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b && this.GetSourceAdapter()._LoadFromJson(b.sourceAdapterJson)
        }
    }
}
"use strict"; {
    const f = self.C3.PropertyTrackState;
    f.PropertySourceAdapter = class {
        constructor(b) {
            this._propertyTrack = b;
            this._propertyAdapter = null
        }
        Release() {
            this._propertyAdapter && (this._propertyAdapter.Release(), this._propertyAdapter = null);
            this._propertyTrack = null
        }
        GetPropertyTrack() {
            return this._propertyTrack
        }
        CleanCaches() {
            this._propertyAdapter && this._propertyAdapter.CleanCaches()
        }
        GetPropertyAdapter() {
            return this._propertyAdapter ? this._propertyAdapter : this._propertyAdapter = this._CreatePropertyAdapter()
        }
        GetEditorIndex() {}
        GetIndex() {
            return this.GetEditorIndex()
        }
        GetTarget() {}
        SetInitialState() {
            this.GetPropertyAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetPropertyAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetPropertyAdapter().BeforeChangeProperty()
        }
        Interpolate(b,
            a, d, c, e, k) {
            const h = f.PropertySourceAdapter.GetInterpolateFunc(this._propertyTrack)(b, a, d, this._propertyTrack);
            return e ? h : this.GetPropertyAdapter().ChangeProperty(b, h, a, d, c, k)
        }
        AfterInterpolate() {
            this.GetPropertyAdapter().AfterChangeProperty()
        }
        SaveState() {
            this.GetPropertyAdapter().SetSaveState()
        }
        ClearSaveState() {
            this.GetPropertyAdapter().ClearSaveState()
        }
        GetCurrentState() {
            return this.GetPropertyAdapter().GetCurrentState()
        }
        CompareInitialStateWithCurrent() {
            return this.GetPropertyAdapter().CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            return this.GetPropertyAdapter().CompareSaveStateWithCurrent()
        }
        GetValueAtTime() {
            return f.PropertySourceAdapter.GetValueAtTime(this._propertyTrack)
        }
        _CreatePropertyAdapter() {
            const b =
                this._propertyTrack.GetPropertyType();
            switch (this._propertyTrack.GetPropertyKeyframeType()) {
                case "combo":
                case "boolean":
                case "text":
                case "string":
                    return new f.PropertyInterpolationAdapter.NoInterpolationAdapter(this);
                case "numeric":
                case "number":
                case "angle":
                    return "combo" === b ? new f.PropertyInterpolationAdapter.NoInterpolationAdapter(this) : new f.PropertyInterpolationAdapter.NumericInterpolationAdapter(this);
                case "color":
                case "offsetColor":
                    return new f.PropertyInterpolationAdapter.ColorInterpolationAdapter(this)
            }
        }
        _SaveToJson() {
            return {
                propertyAdapterJson: this.GetPropertyAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b &&
                this.GetPropertyAdapter()._LoadFromJson(b.propertyAdapterJson)
        }
        static GetValueAtTime(b) {
            const a = b.GetTrack().GetTimeline().GetTime(),
                d = f.GetStartPropertyKeyframeForTime(a, b),
                c = f.GetEndPropertyKeyframeForTime(a, b);
            return f.PropertySourceAdapter.GetInterpolateFunc(b)(a, d, c, b)
        }
        static GetValue(b, a, d) {
            let c = b.GetResultMode();
            "combo" === b.GetPropertyType() && (c = "absolute");
            switch (c) {
                case "relative":
                    return a + d;
                case "absolute":
                    return d
            }
        }
        static GetInterpolateFunc(b) {
            switch (b.GetPropertyKeyframeType()) {
                case "numeric":
                    return f.NumericTypeAdapter.Interpolate;
                case "angle":
                    return f.AngleTypeAdapter.Interpolate;
                case "boolean":
                    return f.BooleanTypeAdapter.Interpolate;
                case "color":
                    return f.ColorTypeAdapter.Interpolate;
                case "text":
                    return f.TextTypeAdapter.Interpolate
            }
        }
        static GetWillChangeFunc(b) {
            switch (b.GetPropertyKeyframeType()) {
                case "numeric":
                    return f.NumericTypeAdapter.WillChange;
                case "angle":
                    return f.AngleTypeAdapter.WillChange;
                case "boolean":
                    return f.BooleanTypeAdapter.WillChange;
                case "color":
                    return f.ColorTypeAdapter.WillChange;
                case "text":
                    return f.TextTypeAdapter.WillChange
            }
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
    }
    f.PropertyTrackState.WorldInstanceSourceAdapter = b
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._updatedIndex = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetIndex() {
            return this._updatedIndex ? this._updatedIndex : super.GetIndex()
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance()
        }
        UpdateInstanceVariableIndex(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._updatedIndex = a)
        }
        Interpolate(a,
            d, c, e, k, h) {
            if (this.GetPropertyAdapter().CanChange(d.GetValue())) return super.Interpolate(a, d, c, e, k, h)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                index: this._updatedIndex
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a), this._updatedIndex = a.index)
        }
    }
    f.PropertyTrackState.InstanceVariableSourceAdapter = b
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._sid = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            var a = this._propertyTrack.GetPropertyTrackDataItem(),
                d = this._propertyTrack.GetTrack();
            a = this._sid ? this._sid : a.GetSourceAdapterArguments()[0];
            d = d.GetInstance();
            a = d.GetBehaviorIndexBySID(a);
            return d.GetBehaviorInstances()[a].GetSdkInstance()
        }
        GetBehaviorType(a) {
            const d = this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[2];
            return a.GetBehaviorTypeByName(d)
        }
        UpdateBehaviorTypeSid(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._sid = a)
        }
        Interpolate(a, d, c, e, k, h) {
            const p = this._propertyTrack.GetTrack().GetInstance();
            if (this.GetBehaviorType(p.GetObjectClass())) return super.Interpolate(a, d, c, e, k, h)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                sid: this._sid
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a), this._sid = a.sid)
        }
    }
    f.PropertyTrackState.BehaviorSourceAdapter = b
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            d = this.GetEffectType(d).GetIndex();
            return a.IsEffectIndexActive(d) ? a.GetEffectParametersForIndex(d) : null
        }
        GetEffectType(a) {
            const d = this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0];
            return a.GetEffectTypeByName(d)
        }
        Interpolate(a, d, c, e, k, h) {
            if (this._IsEffectActive()) return super.Interpolate(a, d, c, e, k, h)
        }
        _IsEffectActive() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            if (d = this.GetEffectType(d)) return d = d.GetIndex(), a.IsEffectIndexActive(d)
        }
    }
    f.PropertyTrackState.EffectSourceAdapter = b
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance().GetSdkInstance()
        }
        Interpolate(a, d, c, e, k, h) {
            var p = this._propertyTrack.GetTrack();
            const n = p.GetObjectClass().GetPlugin();
            p = p.GetInstance().GetObjectClass().GetPlugin();
            if (n === p) return super.Interpolate(a, d, c, e, k, h)
        }
    }
    f.PropertyTrackState.PluginSourceAdapter =
        b
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._value = 0;
            this._init = !1
        }
        SetInitialState() {
            const a = this._propertyTrack.GetPropertyTrackData();
            let d = this._propertyTrack.GetPropertyTrackDataItem();
            d = a.GetFirstPropertyKeyframeDataItem(d);
            this._value = d.GetValueWithResultMode()
        }
        SetResumeState() {}
        GetValue() {
            this._init || this._propertyTrack.Interpolate(0);
            return this._value
        }
        Interpolate(a, d, c, e, k, h) {
            e = f.PropertyTrackState.NumericTypeAdapter.Interpolate;
            this._value =
                e(a, d, c, this._propertyTrack);
            this._init = !0
        }
        SaveState() {}
        ClearSaveState() {}
        GetCurrentState() {
            return this._value
        }
        CompareInitialStateWithCurrent() {
            return !1
        }
        CompareSaveStateWithCurrent() {
            return !1
        }
        _SaveToJson() {
            return {
                value: this._value,
                init: this._init
            }
        }
        _LoadFromJson(a) {
            a && (this._value = a.value, this._init = a.hasOwnProperty("init") ? a.init : !0)
        }
    }
    f.PropertyTrackState.ValueSourceAdapter = b
}
"use strict";
self.C3.PropertyTrackState.PropertyInterpolationAdapter = class {
    constructor(f) {
        this._sourceAdapter = f;
        this._propertyTrack = f.GetPropertyTrack();
        this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo();
        this._property = this._propertyTrack.GetPropertyName();
        this._firstAbsoluteUpdate = !1;
        this._target = this._saveState = null
    }
    Release() {
        this._target = this._saveState = this._worldInfo = this._propertyTrack = this._sourceAdapter = null
    }
    CleanCaches() {
        this._target = this._saveState = this._worldInfo = null
    }
    GetPropertyTrack() {
        return this._propertyTrack
    }
    GetWorldInfo() {
        return this._worldInfo ?
            this._worldInfo : this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo()
    }
    SetFirstAbsoluteUpdate(f) {
        this._firstAbsoluteUpdate = !!f
    }
    GetFirstAbsoluteUpdate() {
        return this._firstAbsoluteUpdate
    }
    SetInitialState() {}
    SetResumeState() {}
    SetSaveState() {
        this._saveState = this.GetCurrentState()
    }
    ClearSaveState() {
        this._saveState = null
    }
    GetCurrentState() {}
    CompareInitialStateWithCurrent() {}
    CompareSaveStateWithCurrent() {}
    CanChange(f) {
        return typeof this._Getter() === typeof f
    }
    BeforeChangeProperty() {}
    ChangeProperty(f, b,
        a, d, c) {}
    AfterChangeProperty() {}
    _FirstKeyframeGetter() {
        return this._PickTimelinePlaybackMode(() => {
            const f = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(f)
        }, () => {
            const f = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(f)
        }).GetAbsoluteValue()
    }
    _CurrentKeyframeGetter() {
        const f = this._propertyTrack.GetTimeline().GetTime() - this._propertyTrack.GetTrack().GetStartOffset();
        return this._PickTimelinePlaybackMode(() => {
            const b = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(f, b)
        }, () => {
            const b = this._propertyTrack.GetPropertyTrackDataItem(),
                a = this._propertyTrack.GetPropertyTrackData(),
                d = a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(f, b);
            return d ? d : a.GetLastPropertyKeyframeDataItem(b)
        }).GetAbsoluteValue()
    }
    _PickTimelinePlaybackMode(f, b) {
        return this._propertyTrack.GetTimeline().IsForwardPlayBack() ?
            f() : b()
    }
    _PickResultMode(f, b) {
        return "relative" === this._propertyTrack.GetResultMode() ? f() : b()
    }
    _PickFirstAbsoluteUpdate(f, b) {
        return this.GetFirstAbsoluteUpdate() ? (this.SetFirstAbsoluteUpdate(!1), f()) : b()
    }
    _GetAbsoluteInitialValue(f) {}
    _GetIndex() {
        return this._sourceAdapter.GetIndex()
    }
    _GetTarget() {
        return this._target ? this._target : this._target = this._sourceAdapter.GetTarget()
    }
    _PickSource(f, b, a, d, c) {
        switch (this._propertyTrack.GetSourceAdapterId()) {
            case "behavior":
                return f();
            case "effect":
                return b();
            case "instance-variable":
                return a();
            case "plugin":
                return d();
            case "world-instance":
                return c()
        }
    }
    _SaveToJson() {
        return {
            firstAbsoluteUpdate: this._firstAbsoluteUpdate,
            saveState: this._saveState
        }
    }
    _LoadFromJson(f) {
        f && (this._firstAbsoluteUpdate = f.firstAbsoluteUpdate, this._saveState = f.saveState)
    }
    _GetPropertyKeyframeStubs(f, b = !1) {
        const a = [];
        for (const d of f) {
            f = d.GetTrack().GetStartOffset();
            for (const c of d.GetPropertyKeyframeDataItems()) b && 0 === c.GetTime() ? a.push({
                time: f + c.GetTime(),
                value: c.GetAbsoluteValue()
            }) : b || a.push({
                time: f + c.GetTime(),
                value: c.GetAbsoluteValue()
            })
        }
        return a.sort((d,
            c) => d.time - c.time)
    }
    _GetLastPropertyKeyframeStub(f, b, a) {
        return this._GetPropertyKeyframeStubLowerThanPlayhead(b, a)
    }
    _GetPropertyKeyframeStubLowerThanPlayhead(f, b) {
        for (let a = b.length - 1; 0 <= a; a--)
            if (b[a].time <= f) return b[a];
        return null
    }
};
"use strict"; {
    const f = self.C3,
        b = new Map,
        a = [0, 0, 0];
    class d extends f.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                e = this._GetTarget(),
                k = this._GetIndex();
            switch (c) {
                case "behavior":
                    return this._ToColorArray(e.GetPropertyValueByIndex(k));
                case "effect":
                    return this._ToColorArray(e[k]);
                case "plugin":
                    return this._ToColorArray(e.GetPropertyValueByIndex(k));
                case "world-instance":
                    return this._ToColorArray(this._Getter())
            }
        }
        CompareInitialStateWithCurrent() {
            const c =
                this._FirstKeyframeGetter();
            return !this._CompareColors(c, this._Getter())
        }
        CompareSaveStateWithCurrent() {
            return f.IsNullOrUndefined(this._saveState) ? !1 : !this._CompareColors(this._saveState, this._Getter())
        }
        _CompareColors(c, e) {
            return c.equalsIgnoringAlpha(e)
        }
        _FirstKeyframeGetter() {
            const c = super._FirstKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _CurrentKeyframeGetter() {
            const c = super._CurrentKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _GetAbsoluteInitialValue(c) {}
        _ToColorArray(c) {
            return f.IsInstanceOf(c,
                f.Color) ? c.toArray().slice(0, 3) : c.slice(0, 3)
        }
        _GetColorFromArray(c) {
            return f.IsInstanceOf(c, f.Color) ? c : new f.Color(c[0], c[1], c[2], 1)
        }
        CanChange(c) {
            return !0
        }
        BeforeChangeProperty() {
            var c = this._propertyTrack.GetInstance();
            b.has(c) || b.set(c, new Map);
            c = b.get(c);
            const e = this._propertyTrack.GetSourceAdapterId();
            c.has(e) || c.set(e, new Map);
            c = c.get(e);
            c.has(this._property) || c.set(this._property, {
                used: !1,
                color: new f.Color(0, 0, 0, 1)
            })
        }
        _GetTmpColor(c, e, k) {
            c = b.get(c).get(e).get(k);
            c.used = !0;
            return c.color
        }
        ChangeProperty(c,
            e, k, h, p) {
            p = this._propertyTrack.GetTimeline();
            h = this._propertyTrack.GetTrack();
            c = this._propertyTrack.GetInstance();
            var n = this._propertyTrack.GetSourceAdapter();
            k = this._propertyTrack.GetSourceAdapterId();
            n = p.GetSimilarPropertyTracks(c, n, this._property);
            if (1 < n.length) {
                if (n = this._GetPropertyKeyframeStubs(n, !0), p = this._GetLastPropertyKeyframeStub(p, p.GetTime(), n))
                    if (h = h.GetStartOffset(), n = p.time - h, 0 === n) this._GetTmpColor(c, k, this._property).addRgb(e[0], e[1], e[2]);
                    else {
                        if (0 > n) return;
                        p = e[0];
                        h = e[1];
                        e = e[2];
                        n = this._propertyTrack.Interpolate(n, !1, !0);
                        p = f.Color.DiffChannel(p, n[0]);
                        h = f.Color.DiffChannel(h, n[1]);
                        e = f.Color.DiffChannel(e, n[2]);
                        this._GetTmpColor(c, k, this._property).addRgb(p, h, e)
                    }
            } else this._Setter(e[0], e[1], e[2]);
            return f.TimelineState.LAYOUT_RENDER_CHANGE
        }
        AfterChangeProperty() {
            const c = this._propertyTrack.GetInstance();
            if (b.has(c)) {
                var e = b.get(c),
                    k = this._propertyTrack.GetSourceAdapterId();
                if (e.has(k)) {
                    var h = e.get(k);
                    if (h.has(this._property)) {
                        var p = h.get(this._property),
                            n = p.color;
                        p.used && this._Setter(n.getR(),
                            n.getG(), n.getB());
                        0 === h.size && e.delete(k);
                        0 === e.size && b.delete(c)
                    }
                }
            }
        }
        _Getter() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                e = this._GetTarget(),
                k = this._GetIndex();
            switch (c) {
                case "behavior":
                    return this._GetColorFromArray(e.GetPropertyValueByIndex(k));
                case "effect":
                    return e[k].clone();
                case "plugin":
                    return this._GetColorFromArray(e.GetPropertyValueByIndex(k));
                case "world-instance":
                    return this.GetWorldInfo().GetUnpremultipliedColor().clone()
            }
        }
        _Setter(c, e, k) {
            const h = this._propertyTrack.GetSourceAdapterId(),
                p = this._GetTarget(),
                n = this._GetIndex();
            switch (h) {
                case "behavior":
                    a[0] = c;
                    a[1] = e;
                    a[2] = k;
                    p.SetPropertyValueByIndex(n, a);
                    break;
                case "effect":
                    p[n].setRgb(c, e, k);
                    break;
                case "plugin":
                    a[0] = c;
                    a[1] = e;
                    a[2] = k;
                    p.SetPropertyValueByIndex(n, a);
                    break;
                case "world-instance":
                    this.GetWorldInfo().SetUnpremultipliedColorRGB(c, e, k)
            }
        }
        _SaveToJson() {}
        _LoadFromJson(c) {}
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.ColorInterpolationAdapter = d
}
"use strict"; {
    const f = self.C3;
    class b extends f.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(a) {
            super(a)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return f.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        ChangeProperty(a, d, c, e, k) {
            c = f.PropertyTrackState.PropertySourceAdapter.GetWillChangeFunc(this._propertyTrack);
            var h = this._propertyTrack;
            const p = h.GetTrack();
            e = h.GetSourceAdapterId();
            k = h.GetTimeline();
            var n = p.GetInstance();
            h = h.GetSourceAdapter();
            n = k.GetSimilarPropertyTracks(n, h, this._property);
            1 < n.length && (n = this._GetPropertyKeyframeStubs(n), a += p.GetStartOffset(), a = this._GetLastPropertyKeyframeStub(k, a, n)) && (d = a.value);
            if (c(this._GetIndex(), this._GetTarget(), d, e)) switch (this._Setter(d), e) {
                case "plugin":
                    return f.TimelineState.LAYOUT_RENDER_CHANGE
            }
        }
        _Getter() {
            const a = this._propertyTrack.GetSourceAdapterId(),
                d = this._GetTarget(),
                c = this._GetIndex();
            switch (a) {
                case "behavior":
                    return d.GetPropertyValueByIndex(c);
                case "effect":
                    return d[c];
                case "instance-variable":
                    return d.GetInstanceVariableValue(c);
                case "plugin":
                    return d.GetPropertyValueByIndex(c)
            }
        }
        _Setter(a) {
            const d = this._propertyTrack.GetSourceAdapterId(),
                c = this._GetTarget(),
                e = this._GetIndex();
            switch (d) {
                case "behavior":
                    c.SetPropertyValueByIndex(e, a);
                    break;
                case "effect":
                    c[e] = a;
                    break;
                case "instance-variable":
                    c.SetInstanceVariableValue(e, a);
                    break;
                case "plugin":
                    c.SetPropertyValueByIndex(e,
                        a)
            }
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NoInterpolationAdapter = b
}
"use strict"; {
    const f = self.C3,
        b = new Map,
        a = (c, e, k, h, p) => b.set(c, {
            setter: e,
            absolute_setter: k,
            getter: h,
            round: p
        });
    a("offsetX", (c, e) => c.OffsetX(e), (c, e) => c.SetX(e), c => c.GetX(), !0);
    a("offsetY", (c, e) => c.OffsetY(e), (c, e) => c.SetY(e), c => c.GetY(), !0);
    a("offsetWidth", (c, e) => c.OffsetWidth(e), (c, e) => c.SetWidth(e), c => c.GetWidth(), !0);
    a("offsetHeight", (c, e) => c.OffsetHeight(e), (c, e) => c.SetHeight(e), c => c.GetHeight(), !0);
    a("offsetAngle", (c, e) => c.OffsetAngle(e), (c, e) => c.SetAngle(e), c => c.GetAngle(), !1);
    a("offsetOpacity", (c, e, k, h) => {
        k = c.GetOpacity() + e;
        0 === h._clampAccumulator ? (1 < k ? h._clampAccumulator += k - 1 : 0 > k && (h._clampAccumulator += k), c.OffsetOpacity(e)) : (c = c.GetOpacity() + e, 0 < e && 0 < h._clampAccumulator ? 1 < c && (h._clampAccumulator += c - 1) : 0 < e && 0 > h._clampAccumulator ? (h._clampAccumulator += e, 0 < h._clampAccumulator && (h._clampAccumulator = 0)) : 0 > e && 0 < h._clampAccumulator ? (h._clampAccumulator += e, 0 > h._clampAccumulator && (h._clampAccumulator = 0)) : 0 > e && 0 > h._clampAccumulator && 0 > c && (h._clampAccumulator += c))
    }, (c, e) => {
        c.SetOpacity(e)
    }, c => c.GetOpacity(), !1);
    a("offsetOriginX", (c, e) => c.OffsetOriginX(e), (c, e) => c.SetOriginX(e), c => c.GetOriginX(), !1);
    a("offsetOriginY", (c, e) => c.OffsetOriginY(e), (c, e) => c.SetOriginY(e), c => c.GetOriginY(), !1);
    a("offsetZElevation", (c, e) => c.OffsetZElevation(e), (c, e) => c.SetZElevation(e), c => c.GetZElevation(), !0);
    a("offsetScaleX", (c, e, k) => {
        const h = 0 > c.GetWidth() ? -1 : 1;
        if (c.GetTransformWithParentWidth()) {
            k = c.GetParent();
            const p = c._GetSceneGraphInfo();
            c.OffsetWidth(k.GetWidth() * p.GetStartScaleX() * h * e)
        } else c.OffsetWidth(k.GetOriginalWidth() *
            h * e)
    }, (c, e, k) => {
        c.SetWidth(k.GetOriginalWidth() * e)
    }, (c, e) => {
        const k = 0 > c.GetWidth() ? -1 : 1;
        if (c.GetTransformWithParentWidth()) {
            var h = c.GetParent(),
                p = e.GetTimeline().GetTrackInstance(h.GetInstance());
            p ? h = h.GetWidth() / p.GetOriginalWidth() : (p = h.GetInstance().GetSdkInstance(), h = p.IsOriginalSizeKnown() ? h.GetWidth() / p.GetOriginalWidth() : 1);
            return c.GetWidth() * k / (e.GetOriginalWidth() * h)
        }
        return c.GetWidth() * k / e.GetOriginalWidth()
    }, !1);
    a("offsetScaleY", (c, e, k) => {
        const h = 0 > c.GetHeight() ? -1 : 1;
        if (c.GetTransformWithParentHeight()) {
            k =
                c.GetParent();
            const p = c._GetSceneGraphInfo();
            c.OffsetHeight(k.GetHeight() * p.GetStartScaleY() * h * e)
        } else c.OffsetHeight(k.GetOriginalHeight() * h * e)
    }, (c, e, k) => {
        c.SetHeight(k.GetOriginalHeight() * e)
    }, (c, e) => {
        const k = 0 > c.GetHeight() ? -1 : 1;
        if (c.GetTransformWithParentHeight()) {
            var h = c.GetParent(),
                p = e.GetTimeline().GetTrackInstance(h.GetInstance());
            p ? h = h.GetHeight() / p.GetOriginalHeight() : (p = h.GetInstance().GetSdkInstance(), h = p.IsOriginalSizeKnown() ? h.GetHeight() / p.GetOriginalHeight() : 1);
            return c.GetHeight() *
                k / (e.GetOriginalHeight() * h)
        }
        return c.GetHeight() * k / e.GetOriginalHeight()
    }, !1);
    class d extends f.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c);
            this._clampAccumulator = this._lastValue = 0;
            this._instance_absolute_setter = this._instance_setter = this._instance_getter = null;
            this._round = !1;
            f.IsInstanceOf(this._propertyTrack.GetTimeline(), f.Tween) ? this._typeAdapter = new f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween(this) : this._typeAdapter = new f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline(this);
            c = this._propertyTrack.GetPropertyName();
            "world-instance" === this._propertyTrack.GetSourceAdapterId() && (c = b.get(c), this._instance_getter = c.getter, this._instance_setter = c.setter, this._instance_absolute_setter = c.absolute_setter, this._round = c.round)
        }
        Release() {
            this._instance_absolute_setter = this._instance_setter = this._instance_getter = this._typeAdapter = null;
            super.Release()
        }
        GetLastValue() {
            return this._lastValue
        }
        SetLastValue(c) {
            this._lastValue = c
        }
        SetInitialState() {
            const c = this._typeAdapter.SetInitialState();
            "number" === typeof c && (this._lastValue = c);
            this._clampAccumulator = 0
        }
        SetResumeState() {
            const c = this._typeAdapter.SetResumeState();
            "number" === typeof c && (this._lastValue = c)
        }
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return f.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        BeforeChangeProperty() {
            this._typeAdapter.BeforeChangeProperty()
        }
        ChangeProperty(c, e,
            k, h, p, n) {
            return this._typeAdapter.ChangeProperty(c, e, k, h, p, n)
        }
        AfterChangeProperty() {
            this._typeAdapter.AfterChangeProperty()
        }
        _Getter() {
            const c = this._GetTarget(),
                e = this._GetIndex(),
                k = this._propertyTrack.GetTrack(),
                h = this.GetWorldInfo();
            return this._PickSource(() => c.GetPropertyValueByIndex(e), () => c[e], () => c.GetInstanceVariableValue(e), () => c.GetPropertyValueByIndex(e), () => this._instance_getter(h, k))
        }
        _Setter(c, e, k) {
            const h = this._GetTarget(),
                p = this._GetIndex(),
                n = this._propertyTrack.GetTrack(),
                m = this.GetWorldInfo();
            this._PickSource(() => h.OffsetPropertyValueByIndex(p, c), () => h[p] += c, () => h.SetInstanceVariableOffset(p, c), () => h.OffsetPropertyValueByIndex(p, c), () => this._instance_setter(m, c, n, this))
        }
        _SetterAbsolute(c, e, k) {
            const h = this._GetTarget(),
                p = this._GetIndex(),
                n = this._propertyTrack.GetTrack(),
                m = this.GetWorldInfo();
            this._PickSource(() => h.SetPropertyValueByIndex(p, c), () => h[p] = c, () => h.SetInstanceVariableValue(p, c), () => h.SetPropertyValueByIndex(p, c), () => this._instance_absolute_setter(m, c, n))
        }
        _MaybeEnsureValue(c,
            e, k, h, p, n) {
            this._typeAdapter._MaybeEnsureValue(c, e, k, h, p, n)
        }
        _AddDelta(c, e, k) {
            var h = (c.toString().split(".")[1] || "").length;
            c = this._Getter();
            h = 0 === h ? this._round ? Math.round(c) : c : f.toFixed(c, h);
            this._Setter(h - c, e, k)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                v: this._lastValue,
                a: this._clampAccumulator
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._lastValue = c.v, this._clampAccumulator = c.a)
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapter = d
}
"use strict"; {
    const f = self.C3,
        b = new Map;
    class a {
        constructor(d) {
            this._numericInterpolationAdapter = d
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack();
            return d._PickResultMode(() => d._PickTimelinePlaybackMode(() => 0, () => f.PropertyTrackState.PropertySourceAdapter.GetValueAtTime(c)), () => {})
        }
        SetResumeState() {}
        BeforeChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                e = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                var k = c.GetInstance();
                b.has(k) || b.set(k, new Map);
                k = b.get(k);
                const h = c.GetSourceAdapterId();
                k.has(h) || k.set(h, new Map);
                k = k.get(h);
                k.has(e) || k.set(e, {
                    used: !1,
                    value: 0
                })
            })
        }
        _GetTmpAbsoluteValueObject(d, c, e) {
            d = b.get(d).get(c).get(e);
            d.used = !0;
            return d
        }
        ChangeProperty(d, c, e, k, h, p) {
            const n = this._numericInterpolationAdapter,
                m = this._numericInterpolationAdapter.GetPropertyTrack(),
                t = m.GetPropertyName();
            n._PickResultMode(() => {
                const q = n.GetLastValue();
                n._Setter(c -
                    q, e, k);
                p && this._MaybeEnsureValue(d, e, k, h, q, c);
                n.SetLastValue(c)
            }, () => {
                var q = m.GetTimeline(),
                    u = m.GetTrack();
                const r = m.GetInstance();
                var x = m.GetSourceAdapter();
                const z = m.GetSourceAdapterId();
                x = q.GetSimilarPropertyTracks(r, x, t);
                if (1 < x.length) {
                    if (x = n._GetPropertyKeyframeStubs(x, !0), q = n._GetLastPropertyKeyframeStub(q, q.GetTime(), x)) u = u.GetStartOffset(), u = q.time - u, 0 === u ? this._GetTmpAbsoluteValueObject(r, z, t).value += c : 0 > u || (u = m.Interpolate(u, !1, !0), this._GetTmpAbsoluteValueObject(r, z, t).value += c - u)
                } else n._SetterAbsolute(c)
            });
            return n._PickSource(() => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => f.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                e = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                const k = c.GetInstance();
                if (b.has(k)) {
                    var h = b.get(k),
                        p = c.GetSourceAdapterId();
                    if (h.has(p)) {
                        var n = h.get(p);
                        if (n.has(e)) {
                            var m = n.get(e),
                                t = m.value;
                            m.used && d._SetterAbsolute(t);
                            n.delete(e);
                            0 === n.size && h.delete(p);
                            0 === h.size && b.delete(k)
                        }
                    }
                }
            })
        }
        _MaybeEnsureValue(d, c, e, k, h, p) {
            const n = this._numericInterpolationAdapter;
            k || (c && d === c.GetTime() ? n._AddDelta(c.GetValueWithResultMode(), c, e) : e && d === e.GetTime() ? n._AddDelta(e.GetValueWithResultMode(), c, e) : 0 === p - h && n._AddDelta(c.GetValueWithResultMode(), c, e))
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline = a
}
"use strict"; {
    const f = self.C3;
    new Map;
    class b {
        constructor(a) {
            this._numericInterpolationAdapter = a
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const a = this._numericInterpolationAdapter;
            a.SetFirstAbsoluteUpdate(!0);
            return this._GetAbsoluteInitialValue(a._FirstKeyframeGetter())
        }
        SetResumeState() {
            const a = this._numericInterpolationAdapter;
            if (a._FirstKeyframeGetter() !== a._CurrentKeyframeGetter()) return a.SetFirstAbsoluteUpdate(!0), this._GetAbsoluteInitialValue(a._CurrentKeyframeGetter())
        }
        BeforeChangeProperty() {}
        ChangeProperty(a,
            d, c, e, k, h) {
            const p = this._numericInterpolationAdapter,
                n = p.GetLastValue();
            p._PickResultMode(() => {
                p._Setter(d - n, c, e);
                h && this._MaybeEnsureValue(a, c, e, k, n, d)
            }, () => {
                p._PickFirstAbsoluteUpdate(() => {
                    p._Setter(n, c, e)
                }, () => {
                    p._Setter(d - n, c, e);
                    h && this._MaybeEnsureValue(a, c, e, k, n, d)
                })
            });
            p.SetLastValue(d);
            return p._PickSource(() => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => f.TimelineState.LAYOUT_RENDER_CHANGE, () => f.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {}
        _GetAbsoluteInitialValue(a) {
            return a -
                this._numericInterpolationAdapter.GetCurrentState()
        }
        _MaybeEnsureValue(a, d, c, e, k, h) {
            const p = this._numericInterpolationAdapter;
            e ? d && a === d.GetTime() ? p._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? p._AddDelta(c.GetValueWithResultMode(), d, c) : c || p._AddDelta(d.GetValueWithResultMode(), d, c) : d && a === d.GetTime() ? p._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? p._AddDelta(c.GetValueWithResultMode(), d, c) : 0 === h - k && p._AddDelta(d.GetValueWithResultMode(), d, c)
        }
    }
    f.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween =
        b
}
"use strict"; {
    const f = self.C3,
        b = self.Ease;
    f.PropertyTrackState.NumericTypeAdapter = class {
        constructor() {}
        static WillChange(a, d, c, e) {
            let k;
            switch (e) {
                case "behavior":
                    k = d.GetPropertyValueByIndex(a);
                    break;
                case "effect":
                    k = d[a];
                    break;
                case "instance-variable":
                    k = d.GetInstanceVariableValue(a);
                    break;
                case "plugin":
                    k = d.GetPropertyValueByIndex(a)
            }
            return k === c ? !1 : !0
        }
        static Interpolate(a, d, c, e) {
            if (!c) return c = e.GetPropertyTrackDataItem(), c = e.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(c), c.GetValueWithResultMode();
            var k =
                e.GetInterpolationMode();
            "default" === k && (k = "continuous");
            "combo" === e.GetPropertyType() && (k = "discrete");
            if ("discrete" === k) return d.GetValueWithResultMode();
            if ("continuous" === k || "step" === k) {
                "step" === k && (k = e.GetTimeline().GetStep(), 0 !== k && (k = 1 / k, a = Math.floor(a * k) / k));
                var h = d.GetTime();
                const p = c.GetTime();
                k = d.GetValueWithResultMode();
                const n = c.GetValueWithResultMode();
                if (k === n) return k;
                a = f.normalize(a, h, p);
                const m = d.GetEase();
                d = d.GetAddOn("cubic-bezier");
                c = c.GetAddOn("cubic-bezier");
                d && d.GetStartEnable() &&
                    c && c.GetEndEnable() ? (h = p - h, h = b.GetRuntimeEase(m)(h * a, 0, 1, h), h = b.GetRuntimeEase("cubicbezier")(h, k, k + d.GetStartAnchor(), n + c.GetEndAnchor(), n)) : h = b.GetRuntimeEase(m)((p - h) * a, k, n - k, p - h);
                return "integer" === e.GetPropertyType() ? Math.floor(h) : h
            }
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.PropertyTrackState.AngleTypeAdapter = class {
        constructor() {}
        static WillChange(b, a, d, c) {
            let e;
            switch (c) {
                case "behavior":
                    e = a.GetPropertyValueByIndex(b);
                    break;
                case "effect":
                    e = a[b];
                    break;
                case "instance-variable":
                    e = a.GetInstanceVariableValue(b);
                    break;
                case "plugin":
                    e = a.GetPropertyValueByIndex(b)
            }
            return e === d ? !1 : !0
        }
        static Interpolate(b, a, d, c) {
            if (!d) return a = c.GetPropertyTrackDataItem(), a = c.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(a), a.GetValueWithResultMode();
            var e = c.GetInterpolationMode();
            "default" === e && (e = "continuous");
            "combo" === c.GetPropertyType() && (e = "discrete");
            if ("discrete" === e) return a.GetValueWithResultMode();
            if ("continuous" === e || "step" === e) {
                "step" === e && (c = c.GetTimeline().GetStep(), 0 !== c && (c = 1 / c, b = Math.floor(b * c) / c));
                const k = a.GetTime(),
                    h = d.GetTime();
                c = a.GetValueWithResultMode();
                d = d.GetValueWithResultMode();
                if (e = a.GetAddOn("angle")) {
                    const p = e.GetRevolutions();
                    if (c === d && 0 === p) return c;
                    b = f.normalize(b, k, h);
                    a = self.Ease.GetRuntimeEase(a.GetEase())(b, 0, 1, 1);
                    switch (e.GetDirection()) {
                        case "closest":
                            return f.angleLerp(c,
                                d, a, p);
                        case "clockwise":
                            return f.angleLerpClockwise(c, d, a, p);
                        case "anti-clockwise":
                            return f.angleLerpAntiClockwise(c, d, a, p)
                    }
                } else {
                    if (c === d) return c;
                    b = f.normalize(b, k, h);
                    a = self.Ease.GetRuntimeEase(a.GetEase());
                    return f.angleLerp(c, d, a(b, 0, 1, 1))
                }
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.BooleanTypeAdapter = class {
    constructor() {}
    static WillChange(f, b, a, d) {
        let c;
        switch (d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(f);
                break;
            case "effect":
                c = b[f];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(f);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(f)
        }
        return !!c === !!a ? !1 : !0
    }
    static Interpolate(f, b, a, d) {
        return a ? b.GetValueWithResultMode() ? 1 : 0 : (f = d.GetPropertyTrackDataItem(), f = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(f), f.GetValueWithResultMode() ?
            1 : 0)
    }
};
"use strict"; {
    const f = self.C3,
        b = [0, 0, 0],
        a = [0, 0, 0],
        d = [0, 0, 0];
    f.PropertyTrackState.ColorTypeAdapter = class {
        constructor() {}
        static WillChange(c, e, k, h) {
            let p;
            switch (h) {
                case "behavior":
                    p = e.GetPropertyValueByIndex(c);
                    break;
                case "effect":
                    p = e[c];
                    break;
                case "instance-variable":
                    p = e.GetInstanceVariableValue(c);
                    break;
                case "plugin":
                    p = e.GetPropertyValueByIndex(c)
            }
            Array.isArray(k) ? (b[0] = k[0], b[1] = k[1], b[2] = k[2]) : (d.parseCommaSeparatedRgb(k), b[0] = Math.floor(255 * d.getR()), b[1] = Math.floor(255 * d.getG()), b[2] = Math.floor(255 * d.getB()));
            Array.isArray(p) ? (a[0] = p[0], a[1] = p[1], a[2] = p[2]) : (d.parseCommaSeparatedRgb(p), a[0] = Math.floor(255 * d.getR()), a[1] = Math.floor(255 * d.getG()), a[2] = Math.floor(255 * d.getB()));
            return b[0] !== a[0] || b[1] !== a[1] || b[2] !== a[2] ? !0 : !1
        }
        static Interpolate(c, e, k, h) {
            if (!k) {
                var p = h.GetPropertyTrackDataItem();
                p = h.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(p);
                h = p.GetValueWithResultMode();
                b[0] = h[0];
                b[1] = h[1];
                b[2] = h[2];
                return b
            }
            p = h.GetInterpolationMode();
            "default" === p && (p = "continuous");
            if ("discrete" === p) return h =
                e.GetValueWithResultMode(), b[0] = h[0], b[1] = h[1], b[2] = h[2], b;
            if ("continuous" === p || "step" === p) {
                "step" === p && (h = h.GetTimeline().GetStep(), 0 !== h && (h = 1 / h, c = Math.floor(c * h) / h));
                h = e.GetTime();
                p = k.GetTime();
                var n = e.GetValueWithResultMode(),
                    m = k.GetValueWithResultMode();
                c = f.normalize(c, h, p);
                var t = e.GetEase();
                e = n[0];
                k = n[1];
                n = n[2];
                const q = m[0],
                    u = m[1];
                m = m[2];
                t = self.Ease.GetRuntimeEase(t);
                h = p - h;
                p = h * c;
                b[0] = e === q ? e : t(p, e, q - e, h);
                b[1] = k === u ? k : t(p, k, u - k, h);
                b[2] = n === m ? n : t(p, n, m - n, h);
                return b
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.TextTypeAdapter = class {
    constructor() {}
    static WillChange(f, b, a, d) {
        let c;
        switch (d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(f);
                break;
            case "effect":
                c = b[f];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(f);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(f)
        }
        return c === a ? !1 : !0
    }
    static Interpolate(f, b, a, d) {
        return a ? b.GetValueWithResultMode() : (f = d.GetPropertyTrackDataItem(), f = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(f), f.GetValueWithResultMode())
    }
};
"use strict"; {
    const f = self.C3;
    f.TimelineDataManager = class {
        constructor() {
            this._timelineDataItems = new Map
        }
        Release() {
            for (const b of this._timelineDataItems.values()) b.Release();
            this._timelineDataItems.clear();
            this._timelineDataItems = null
        }
        Add(b) {
            b = new f.TimelineDataItem(b);
            const a = b.GetName();
            this._timelineDataItems.set(a, b)
        }
        Get(b) {
            return this._timelineDataItems.get(b)
        }
        GetNameId() {
            return 0
        }
        static _CreateDataItems(b, a, d, c) {
            if (a)
                for (const e of a) f.TimelineDataManager._CreateDataItem("create", e, b, d, c)
        }
        static _LoadDataItemsFromJson(b, a,
            d, c) {
            b.length ? a.forEach((e, k) => {
                b[k]._LoadFromJson(e)
            }) : a.forEach(e => {
                f.TimelineDataManager._CreateDataItem("load", e, b, d, c)
            })
        }
        static _CreateDataItem(b, a, d, c, e) {
            let k;
            if ("function" === typeof c) switch (b) {
                case "load":
                    k = new c(null, e);
                    break;
                case "create":
                    k = new c(a, e)
            } else if ("object" === typeof c) switch (c = c.map.get(a[c.prop]), b) {
                case "load":
                    k = new c(null, e);
                    break;
                case "create":
                    k = new c(a, e)
            }
            switch (b) {
                case "load":
                    k._LoadFromJson(a);
                    d.push(k);
                    break;
                case "create":
                    if ("function" === typeof k.GetEnable && !k.GetEnable()) return k.Release();
                    d.push(k)
            }
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.TimelineDataItem = class {
        constructor(b) {
            this._name = "";
            this._totalTime = NaN;
            this._step = 0;
            this._resultMode = this._interpolationMode = "default";
            this._pingPong = this._loop = !1;
            this._repeatCount = 1;
            this._trackData = null;
            b && (this._name = b[0], this._totalTime = b[1], this._step = b[2], this._interpolationMode = b[3], this._resultMode = b[4], this._loop = !!b[6], this._pingPong = !!b[7], this._repeatCount = b[8], this._trackData = new f.TrackData(b[5], this))
        }
        Release() {
            this._trackData.Release();
            this._trackData = null
        }
        GetTrackData() {
            this._trackData ||
                (this._trackData = new f.TrackData(null, this));
            return this._trackData
        }
        GetName() {
            return this._name
        }
        SetName(b) {
            this._name = b
        }
        GetTotalTime() {
            return this._totalTime
        }
        SetTotalTime(b) {
            this._totalTime = b
        }
        GetStep() {
            return this._step
        }
        SetStep(b) {
            this._step = b
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(b) {
            this._interpolationMode = b
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(b) {
            this._resultMode = b
        }
        GetLoop() {
            return this._loop
        }
        SetLoop(b) {
            this._loop = b
        }
        GetPingPong() {
            return this._pingPong
        }
        SetPingPong(b) {
            this._pingPong =
                b
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        _SaveToJson() {
            return {
                trackDataJson: this._trackData._SaveToJson(),
                name: this._name,
                totalTime: this._totalTime,
                step: this._step,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                loop: this._loop,
                pingPong: this._pingPong,
                repeatCount: this._repeatCount
            }
        }
        _LoadFromJson(b) {
            b && (this.GetTrackData()._LoadFromJson(b.trackDataJson), this._name = b.name, this._totalTime = b.totalTime, this._step = b.step, this._interpolationMode = b.interpolationMode, this._resultMode =
                b.resultMode, this._loop = b.loop, this._pingPong = b.pingPong, this._repeatCount = b.repeatCount)
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._trackData = d;
            this._additionalInstanceData = this._instanceData = null;
            this._objectClassIndex = this._instanceUid = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyTrackData = this._keyframeData = null;
            this._id = "";
            this._nestedData = null;
            this._startOffset = 0;
            this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime();
            a && (this._instanceData = a[0], this._instanceUid = a[0][2], this._objectClassIndex = a[0][1], this._interpolationMode =
                a[1], this._resultMode = a[2], this._enabled = !!a[3], a[6] && (this._id = a[6]), a[7] && (this._nestedData = a[7], this._startOffset = a[7][0], this._localTotalTime = a[7][1]), a[8] && (this._additionalInstanceData = a[8]), this._keyframeData = new f.KeyframeData(a[4], this), this._propertyTrackData = new f.PropertyTrackData(a[5], this))
        }
        Release() {
            this._trackData = this._instanceData = null;
            this._keyframeData && (this._keyframeData.Release(), this._keyframeData = null);
            this._propertyTrackData && (this._propertyTrackData.Release(), this._propertyTrackData =
                null);
            this._nestedData = null
        }
        GetTrackData() {
            return this._trackData
        }
        GetKeyframeData() {
            this._keyframeData || (this._keyframeData = new f.KeyframeData(null, this));
            return this._keyframeData
        }
        GetPropertyTrackData() {
            this._propertyTrackData || (this._propertyTrackData = new f.PropertyTrackData(null, this));
            return this._propertyTrackData
        }
        GetInstanceData() {
            return this._instanceData
        }
        GetObjectClassIndex() {
            return this._objectClassIndex
        }
        SetObjectClassIndex(a) {
            this._objectClassIndex = a
        }
        GetInstanceUID() {
            return this._instanceUid
        }
        SetInstanceUID(a) {
            this._instanceUid =
                a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode = a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        GetId() {
            return this._id
        }
        GetStartOffset() {
            return this._startOffset
        }
        GetLocalTotalTime() {
            return this._localTotalTime
        }
        SetLocalTotalTime(a) {
            this._localTotalTime = a
        }
        GetOriginalWidth() {
            return this._additionalInstanceData[0]
        }
        SetOriginalWidth(a) {
            this._additionalInstanceData ||
                (this._additionalInstanceData = []);
            this._additionalInstanceData[0] = a
        }
        GetOriginalHeight() {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            return this._additionalInstanceData[1]
        }
        SetOriginalHeight(a) {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            this._additionalInstanceData[1] = a
        }
        _SaveToJson() {
            return {
                keyframeDataJson: this._keyframeData._SaveToJson(),
                propertyTrackDataJson: this._propertyTrackData._SaveToJson(),
                instanceData: this._instanceData,
                additionalInstanceData: this._additionalInstanceData,
                instanceUid: this._instanceUid,
                objectClassIndex: this._objectClassIndex,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled,
                id: this._id,
                nestedData: this._nestedData
            }
        }
        _LoadFromJson(a) {
            a && (this._instanceData = a.instanceData, this._instanceUid = a.instanceUid, this._objectClassIndex = a.objectClassIndex, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled = a.enabled, this._id = a.id, this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime(),
                a.nestedData && (this._nestedData = a.nestedData, this._startOffset = this._nestedData[0], this._localTotalTime = this._nestedData[1]), a.additionalInstanceData && (this._additionalInstanceData = a.additionalInstanceData), this.GetKeyframeData()._LoadFromJson(a.keyframeDataJson), this.GetPropertyTrackData()._LoadFromJson(a.propertyTrackDataJson))
        }
    }
    f.TrackData = class {
        constructor(a, d) {
            this._timelineDataItem = d;
            this._trackDataItems = [];
            this._keyframeTimeMap = new Map;
            f.TimelineDataManager._CreateDataItems(this._trackDataItems,
                a, b, this)
        }
        Release() {
            this._timelineDataItem = null;
            for (const a of this._trackDataItems) a.Release();
            f.clearArray(this._trackDataItems);
            this._trackDataItems = null;
            this._keyframeTimeMap.clear();
            this._keyframeTimeMap = null
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        AddEmptyTrackDataItem() {
            const a = new b(null, this);
            this._trackDataItems.push(a);
            return a
        }
        GetFirstKeyframeDataItem(a) {
            return a.GetKeyframeData().GetKeyframeDataItemArray()[0]
        }
        GetLastKeyframeDataItem(a) {
            a = a.GetKeyframeData().GetKeyframeDataItemArray();
            return a[a.length - 1]
        }
        GetKeyFrameDataItemAtTime(a, d) {
            const c = this._keyframeTimeMap.get(d);
            if (c && c.has(a)) return c.get(a);
            for (const e of d.GetKeyframeData().keyframeDataItems())
                if (e.GetTime() === a) return c || this._keyframeTimeMap.set(d, new Map), this._keyframeTimeMap.get(d).set(a, e), e
        }
        GetFirstKeyFrameDataItemHigherThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItems())
                if (c.GetTime() > a) return c
        }
        GetFirstKeyFrameDataItemHigherOrEqualThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItems())
                if (c.GetTime() >=
                    a) return c
        }
        GetFirstKeyFrameDataItemLowerOrEqualThan(a, d) {
            for (const c of d.GetKeyframeData().keyframeDataItemsReverse())
                if (c.GetTime() <= a) return c
        }* trackDataItems() {
            for (const a of this._trackDataItems) yield a
        }
        _SaveToJson() {
            return {
                trackDataItemsJson: this._trackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._trackDataItems, a.trackDataItemsJson, b, this)
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._propertyTrackData = d;
            this._sourceAdapterId = "";
            this._type = this._property = this._sourceAdapterArguments = null;
            this._max = this._min = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyKeyframeData = null;
            a && (this._sourceAdapterId = a[0][0], this._sourceAdapterArguments = a[0].slice(1), this._property = a[1], this._type = a[2], this._min = a[3], this._max = a[4], this._interpolationMode = a[5], this._resultMode = a[6], this._enabled = !!a[7], this._propertyKeyframeData =
                new f.PropertyKeyframeData(a[8], this))
        }
        Release() {
            this._propertyKeyframeData.Release();
            this._sourceAdapterArguments = this._propertyTrackData = this._propertyKeyframeData = null
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetPropertyKeyframeData() {
            this._propertyKeyframeData || (this._propertyKeyframeData = new f.PropertyKeyframeData(null, this));
            return this._propertyKeyframeData
        }
        GetSourceAdapterId() {
            return this._sourceAdapterId
        }
        SetSourceAdapterId(a) {
            this._sourceAdapterId = a
        }
        GetSourceAdapterArguments() {
            return this._sourceAdapterArguments
        }
        SetSourceAdapterArguments(a) {
            this._sourceAdapterArguments =
                a
        }
        GetProperty() {
            return this._property
        }
        SetProperty(a) {
            this._property = a
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetMin() {
            return this._min
        }
        SetMin(a) {
            this._min = a
        }
        GetMax() {
            return this._max
        }
        SetMax(a) {
            this._max = a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode = a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataJson: this._propertyKeyframeData._SaveToJson(),
                sourceAdapterId: this._sourceAdapterId,
                sourceAdapterArguments: this._sourceAdapterArguments,
                property: this._property,
                type: this._type,
                min: this._min,
                max: this._max,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled
            }
        }
        _LoadFromJson(a) {
            a && (this._sourceAdapterId = a.sourceAdapterId, this._sourceAdapterArguments = a.sourceAdapterArguments, this._property = a.property, this._type = a.type, this._min = a.min, this._max = a.max, this._interpolationMode = a.interpolationMode, this._resultMode =
                a.resultMode, this._enabled = a.enabled, this.GetPropertyKeyframeData()._LoadFromJson(a.propertyKeyframeDataJson))
        }
    }
    f.PropertyTrackData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._propertyTrackDataItems = [];
            this._propertyKeyframeTimeMap = new Map;
            f.TimelineDataManager._CreateDataItems(this._propertyTrackDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const a of this._propertyTrackDataItems) a.Release();
            f.clearArray(this._propertyTrackDataItems);
            this._propertyTrackDataItems = null;
            this._propertyKeyframeTimeMap.clear();
            this._propertyKeyframeTimeMap = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        AddEmptyPropertyTrackDataItem() {
            const a = new b(null, this);
            this._propertyTrackDataItems.push(a);
            return a
        }
        GetFirstPropertyKeyframeDataItem(a) {
            return a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()[0]
        }
        GetLastPropertyKeyframeDataItem(a) {
            a = a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray();
            return a[a.length - 1]
        }
        GetPropertyKeyFrameDataItemAtTime(a, d) {
            const c = this._propertyKeyframeTimeMap.get(d);
            if (c &&
                c.has(a)) return c.get(a);
            const e = d.GetPropertyKeyframeData();
            for (const k of e.propertyKeyframeDataItems())
                if (k.GetTime() === a) return c || this._propertyKeyframeTimeMap.set(d, new Map), this._propertyKeyframeTimeMap.get(d).set(a, k), k
        }
        GetFirstPropertyKeyFrameDataItemHigherThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItems())
                if (c.GetTime() > a) return c
        }
        GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItems())
                if (c.GetTime() >=
                    a) return c
        }
        GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for (const c of d.propertyKeyframeDataItemsReverse())
                if (c.GetTime() <= a) return c
        }* propertyTrackDataItems() {
            for (const a of this._propertyTrackDataItems) yield a
        }
        _SaveToJson() {
            return {
                propertyTrackDataItemsJson: this._propertyTrackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._propertyTrackDataItems, a.propertyTrackDataItemsJson, b, this)
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._keyframeData = d;
            this._time = -1;
            this._ease = "noease";
            this._enable = !1;
            this._lowerTags = this._tags = null;
            a && (this._time = a[0], this._ease = a[1], this._enable = !!a[2], this._tags = (a = a[3]) ? a.split(" ") : [], this._lowerTags = new Set(this._tags.map(c => c.toLowerCase())))
        }
        Release() {
            this._keyframeData = null;
            f.clearArray(this._tags);
            this._tags = null;
            this._lowerTags.clear();
            this._lowerTags = null
        }
        GetKeyframeData() {
            return this._keyframeData
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time =
                a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease = a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetTags() {
            return this._tags
        }
        SetTags(a) {
            this._tags = a ? a.split(" ") : [];
            this._lowerTags = new Set(this._tags.map(d => d.toLowerCase()))
        }
        GetLowerTags() {
            return this._lowerTags
        }
        HasTag(a) {
            return this._lowerTags.has(a.toLowerCase())
        }
        _SaveToJson() {
            return {
                time: this._time,
                ease: this._ease,
                enable: this._enable,
                tags: this._tags
            }
        }
        _LoadFromJson(a) {
            a && (this._time = a.time, this._ease = a.ease, this._enable = a.enable,
                this._tags = a.tags, this._lowerTags = new Set(this._tags.map(d => d.toLowerCase())))
        }
    }
    f.KeyframeData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._keyframeDataItems = [];
            f.TimelineDataManager._CreateDataItems(this._keyframeDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const a of this._keyframeDataItems) a.Release();
            f.clearArray(this._keyframeDataItems);
            this._keyframeDataItems = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetKeyframeDataItemCount() {
            return this._keyframeDataItems.length
        }
        GetKeyframeDataItemArray() {
            return this._keyframeDataItems
        }
        AddEmptyKeyframeDataItem() {
            const a =
                new b(null, this);
            this._keyframeDataItems.push(a);
            return a
        }
        DeleteKeyframeDataItems(a) {
            for (const d of this._keyframeDataItems) {
                if (!a(d)) continue;
                const c = this._keyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._keyframeDataItems.splice(c, 1))
            }
            this.SortKeyframeDataItems()
        }
        SortKeyframeDataItems() {
            this._keyframeDataItems.sort((a, d) => a.GetTime() - d.GetTime())
        }
        GetKeyframeDataItemIndex(a) {
            return this._keyframeDataItems.indexOf(a)
        }
        GetKeyframeDataItemFromIndex(a) {
            return this._keyframeDataItems[a]
        }* keyframeDataItems() {
            for (const a of this._keyframeDataItems) yield a
        }* keyframeDataItemsReverse() {
            for (let a =
                    this._keyframeDataItems.length - 1; 0 <= a; a--) yield this._keyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                keyframeDataItemsJson: this._keyframeDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._keyframeDataItems, a.keyframeDataItemsJson, b, this)
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor(a, d) {
            this._propertyKeyframeData = d;
            this._aValue = this._value = null;
            this._type = "";
            this._time = NaN;
            this._ease = "noease";
            this._enable = !1;
            this._addonData = null;
            a && (this._value = a[0][0], this._aValue = a[0][1], this._type = a[0][2], this._time = a[1], this._ease = a[2], this._enable = !!a[3], this._addonData = null, a[4] && (this._addonData = new f.AddonData(a[4], this)))
        }
        Release() {
            this._propertyKeyframeData = null;
            this._addonData && (this._addonData.Release(), this._addonData = null)
        }
        GetAddonData() {
            return this._addonData
        }
        GetValue() {
            return this._value
        }
        SetValue(a) {
            "color" ===
            this._type && f.IsFiniteNumber(a) ? (this._value[0] = f.GetRValue(a), this._value[1] = f.GetGValue(a), this._value[2] = f.GetBValue(a)) : this._value = a
        }
        GetAbsoluteValue() {
            return this._aValue
        }
        SetAbsoluteValue(a) {
            "color" === this._type && f.IsFiniteNumber(a) ? (this._aValue[0] = f.GetRValue(a), this._aValue[1] = f.GetGValue(a), this._aValue[2] = f.GetBValue(a)) : this._aValue = a
        }
        GetValueWithResultMode() {
            const a = this._propertyKeyframeData.GetPropertyTrackDataItem().GetResultMode();
            if ("relative" === a) return this.GetValue();
            if ("absolute" ===
                a) return this.GetAbsoluteValue()
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease = a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetAddOn(a) {
            if (this.GetAddonData())
                for (const d of this.GetAddonData().addonDataItems())
                    if (d.GetId() === a) return d
        }
        _SaveToJson() {
            const a = this._addonData;
            return {
                addonDataJson: a ? a._SaveToJson() : a,
                value: this._value,
                aValue: this._aValue,
                type: this._type,
                time: this._time,
                ease: this._ease,
                enable: this._enable
            }
        }
        _LoadFromJson(a) {
            a && (a.addonDataJson && this._addonData._SetFromJson(a.addonDataJson), this._value = a.value, this._aValue = a.aValue, this._type = a.type, this._time = a.time, this._ease = a.ease, this._enable = a.enable)
        }
    }
    f.PropertyKeyframeData = class {
        constructor(a, d) {
            this._propertyTrackDataItem = d;
            this._propertyKeyframeDataItems = [];
            f.TimelineDataManager._CreateDataItems(this._propertyKeyframeDataItems, a, b, this)
        }
        Release() {
            this._propertyTrackDataItem = null;
            for (const a of this._propertyKeyframeDataItems) a.Release();
            f.clearArray(this._propertyKeyframeDataItems);
            this._propertyKeyframeDataItems = null
        }
        AddEmptyPropertyKeyframeDataItem() {
            const a = new b(null, this);
            this._propertyKeyframeDataItems.push(a);
            return a
        }
        DeletePropertyKeyframeDataItems(a) {
            for (const d of this._propertyKeyframeDataItems) {
                if (!a(d)) continue;
                const c = this._propertyKeyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._propertyKeyframeDataItems.splice(c, 1))
            }
            this.SortPropertyKeyFrameDataItems()
        }
        SortPropertyKeyFrameDataItems() {
            this._propertyKeyframeDataItems.sort((a,
                d) => a.GetTime() - d.GetTime())
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyKeyframeDataItemCount() {
            return this._propertyKeyframeDataItems.length
        }
        GetPropertyKeyframeDataItemArray() {
            return this._propertyKeyframeDataItems
        }* propertyKeyframeDataItems() {
            for (const a of this._propertyKeyframeDataItems) yield a
        }* propertyKeyframeDataItemsReverse() {
            for (let a = this._propertyKeyframeDataItems.length - 1; 0 <= a; a--) yield this._propertyKeyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataItemsJson: this._propertyKeyframeDataItems.map(a =>
                    a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && f.TimelineDataManager._LoadDataItemsFromJson(this._propertyKeyframeDataItems, a.propertyKeyframeDataItemsJson, b, this)
        }
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor(c, e) {
            this._addonData = e;
            this._id = c[0];
            this._data = c[1]
        }
        Release() {
            this._data = this._addonData = null
        }
        GetAddonData() {
            return this._addonData
        }
        GetId() {
            return this._id
        }
        _SaveToJson() {
            return {
                id: this._id,
                data: this._data
            }
        }
        _LoadFromJson(c) {
            c && (this._id = c.id, this._data = c.data)
        }
    }
    class a extends b {
        constructor(c, e) {
            super(c, e);
            this._startAnchor = this._data[0];
            this._startEnable = !!this._data[1];
            this._endAnchor = this._data[2];
            this._endEnable = !!this._data[3]
        }
        Release() {
            super.Release()
        }
        GetStartAnchor() {
            return this._startAnchor
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndAnchor() {
            return this._endAnchor
        }
        GetEndEnable() {
            return this._endEnable
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                startAnchor: this._startAnchor,
                startEnable: !!this._startEnable,
                endAnchor: this._endAnchor,
                endEnable: !!this._endEnable
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._startAnchor = c.startAnchor, this._startEnable = !!c.startEnable, this._endAnchor = c.endAnchor, this._endEnable = !!c.endEnable)
        }
    }
    class d extends b {
        constructor(c, e) {
            super(c, e);
            this._direction = this._data[0];
            this._revolutions = this._data[1]
        }
        Release() {
            super.Release()
        }
        GetDirection() {
            return this._direction
        }
        GetRevolutions() {
            return this._revolutions
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                direction: this._direction,
                revolutions: this._revolutions
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._direction = c.direction, this._revolutions = c.revolutions)
        }
    }
    f.AddonData = class {
        constructor(c, e) {
            this._propertyKeyframeDataItem = e;
            this._addonDataItems = [];
            f.TimelineDataManager._CreateDataItems(this._addonDataItems, c, {
                prop: 0,
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
        Release() {
            this._propertyKeyframeDataItem = null;
            for (const c of this._addonDataItems) c.Release();
            f.clearArray(this._addonDataItems);
            this._addonDataItems = null
        }
        GetPropertyKeyframeDataItem() {
            return this._propertyKeyframeDataItem
        }* addonDataItems() {
            for (const c of this._addonDataItems) yield c
        }
        _SaveToJson() {
            return {
                addonDataItemsJson: this._addonDataItems.map(c => c._SaveToJson())
            }
        }
        _LoadFromJson(c) {
            c && f.TimelineDataManager._LoadDataItemsFromJson(this._addonDataItems, c.addonDataItemsJson, {
                prop: "id",
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
    }
}
"use strict"; {
    const f = self.C3;
    let b = 0;
    f.Tween = class extends f.TimelineState {
        constructor(a, d) {
            super(`tween-${b++}`, a, d);
            this._id = "";
            this._destroyInstanceOnComplete = !1;
            this._initialValueMode = "start-value";
            this._on_started_callbacks = this._on_completed_callbacks = null
        }
        GetInstance() {
            var a = this.GetTracks();
            if (a && a.length && (a = a[0])) {
                var d = a.GetInstance();
                return a.IsInstanceValid() ? d : null
            }
        }
        AddStartedCallback(a) {
            this._on_started_callbacks || (this._on_started_callbacks = []);
            this._on_started_callbacks.push(a)
        }
        AddCompletedCallback(a) {
            this._on_completed_callbacks ||
                (this._on_completed_callbacks = []);
            this._on_completed_callbacks.push(a)
        }
        RemoveStartedCallback(a) {
            this._on_started_callbacks && (a = this._on_started_callbacks.indexOf(a), -1 !== a && this._on_started_callbacks.splice(a, 1))
        }
        RemoveCompletedCallback(a) {
            this._on_completed_callbacks && (a = this._on_completed_callbacks.indexOf(a), -1 !== a && this._on_completed_callbacks.splice(a, 1))
        }
        SetStartValue(a, d) {
            for (const e of this._tracks)
                for (const k of e._propertyTracks) {
                    if (k.GetPropertyName() !== d) continue;
                    var c = k.GetPropertyTrackData();
                    const h = k.GetPropertyTrackDataItem();
                    c = c.GetFirstPropertyKeyframeDataItem(h);
                    c.SetValue(a);
                    c.SetAbsoluteValue(a)
                }
        }
        _GetPropertyTrackState(a) {
            for (const d of this._tracks)
                for (const c of d._propertyTracks)
                    if (c.GetPropertyName() === a) return c
        }
        BeforeSetEndValues(a) {
            for (const e of a) a = this._GetPropertyTrackState(e), this.SetStartValue(a.GetCurrentState(), e);
            if (this.IsForwardPlayBack()) {
                var d = this.GetTotalTime() - this.GetTime();
                this.SetTotalTime(d);
                for (var c of this._tracks) c.SetLocalTotalTime(d);
                this._SetTime(0)
            } else {
                c =
                    this.GetTime();
                this.SetTotalTime(c);
                for (d of this._tracks) d.SetLocalTotalTime(c);
                this._SetTime(c)
            }
            this.SetInitialStateFromSetTime()
        }
        SetEndValue(a, d) {
            var c = this._GetPropertyTrackState(d);
            d = c.GetPropertyTrackData();
            c = c.GetPropertyTrackDataItem();
            d = d.GetLastPropertyKeyframeDataItem(c);
            d.SetTime(this.GetTotalTime());
            d.SetValue(a);
            d.SetAbsoluteValue(a)
        }
        SetId(a) {
            this._id = a
        }
        GetId() {
            return this._id
        }
        SetInitialValueMode(a) {
            this._initialValueMode = a
        }
        GetInitialValueMode() {
            return this._initialValueMode
        }
        SetDestroyInstanceOnComplete(a) {
            this._destroyInstanceOnComplete =
                a
        }
        GetDestroyInstanceOnComplete() {
            return this._destroyInstanceOnComplete
        }
        OnStarted() {
            if (this._on_started_callbacks)
                for (const a of this._on_started_callbacks) a(this);
            if (!this.IsComplete())
                for (const a of this._tracks) a.CompareSaveStateWithCurrent()
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            if (!this._finishedTriggers && (this._finishedTriggers = !0, this._on_completed_callbacks))
                for (const a of this._on_completed_callbacks) a(this)
        }
        SetTime(a) {
            this._DeleteIntermediateKeyframes();
            super.SetTime(a)
        }
        SetInitialState(a) {
            if (!this.InitialStateSet() && "current-state" === this.GetInitialValueMode())
                for (const d of this._tracks) d.CompareInitialStateWithCurrent();
            super.SetInitialState(a)
        }
        Stop(a = !1) {
            super.Stop(a);
            if (!this.IsComplete())
                for (const d of this._tracks) d.SaveState()
        }
        Reset(a = !0, d = !1) {
            this._DeleteIntermediateKeyframes();
            super.Reset(a, d)
        }
        _DeleteIntermediateKeyframes() {
            for (const a of this._tracks) {
                const d = c => {
                    c = c.GetTime();
                    const e = this.GetTotalTime();
                    return 0 !== c && c !== e
                };
                a.DeleteKeyframes(d);
                a.DeletePropertyKeyframes(d)
            }
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return !0;
            const a = this.GetInstance();
            if (a && a.GetObjectClass().IsGlobal()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        MaybeTriggerKeyframeReachedConditions() {}
        Tick(a, d) {
            a = this.GetInstance();
            a = this.GetRuntime().GetDt(a);
            super.Tick(a, 1)
        }
        _SaveToJson() {
            const a = super._SaveToJson(),
                d = this.GetTimelineDataItem();
            return Object.assign(a, {
                tweenDataItemJson: d._SaveToJson(),
                id: this._id,
                destroyInstanceOnComplete: this._destroyInstanceOnComplete,
                initialValueMode: this._initialValueMode
            })
        }
        _LoadFromJson(a) {
            a && (this.GetTimelineDataItem()._LoadFromJson(a.tweenDataItemJson), super._LoadFromJson(a), this._id = a.id, this._destroyInstanceOnComplete = a.destroyInstanceOnComplete, this._initialValueMode = a.initialValueMode)
        }
        static IsPlaying(a) {
            return a.IsPlaying()
        }
        static IsPaused(a) {
            return a.IsPaused()
        }
        static Build(a) {
            var d = a.runtime.GetTimelineManager(),
                c = new f.TimelineDataItem;
            if (a.json) {
                c._LoadFromJson(a.json.tweenDataItemJson);
                var e = new f.Tween(c, d);
                e._LoadFromJson(a.json);
                return e
            }
            d = new f.Tween(c, d);
            f.IsArray(a.propertyTracksConfig) || (a.propertyTracksConfig = [a.propertyTracksConfig]);
            d.SetId(a.id);
            d.SetTags(a.tags);
            d.SetInitialValueMode(a.initialValueMode);
            d.SetDestroyInstanceOnComplete(a.releaseOnComplete);
            d.SetLoop(a.loop);
            d.SetPingPong(a.pingPong);
            d.SetTotalTime(a.time);
            d.SetStep(0);
            d.SetInterpolationMode("default");
            d.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c = d.AddTrack();
            c.SetInstanceUID(a.instance.GetUID());
            c.SetInterpolationMode("default");
            c.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c.SetEnable(!0);
            c.SetObjectClassIndex(a.instance.GetObjectClass().GetIndex());
            var k = a.instance.GetSdkInstance(),
                h = k.IsOriginalSizeKnown() ? k.GetOriginalWidth() : a.instance.GetWorldInfo().GetWidth();
            k = k.IsOriginalSizeKnown() ? k.GetOriginalHeight() : a.instance.GetWorldInfo().GetHeight();
            c.SetOriginalWidth(h);
            c.SetOriginalHeight(k);
            h = c.AddKeyframe();
            h.SetTime(0);
            h.SetEase("noease");
            h.SetEnable(!0);
            h.SetTags("");
            h = c.AddKeyframe();
            h.SetTime(a.time);
            h.SetEase("noease");
            h.SetEnable(!0);
            h.SetTags("");
            for (e of a.propertyTracksConfig) h =
                c.AddPropertyTrack(), h.SetSourceAdapterId(e.sourceId), h.SetSourceAdapterArgs(e.sourceArgs), h.SetPropertyName(e.property), h.SetPropertyType(e.type), h.SetMin(NaN), h.SetMax(NaN), h.SetInterpolationMode("default"), h.SetResultMode(e.resultMode), h.SetEnable(!0), k = h.AddPropertyKeyframe(), k.SetType(e.valueType), k.SetTime(0), k.SetEase(e.ease), k.SetEnable(!0), k.SetValue(e.startValue), k.SetAbsoluteValue(e.startValue), h = h.AddPropertyKeyframe(), h.SetType(e.valueType), h.SetTime(a.time), h.SetEase(e.ease), h.SetEnable(!0),
                h.SetValue(e.endValue), h.SetAbsoluteValue(e.endValue);
            return d
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.Ease;
    f.Transition = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._name = a[0];
            this._transitionKeyframes = [];
            for (const d of a[1]) a = f.TransitionKeyframe.Create(this, d), this._transitionKeyframes.push(a);
            this._precalculatedSamples = new Map;
            this._transitionKeyframeCache = new Map;
            this._PreCalcSamples();
            b.AddCustomEase(this._name, (d, c, e, k) => this.Interpolate(d, c, e, k))
        }
        static Create(a) {
            return f.New(f.Transition, a)
        }
        Release() {
            for (const a of this._transitionKeyframes) a.Release();
            f.clearArray(this._transitionKeyframes);
            this._transitionKeyframes = null;
            this._precalculatedSamples.clear();
            this._precalculatedSamples = null;
            this._transitionKeyframeCache.clear();
            this._transitionKeyframeCache = null
        }
        GetTransitionKeyFrameAt(a) {
            const d = this._transitionKeyframeCache.get(a);
            if (d) return d;
            for (const c of this._transitionKeyframes)
                if (c.GetValueX() === a) return this._transitionKeyframeCache.set(a, c), c
        }
        GetFirstTransitionKeyFrameHigherThan(a) {
            for (const d of this._transitionKeyframes)
                if (d.GetValueX() >
                    a) return d
        }
        GetFirstTransitionKeyFrameHigherOrEqualThan(a) {
            for (const d of this._transitionKeyframes)
                if (d.GetValueX() >= a) return d
        }
        GetFirstTransitionKeyFrameLowerOrEqualThan(a) {
            for (let d = this._transitionKeyframes.length - 1; 0 <= d; d--) {
                const c = this._transitionKeyframes[d];
                if (c.GetValueX() <= a) return c
            }
        }
        Interpolate(a, d, c, e) {
            var k = a / e;
            (a = this.GetTransitionKeyFrameAt(k)) ? e = this.GetFirstTransitionKeyFrameHigherThan(k): (a = this.GetFirstTransitionKeyFrameLowerOrEqualThan(k), e = this.GetFirstTransitionKeyFrameHigherOrEqualThan(k));
            var h = e.GetValueX() - a.GetValueX();
            k = f.mapToRange(k, a.GetValueX(), e.GetValueX(), 0, h);
            h = a.GetValueX();
            const p = a.GetValueY(),
                n = a.GetValueX() + a.GetStartAnchorX(),
                m = a.GetValueY() + a.GetStartAnchorY(),
                t = e.GetValueX() + e.GetEndAnchorX(),
                q = e.GetValueY() + e.GetEndAnchorY(),
                u = e.GetValueX();
            e = e.GetValueY();
            e = b.GetRuntimeEase("spline")(k, h, p, n, m, t, q, u, e, this._precalculatedSamples.get(a));
            e += a.GetValueY();
            return (1 - e) * d + e * (d + c)
        }
        _PreCalcSamples() {
            this._precalculatedSamples.clear();
            for (let c = 0; c < this._transitionKeyframes.length -
                1; c++) {
                var a = this._transitionKeyframes[c];
                if (!a.GetStartEnable()) continue;
                var d = this._transitionKeyframes[c + 1];
                const e = a.GetValueX(),
                    k = a.GetValueX() + a.GetStartAnchorX(),
                    h = d.GetValueX() + d.GetEndAnchorX();
                d = d.GetValueX();
                this._precalculatedSamples.set(a, b.GetBezierSamples(e, k, h, d))
            }
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.TransitionKeyframe = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._transition = b;
            this._valueX = a[0];
            this._valueY = a[1];
            this._startAnchorX = a[2];
            this._startAnchorY = a[3];
            this._endAnchorX = a[4];
            this._endAnchorY = a[5];
            this._startEnable = a[6];
            this._endEnable = a[7]
        }
        Release() {
            this._transition = null
        }
        static Create(b, a) {
            return f.New(f.TransitionKeyframe, b, a)
        }
        GetValueX() {
            return this._valueX
        }
        GetValueY() {
            return this._valueY
        }
        GetStartAnchorX() {
            return this._startAnchorX
        }
        GetStartAnchorY() {
            return this._startAnchorY
        }
        GetEndAnchorX() {
            return this._endAnchorX
        }
        GetEndAnchorY() {
            return this._endAnchorY
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndEnable() {
            return this._endEnable
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.TransitionManager = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._transitions = []
        }
        Release() {
            for (const b of this._transitions) b.Release();
            f.clearArray(this._transitions);
            this._transitions = null
        }
        Create(b) {
            this._transitions.push(f.Transition.Create(b))
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SolStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._stack = [];
            this._stack.push(f.New(f.Sol, this));
            this._index = 0;
            this._current = this._stack[0]
        }
        Release() {
            for (const b of this._stack) b.Release();
            f.clearArray(this._stack);
            this._objectClass = this._current = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetCurrentSol() {
            return this._current
        }
        Clear() {
            this.GetCurrentSol().Clear()
        }
        PushClean() {
            var b = this._stack,
                a = ++this._index;
            a === b.length ? (a = f.New(f.Sol, this),
                b.push(a), this._current = a) : (b = b[a], b.Reset(), this._current = b)
        }
        PushCopy() {
            const b = this._stack,
                a = ++this._index;
            a === b.length && b.push(f.New(f.Sol, this));
            const d = b[a];
            d.Copy(b[a - 1]);
            this._current = d
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
        RemoveInstances(b) {
            const a = this._stack;
            for (let d = 0, c = a.length; d < c; ++d) a[d].RemoveInstances(b)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Sol = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._stack = b;
            this._objectClass = this._stack.GetObjectClass();
            this._eventStack = this._objectClass.GetRuntime().GetEventStack();
            this._selectAll = !0;
            this._instances = [];
            this._elseInstances = []
        }
        Release() {
            this.ClearArrays();
            this._eventStack = this._objectClass = this._stack = null
        }
        ClearArrays() {
            f.clearArray(this._instances);
            f.clearArray(this._elseInstances)
        }
        GetObjectClass() {
            return this._objectClass
        }
        IsSelectAll() {
            return this._selectAll
        }
        HasAnyInstances() {
            return this._selectAll ?
                !!this._objectClass.GetInstanceCount() : !!this._instances.length
        }
        GetInstances() {
            return this._selectAll ? this._objectClass.GetInstances() : this._instances
        }
        HasAnyElseInstances() {
            return !!this._elseInstances.length
        }
        GetElseInstances() {
            return this._elseInstances
        }
        GetExpressionInstances() {
            const b = this.GetInstances();
            return b.length ? b : this._elseInstances
        }
        Reset() {
            this._selectAll = !0;
            f.clearArray(this._elseInstances)
        }
        Clear() {
            this._selectAll = !0
        }
        Copy(b) {
            b.IsSelectAll() ? this.Reset() : (this._selectAll = !1, f.shallowAssignArray(this._instances,
                b._instances), f.clearArray(this._elseInstances))
        }
        _PushInstance(b) {
            this._instances.push(b)
        }
        _PushElseInstance(b) {
            this._elseInstances.push(b)
        }
        _SetSelectAll(b) {
            this._selectAll = !!b
        }
        _GetOwnInstances() {
            return this._instances
        }
        _GetOwnElseInstances() {
            return this._elseInstances
        }
        SetSinglePicked(b) {
            this._selectAll = !1;
            f.clearArray(this._instances);
            this._instances.push(b)
        }
        SetArrayPicked(b) {
            this._selectAll = !1;
            f.shallowAssignArray(this._instances, b)
        }
        SetSetPicked(b) {
            this._selectAll = !1;
            f.clearArray(this._instances);
            for (const a of b) this._instances.push(a)
        }
        AddElseInstances(b, a) {
            for (const d of a) b.has(d) || this._elseInstances.push(d)
        }
        TransferElseInstancesToOwn(b) {
            for (const a of b) this._instances.push(a);
            f.arrayRemoveAllInSet(this._elseInstances, b)
        }
        PickOne(b) {
            b && (this._eventStack.GetCurrentStackFrame().GetCurrentEvent().IsOrBlock() ? (this.IsSelectAll() && (f.clearArray(this._instances), f.shallowAssignArray(this._elseInstances, b.GetObjectClass().GetInstances()), this._selectAll = !1), b = this._elseInstances.indexOf(b), -1 !==
                b && (this._instances.push(this._elseInstances[b]), this._elseInstances.splice(b, 1))) : this.SetSinglePicked(b))
        }
        RemoveInstances(b) {
            f.arrayRemoveAllInSet(this._instances, b);
            f.arrayRemoveAllInSet(this._elseInstances, b)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.EventStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._stack.push(f.New(f.EventStackFrame, this, null));
            this._index = 0;
            this._expFuncStack = []
        }
        Release() {
            for (const b of this._stack) b.Release();
            f.clearArray(this._stack);
            f.clearArray(this._expFuncStack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrentStackFrame() {
            return this._stack[this._index]
        }
        Push(b) {
            var a =
                this._stack;
            const d = ++this._index;
            if (d === a.length) return b = f.New(f.EventStackFrame, this, b), a.push(b), b;
            a = a[d];
            a.Reset(b);
            return a
        }
        Pop() {
            --this._index
        }
        PushExpFunc(b) {
            this._expFuncStack.push(b)
        }
        PopExpFunc() {
            this._expFuncStack.pop()
        }
        GetCurrentExpFuncStackFrame() {
            const b = this._expFuncStack;
            return 0 === b.length ? null : b[b.length - 1]
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.EventStackFrame = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._stack = b;
            this._runtime = this._stack.GetRuntime();
            this._currentEvent = a;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1;
            this._expressionObjectClass = null;
            this._functionReturnValue = this._functionReturnType = 0
        }
        Release() {
            this.Reset(null);
            this._runtime = this._stack = null
        }
        Reset(b) {
            this._currentEvent = b;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1
        }
        _Restore(b, a) {
            this._currentEvent =
                b;
            this._cndIndex = 0;
            this._actIndex = a
        }
        ResetQuick() {
            this._actIndex = this._cndIndex = 0
        }
        GetCurrentEvent() {
            return this._currentEvent
        }
        SetCurrentEvent(b) {
            this._currentEvent = b
        }
        GetConditionIndex() {
            return this._cndIndex
        }
        SetConditionIndex(b) {
            this._cndIndex = b
        }
        GetActionIndex() {
            return this._actIndex
        }
        SetActionIndex(b) {
            this._actIndex = b
        }
        SetLastEventTrue(b) {
            this._lastEventTrue = !!b
        }
        GetLastEventTrue() {
            return this._lastEventTrue
        }
        SetElseBranchRan(b) {
            this._elseBranchRan = !!b
        }
        GetElseBranchRan() {
            return this._elseBranchRan
        }
        SetExpressionObjectClass(b) {
            this._expressionObjectClass =
                b
        }
        GetExpressionObjectClass() {
            return this._expressionObjectClass
        }
        InitCallFunctionExpression(b, a) {
            this._functionReturnType = b;
            this._functionReturnValue = a
        }
        GetFunctionReturnType() {
            return this._functionReturnType
        }
        SetFunctionReturnValue(b) {
            this._functionReturnValue = b
        }
        GetFunctionReturnValue() {
            return this._functionReturnValue
        }
        IsSolModifierAfterCnds() {
            const b = this._currentEvent;
            return b.IsSolWriterAfterCnds() ? !0 : this._cndIndex < b.GetConditionCount() - 1 ? !!b.GetSolModifiers().length : !1
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.LocalVarStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1;
            this._current = null;
            this._initialValues = []
        }
        Release() {
            f.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        _SetInitialValues(b) {
            this._initialValues = b;
            b = this._initialValues.slice(0);
            this._stack.push(b);
            this._index = 0;
            this._current = b
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrent() {
            return this._current
        }
        Push() {
            const b =
                ++this._index,
                a = this._stack;
            b === a.length ? a.push(this._initialValues.slice(0)) : f.shallowAssignArray(a[b], this._initialValues);
            this._current = a[b]
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.LoopStack = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1
        }
        Release() {
            f.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        IsInLoop() {
            return 0 <= this._index
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                var b = f.New(f.Loop,
                    this);
                this._stack.push(b);
                return b
            }
            b = this._stack[this._index];
            b.Reset();
            return b
        }
        Pop() {
            --this._index
        }
        FindByName(b) {
            const a = this._stack;
            for (let d = this._index; 0 <= d; --d) {
                const c = a[d];
                if (c.GetName() === b) return c
            }
            return null
        }
        _GetStack() {
            return this._stack.slice(0, this._index + 1)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Loop = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._loopStack = b;
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        Reset() {
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        Stop() {
            this._isStopped = !0
        }
        IsStopped() {
            return this._isStopped
        }
        SetEnd(b) {
            this._end = b
        }
        GetEnd() {
            return this._end
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.ArrayStack = class extends f.DefendedBase {
        constructor() {
            super();
            this._stack = [];
            this._index = -1
        }
        Release() {
            f.clearArray(this._stack)
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                const b = [];
                this._stack.push(b);
                return b
            }
            return this._stack[this._index]
        }
        Pop() {
            --this._index
        }
    }
}
"use strict"; {
    const f = self.C3;

    function b(d, c) {
        return d.GetIndex() - c.GetIndex()
    }

    function a(d, c) {
        for (let e = 0, k = d.length; e < k; ++e)
            if (d[e] !== c[e]) return !1;
        return !0
    }
    f.EventSheetManager = class extends f.DefendedBase {
        constructor(d) {
            super();
            this._runtime = d;
            this._allSheets = [];
            this._sheetsByName = new Map;
            this._allGroups = [];
            this._groupsByName = new Map;
            this._blocksBySid = new Map;
            this._cndsBySid = new Map;
            this._actsBySid = new Map;
            this._allUniqueSolModifiers = new Map;
            this._eventVarsBySid = new Map;
            this._nextLocalVarIndex = 0;
            this._allGlobalVars = [];
            this._allLocalVars = [];
            this._localVarInitialValues = [];
            this._functionBlocksByName = new Map;
            this._eventStack = f.New(f.EventStack, this);
            this._localVarStack = f.New(f.LocalVarStack, this);
            this._loopStack = f.New(f.LoopStack, this);
            this._triggersToPostInit = [];
            this._queuedTriggers = [];
            this._queuedDebugTriggers = [];
            this._blockFlushingDepth = this._executingTriggerDepth = this._runningEventsDepth = 0;
            this._scheduledWaits = [];
            this._asyncActionPromises = [];
            self.c3_callFunction = (c, e) => this._InvokeFunctionFromJS(c, e)
        }
        Release() {
            this.ClearAllScheduledWaits();
            this._eventStack.Release();
            this._eventStack = null;
            this._localVarStack.Release();
            this._localVarStack = null;
            f.clearArray(this._queuedTriggers);
            f.clearArray(this._queuedDebugTriggers);
            this._runtime = null;
            f.clearArray(this._allSheets);
            this._sheetsByName.clear()
        }
        Create(d) {
            d = f.New(f.EventSheet, this, d);
            this._allSheets.push(d);
            this._sheetsByName.set(d.GetName().toLowerCase(), d)
        }
        _AddTriggerToPostInit(d) {
            this._triggersToPostInit.push(d)
        }
        _PostInit() {
            for (const d of this._functionBlocksByName.values()) d._PostInit(!1);
            for (const d of this._allSheets) d._PostInit();
            for (const d of this._allSheets) d._UpdateDeepIncludes();
            for (const d of this._triggersToPostInit) d._PostInit(!1);
            f.clearArray(this._triggersToPostInit);
            this._localVarStack._SetInitialValues(this._localVarInitialValues)
        }
        GetRuntime() {
            return this._runtime
        }
        GetEventSheetByName(d) {
            return this._sheetsByName.get(d.toLowerCase()) || null
        }
        _RegisterGroup(d) {
            this._allGroups.push(d);
            this._groupsByName.set(d.GetGroupName(), d)
        }
        _RegisterEventBlock(d) {
            this._blocksBySid.set(d.GetSID(),
                d)
        }
        _RegisterCondition(d) {
            this._cndsBySid.set(d.GetSID(), d)
        }
        _RegisterAction(d) {
            this._actsBySid.set(d.GetSID(), d)
        }
        _RegisterFunctionBlock(d) {
            this._functionBlocksByName.set(d.GetFunctionName().toLowerCase(), d)
        }
        _RegisterEventVariable(d) {
            this._eventVarsBySid.set(d.GetSID(), d);
            d.IsGlobal() ? this._allGlobalVars.push(d) : this._allLocalVars.push(d)
        }
        _DeduplicateSolModifierList(d) {
            2 <= d.length && d.sort(b);
            let c = this._allUniqueSolModifiers.get(d.length);
            c || (c = [], this._allUniqueSolModifiers.set(d.length, c));
            for (let e =
                    0, k = c.length; e < k; ++e) {
                const h = c[e];
                if (a(d, h)) return h
            }
            c.push(d);
            return d
        }
        _GetNextLocalVarIndex(d) {
            this._localVarInitialValues.push(d.GetInitialValue());
            return this._nextLocalVarIndex++
        }
        GetEventStack() {
            return this._eventStack
        }
        GetCurrentEventStackFrame() {
            return this.GetEventStack().GetCurrentStackFrame()
        }
        GetCurrentEvent() {
            return this.GetCurrentEventStackFrame().GetCurrentEvent()
        }
        GetCurrentCondition() {
            const d = this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetConditionAt(d.GetConditionIndex())
        }
        GetCurrentAction() {
            const d =
                this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetActionAt(d.GetActionIndex())
        }
        GetLocalVarStack() {
            return this._localVarStack
        }
        GetLoopStack() {
            return this._loopStack
        }
        GetAllLocalVariablesInScope(d) {
            const c = [];
            for (d = d.GetScopeParent(); d;) f.appendArray(c, d._GetAllLocalVariablesInScope()), d = d.GetScopeParent();
            return c
        }
        _GetLocalVariablesScriptInterface(d) {
            const c = {};
            for (const e of this.GetAllLocalVariablesInScope(d)) c[e.GetJsPropName()] = e._GetScriptInterfaceDescriptor();
            return Object.create(Object.prototype,
                c)
        }
        GetEventVariableBySID(d) {
            return this._eventVarsBySid.get(d) || null
        }
        GetEventBlockBySID(d) {
            return this._blocksBySid.get(d) || null
        }
        GetConditionBySID(d) {
            return this._cndsBySid.get(d) || null
        }
        GetActionBySID(d) {
            return this._actsBySid.get(d) || null
        }
        GetFunctionBlockByName(d) {
            return this._functionBlocksByName.get(d.toLowerCase()) || null
        }
        GetAllGlobalVariables() {
            return this._allGlobalVars
        }
        GetAllLocalVariables() {
            return this._allLocalVars
        }
        ResetAllGlobalsToInitialValue() {
            for (const d of this._allGlobalVars) d.ResetToInitialValue()
        }
        GetEventGroupByName(d) {
            return this._groupsByName.get(d.toLowerCase()) ||
                null
        }
        GetEventGroupBySID(d) {
            return (d = this._blocksBySid.get(d)) && d.IsGroup() ? d : null
        }
        GetAllGroups() {
            return this._allGroups
        }
        ResetAllGroupsInitialActivation() {
            for (const d of this._allGroups) d.ResetInitialActivation()
        }
        _ResetAllHasRunFlags() {
            for (const d of this._allSheets) d._ResetHasRunFlag()
        }
        RunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const c of d.runningLayouts())
                if (d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), d.Run(), this._runtime.PopCurrentLayout();
            this._runningEventsDepth--
        }
        async DebugRunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const c of this._DebugRunEventsGen(d)) await this._runtime.DebugBreak(c);
            this._runningEventsDepth--
        }* _DebugRunEventsGen(d) {
            for (const c of d.runningLayouts())
                if (d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), yield* d.DebugRun(), this._runtime.PopCurrentLayout()
        }
        _Trigger(d, c, e, k) {
            let h = !1;
            if (!d.GetMainRunningLayout()) return this.QueueTrigger(c, e, k);
            this._executingTriggerDepth++;
            for (const p of d.runningLayouts())
                if (d = p.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(p);
                    for (const n of d.deepIncludes()) {
                        const m = n._Trigger(c, e, k);
                        h = h || m
                    }
                    d = d._Trigger(c, e, k);
                    h = h || d;
                    this._runtime.PopCurrentLayout()
                }
            this._executingTriggerDepth--;
            return h
        }* _DebugTrigger(d, c, e, k) {
            let h = !1;
            if (!d.GetMainRunningLayout()) return this.QueueTrigger(c, e, k);
            this._executingTriggerDepth++;
            for (const p of d.runningLayouts())
                if (d = p.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(p);
                    for (const n of d.deepIncludes()) {
                        const m = yield* n._DebugTrigger(c, e, k);
                        h = h || m
                    }
                    d = yield* d._DebugTrigger(c, e, k);
                    h = h || d;
                    this._runtime.PopCurrentLayout()
                }
            this._executingTriggerDepth--;
            return h
        }
        QueueTrigger(d, c, e) {
            this._queuedTriggers.push([d, c, e]);
            return !1
        }
        QueueDebugTrigger(d, c, e) {
            let k = null;
            const h = new Promise(p => k = p);
            this._queuedDebugTriggers.push([d, c, e, k]);
            return h
        }* _RunQueuedDebugTriggersGen() {
            if (this._runtime.HitBreakpoint()) throw Error("should not be in breakpoint");
            const d = this._runtime.GetLayoutManager();
            for (; this._queuedDebugTriggers.length;) {
                const [c, e, k, h] = this._queuedDebugTriggers.shift(), p = yield* this._DebugTrigger(d, c, e, k);
                h(p)
            }
        }
        async RunQueuedDebugTriggersAsync() {
            for (const d of this._RunQueuedDebugTriggersGen()) await this._runtime.DebugBreak(d)
        }
        _FastTrigger(d,
            c, e, k) {
            let h = !1;
            var p = d.GetMainRunningLayout();
            if (d = p.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(p);
                p = d.deepIncludes();
                for (let n = 0, m = p.length; n < m; ++n) {
                    const t = p[n]._FastTrigger(c, e, k);
                    h = h || t
                }
                c = d._FastTrigger(c, e, k);
                h = h || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return h
            }
        }* _DebugFastTrigger(d, c, e, k) {
            let h = !1;
            var p = d.GetMainRunningLayout();
            if (d = p.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(p);
                p = d.deepIncludes();
                for (let n = 0, m = p.length; n < m; ++n) {
                    const t = yield* p[n]._DebugFastTrigger(c, e, k);
                    h = h || t
                }
                c = yield* d._DebugFastTrigger(c, e, k);
                h = h || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return h
            }
        }
        GetTriggerDepth() {
            return this._executingTriggerDepth
        }
        IsInTrigger() {
            return 0 < this.GetTriggerDepth()
        }
        _IncTriggerDepth() {
            return ++this._executingTriggerDepth
        }
        _DecTriggerDepth() {
            --this._executingTriggerDepth
        }
        IsRunningEvents() {
            return 0 < this._runningEventsDepth
        }
        IsInEventEngine() {
            return this.IsRunningEvents() ||
                this.IsInTrigger()
        }
        _RunQueuedTriggers(d) {
            for (const [c, e, k] of this._queuedTriggers) this._Trigger(d, c, e, k);
            f.clearArray(this._queuedTriggers)
        }
        BlockFlushingInstances(d) {
            d ? this._blockFlushingDepth++ : this._blockFlushingDepth--
        }
        IsFlushingBlocked() {
            return 0 < this._blockFlushingDepth
        }
        ClearSol(d) {
            for (let c = 0, e = d.length; c < e; ++c) d[c].GetSolStack().Clear()
        }
        PushCleanSol(d) {
            for (let c = 0, e = d.length; c < e; ++c) d[c].GetSolStack().PushClean()
        }
        PushCopySol(d) {
            for (let c = 0, e = d.length; c < e; ++c) d[c].GetSolStack().PushCopy()
        }
        PopSol(d) {
            for (let c =
                    0, e = d.length; c < e; ++c) d[c].GetSolStack().Pop()
        }
        AddScheduledWait() {
            const d = f.New(f.ScheduledWait, this);
            this._scheduledWaits.push(d);
            return d
        }
        scheduledWaits() {
            return this._scheduledWaits
        }
        RunScheduledWaits() {
            if (this._scheduledWaits.length) {
                var d = this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for (let e = 0, k = this._scheduledWaits.length; e < k; ++e) {
                    const h = this._scheduledWaits[e];
                    h._ShouldRun() && h._Run(d);
                    h.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        async DebugRunScheduledWaits() {
            if (this._scheduledWaits.length) {
                var d =
                    this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for (let e = 0, k = this._scheduledWaits.length; e < k; ++e) {
                    const h = this._scheduledWaits[e];
                    h._ShouldRun() && await h._DebugRun(d);
                    h.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        _FilterScheduledWaitsToRelease() {
            const d = f.arrayFilterOut(this._scheduledWaits, c => c.ShouldRelease());
            for (const c of d) c.Release()
        }
        ClearAllScheduledWaits() {
            for (const d of this._scheduledWaits) d.Release();
            f.clearArray(this._scheduledWaits)
        }
        RemoveInstancesFromScheduledWaits(d) {
            for (const c of this._scheduledWaits) c.RemoveInstances(d)
        }
        AddAsyncActionPromise(d) {
            this._asyncActionPromises.push(d)
        }
        ClearAsyncActionPromises() {
            f.clearArray(this._asyncActionPromises)
        }
        GetPromiseForAllAsyncActions() {
            const d =
                Promise.all(this._asyncActionPromises);
            this._asyncActionPromises = [];
            return d
        }
        _SaveToJson() {
            return {
                groups: this._SaveGroupsToJson(),
                cnds: this._SaveCndsToJson(),
                acts: this._SaveActsToJson(),
                vars: this._SaveVarsToJson(),
                waits: this._SaveScheduledWaitsToJson()
            }
        }
        _LoadFromJson(d) {
            this._LoadGroupsFromJson(d.groups);
            this._LoadCndsFromJson(d.cnds);
            this._LoadActsFromJson(d.acts);
            this._LoadVarsFromJson(d.vars);
            this._LoadScheduledWaitsFromJson(d.waits)
        }
        _SaveGroupsToJson() {
            const d = {};
            for (const c of this.GetAllGroups()) d[c.GetSID().toString()] =
                c.IsGroupActive();
            return d
        }
        _LoadGroupsFromJson(d) {
            for (const [c, e] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventGroupBySID(d)) && d.SetGroupActive(e)
        }
        _SaveCndsToJson() {
            const d = {};
            for (const [c, e] of this._cndsBySid) {
                const k = e._SaveToJson();
                k && (d[c.toString()] = k)
            }
            return d
        }
        _LoadCndsFromJson(d) {
            const c = new Map;
            for (const [e, k] of Object.entries(d)) c.set(parseInt(e, 10), k);
            for (const [e, k] of this._cndsBySid) k._LoadFromJson(c.get(e) || null)
        }
        _SaveActsToJson() {
            const d = {};
            for (const [c, e] of this._actsBySid) {
                const k =
                    e._SaveToJson();
                k && (d[c.toString()] = k)
            }
            return d
        }
        _LoadActsFromJson(d) {
            const c = new Map;
            for (const [e, k] of Object.entries(d)) c.set(parseInt(e, 10), k);
            for (const [e, k] of this._actsBySid) k._LoadFromJson(c.get(e) || null)
        }
        _SaveVarsToJson() {
            const d = {};
            for (const [c, e] of this._eventVarsBySid) e.IsConstant() || !e.IsGlobal() && !e.IsStatic() || (d[c.toString()] = e.GetValue());
            return d
        }
        _LoadVarsFromJson(d) {
            for (const [c, e] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventVariableBySID(d)) && d.SetValue(e)
        }
        _SaveScheduledWaitsToJson() {
            return this._scheduledWaits.filter(d =>
                !d.IsPromise()).map(d => d._SaveToJson())
        }
        _LoadScheduledWaitsFromJson(d) {
            this.ClearAllScheduledWaits();
            for (const c of d)(d = f.ScheduledWait._CreateFromJson(this, c)) && this._scheduledWaits.push(d)
        }
        _GetPerfRecords() {
            return [...this._runtime.GetLayoutManager().runningLayouts()].map(d => d.GetEventSheet()).filter(d => d).map(d => d._GetPerfRecord())
        }
        FindFirstFunctionBlockParent(d) {
            for (; d;)
                if (d = d.GetScopeParent(), d instanceof f.FunctionBlock) return d;
            return null
        }
        _InvokeFunctionFromJS(d, c) {
            Array.isArray(c) || (c = []);
            d = this.GetFunctionBlockByName(d.toLowerCase());
            if (!d) return null;
            if (!d.IsEnabled()) return d.GetDefaultReturnValue();
            var e = d.GetFunctionParameters();
            if (c.length < e.length) {
                c = c.slice(0);
                do c.push(e[c.length].GetInitialValue()); while (c.length < e.length)
            }
            e = d.GetEventBlock();
            return e.RunAsExpressionFunctionCall(e.GetSolModifiersIncludingParents(), d.GetReturnType(), d.GetDefaultReturnValue(), ...c)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.EventSheet = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._eventSheetManager = b;
            this._runtime = b.GetRuntime();
            this._name = a[0];
            this._events = [];
            this._triggers = new Map;
            this._fastTriggers = new Map;
            this._eventsByDisplayNumber = new Map;
            this._hasRun = !1;
            this._shallowIncludes = [];
            this._deepIncludes = [];
            this._alreadyIncludedSheets = new Set;
            for (const d of a[1]) this._CreateEvent(d, null, this._events);
            this._perfRecord = this._runtime.IsDebug() ? {
                type: "sheet",
                name: this._name,
                totalTimeCounter: 0,
                children: []
            } : null
        }
        Release() {
            this._runtime = this._eventSheetManager = null
        }
        _CreateEvent(b, a, d) {
            switch (b[0]) {
                case 0:
                case 3:
                    this._CreateEventBlock(b, a, d);
                    break;
                case 1:
                    this._CreateEventVariable(b, a, d);
                    break;
                case 2:
                    this._CreateInclude(b, a, d);
                    break;
                case 4:
                    this._CreateFunctionBlock(b, a);
                    break;
                case 5:
                    this._CreateScriptBlock(b, a, d);
                    break;
                default:
                    throw Error("invalid event type");
            }
        }
        _CreateEventBlock(b, a, d) {
            b = f.EventBlock.Create(this, a, b);
            if (b.IsOrBlock()) {
                d.push(b);
                d = b.GetConditions();
                for (let c = 0, e = d.length; c <
                    e; ++c) d[c].IsTrigger() && this._InitTrigger(b, c)
            } else b.IsTrigger() ? this._InitTrigger(b, 0) : d.push(b)
        }
        _CreateFunctionBlock(b, a) {
            b = f.FunctionBlock.Create(this, a, b);
            this._eventSheetManager._RegisterFunctionBlock(b)
        }
        _CreateEventVariable(b, a, d) {
            b = f.EventVariable.Create(this, a, b);
            d.push(b)
        }
        _CreateInclude(b, a, d) {
            b = f.EventInclude.Create(this, a, b);
            d.push(b)
        }
        _CreateScriptBlock(b, a, d) {
            b = f.EventScript.Create(this, a, b);
            d.push(b)
        }
        _InitTrigger(b, a) {
            b.IsOrBlock() || this._eventSheetManager._AddTriggerToPostInit(b);
            var d =
                b.GetConditionAt(a),
                c = d._GetFunc(),
                e = d.GetObjectClass();
            if (d.IsFastTrigger()) {
                var k = this._fastTriggers.get(e);
                k || (k = new Map, this._fastTriggers.set(e, k));
                d = d.GetFastTriggerValue().toLowerCase();
                e = k.get(c);
                e || (e = new Map, k.set(c, e));
                c = e.get(d);
                c || (c = [], e.set(d, c));
                c.push([b, a])
            } else k = this._triggers.get(e), k || (k = {
                    methodMap: new Map,
                    behaviors: new Map
                }, this._triggers.set(e, k)), (e = d.GetBehaviorType()) ? (d = k.behaviors.get(e), d || (d = new Map, k.behaviors.set(e, d))) : d = k.methodMap, k = d.get(c), k || (k = [], d.set(c, k)),
                k.push([b, a])
        }
        _PostInit() {
            const b = this._events;
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = a < d - 1 && b[a + 1] instanceof f.EventBlock && b[a + 1].IsElseBlock();
                b[a]._PostInit(c)
            }
        }
        _AddShallowInclude(b) {
            this._shallowIncludes.push(b)
        }
        _UpdateDeepIncludes() {
            f.clearArray(this._deepIncludes);
            this._AddDeepIncludes(this);
            this._alreadyIncludedSheets.clear()
        }
        _AddDeepIncludes(b) {
            const a = b._deepIncludes,
                d = b._alreadyIncludedSheets;
            for (const c of this._shallowIncludes) {
                const e = c.GetIncludeSheet();
                c.IsActive() && b !== e && !d.has(e) &&
                    (d.add(e), e._AddDeepIncludes(b), a.push(e))
            }
        }
        deepIncludes() {
            return this._deepIncludes
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        _RegisterEventByDisplayNumber(b, a) {
            this._eventsByDisplayNumber.set(a, b)
        }
        _GetEventByDisplayNumber(b) {
            return this._eventsByDisplayNumber.get(b) || null
        }
        _ResetHasRunFlag() {
            this._hasRun = !1
        }
        Run() {
            if (!this._hasRun) {
                var b = this._runtime,
                    a = b.IsCPUProfiling(),
                    d = a ? performance.now() : 0;
                this._hasRun = !0;
                var c = this.GetEventSheetManager(),
                    e = c.GetCurrentEventStackFrame();
                for (const k of this._events) k.Run(e), c.ClearSol(k.GetSolModifiers()), c.ClearAsyncActionPromises(), b.FlushPendingInstances();
                e.Reset(null);
                a && (this._perfRecord.totalTimeCounter += performance.now() - d)
            }
        }* DebugRun() {
            if (!this._hasRun) {
                this._hasRun = !0;
                var b = this._runtime,
                    a = this.GetEventSheetManager(),
                    d = a.GetCurrentEventStackFrame();
                for (const c of this._events) yield* c.DebugRun(d), a.ClearSol(c.GetSolModifiers()), a.ClearAsyncActionPromises(), b.FlushPendingInstances();
                d.Reset(null)
            }
        }
        _Trigger(b,
            a, d) {
            if (a) {
                const c = a.GetObjectClass();
                this._TriggerForClass(b, a, c, d);
                for (const e of c.GetFamilies()) this._TriggerForClass(b, a, e, d)
            } else return this._TriggerForClass(b, a, null, null)
        }
        _TriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if (!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if (!c) return !1;
            c = c.get(b);
            if (!c) return !1;
            b = !1;
            for (const [e, k] of c) c = this._ExecuteTrigger(a, e, k), b = b || c;
            return b
        }* _DebugTrigger(b, a, d) {
            if (a) {
                const c = a.GetObjectClass();
                yield* this._DebugTriggerForClass(b, a, c, d);
                for (const e of c.GetFamilies()) yield* this._DebugTriggerForClass(b,
                    a, e, d)
            } else return yield* this._DebugTriggerForClass(b, a, null, null)
        }* _DebugTriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if (!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if (!c) return !1;
            c = c.get(b);
            if (!c) return !1;
            b = !1;
            for (const [e, k] of c) c = e.DebugCanRunFast() ? this._ExecuteTrigger(a, e, k) : yield* this._DebugExecuteTrigger(a, e, k), b = b || c;
            return b
        }
        _FastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if (!a) return !1;
            b = a.get(b);
            if (!b) return !1;
            d = b.get(d);
            if (!d) return !1;
            b = !1;
            for (let c = 0, e = d.length; c <
                e; ++c) a = d[c], a = this._ExecuteTrigger(null, a[0], a[1]), b = b || a;
            return b
        }* _DebugFastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if (!a) return !1;
            b = a.get(b);
            if (!b) return !1;
            d = b.get(d);
            if (!d) return !1;
            b = !1;
            for (let e = 0, k = d.length; e < k; ++e) {
                var c = d[e];
                a = c[0];
                c = c[1];
                a = a.DebugCanRunFast() ? this._ExecuteTrigger(null, a, c) : yield* this._DebugExecuteTrigger(null, a, c);
                b = b || a
            }
            return b
        }
        _ExecuteTrigger(b, a, d) {
            const c = this._runtime,
                e = this._eventSheetManager,
                k = e.GetCurrentEvent(),
                h = e.GetEventStack(),
                p = e.GetTriggerDepth();
            let n = !1;
            k && e.PushCleanSol(k.GetSolModifiersIncludingParents());
            e.PushCleanSol(a.GetSolModifiersIncludingParents());
            const m = 1 < p;
            m && e.GetLocalVarStack().Push();
            const t = h.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if (a.GetParent()) {
                const q = a.GetTriggerParents();
                for (let u = 0, r = q.length; u < r; ++u)
                    if (!q[u].RunPreTrigger(t)) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? a.RunOrBlockTrigger(t, d) : a.Run(t), n =
                t.GetLastEventTrue());
            h.Pop();
            m && e.GetLocalVarStack().Pop();
            e.PopSol(a.GetSolModifiersIncludingParents());
            k && e.PopSol(k.GetSolModifiersIncludingParents());
            k || 1 !== p || (e.ClearAsyncActionPromises(), e.IsFlushingBlocked() || c.FlushPendingInstances());
            return n
        }* _DebugExecuteTrigger(b, a, d) {
            const c = this._runtime,
                e = this._eventSheetManager,
                k = e.GetCurrentEvent(),
                h = e.GetEventStack(),
                p = e.GetTriggerDepth();
            let n = !1;
            k && e.PushCleanSol(k.GetSolModifiersIncludingParents());
            e.PushCleanSol(a.GetSolModifiersIncludingParents());
            const m = 1 < p;
            m && e.GetLocalVarStack().Push();
            const t = h.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if (a.GetParent()) {
                const q = a.GetTriggerParents();
                for (let u = 0, r = q.length; u < r; ++u)
                    if (!(yield* q[u].DebugRunPreTrigger(t))) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? yield* a.DebugRunOrBlockTrigger(t, d): yield* a.DebugRun(t), n = t.GetLastEventTrue());
            h.Pop();
            m && e.GetLocalVarStack().Pop();
            e.PopSol(a.GetSolModifiersIncludingParents());
            k && e.PopSol(k.GetSolModifiersIncludingParents());
            k || 1 !== p || (e.ClearAsyncActionPromises(), e.IsFlushingBlocked() || c.FlushPendingInstances());
            return n
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [];

    function a(c, e) {
        return !0
    }

    function* d(c, e) {
        return !0
    }
    f.EventBlock = class extends f.DefendedBase {
        constructor(c, e, k) {
            super();
            this._eventSheet = c;
            this._runtime = c.GetRuntime();
            this._parent = e;
            this._scopeParent = null;
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._solModifiers = [];
            this._solModifiersIncludingParents = [];
            this._hasElseBlock = this._isTopLevelGroup = this._isSolWriterAfterCnds = this._hasGotSolModifiersIncludingParents = !1;
            this._isOrBlock = !!k[2];
            this._isElseBlock = !1;
            this._triggerParents = null;
            this._conditions = [];
            this._actions = [];
            this._subEvents = [];
            this._RunActions = a;
            this._DebugRunActions = d;
            this._isInitiallyActive = this._isGroup = !1;
            this._groupName = "";
            this._isGroupActive = !1;
            this._perfRecord = this._containedIncludes = null;
            this._sid = k[4];
            this._displayNumber = k[5];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: k[3][0],
                isBreakable: k[3][1],
                canRunAllConditionsFast: !1,
                canRunAllActionsFast: !1,
                canRunAllSubEventsFast: !1,
                canRunSelfFast: !1
            } : null;
            this.GetEventSheetManager()._RegisterEventBlock(this);
            3 === k[0] && this._InitGroup(k[1]);
            c = 0;
            for (var h of k[6]) e = f.Condition.Create(this, h, c++), this._conditions.push(e), this._AddSolModifier(e.GetObjectClass());
            c = 0;
            for (const p of k[7]) h = f.Action.Create(this, p, c++), this._actions.push(h);
            if (9 === k.length) {
                k = k[8];
                for (const p of k) this._eventSheet._CreateEvent(p, this, this._subEvents)
            }
            this._conditions.length && (this._isElseBlock = null === this._conditions[0].GetObjectClass() &&
                this._conditions[0]._GetFunc() === f.Plugins.System.Cnds.Else);
            0 === this._conditions.length && (this._conditions = b);
            0 === this._actions.length && (this._actions = b);
            0 === this._subEvents.length && (this._subEvents = b)
        }
        static Create(c, e, k) {
            return f.New(f.EventBlock, c, e, k)
        }
        _InitGroup(c) {
            this._isGroup = !0;
            this._isGroupActive = this._isInitiallyActive = !!c[0];
            this._groupName = c[1].toLowerCase();
            this._containedIncludes = [];
            this.GetEventSheetManager()._RegisterGroup(this);
            this._runtime.IsDebug() && (this._perfRecord = {
                type: "group",
                name: c[1],
                totalTimeCounter: 0,
                children: []
            })
        }
        _AddContainedInclude(c) {
            this._containedIncludes.push(c)
        }
        _AddContainerSolModifierToList(c, e) {
            for (const k of c.GetContainer().objectTypes()) e.includes(k) || e.push(k)
        }
        _AddSolModifierToList(c, e) {
            if (c)
                if (e.includes(c) || e.push(c), c.IsFamily())
                    for (const k of c.GetFamilyMembers()) k.IsInContainer() && this._AddContainerSolModifierToList(k, e);
                else c.IsInContainer() && this._AddContainerSolModifierToList(c, e)
        }
        _AddSolModifier(c) {
            this._AddSolModifierToList(c, this._solModifiers)
        }
        _AddParentSolModifier(c) {
            this._AddSolModifierToList(c,
                this._solModifiersIncludingParents)
        }
        SetAllSolModifiers() {
            this._solModifiers = this._runtime.GetAllObjectClasses()
        }
        _PostInit(c) {
            this._hasElseBlock = !!c;
            this._IdentifyTopLevelGroup();
            this._IdentifyTriggerParents();
            for (const k of this._conditions) k._PostInit();
            if (0 < this._actions.length) {
                c = !1;
                for (var e of this._actions) e._PostInit(), e.HasReturnType() && (c = !0);
                c ? (this._RunActions = this._RunActions_ReturnValue, this._DebugRunActions = this._DebugRunActions_ReturnValue) : (this._RunActions = this._RunActions_Fast, this._DebugRunActions =
                    this._DebugRunActions_Fast)
            }
            e = this._subEvents;
            for (let k = 0, h = e.length; k < h; ++k) c = k < h - 1 && e[k + 1] instanceof f.EventBlock && e[k + 1].IsElseBlock(), e[k]._PostInit(c);
            this._debugData && this._UpdateCanRunFast();
            this._perfRecord && this._GetPerfRecordParent()._GetPerfRecord().children.push(this._perfRecord)
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
        _GetPerfRecordParent() {
            let c = this.GetParent();
            for (; c;) {
                if (c.IsGroup()) return c;
                c = c.GetParent()
            }
            return this._eventSheet
        }
        _UpdateCanRunFast() {
            const c = this._debugData;
            c.canRunAllConditionsFast =
                this._conditions.every(e => e.DebugCanRunFast());
            c.canRunAllActionsFast = this._actions.every(e => e.DebugCanRunFast());
            c.canRunAllSubEventsFast = this._subEvents.every(e => e.DebugCanRunFast());
            c.canRunSelfFast = c.canRunAllConditionsFast && c.canRunAllActionsFast && c.canRunAllSubEventsFast
        }
        _UpdateCanRunFastRecursive() {
            let c = this;
            do c._UpdateCanRunFast(), c = c.GetParent(); while (c)
        }
        _IdentifyTopLevelGroup() {
            if (this.IsGroup()) {
                var c = this.GetParent();
                for (this._isTopLevelGroup = !0; c;) {
                    if (!c.IsGroup()) {
                        this._isTopLevelGroup = !1;
                        break
                    }
                    c = c.GetParent()
                }
            }
        }
        _IdentifySolModifiersIncludingParents() {
            var c = this._runtime.GetAllObjectClasses();
            if (this._solModifiers === c) this._solModifiersIncludingParents = c;
            else {
                this._solModifiersIncludingParents = f.cloneArray(this._solModifiers);
                for (c = this.GetParent(); c;) {
                    for (var e of c._solModifiers) this._AddParentSolModifier(e);
                    c = c.GetParent()
                }
                e = this.GetEventSheetManager();
                this._solModifiers = e._DeduplicateSolModifierList(this._solModifiers);
                this._solModifiersIncludingParents = e._DeduplicateSolModifierList(this._solModifiersIncludingParents)
            }
        }
        _IdentifyTriggerParents() {
            if (this.HasAnyTriggeredCondition()) {
                this._triggerParents = [];
                for (var c = this.GetParent(); c;) this._triggerParents.push(c), c = c.GetParent();
                this._triggerParents.reverse()
            }
        }
        SetSolWriterAfterCnds() {
            this._isSolWriterAfterCnds = !0;
            this._parent && this._parent.SetSolWriterAfterCnds()
        }
        IsSolWriterAfterCnds() {
            return this._isSolWriterAfterCnds
        }
        GetSolModifiers() {
            return this._solModifiers
        }
        GetSolModifiersIncludingParents() {
            this._hasGotSolModifiersIncludingParents || (this._hasGotSolModifiersIncludingParents = !0, this._IdentifySolModifiersIncludingParents());
            return this._solModifiersIncludingParents
        }
        HasSolModifier(c) {
            return this._solModifiers.includes(c)
        }
        GetTriggerParents() {
            return this._triggerParents
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetEventSheetManager() {
            return this._eventSheet.GetEventSheetManager()
        }
        GetRuntime() {
            return this._runtime
        }
        GetParent() {
            return this._parent
        }
        _SetScopeParent(c) {
            this._scopeParent =
                c
        }
        GetScopeParent() {
            return this._scopeParent || this._parent
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._UpdateCanRunFastRecursive()
        }
        IsGroup() {
            return this._isGroup
        }
        IsTopLevelGroup() {
            return this._isTopLevelGroup
        }
        IsElseBlock() {
            return this._isElseBlock
        }
        HasElseBlock() {
            return this._hasElseBlock
        }
        GetGroupName() {
            return this._groupName
        }
        IsGroupActive() {
            return this._isGroupActive
        }
        ResetInitialActivation() {
            this.SetGroupActive(this._isInitiallyActive)
        }
        SetGroupActive(c) {
            c = !!c;
            if (!this._isGroup) throw Error("not a group");
            if (this._isGroupActive !== c) {
                this._isGroupActive = c;
                for (const e of this._containedIncludes) e.UpdateActive();
                this._containedIncludes.length && (c = this._runtime.GetCurrentLayout().GetEventSheet()) && c._UpdateDeepIncludes()
            }
        }
        GetSID() {
            return this._sid
        }
        IsOrBlock() {
            return this._isOrBlock
        }
        IsTrigger() {
            return this._conditions.length && this._conditions[0].IsTrigger()
        }
        IsForFunctionBlock() {
            return this._scopeParent && this._scopeParent instanceof f.FunctionBlock
        }
        HasAnyTriggeredCondition() {
            return this.IsForFunctionBlock() ||
                this._conditions.some(c => c.IsTrigger())
        }
        GetConditions() {
            return this._conditions
        }
        GetConditionCount() {
            return this._conditions.length
        }
        GetConditionAt(c) {
            c = Math.floor(c);
            if (0 > c || c >= this._conditions.length) throw new RangeError("invalid condition index");
            return this._conditions[c]
        }
        GetConditionByDebugIndex(c) {
            return this.GetConditionAt(c)
        }
        IsFirstConditionOfType(c) {
            let e = c.GetIndex();
            if (0 === e) return !0;
            for (--e; 0 <= e; --e)
                if (this._conditions[e].GetObjectClass() === c.GetObjectClass()) return !1;
            return !0
        }
        GetActions() {
            return this._actions
        }
        GetActionCount() {
            return this._actions.length
        }
        GetActionAt(c) {
            c =
                Math.floor(c);
            if (0 > c || c >= this._actions.length) throw new RangeError("invalid action index");
            return this._actions[c]
        }
        GetActionByDebugIndex(c) {
            c = Math.floor(c);
            const e = this._actions.find(k => k.GetDebugIndex() === c);
            if (!e) throw new RangeError("invalid action debug index");
            return e
        }
        _HasActionIndex(c) {
            c = Math.floor(c);
            return 0 <= c && c < this._actions.length
        }
        GetSubEvents() {
            return this._subEvents
        }
        _GetAllLocalVariablesInScope() {
            return this._subEvents.filter(c => c instanceof f.EventVariable)
        }
        RunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let e = !1;
            const k = this._conditions;
            for (let h = 0, p = k.length; h < p; ++h) {
                const n = k[h];
                c.SetConditionIndex(h);
                if (n.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if (n.Run()) e = !0;
                else if (!this._isOrBlock) return !1
            }
            return this._isOrBlock ? e : !0
        }
        RunOrBlockTrigger(c, e) {
            c.SetCurrentEvent(this);
            this._conditions[e].Run() && (this._RunActions(c, 0) && this._RunSubEvents(c), c.SetLastEventTrue(!0))
        }* DebugRunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let e = !1;
            const k = this._conditions;
            for (let h = 0, p = k.length; h <
                p; ++h) {
                const n = k[h];
                c.SetConditionIndex(h);
                if (n.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if (n.DebugCanRunFast() ? n.Run() : yield* n.DebugRun()) e = !0;
                else if (!this._isOrBlock) return !1
            }
            return this._isOrBlock ? e : !0
        }* DebugRunOrBlockTrigger(c, e) {
            c.SetCurrentEvent(this);
            e = this._conditions[e];
            if (e.DebugCanRunFast() ? e.Run() : yield* e.DebugRun())(this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() :
                yield* this._DebugRunSubEvents()), c.SetLastEventTrue(!0)
        }
        Run(c) {
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? this._RunOrBlock(c) : this._RunAndBlock(c)
        }* DebugRun(c) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? yield* this._DebugRunOrBlock(c): yield* this._DebugRunAndBlock(c)
        }
        _RunOrBlock(c) {
            const e = this._conditions;
            let k = 0 === e.length;
            for (let p = 0, n = e.length; p < n; ++p) {
                var h =
                    e[p];
                h.IsTrigger() || (c.SetConditionIndex(p), h = h.Run(), k = k || h)
            }
            c.SetLastEventTrue(k);
            k && (this._RunActions(c, 0) && this._RunSubEvents(c), this._hasElseBlock && c.SetElseBranchRan(!0))
        }* _DebugRunOrBlock(c) {
            const e = this._conditions;
            let k = 0 === e.length;
            for (let p = 0, n = e.length; p < n; ++p) {
                var h = e[p];
                h.IsTrigger() || (c.SetConditionIndex(p), h = h.DebugCanRunFast() ? h.Run() : yield* h.DebugRun(), k = k || h)
            }
            c.SetLastEventTrue(k);
            k && ((this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ?
                this._RunSubEvents() : yield* this._DebugRunSubEvents()), this._hasElseBlock && c.SetElseBranchRan(!0))
        }
        _RunAndBlock(c) {
            const e = this._conditions;
            for (let k = 0, h = e.length; k < h; ++k) {
                const p = e[k];
                c.SetConditionIndex(k);
                if (!p.Run()) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            this._RunActions(c, 0) && this._RunSubEvents(c);
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }* _DebugRunAndBlock(c) {
            const e = this._conditions;
            for (let k = 0, h = e.length; k < h; ++k) {
                const p = e[k];
                c.SetConditionIndex(k);
                if (p.DebugCanRunFast() ?
                    !p.Run() : !(yield* p.DebugRun())) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            (this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }
        _RunActions_Fast(c, e) {
            const k = this._actions;
            for (let h = e, p = k.length; h < p; ++h) e = k[h], c.SetActionIndex(h), e.Run();
            return !0
        }* _DebugRunActions_Fast(c, e) {
            const k = this._actions;
            for (let h =
                    e, p = k.length; h < p; ++h) e = k[h], c.SetActionIndex(h), e.DebugCanRunFast() ? e.Run() : yield* e.DebugRun();
            return !0
        }
        _RunActions_ReturnValue(c, e) {
            const k = this.GetEventSheetManager(),
                h = this._actions;
            for (let p = e, n = h.length; p < n; ++p) {
                e = h[p];
                c.SetActionIndex(p);
                const m = e.Run();
                if (e.CanBailOut() && !0 === m) return !1;
                e.IsAsync() && m instanceof Promise && k.AddAsyncActionPromise(m)
            }
            return !0
        }* _DebugRunActions_ReturnValue(c, e) {
            const k = this.GetEventSheetManager(),
                h = this._actions;
            for (let p = e, n = h.length; p < n; ++p) {
                e = h[p];
                c.SetActionIndex(p);
                let m;
                m = e.DebugCanRunFast() ? e.Run() : yield* e.DebugRun();
                if (e.CanBailOut() && !0 === m) return !1;
                e.IsAsync() && m instanceof Promise && k.AddAsyncActionPromise(m)
            }
            return !0
        }
        _ResumeActionsAndSubEvents(c) {
            this._RunActions(c, c.GetActionIndex()) && this._RunSubEvents()
        }* _DebugResumeActionsAndSubEvents(c) {
            if (yield* this._DebugRunActions(c, c.GetActionIndex())) yield* this._DebugRunSubEvents()
        }
        _RunSubEvents() {
            if (this._subEvents.length) {
                var c = this.IsGroup() && this._runtime.IsCPUProfiling(),
                    e = c ? performance.now() : 0,
                    k = this._eventStack,
                    h = k.Push(this);
                this._isSolWriterAfterCnds ? this._RunSubEvents_SolWriterAfterCnds(h) : this._RunSubEvents_Fast(h);
                k.Pop();
                c && (this._perfRecord.totalTimeCounter += performance.now() - e)
            }
        }
        _RunSubEvents_SolWriterAfterCnds(c) {
            const e = this._isGroup,
                k = this._isTopLevelGroup,
                h = this.GetEventSheetManager(),
                p = this._subEvents;
            for (let n = 0, m = p.length, t = m - 1; n < m; ++n) {
                const q = p[n],
                    u = q.GetSolModifiers(),
                    r = !k || !e && n < t;
                r && h.PushCopySol(u);
                q.Run(c);
                r ? h.PopSol(u) : h.ClearSol(u)
            }
        }
        _RunSubEvents_Fast(c) {
            const e = this._subEvents;
            for (let k =
                    0, h = e.length; k < h; ++k) e[k].Run(c)
        }* _DebugRunSubEvents() {
            if (this._subEvents.length) {
                var c = this._eventStack,
                    e = c.Push(this);
                this._isSolWriterAfterCnds ? yield* this._DebugRunSubEvents_SolWriterAfterCnds(e): yield* this._DebugRunSubEvents_Fast(e);
                c.Pop()
            }
        }* _DebugRunSubEvents_SolWriterAfterCnds(c) {
            const e = this._isGroup,
                k = this._isTopLevelGroup,
                h = this.GetEventSheetManager(),
                p = this._subEvents;
            for (let n = 0, m = p.length, t = m - 1; n < m; ++n) {
                const q = p[n],
                    u = q.GetSolModifiers(),
                    r = !k || !e && n < t;
                r && h.PushCopySol(u);
                yield* q.DebugRun(c);
                r ? h.PopSol(u) : h.ClearSol(u)
            }
        }* _DebugRunSubEvents_Fast(c) {
            const e = this._subEvents;
            for (let k = 0, h = e.length; k < h; ++k) yield* e[k].DebugRun(c)
        }
        Retrigger(c, e) {
            this._runtime.IncrementExecCount();
            e.ResetQuick();
            const k = this._conditions;
            if (!this.IsOrBlock())
                for (let h = c.GetConditionIndex() + 1, p = k.length; h < p; ++h)
                    if (c = k[h], e.SetConditionIndex(h), !c.Run()) return !1;
            this._RunActions(e, 0) && this._RunSubEvents(e);
            return !0
        }* DebugRetrigger(c, e) {
            this._runtime.IncrementExecCount();
            e.ResetQuick();
            const k = this._conditions;
            if (!this.IsOrBlock())
                for (let h =
                        c.GetConditionIndex() + 1, p = k.length; h < p; ++h)
                    if (c = k[h], e.SetConditionIndex(h), c.DebugCanRunFast() ? !c.Run() : !(yield* c.DebugRun())) return !1;
            (this.DebugCanRunActionsFast() ? this._RunActions(e, 0) : yield* this._DebugRunActions(e, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            return !0
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext() && this._debugData.canRunSelfFast
        }
        DebugCanRunActionsFast() {
            return !this._runtime.DebugBreakNext() && this._debugData.canRunAllActionsFast
        }
        DebugCanRunSubEventsFast() {
            return !this._runtime.DebugBreakNext() &&
                this._debugData.canRunAllSubEventsFast
        }
        _CheckParentsOKToRun(c) {
            if (this.GetParent()) {
                const e = this.GetTriggerParents();
                for (let k = 0, h = e.length; k < h; ++k)
                    if (!e[k].RunPreTrigger(c)) return !1
            }
            return !0
        }* _DebugCheckParentsOKToRun(c) {
            if (this.GetParent()) {
                const e = this.GetTriggerParents();
                for (let k = 0, h = e.length; k < h; ++k)
                    if (!(yield* e[k].DebugRunPreTrigger(c))) return !1
            }
            return !0
        }
        _EvaluateFunctionCallParameters(c, e, k) {
            0 < e.length ? k ? (e = e.map(h => h.Get(0)), c.GetLocalVarStack().Push(), this._scopeParent.SetFunctionParameters(e)) :
                this._scopeParent.EvaluateFunctionParameters(e) : k && c.GetLocalVarStack().Push()
        }
        RunAsFunctionCall(c, e) {
            let k, h;
            const p = 0 < c.length;
            var n = this._runtime;
            const m = this._eventStack,
                t = n.GetEventSheetManager(),
                q = 1 < t._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(t, e, q);
            p && t.PushCleanSol(c);
            e = m.Push(this);
            this._CheckParentsOKToRun(e) && (n.IncrementExecCount(), e.SetCurrentEvent(this), (n = this._scopeParent.IsAsync()) && ([h, k] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(e), n && this._scopeParent.MaybeFinishAsyncFunctionCall(h));
            m.Pop();
            q && t.GetLocalVarStack().Pop();
            p && t.PopSol(c);
            t._DecTriggerDepth();
            return k
        }* DebugRunAsFunctionCall(c, e) {
            let k, h;
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const p = 0 < c.length;
            var n = this._runtime;
            const m = this._eventStack,
                t = n.GetEventSheetManager(),
                q = 1 < t._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(t, e, q);
            p && t.PushCleanSol(c);
            e = m.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(e)) n.IncrementExecCount(), e.SetCurrentEvent(this), (n = this._scopeParent.IsAsync()) &&
                ([h, k] = this._scopeParent.StartAsyncFunctionCall()), yield* this._DebugRunAndBlock(e), n && this._scopeParent.MaybeFinishAsyncFunctionCall(h);
            m.Pop();
            q && t.GetLocalVarStack().Pop();
            p && t.PopSol(c);
            t._DecTriggerDepth();
            return k
        }
        RunAsMappedFunctionCall(c) {
            const e = this.GetSolModifiersIncludingParents(),
                k = 0 < e.length,
                h = this._runtime,
                p = this._eventStack,
                n = h.GetEventSheetManager(),
                m = 1 < n._IncTriggerDepth();
            m && n.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            k && n.PushCleanSol(e);
            c = p.Push(this);
            this._CheckParentsOKToRun(c) && (h.IncrementExecCount(), c.SetCurrentEvent(this), this._RunAndBlock(c));
            p.Pop();
            m && n.GetLocalVarStack().Pop();
            k && n.PopSol(e);
            n._DecTriggerDepth()
        }* DebugRunAsMappedFunctionCall(c) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const e = this.GetSolModifiersIncludingParents(),
                k = 0 < e.length,
                h = this._runtime,
                p = this._eventStack,
                n = h.GetEventSheetManager(),
                m = 1 < n._IncTriggerDepth();
            m && n.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            k &&
                n.PushCleanSol(e);
            c = p.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(c)) h.IncrementExecCount(), c.SetCurrentEvent(this), yield* this._DebugRunAndBlock(c);
            p.Pop();
            m && n.GetLocalVarStack().Pop();
            k && n.PopSol(e);
            n._DecTriggerDepth()
        }
        RunAsExpressionFunctionCall(c, e, k, ...h) {
            let p, n;
            const m = 0 < c.length,
                t = this._runtime,
                q = this._eventStack,
                u = t.GetEventSheetManager(),
                r = 1 < u._IncTriggerDepth();
            r && u.GetLocalVarStack().Push();
            0 < h.length && this._scopeParent.SetFunctionParameters(h);
            m && u.PushCleanSol(c);
            h = q.Push(this);
            h.InitCallFunctionExpression(e, k);
            q.PushExpFunc(h);
            t.SetDebuggingEnabled(!1);
            this._CheckParentsOKToRun(h) && (t.IncrementExecCount(), h.SetCurrentEvent(this), (e = this._scopeParent.IsAsync()) && ([n, p] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(h), e && this._scopeParent.MaybeFinishAsyncFunctionCall(n));
            t.SetDebuggingEnabled(!0);
            q.Pop();
            q.PopExpFunc();
            r && u.GetLocalVarStack().Pop();
            m && u.PopSol(c);
            u._DecTriggerDepth();
            return p || h.GetFunctionReturnValue()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [];
    let a = !1;
    f.EventScript = class extends f.DefendedBase {
        constructor(d, c, e) {
            super();
            const k = d.GetRuntime(),
                h = d.GetEventSheetManager();
            this._eventSheet = d;
            this._eventSheetManager = h;
            this._runtime = d.GetRuntime();
            this._parent = c;
            this._func = k.GetObjectReference(e[1]);
            this._displayNumber = e[2];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = k.IsDebug() ? {
                isBreakpoint: e[3][0],
                isBreakable: e[3][1]
            } : null
        }
        static Create(d, c, e) {
            return f.New(f.EventScript, d,
                c, e)
        }
        _PostInit() {
            const d = this._func,
                c = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this);
            this._func = d.bind(null, this._runtime.GetIRuntime(), c)
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(d) {
            this._debugData.isBreakpoint = !!d
        }
        IsElseBlock() {
            return !1
        }
        GetSolModifiers() {
            return b
        }
        GetSolModifiersIncludingParents() {
            return this._parent ? this._parent.GetSolModifiersIncludingParents() : b
        }
        Run(d) {
            d.SetCurrentEvent(this);
            this._eventSheetManager.AddAsyncActionPromise(this._RunUserScript())
        }
        async _RunUserScript() {
            try {
                await this._func()
            } catch (d) {
                console.error(`Unhandled exception running script %c${this.GetEventSheet().GetName()}, event ${this.GetDisplayNumber()}:`, "font-size: 1.2em; font-weight: bold;", d), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    a || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), a = !0)
            }
        }* DebugRun(d) {
            d.SetCurrentEvent(this);
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            this.Run(d)
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext()
        }
        static HadUserScriptException() {
            return a
        }
        static SetHadUserScriptException() {
            a = !0
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.FunctionBlock = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._eventSheet = b;
            this._runtime = b.GetRuntime();
            this._parent = a;
            const c = d[1];
            this._functionName = c[0];
            this._returnType = c[1];
            this._functionParameters = c[2].map(e => f.EventVariable.Create(b, this, e));
            this._isEnabled = c[3];
            this._innerLocalVariables = [];
            this._isAsync = c[4];
            this._nextAsyncId = 0;
            this._currentAsyncId = -1;
            this._asyncMap = new Map;
            this._eventBlock = f.EventBlock.Create(b, a, d);
            this._eventBlock._SetScopeParent(this)
        }
        static Create(b,
            a, d) {
            return f.New(f.FunctionBlock, b, a, d)
        }
        _PostInit() {
            for (const b of this._functionParameters) b._PostInit();
            this._eventBlock._PostInit(!1)
        }
        _GetAllLocalVariablesInScope() {
            return this._functionParameters
        }
        GetFunctionParameters() {
            return this._functionParameters
        }
        GetFunctionParameterCount() {
            return this._functionParameters.length
        }
        _RegisterLocalVariable(b) {
            this._innerLocalVariables.push(b)
        }
        _GetAllInnerLocalVariables() {
            return this._innerLocalVariables
        }
        EvaluateFunctionParameters(b) {
            const a = this._functionParameters;
            for (let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d].Get(0))
        }
        SetFunctionParameters(b) {
            const a = this._functionParameters;
            for (let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d])
        }
        CaptureFunctionParameters() {
            return this._functionParameters.map(b => b.GetValue())
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetFunctionName() {
            return this._functionName
        }
        GetReturnType() {
            return this._returnType
        }
        IsEnabled() {
            return this._isEnabled
        }
        GetDefaultReturnValue() {
            switch (this._returnType) {
                case 0:
                    return null;
                case 2:
                    return "";
                default:
                    return 0
            }
        }
        GetEventBlock() {
            return this._eventBlock
        }
        IsAsync() {
            return this._isAsync
        }
        StartAsyncFunctionCall() {
            const b = this._nextAsyncId++;
            this._currentAsyncId = b;
            let a;
            const d = new Promise(c => a = c);
            this._asyncMap.set(b, {
                resolve: a,
                pauseCount: 0
            });
            return [b, d]
        }
        MaybeFinishAsyncFunctionCall(b) {
            const a = this._asyncMap.get(b);
            0 === a.pauseCount && (a.resolve(), this._asyncMap.delete(b));
            this._currentAsyncId = -1
        }
        PauseCurrentAsyncFunction() {
            this._asyncMap.get(this._currentAsyncId).pauseCount++;
            return this._currentAsyncId
        }
        ResumeAsyncFunction(b) {
            this._currentAsyncId =
                b;
            this._asyncMap.get(b).pauseCount--
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [];
    f.EventVariable = class extends f.DefendedBase {
        constructor(a, d, c) {
            super();
            const e = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = e;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._localVarStack = e.GetLocalVarStack();
            this._name = c[1];
            this._type = c[2];
            this._initialValue = c[3];
            this._isStatic = !!c[4];
            this._isConstant = !!c[5];
            this._isFunctionParameter = d instanceof f.FunctionBlock;
            this._sid = c[6];
            this._jsPropName = this._runtime.GetJsPropName(c[8]);
            this._scriptSetter = k =>
                this.SetValue(k);
            this._scriptGetter = () => this.GetValue();
            this._hasSingleValue = !this._parent || this._isStatic || this._isConstant;
            this._value = this._initialValue;
            this._localIndex = -1;
            this.IsBoolean() && (this._value = this._value ? 1 : 0);
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || (this._localIndex = e._GetNextLocalVarIndex(this));
            e._RegisterEventVariable(this)
        }
        static Create(a, d, c) {
            return f.New(f.EventVariable, a, d, c)
        }
        _PostInit() {
            if (this.IsLocal() && !this.IsStatic() && !this.IsConstant() && !this.IsFunctionParameter()) {
                const a =
                    this._eventSheetManager.FindFirstFunctionBlockParent(this);
                a && a._RegisterLocalVariable(this)
            }
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this.GetParent()
        }
        IsGlobal() {
            return !this.GetParent()
        }
        IsLocal() {
            return !this.IsGlobal()
        }
        IsFunctionParameter() {
            return this._isFunctionParameter
        }
        IsStatic() {
            return this._isStatic
        }
        IsConstant() {
            return this._isConstant
        }
        IsNumber() {
            return 0 === this._type
        }
        IsString() {
            return 1 === this._type
        }
        IsBoolean() {
            return 2 ===
                this._type
        }
        IsElseBlock() {
            return !1
        }
        GetSID() {
            return this._sid
        }
        GetInitialValue() {
            return this._initialValue
        }
        GetSolModifiers() {
            return b
        }
        Run(a) {
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || this.SetValue(this.GetInitialValue())
        }
        DebugCanRunFast() {
            return !0
        }* DebugRun(a) {
            this.Run(a)
        }
        SetValue(a) {
            this.IsNumber() ? "number" !== typeof a && (a = parseFloat(a)) : this.IsString() ? "string" !== typeof a && (a = a.toString()) : this.IsBoolean() && (a = a ? 1 : 0);
            this._hasSingleValue ? this._value = a : this._localVarStack.GetCurrent()[this._localIndex] =
                a
        }
        GetValue() {
            return this._hasSingleValue ? this._value : this._localVarStack.GetCurrent()[this._localIndex]
        }
        GetTypedValue() {
            let a = this.GetValue();
            this.IsBoolean() && (a = !!a);
            return a
        }
        ResetToInitialValue() {
            this._value = this._initialValue
        }
        _GetScriptInterfaceDescriptor() {
            return {
                configurable: !1,
                enumerable: !0,
                get: this._scriptGetter,
                set: this._scriptSetter
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [];
    f.EventInclude = class extends f.DefendedBase {
        constructor(a, d, c) {
            super();
            const e = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = e;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._includeSheet = null;
            this._includeSheetName = c[1];
            this._isActive = !0
        }
        static Create(a, d, c) {
            return f.New(f.EventInclude, a, d, c)
        }
        _PostInit() {
            this._includeSheet = this._eventSheetManager.GetEventSheetByName(this._includeSheetName);
            this._eventSheet._AddShallowInclude(this);
            let a = this.GetParent();
            for (; a;) a instanceof f.EventBlock && a.IsGroup() && a._AddContainedInclude(this), a = a.GetParent();
            this.UpdateActive();
            this._runtime.IsDebug() && this._eventSheet._GetPerfRecord().children.push(this._includeSheet._GetPerfRecord())
        }
        GetParent() {
            return this._parent
        }
        GetSolModifiers() {
            return b
        }
        GetIncludeSheet() {
            return this._includeSheet
        }
        Run(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            this._includeSheet.Run();
            a && this._eventSheetManager.PopSol(d)
        }* DebugRun(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            yield* this._includeSheet.DebugRun();
            a && this._eventSheetManager.PopSol(d)
        }
        DebugCanRunFast() {
            return !1
        }
        IsActive() {
            return this._isActive
        }
        UpdateActive() {
            let a = this.GetParent();
            for (; a;) {
                if (a instanceof f.EventBlock && a.IsGroup() && !a.IsGroupActive()) {
                    this._isActive = !1;
                    return
                }
                a = a.GetParent()
            }
            this._isActive = !0
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.ExpNode = class extends f.DefendedBase {
        constructor(p) {
            super();
            this._owner = p;
            this._runtime = p.GetRuntime()
        }
        _PostInit() {}
        static CreateNode(p, n) {
            return f.New([k, c, e, h, b, a][n[0]], p, n)
        }
    };
    class b extends f.ExpNode {
        constructor(p, n) {
            super(p);
            this._systemPlugin = this._runtime.GetSystemPlugin();
            this._func = this._runtime.GetObjectReference(n[1]);
            this._func !== f.Plugins.System.Exps.random && this._func !== f.Plugins.System.Exps.choose || this._owner.SetVariesPerInstance()
        }
        GetBoundMethod() {
            return this._systemPlugin._GetBoundACEMethod(this._func,
                this._systemPlugin)
        }
    }
    class a extends f.ExpNode {
        constructor(p, n) {
            super(p);
            this._functionBlock = null;
            this._functionName = n[1];
            this._owner.SetVariesPerInstance()
        }
        _PostInit() {
            const p = this._runtime.GetEventSheetManager();
            this._functionBlock = p.GetFunctionBlockByName(this._functionName);
            this._functionName = null;
            const n = this._owner.GetEventBlock(),
                m = this._functionBlock.GetEventBlock();
            this._combinedSolModifiers = [...new Set([...n.GetSolModifiersIncludingParents(), ...m.GetSolModifiersIncludingParents()])];
            this._combinedSolModifiers =
                p._DeduplicateSolModifierList(this._combinedSolModifiers)
        }
        GetBoundMethod() {
            const p = this._functionBlock;
            if (p.IsEnabled()) {
                const n = p.GetEventBlock();
                return f.EventBlock.prototype.RunAsExpressionFunctionCall.bind(n, this._combinedSolModifiers, p.GetReturnType(), p.GetDefaultReturnValue())
            } {
                const n = p.GetDefaultReturnValue();
                return () => n
            }
        }
    }

    function d(p, n) {
        if (p >= n) return p % n;
        0 > p && (p <= -n && (p %= n), 0 > p && (p += n));
        return p
    }
    class c extends f.ExpNode {
        constructor(p, n) {
            super(p);
            this._objectClass = this._runtime.GetObjectClassByIndex(n[1]);
            this._func = this._runtime.GetObjectReference(n[2]);
            this._returnsString = !!n[3];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        GetBoundMethod() {
            return this._objectClass.GetPlugin()._GetBoundACEMethod(this._func, this._objectClass.GetSingleGlobalInstance().GetSdkInstance())
        }
        ExpObject(...p) {
            const n = this._objectClass,
                m = n.GetCurrentSol().GetExpressionInstances();
            var t = m.length;
            if (0 === t) return this._returnsString ? "" : 0;
            t = d(this._owner.GetSolIndex(),
                t);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(n);
            return this._func.apply(m[t].GetSdkInstance(), p)
        }
        ExpObject_InstExpr(p, ...n) {
            const m = this._objectClass,
                t = m.GetInstances(),
                q = t.length;
            if (0 === q) return this._returnsString ? "" : 0;
            p = d(p, q);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(m);
            return this._func.apply(t[p].GetSdkInstance(), n)
        }
    }
    class e extends f.ExpNode {
        constructor(p, n) {
            super(p);
            this._objectClass = this._runtime.GetObjectClassByIndex(n[1]);
            this._varIndex = n[3];
            this._returnsString = !!n[2];
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpInstVar() {
            const p = this._objectClass.GetCurrentSol().GetExpressionInstances();
            var n = p.length;
            if (0 === n) return this._returnsString ? "" : 0;
            n = d(this._owner.GetSolIndex(), n);
            return p[n]._GetInstanceVariableValueUnchecked(this._varIndex)
        }
        ExpInstVar_Family() {
            var p = this._objectClass,
                n = p.GetCurrentSol().GetExpressionInstances(),
                m = n.length;
            if (0 === m) return this._returnsString ? "" : 0;
            m = d(this._owner.GetSolIndex(), m);
            n = n[m];
            p = n.GetObjectClass().GetFamilyInstanceVariableOffset(p.GetFamilyIndex());
            return n._GetInstanceVariableValueUnchecked(this._varIndex + p)
        }
        ExpInstVar_InstExpr(p) {
            const n = this._objectClass;
            var m = n.GetInstances();
            const t = m.length;
            if (0 === t) return this._returnsString ? "" : 0;
            p = d(p, t);
            m = m[p];
            p = 0;
            n.IsFamily() && (p = m.GetObjectClass().GetFamilyInstanceVariableOffset(n.GetFamilyIndex()));
            return m._GetInstanceVariableValueUnchecked(this._varIndex + p)
        }
    }
    class k extends f.ExpNode {
        constructor(p, n) {
            super(p);
            this._objectClass = this._runtime.GetObjectClassByIndex(n[1]);
            this._behaviorType = this._objectClass.GetBehaviorTypeByName(n[2]);
            this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(n[2]);
            this._func = this._runtime.GetObjectReference(n[3]);
            this._returnsString = !!n[4];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpBehavior(...p) {
            const n = this._objectClass;
            var m = n.GetCurrentSol().GetExpressionInstances(),
                t = m.length;
            if (0 === t) return this._returnsString ? "" : 0;
            t = d(this._owner.GetSolIndex(), t);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(n);
            m = m[t];
            t = 0;
            n.IsFamily() && (t = m.GetObjectClass().GetFamilyBehaviorOffset(n.GetFamilyIndex()));
            return this._func.apply(m.GetBehaviorInstances()[this._behaviorIndex + t].GetSdkInstance(), p)
        }
        ExpBehavior_InstExpr(p, ...n) {
            const m = this._objectClass;
            var t = m.GetInstances();
            const q = t.length;
            if (0 === q) return this._returnsString ? "" : 0;
            p = d(p, q);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(m);
            t = t[p];
            p = 0;
            m.IsFamily() && (p = t.GetObjectClass().GetFamilyBehaviorOffset(m.GetFamilyIndex()));
            return this._func.apply(t.GetBehaviorInstances()[this._behaviorIndex +
                p].GetSdkInstance(), n)
        }
    }
    class h extends f.ExpNode {
        constructor(p, n) {
            super(p);
            this._eventVar = null;
            this._eventVarSid = n[1]
        }
        _PostInit() {
            this._eventVar = this._runtime.GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetVar() {
            return this._eventVar
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Parameter = class extends f.DefendedBase {
        constructor(z, C, w) {
            super();
            this._owner = z;
            this._index = w;
            this._type = C;
            this.Get = null;
            this._isConstant = this._variesPerInstance = !1
        }
        static Create(z, C, w) {
            const B = C[0];
            return f.New([a, d, m, e, h, c, p, a, e, e, t, q, m, r, d, n, k, u, x][B], z, B, w, C)
        }
        _PostInit() {}
        SetVariesPerInstance() {
            this._variesPerInstance = !0
        }
        _MaybeVaryFor(z) {
            this._variesPerInstance || !z || z.GetPlugin().IsSingleGlobal() || (this._variesPerInstance = !0)
        }
        VariesPerInstance() {
            return this._variesPerInstance
        }
        GetIndex() {
            return this._index
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        GetEventBlock() {
            return this._owner.GetEventBlock()
        }
        IsConstant() {
            return this._isConstant
        }
    };

    function b(z) {
        z = self.C3_ExpressionFuncs[z];
        if (!z) throw Error("invalid expression number");
        return z
    }
    class a extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._solIndex = 0;
            z = B[1];
            this._expressionNumber = z[0];
            this._numberedNodes = [];
            this._expressionFunc = null;
            for (let F = 1, J = z.length; F < J; ++F) this._numberedNodes.push(f.ExpNode.CreateNode(this, z[F]));
            this._numberedNodes.length ? this.Get = this.GetExpression : (this.Get = b(this._expressionNumber), this._isConstant = !0)
        }
        _GetNode(z) {
            if (0 > z || z >= this._numberedNodes.length) throw new RangeError("invalid numbered node");
            return this._numberedNodes[z]
        }
        _PostInit() {
            for (var z of this._numberedNodes) z._PostInit();
            z = b(this._expressionNumber);
            this._expressionFunc = this._numberedNodes.length ? z(this) : z
        }
        GetSolIndex() {
            return this._solIndex
        }
        GetExpression(z) {
            this._solIndex = z;
            return this._expressionFunc()
        }
    }
    class d extends a {
        constructor(z, C, w, B) {
            super(z, C, w, B);
            this.Get = this.GetStringExpression;
            14 === C && (this.GetEventBlock().SetAllSolModifiers(), this._owner instanceof f.Action && this.GetEventBlock().SetSolWriterAfterCnds())
        }
        GetStringExpression(z) {
            this._solIndex =
                z;
            z = this._expressionFunc();
            return "string" === typeof z ? z : ""
        }
        _GetFastTriggerValue() {
            return b(this._expressionNumber)()
        }
    }
    class c extends a {
        constructor(z, C, w, B) {
            super(z, C, w, B);
            this.Get = this.GetLayer;
            this._isConstant = !1
        }
        GetLayer(z) {
            this._solIndex = z;
            z = this._expressionFunc();
            return this.GetRuntime().GetCurrentLayout().GetLayer(z)
        }
    }
    class e extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._combo = B[1];
            this.Get = this.GetCombo;
            this._isConstant = !0
        }
        GetCombo() {
            return this._combo
        }
    }
    class k extends f.Parameter {
        constructor(z,
            C, w, B) {
            super(z, C, w);
            this._bool = B[1];
            this.Get = this.GetBoolean;
            this._isConstant = !0
        }
        GetBoolean() {
            return this._bool
        }
    }
    class h extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._objectClass = this.GetRuntime().GetObjectClassByIndex(B[1]);
            this.Get = this.GetObjectClass;
            z = this.GetEventBlock();
            z._AddSolModifier(this._objectClass);
            this._owner instanceof f.Action ? z.SetSolWriterAfterCnds() : z.GetParent() && z.GetParent().SetSolWriterAfterCnds();
            this._isConstant = !0
        }
        GetObjectClass() {
            return this._objectClass
        }
    }
    class p extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._layout = this.GetRuntime().GetLayoutManager().GetLayoutByName(B[1]);
            this.Get = this.GetLayout;
            this._isConstant = !0
        }
        GetLayout() {
            return this._layout
        }
    }
    class n extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._timeline = this.GetRuntime().GetTimelineManager().GetTimelineByName(B[1]);
            this.Get = this.GetTimeline;
            this._isConstant = !0
        }
        GetTimeline() {
            return this._timeline
        }
    }
    class m extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._fileInfo =
                B[1];
            this.Get = this.GetFile;
            this._isConstant = !0
        }
        GetFile() {
            return this._fileInfo
        }
    }
    class t extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._instVarIndex = B[1];
            (z = this._owner.GetObjectClass()) && z.IsFamily() ? (this.Get = this.GetFamilyInstanceVariable, this.SetVariesPerInstance()) : (this.Get = this.GetInstanceVariable, this._isConstant = !0)
        }
        GetInstanceVariable() {
            return this._instVarIndex
        }
        GetFamilyInstanceVariable(z) {
            z = z || 0;
            const C = this._owner.GetObjectClass();
            var w = C.GetCurrentSol();
            const B = w.GetInstances();
            if (B.length) z = B[z % B.length].GetObjectClass();
            else if (w.HasAnyElseInstances()) w = w.GetElseInstances(), z = w[z % w.length].GetObjectClass();
            else if (0 < C.GetInstanceCount()) w = C.GetInstances(), z = w[z % w.length].GetObjectClass();
            else return 0;
            return this._instVarIndex + z.GetFamilyInstanceVariableOffset(C.GetFamilyIndex())
        }
    }
    class q extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._eventVarSid = B[1];
            this._eventVar = null;
            this.Get = this.GetEventVariable;
            this._isConstant = !0
        }
        _PostInit() {
            this._eventVar = this.GetRuntime().GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetEventVariable() {
            return this._eventVar
        }
    }
    class u extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._functionBlockName = B[1];
            this._functionBlock = null;
            this.Get = this.GetFunction;
            this._isConstant = !0
        }
        _PostInit() {
            this._functionBlock = this.GetRuntime().GetEventSheetManager().GetFunctionBlockByName(this._functionBlockName);
            this._functionBlockName = null
        }
        GetFunction() {
            return this._functionBlock
        }
    }
    class r extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._subParams = [];
            this._variadicRet = [];
            this._isConstant = !0;
            for (let F = 1, J = B.length; F <
                J; ++F) z = f.Parameter.Create(this._owner, B[F], 0), this._subParams.push(z), this._variadicRet.push(0), z.IsConstant() || (this._isConstant = !1);
            this.Get = this.GetVariadic
        }
        _PostInit() {
            for (const z of this._subParams) z._PostInit()
        }
        GetVariadic() {
            const z = this._subParams,
                C = this._variadicRet;
            for (let w = 0, B = z.length; w < B; ++w) C[w] = z[w].Get(0);
            return C
        }
    }
    class x extends f.Parameter {
        constructor(z, C, w, B) {
            super(z, C, w);
            this._easeIndex = B[1];
            this.Get = this.GetEase;
            this._isConstant = !0
        }
        GetEase() {
            return this._easeIndex
        }
    }
}
"use strict"; {
    const f = self.C3;

    function b(c, e) {
        for (let k = 0, h = c.length; k < h; ++k) e[k] = c[k].Get(0)
    }
    const a = [],
        d = function() {};
    f.Condition = class extends f.DefendedBase {
        constructor(c, e, k) {
            super();
            this._eventBlock = c;
            this._runtime = c.GetRuntime();
            this._index = k;
            this._func = this._runtime.GetObjectReference(e[1]);
            this._isTrigger = 0 < e[3];
            this._isFastTrigger = 2 === e[3];
            this._isLooping = !!e[4];
            this._isInverted = !!e[5];
            this._isStatic = !!e[6];
            this._sid = e[7];
            this._isInOrBlock = this._eventBlock.IsOrBlock();
            this._behaviorType = this._objectClass =
                null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: e[8][0],
                canDebug: e[8][1]
            } : null; - 1 === e[0] ? this._systemPlugin = this._runtime.GetSystemPlugin() : (this._objectClass = this._runtime.GetObjectClassByIndex(e[0]), e[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(e[2]), this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(e[2])),
                this._eventBlock.GetParent() && this._eventBlock.GetParent().SetSolWriterAfterCnds());
            if (10 === e.length) {
                c = e[9];
                for (let h of c) this._parameters.push(f.Parameter.Create(this, h, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterCondition(this)
        }
        static Create(c, e, k) {
            return f.New(f.Condition, c, e, k)
        }
        _PostInit() {
            for (const c of this._parameters) c._PostInit(), c.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            this._isFastTrigger ? (this.Run = this._RunFastTrigger, this.DebugRun = this._DebugRunFastTrigger) : this._systemPlugin ? (this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this._isStatic ? (this.Run = this._RunStatic, this.DebugRun = this._DebugRunStatic) : (this.Run = this._RunObject, this.DebugRun = this._DebugRunObject)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const c = this._objectClass.GetPlugin(),
                e = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(c, e, this._RunSingleGlobal)
        }
        _SetRunMethodForBoundFunc(c, e, k) {
            const h = this._func,
                p = this._isInverted,
                n = this._parameters;
            if (0 === n.length) {
                const m = c._GetBoundACEMethod(h, e);
                this.Run = p ? function() {
                    return f.xor(m(), p)
                } : m
            } else if (1 === n.length) {
                const m = n[0];
                if (!p && m.IsConstant()) this.Run = c._GetBoundACEMethod_1param(h,
                    e, m.Get(0));
                else {
                    const t = c._GetBoundACEMethod(h, e);
                    this.Run = function() {
                        return f.xor(t(m.Get(0)), p)
                    }
                }
            } else if (2 === n.length) {
                const m = n[0],
                    t = n[1];
                if (!p && m.IsConstant() && t.IsConstant()) this.Run = c._GetBoundACEMethod_2params(h, e, m.Get(0), t.Get(0));
                else {
                    const q = c._GetBoundACEMethod(h, e);
                    this.Run = function() {
                        return f.xor(q(m.Get(0), t.Get(0)), p)
                    }
                }
            } else if (3 === n.length) {
                const m = n[0],
                    t = n[1],
                    q = n[2];
                if (!p && m.IsConstant() && t.IsConstant() && q.IsConstant()) this.Run = c._GetBoundACEMethod_3params(h, e, m.Get(0), t.Get(0),
                    q.Get(0));
                else {
                    const u = c._GetBoundACEMethod(h, e);
                    this.Run = function() {
                        return f.xor(u(m.Get(0), t.Get(0), q.Get(0)), p)
                    }
                }
            } else this.Run = k
        }
        GetSID() {
            return this._sid
        }
        _GetFunc() {
            return this._func
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this.GetIndex()
        }
        IsTrigger() {
            return this._isTrigger
        }
        IsFastTrigger() {
            return this._isFastTrigger
        }
        IsInverted() {
            return this._isInverted
        }
        IsLooping() {
            return this._isLooping
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const c = this._results;
            b(this._parameters, c);
            return f.xor(this._func.apply(this._systemPlugin, c),
                this._isInverted)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._systemPlugin, c);
                f.IsIterator(c) && (c = yield* c);
                return f.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunSingleGlobal() {
            const c = this._results;
            b(this._parameters, c);
            const e = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            return f.xor(this._func.apply(e, c), this._isInverted)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                const e = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
                c = this._func.apply(e, c);
                f.IsIterator(c) && (c = yield* c);
                return f.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunFastTrigger() {
            return !0
        }* _DebugRunFastTrigger() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return !0
        }
        _RunStatic() {
            var c = this._results;
            b(this._parameters, c);
            c = this._func.apply(this._behaviorType ||
                this._objectClass, c);
            this._objectClass.ApplySolToContainer();
            return c
        }* _DebugRunStatic() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._behaviorType || this._objectClass, c);
                f.IsIterator(c) && (c = yield* c);
                this._objectClass.ApplySolToContainer();
                return c
            }
            return this.Run()
        }
        _RunObject() {
            const c = this._parameters,
                e = this._results,
                k = this._objectClass.GetCurrentSol();
            for (let h = 0, p = c.length; h <
                p; ++h) {
                const n = c[h];
                n.VariesPerInstance() || (e[h] = n.Get(0))
            }
            return k.IsSelectAll() ? this._RunObject_FirstFilter(k) : this._RunObject_NextFilter(k)
        }* _DebugRunObject() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this._RunObject()
        }
        _EvaluateVaryingParameters(c) {
            const e = this._parameters,
                k = this._results;
            for (let h = 0, p = e.length; h < p; ++h) {
                const n = e[h];
                n.VariesPerInstance() && (k[h] = n.Get(c))
            }
        }
        _RunObject_FirstFilter(c) {
            const e = this._objectClass,
                k = e.IsFamily(),
                h = e.GetFamilyIndex(),
                p = this._behaviorIndex,
                n = 0 <= p,
                m = e.GetInstances(),
                t = this._anyParamVariesPerInstance,
                q = this._results,
                u = this._func,
                r = this._isInverted,
                x = this._isInOrBlock && !this._isTrigger;
            c.ClearArrays();
            for (let C = 0, w = m.length; C < w; ++C) {
                const B = m[C];
                t && this._EvaluateVaryingParameters(C);
                var z = void 0;
                n ? (z = k ? B.GetObjectClass().GetFamilyBehaviorOffset(h) : 0, z = u.apply(B.GetBehaviorInstances()[p + z].GetSdkInstance(), q)) : z = u.apply(B.GetSdkInstance(), q);
                f.xor(z, r) ? c._PushInstance(B) : x && c._PushElseInstance(B)
            }
            e.FinishCondition(!0);
            c._SetSelectAll(!1);
            e.ApplySolToContainer();
            return c.HasAnyInstances()
        }
        _RunObject_NextFilter(c) {
            const e = this._objectClass;
            var k = e.IsFamily();
            const h = e.GetFamilyIndex(),
                p = e.IsInContainer(),
                n = this._behaviorIndex,
                m = 0 <= n,
                t = this._anyParamVariesPerInstance,
                q = this._results,
                u = this._func,
                r = this._isInverted,
                x = this._isInOrBlock && !this._isTrigger,
                z = c._GetOwnInstances(),
                C = c._GetOwnElseInstances(),
                w = x && !this._eventBlock.IsFirstConditionOfType(this),
                B = w ? C : z;
            let F = 0,
                J = !1;
            for (let G = 0, I = B.length; G < I; ++G) {
                const P = B[G];
                t && this._EvaluateVaryingParameters(G);
                var O = void 0;
                m ? (O = k ? P.GetObjectClass().GetFamilyBehaviorOffset(h) : 0, O = u.apply(P.GetBehaviorInstances()[n + O].GetSdkInstance(), q)) : O = u.apply(P.GetSdkInstance(), q);
                f.xor(O, r) ? (J = !0, w ? (z.push(P), p && P._PushSiblingsToSolInstances()) : (B[F] = P, p && P._SetSiblingsToSolInstancesIndex(F), ++F)) : w ? (B[F] = P, p && P._SetSiblingsToSolElseInstancesIndex(F), ++F) : x && (C.push(P), p && P._PushSiblingsToSolElseInstances())
            }
            f.truncateArray(B, F);
            p && e._TruncateContainerSols(w, F);
            k = J;
            w && !J && (J = this._OrBlockCheckInstances(z));
            e.FinishCondition(k ||
                x);
            return x ? J : c.HasAnyInstances()
        }
        _OrBlockCheckInstances(c) {
            var e = this._objectClass;
            const k = e.IsFamily();
            e = e.GetFamilyIndex();
            const h = this._anyParamVariesPerInstance,
                p = this._behaviorIndex,
                n = 0 <= p,
                m = this._results,
                t = this._func,
                q = this._isInverted;
            for (let r = 0, x = c.length; r < x; ++r) {
                var u = c[r];
                h && this._EvaluateVaryingParameters(r);
                if (n) {
                    const z = k ? u.GetObjectClass().GetFamilyBehaviorOffset(e) : 0;
                    u = t.apply(u.GetBehaviorInstances()[p + z].GetSdkInstance(), m)
                } else u = t.apply(u.GetSdkInstance(), m);
                if (f.xor(u, q)) return !0
            }
            return !1
        }
        ReevaluateParameter(c,
            e) {
            return this._parameters[c].Get(e)
        }
        GetFastTriggerValue() {
            const c = this._parameters;
            if (!c.length) throw Error("no parameters");
            return c[0]._GetFastTriggerValue()
        }
        _SaveToJson() {
            if (!this._savedData || !this._savedData.size) return null;
            const c = {};
            for (const [e, k] of this._savedData.entries()) {
                let h = k;
                "collmemory" === e && (h = [...k.entries()].map(p => [p[0].GetUID(), p[1].GetUID(), p[2]]));
                c[e] = h
            }
            return {
                ex: c
            }
        }
        _LoadFromJson(c) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            if (c) {
                var e = this._runtime,
                    k = c.ex;
                if (k) {
                    c = this.GetSavedDataMap();
                    c.clear();
                    for (const [h, p] of Object.entries(k)) k = p, "collmemory" === h && (k = f.New(f.PairMap, p.map(n => [e.GetInstanceByUID(n[0]), e.GetInstanceByUID(n[1]), n[2]]).filter(n => n[0] && n[1]))), c.set(h, k)
                }
            }
        }
    }
}
"use strict"; {
    const f = self.C3;

    function b(e, k) {
        for (let h = 0, p = e.length; h < p; ++h) k[h] = e[h].Get(0)
    }
    const a = [],
        d = function() {},
        c = function*() {};
    f.Action = class extends f.DefendedBase {
        constructor(e, k, h) {
            super();
            this._eventBlock = e;
            this._runtime = e = e.GetRuntime();
            this._index = h;
            this._sid = 4 <= k.length ? k[3] : -1;
            this._actionReturnType = 5 <= k.length ? k[4] : 0;
            this._behaviorType = this._objectClass = this._func = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this._callFunctionName = "";
            this._combinedSolModifiers = this._callEventBlock = null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            const p = (h = -3 === k[0]) ? k[2] : k[5];
            this._debugData = e.IsDebug() || h ? {
                isBreakpoint: p[0],
                canDebug: p[1],
                index: p[2]
            } : null; - 1 === k[0] ? (this._systemPlugin = e.GetSystemPlugin(), this._func = e.GetObjectReference(k[1])) : -2 === k[0] ? this._callFunctionName = k[1] : h ? (this._func = e.GetObjectReference(k[1]), this.Run = this.RunUserScript, this.DebugRun = this.DebugRunUserScript, this._actionReturnType =
                1) : (this._func = e.GetObjectReference(k[1]), this._objectClass = e.GetObjectClassByIndex(k[0]), k[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(k[2]), this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(k[2])));
            if (7 === k.length) {
                k = k[6];
                for (const n of k) this._parameters.push(f.Parameter.Create(this, n, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterAction(this)
        }
        static Create(e,
            k, h) {
            return f.New(f.Action, e, k, h)
        }
        _PostInit() {
            for (var e of this._parameters) e._PostInit(), e.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            if (this._systemPlugin) this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem;
            else if (this._callFunctionName) this._SetCallFunctionRunMethod(), this._callFunctionName = "";
            else if (this.Run === this.RunUserScript) {
                e = this._func;
                const k = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this._eventBlock);
                this._func = e.bind(null, this._runtime.GetIRuntime(),
                    k)
            } else this._behaviorType ? this.IsAsync() ? (this.Run = this._RunBehavior_Async, this.DebugRun = this._DebugRunBehavior_Async) : (this.Run = this._RunBehavior, this.DebugRun = this._DebugRunBehavior) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this.IsAsync() ? (this.Run = this._RunObject_Async, this.DebugRun = this._DebugRunObject_Async) : this._parameters.length ? this._parameters.every(k => k.VariesPerInstance()) ? (this.Run = this._RunObject_AllParamsVary,
                this.DebugRun = this._DebugRunObject_AllParamsVary) : this._anyParamVariesPerInstance ? (this.Run = this._RunObject_SomeParamsVary, this.DebugRun = this._DebugRunObject_SomeParamsVary) : this._parameters.every(k => k.IsConstant()) ? (b(this._parameters, this._results), this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst) : (this.Run = this._RunObject_ParamsDontVary, this.DebugRun = this._DebugRunObject_ParamsDontVary) : (this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const e = this._objectClass.GetPlugin(),
                k = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(e, k, this._RunSingleGlobal)
        }
        _SetCallFunctionRunMethod() {
            const e = this._eventBlock.GetEventSheetManager(),
                k = e.GetFunctionBlockByName(this._callFunctionName);
            k.IsEnabled() ? (this._callEventBlock = k.GetEventBlock(), this._combinedSolModifiers = [...new Set([...this._eventBlock.GetSolModifiersIncludingParents(), ...this._callEventBlock.GetSolModifiersIncludingParents()])],
                this._combinedSolModifiers = e._DeduplicateSolModifierList(this._combinedSolModifiers), this.Run = f.EventBlock.prototype.RunAsFunctionCall.bind(this._callEventBlock, this._combinedSolModifiers, this._parameters), this.DebugRun = this._DebugRunCallFunction) : (this.Run = d, this.DebugRun = c)
        }
        _SetRunMethodForBoundFunc(e, k, h) {
            const p = this._func,
                n = this._parameters;
            if (0 === n.length) this.Run = e._GetBoundACEMethod(p, k);
            else if (1 === n.length) {
                const m = n[0];
                if (m.IsConstant()) this.Run = e._GetBoundACEMethod_1param(p, k, m.Get(0));
                else {
                    const t = e._GetBoundACEMethod(p, k);
                    this.Run = function() {
                        return t(m.Get(0))
                    }
                }
            } else if (2 === n.length) {
                const m = n[0],
                    t = n[1];
                if (m.IsConstant() && t.IsConstant()) this.Run = e._GetBoundACEMethod_2params(p, k, m.Get(0), t.Get(0));
                else {
                    const q = e._GetBoundACEMethod(p, k);
                    this.Run = function() {
                        return q(m.Get(0), t.Get(0))
                    }
                }
            } else if (3 === n.length) {
                const m = n[0],
                    t = n[1],
                    q = n[2];
                if (m.IsConstant() && t.IsConstant() && q.IsConstant()) this.Run = e._GetBoundACEMethod_3params(p, k, m.Get(0), t.Get(0), q.Get(0));
                else {
                    const u = e._GetBoundACEMethod(p,
                        k);
                    this.Run = function() {
                        return u(m.Get(0), t.Get(0), q.Get(0))
                    }
                }
            } else this.Run = h
        }
        GetSID() {
            return this._sid
        }
        IsAsync() {
            return 1 === this._actionReturnType
        }
        CanBailOut() {
            return 2 === this._actionReturnType
        }
        HasReturnType() {
            return 0 !== this._actionReturnType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this._debugData.index
        }
        GetCombinedSolModifiers() {
            return this._combinedSolModifiers
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(e) {
            this._debugData.isBreakpoint = !!e;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const e = this._results;
            b(this._parameters, e);
            return this._func.apply(this._systemPlugin, e)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results;
                b(this._parameters, e);
                return yield* this._func.apply(this._systemPlugin, e)
            }
            return this.Run()
        }* _DebugRunCallFunction() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return yield* this._callEventBlock.DebugRunAsFunctionCall(this._combinedSolModifiers, this._parameters)
        }
        _RunSingleGlobal() {
            const e = this._results;
            b(this._parameters, e);
            return this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(),
                e)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results;
                b(this._parameters, e);
                return yield* this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(), e)
            }
            return this.Run()
        }
        _RunObject_ParamsConst() {
            const e = this._results,
                k = this._objectClass.GetCurrentSol().GetInstances();
            for (let h = 0, p = k.length; h < p; ++h) this._func.apply(k[h].GetSdkInstance(), e)
        }* _DebugRunObject_ParamsConst() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results,
                    k = this._objectClass.GetCurrentSol().GetInstances();
                for (let h = 0, p = k.length; h < p; ++h) yield* this._func.apply(k[h].GetSdkInstance(), e)
            } else this._RunObject_ParamsConst()
        }
        _RunObject_ParamsDontVary() {
            const e = this._results;
            b(this._parameters, e);
            const k = this._objectClass.GetCurrentSol().GetInstances();
            for (let h = 0, p = k.length; h < p; ++h) this._func.apply(k[h].GetSdkInstance(), e)
        }* _DebugRunObject_ParamsDontVary() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._results;
                b(this._parameters, e);
                const k = this._objectClass.GetCurrentSol().GetInstances();
                for (let h = 0, p = k.length; h < p; ++h) yield* this._func.apply(k[h].GetSdkInstance(), e)
            } else this._RunObject_ParamsDontVary()
        }
        _RunObject_AllParamsVary() {
            const e = this._parameters,
                k = this._results,
                h = this._func,
                p = this._objectClass.GetCurrentSol().GetInstances();
            for (let n = 0, m = p.length; n < m; ++n) {
                const t = p[n];
                for (let q = 0, u = e.length; q < u; ++q) k[q] =
                    e[q].Get(n);
                h.apply(t.GetSdkInstance(), k)
            }
        }* _DebugRunObject_AllParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._parameters,
                    k = this._results,
                    h = this._func,
                    p = this._objectClass.GetCurrentSol().GetInstances();
                for (let n = 0, m = p.length; n < m; ++n) {
                    const t = p[n];
                    for (let q = 0, u = e.length; q < u; ++q) k[q] = e[q].Get(n);
                    yield* h.apply(t.GetSdkInstance(), k)
                }
            } else this._RunObject_AllParamsVary()
        }
        _RunObject_SomeParamsVary() {
            const e = this._parameters,
                k = this._results,
                h = this._func,
                p = this._objectClass.GetCurrentSol().GetInstances();
            for (let m = 0, t = e.length; m < t; ++m) {
                var n = e[m];
                n.VariesPerInstance() || (k[m] = n.Get(0))
            }
            for (let m = 0, t = p.length; m < t; ++m) {
                n = p[m];
                for (let q = 0, u = e.length; q < u; ++q) {
                    const r = e[q];
                    r.VariesPerInstance() && (k[q] = r.Get(m))
                }
                h.apply(n.GetSdkInstance(), k)
            }
        }* _DebugRunObject_SomeParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const k = this._parameters,
                    h = this._results,
                    p = this._func,
                    n = this._objectClass.GetCurrentSol().GetInstances();
                for (let m = 0, t = k.length; m < t; ++m) {
                    var e = k[m];
                    e.VariesPerInstance() || (h[m] = e.Get(0))
                }
                for (let m = 0, t = n.length; m < t; ++m) {
                    e = n[m];
                    for (let q = 0, u = k.length; q < u; ++q) {
                        const r = k[q];
                        r.VariesPerInstance() && (h[q] = r.Get(m))
                    }
                    yield* p.apply(e.GetSdkInstance(), h)
                }
            } else this._RunObject_SomeParamsVary()
        }
        _RunBehavior() {
            var e = this._objectClass;
            const k = e.IsFamily(),
                h = e.GetFamilyIndex(),
                p = this._parameters,
                n = this._anyParamVariesPerInstance,
                m = this._results,
                t = this._func,
                q = this._behaviorIndex;
            e = e.GetCurrentSol().GetInstances();
            for (let x = 0, z = p.length; x < z; ++x) {
                var u = p[x];
                u.VariesPerInstance() || (m[x] = u.Get(0))
            }
            for (let x = 0, z = e.length; x < z; ++x) {
                u = e[x];
                if (n)
                    for (let C = 0, w = p.length; C < w; ++C) {
                        var r = p[C];
                        r.VariesPerInstance() && (m[C] = r.Get(x))
                    }
                r = k ? u.GetObjectClass().GetFamilyBehaviorOffset(h) : 0;
                t.apply(u.GetBehaviorInstances()[q + r].GetSdkInstance(), m)
            }
        }* _DebugRunBehavior() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var e = this._objectClass;
                const p =
                    e.IsFamily(),
                    n = e.GetFamilyIndex(),
                    m = this._parameters,
                    t = this._anyParamVariesPerInstance,
                    q = this._results,
                    u = this._func,
                    r = this._behaviorIndex;
                e = e.GetCurrentSol().GetInstances();
                for (let x = 0, z = m.length; x < z; ++x) {
                    var k = m[x];
                    k.VariesPerInstance() || (q[x] = k.Get(0))
                }
                for (let x = 0, z = e.length; x < z; ++x) {
                    k = e[x];
                    if (t)
                        for (let C = 0, w = m.length; C < w; ++C) {
                            var h = m[C];
                            h.VariesPerInstance() && (q[C] = h.Get(x))
                        }
                    h = p ? k.GetObjectClass().GetFamilyBehaviorOffset(n) : 0;
                    yield* u.apply(k.GetBehaviorInstances()[r + h].GetSdkInstance(), q)
                }
            } else this._RunBehavior()
        }
        _RunObject_Async() {
            const e =
                this._parameters,
                k = this._results,
                h = this._func,
                p = this._objectClass.GetCurrentSol().GetInstances(),
                n = [];
            for (let m = 0, t = p.length; m < t; ++m) {
                const q = p[m];
                for (let u = 0, r = e.length; u < r; ++u) k[u] = e[u].Get(m);
                n.push(h.apply(q.GetSdkInstance(), k))
            }
            return Promise.all(n)
        }* _DebugRunObject_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const e = this._parameters,
                    k = this._results,
                    h = this._func,
                    p = this._objectClass.GetCurrentSol().GetInstances(),
                    n = [];
                for (let m = 0,
                        t = p.length; m < t; ++m) {
                    const q = p[m];
                    for (let u = 0, r = e.length; u < r; ++u) k[u] = e[u].Get(m);
                    n.push(yield* h.apply(q.GetSdkInstance(), k))
                }
                return Promise.all(n)
            }
            return this._RunObject_Async()
        }
        _RunBehavior_Async() {
            var e = this._objectClass;
            const k = e.IsFamily(),
                h = e.GetFamilyIndex(),
                p = this._parameters,
                n = this._results,
                m = this._func,
                t = this._behaviorIndex;
            e = e.GetCurrentSol().GetInstances();
            const q = [];
            for (let u = 0, r = e.length; u < r; ++u) {
                const x = e[u];
                for (let C = 0, w = p.length; C < w; ++C) n[C] = p[C].Get(u);
                const z = k ? x.GetObjectClass().GetFamilyBehaviorOffset(h) :
                    0;
                q.push(m.apply(x.GetBehaviorInstances()[t + z].GetSdkInstance(), n))
            }
            return Promise.all(q)
        }* _DebugRunBehavior_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                var e = this._objectClass;
                const k = e.IsFamily(),
                    h = e.GetFamilyIndex(),
                    p = this._parameters,
                    n = this._results,
                    m = this._func,
                    t = this._behaviorIndex;
                e = e.GetCurrentSol().GetInstances();
                const q = [];
                for (let u = 0, r = e.length; u < r; ++u) {
                    const x = e[u];
                    for (let C = 0, w = p.length; C < w; ++C) n[C] = p[C].Get(u);
                    const z = k ?
                        x.GetObjectClass().GetFamilyBehaviorOffset(h) : 0;
                    q.push(yield* m.apply(x.GetBehaviorInstances()[t + z].GetSdkInstance(), n))
                }
                return Promise.all(q)
            }
            return this._RunBehavior_Async()
        }
        async RunUserScript() {
            try {
                await this._func()
            } catch (e) {
                console.error(`Unhandled exception running script %c${this._eventBlock.GetEventSheet().GetName()}, event ${this._eventBlock.GetDisplayNumber()}, action ${this.GetDebugIndex()+1}:`, "font-size: 1.2em; font-weight: bold;", e), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    f.EventScript.HadUserScriptException() || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), f.EventScript.SetHadUserScriptException())
            }
        }* DebugRunUserScript() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this.RunUserScript()
        }
        _SaveToJson() {
            return this._savedData && this._savedData.size ? {
                ex: f.ToSuperJSON(this._savedData)
            } : null
        }
        _LoadFromJson(e) {
            this._savedData &&
                (this._savedData.clear(), this._savedData = null);
            e && (e = e.ex) && (this._savedData = f.FromSuperJSON(e))
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new f.Color;

    function a(L, N) {
        return f.compare(this.GetWorldInfo().GetX(), L, N)
    }

    function d(L, N) {
        return f.compare(this.GetWorldInfo().GetY(), L, N)
    }

    function c() {
        const L = this.GetWorldInfo();
        return L.IsInViewport(L.GetLayer().GetViewport())
    }

    function e() {
        var L = this.GetWorldInfo();
        const N = L.GetLayout();
        L = L.GetBoundingBox();
        return 0 > L.getRight() || 0 > L.getBottom() || L.getLeft() > N.GetWidth() || L.getTop() > N.GetHeight()
    }

    function k(L, N, V) {
        const aa = this.GetCurrentSol(),
            ha = aa.GetInstances();
        if (!ha.length) return !1;
        let ja = ha[0];
        var ea = ja.GetWorldInfo();
        let ta = ja,
            sa = f.distanceSquared(ea.GetX(), ea.GetY(), N, V);
        for (let ya = 1, Ha = ha.length; ya < Ha; ++ya)
            if (ja = ha[ya], ea = ja.GetWorldInfo(), ea = f.distanceSquared(ea.GetX(), ea.GetY(), N, V), 0 === L && ea < sa || 1 === L && ea > sa) sa = ea, ta = ja;
        aa.PickOne(ta);
        return !0
    }

    function h(L) {
        const N = this.GetWorldInfo();
        N.GetX() !== L && (N.SetX(L), N.SetBboxChanged())
    }

    function p(L) {
        const N = this.GetWorldInfo();
        N.GetY() !== L && (N.SetY(L), N.SetBboxChanged())
    }

    function n(L, N) {
        const V = this.GetWorldInfo();
        V.EqualsXY(L,
            N) || (V.SetXY(L, N), V.SetBboxChanged())
    }

    function m(L, N) {
        if (L && (L = L.GetPairedInstance(this._inst))) {
            var [V, aa] = L.GetImagePoint(N);
            N = this.GetWorldInfo();
            if (N.GetX() !== V || N.GetY() !== aa) N.SetXY(V, aa), N.SetBboxChanged()
        }
    }

    function t(L) {
        if (0 !== L) {
            var N = this.GetWorldInfo();
            N.OffsetXY(N.GetCosAngle() * L, N.GetSinAngle() * L);
            N.SetBboxChanged()
        }
    }

    function q(L, N) {
        if (0 !== N) {
            var V = this.GetWorldInfo();
            L = f.toRadians(L);
            V.OffsetXY(Math.cos(L) * N, Math.sin(L) * N);
            V.SetBboxChanged()
        }
    }

    function u() {
        return this.GetWorldInfo().GetX()
    }

    function r() {
        return this.GetWorldInfo().GetY()
    }

    function x() {
        return this._runtime.GetDt(this._inst)
    }

    function z(L, N) {
        return f.compare(this.GetWorldInfo().GetWidth(), L, N)
    }

    function C(L, N) {
        return f.compare(this.GetWorldInfo().GetHeight(), L, N)
    }

    function w(L) {
        const N = this.GetWorldInfo();
        N.GetWidth() !== L && (N.SetWidth(L), N.SetBboxChanged())
    }

    function B(L) {
        const N = this.GetWorldInfo();
        N.GetHeight() !== L && (N.SetHeight(L), N.SetBboxChanged())
    }

    function F(L, N) {
        const V = this.GetWorldInfo();
        if (V.GetWidth() !== L || V.GetHeight() !==
            N) V.SetSize(L, N), V.SetBboxChanged()
    }

    function J() {
        return this.GetWorldInfo().GetWidth()
    }

    function O() {
        return this.GetWorldInfo().GetHeight()
    }

    function G() {
        return this.GetWorldInfo().GetBoundingBox().getLeft()
    }

    function I() {
        return this.GetWorldInfo().GetBoundingBox().getTop()
    }

    function P() {
        return this.GetWorldInfo().GetBoundingBox().getRight()
    }

    function Q() {
        return this.GetWorldInfo().GetBoundingBox().getBottom()
    }

    function T(L, N) {
        return f.angleDiff(this.GetWorldInfo().GetAngle(), f.toRadians(N)) <= f.toRadians(L)
    }

    function X(L) {
        return f.angleClockwise(this.GetWorldInfo().GetAngle(), f.toRadians(L))
    }

    function Z(L, N) {
        L = f.toRadians(L);
        N = f.toRadians(N);
        const V = this.GetWorldInfo().GetAngle();
        return f.angleClockwise(N, L) ? f.angleClockwise(V, L) && !f.angleClockwise(V, N) : !(!f.angleClockwise(V, L) && f.angleClockwise(V, N))
    }

    function fa(L) {
        const N = this.GetWorldInfo();
        L = f.clampAngle(f.toRadians(L));
        isNaN(L) || N.GetAngle() === L || (N.SetAngle(L), N.SetBboxChanged())
    }

    function ia(L) {
        if (!isNaN(L) && 0 !== L) {
            var N = this.GetWorldInfo();
            N.SetAngle(N.GetAngle() +
                f.toRadians(L));
            N.SetBboxChanged()
        }
    }

    function ba(L) {
        if (!isNaN(L) && 0 !== L) {
            var N = this.GetWorldInfo();
            N.SetAngle(N.GetAngle() - f.toRadians(L));
            N.SetBboxChanged()
        }
    }

    function xa(L, N) {
        const V = this.GetWorldInfo(),
            aa = V.GetAngle();
        L = f.angleRotate(aa, f.toRadians(N), f.toRadians(L));
        isNaN(L) || aa === L || (V.SetAngle(L), V.SetBboxChanged())
    }

    function ua(L, N, V) {
        const aa = this.GetWorldInfo(),
            ha = aa.GetAngle();
        N -= aa.GetX();
        V -= aa.GetY();
        L = f.angleRotate(ha, Math.atan2(V, N), f.toRadians(L));
        isNaN(L) || ha === L || (aa.SetAngle(L), aa.SetBboxChanged())
    }

    function Da(L, N) {
        const V = this.GetWorldInfo(),
            aa = V.GetAngle();
        L -= V.GetX();
        N -= V.GetY();
        N = Math.atan2(N, L);
        isNaN(N) || aa === N || (V.SetAngle(N), V.SetBboxChanged())
    }

    function Ea() {
        return f.toDegrees(this.GetWorldInfo().GetAngle())
    }

    function Ba(L, N) {
        return f.compare(f.round6dp(100 * this.GetWorldInfo().GetOpacity()), L, N)
    }

    function Aa() {
        return this.GetWorldInfo().IsVisible()
    }

    function ka(L) {
        const N = this.GetWorldInfo();
        L = 2 === L ? !N.IsVisible() : 0 !== L;
        N.IsVisible() !== L && (N.SetVisible(L), this._runtime.UpdateRender())
    }

    function Fa(L) {
        L =
            f.clamp(L / 100, 0, 1);
        const N = this.GetWorldInfo();
        N.GetOpacity() !== L && (N.SetOpacity(L), this._runtime.UpdateRender())
    }

    function wa(L) {
        b.setFromRgbValue(L);
        L = this.GetWorldInfo();
        L.GetUnpremultipliedColor().equalsIgnoringAlpha(b) || (L.SetUnpremultipliedColor(b), this._runtime.UpdateRender())
    }

    function Ca() {
        const L = this.GetWorldInfo().GetUnpremultipliedColor();
        return f.PackRGBAEx(L.getR(), L.getG(), L.getB(), L.getA())
    }

    function Pa() {
        return f.round6dp(100 * this.GetWorldInfo().GetOpacity())
    }

    function Qa(L) {
        return L ?
            this.GetWorldInfo().GetLayer() === L : !1
    }

    function Ra(L) {
        const N = this.GetCurrentSol(),
            V = N.GetInstances();
        if (!V.length) return !1;
        let aa = V[0];
        for (let ha = 1, ja = V.length; ha < ja; ++ha) {
            const ea = V[ha],
                ta = ea.GetWorldInfo(),
                sa = aa.GetWorldInfo(),
                ya = ta.GetLayer().GetIndex(),
                Ha = sa.GetLayer().GetIndex();
            if (0 === L) {
                if (ya > Ha || ya === Ha && ta.GetZIndex() > sa.GetZIndex()) aa = ea
            } else if (ya < Ha || ya === Ha && ta.GetZIndex() < sa.GetZIndex()) aa = ea
        }
        N.PickOne(aa);
        return !0
    }

    function Ja(L, N, V) {
        const aa = this.GetWorldInfo();
        L = 0 === L ? aa.GetZElevation() :
            aa.GetTotalZElevation();
        return f.compare(L, N, V)
    }

    function Sa() {
        this.GetWorldInfo().ZOrderMoveToTop()
    }

    function Ta() {
        this.GetWorldInfo().ZOrderMoveToBottom()
    }

    function Ua(L) {
        L && this.GetWorldInfo().ZOrderMoveToLayer(L)
    }

    function Va(L, N) {
        L = 0 === L;
        N && (N = N.GetFirstPicked(this.GetInstance())) && this.GetWorldInfo().ZOrderMoveAdjacentToInstance(N, L)
    }

    function Wa(L) {
        const N = this.GetWorldInfo();
        N.GetZElevation() !== L && (N.SetZElevation(L), this._runtime.UpdateRender())
    }

    function Xa() {
        return this.GetWorldInfo().GetLayer().GetIndex()
    }

    function Ya() {
        return this.GetWorldInfo().GetLayer().GetName()
    }

    function Ka() {
        return this.GetWorldInfo().GetZIndex()
    }

    function Za() {
        return this.GetWorldInfo().GetZElevation()
    }

    function $a() {
        return this.GetWorldInfo().GetTotalZElevation()
    }

    function ab(L, N) {
        if (N = this.GetObjectClass().GetEffectList().GetEffectTypeByName(N)) {
            N = N.GetIndex();
            L = 1 === L;
            var V = this.GetWorldInfo().GetInstanceEffectList();
            V.IsEffectIndexActive(N) !== L && (V.SetEffectIndexActive(N, L), V.UpdateActiveEffects(), this._runtime.UpdateRender())
        }
    }

    function bb(L, N, V) {
        var aa = this.GetObjectClass().GetEffectList().GetEffectTypeByName(L);
        if (aa) {
            L = aa.GetIndex();
            var ha = this.GetWorldInfo().GetInstanceEffectList(),
                ja = ha.GetEffectParametersForIndex(L);
            N = Math.floor(N);
            if (!(0 > N || N >= ja.length)) {
                aa = aa.GetShaderProgram().GetParameterType(N);
                if ("color" === aa) {
                    b.setFromRgbValue(V);
                    N = ja[N];
                    if (b.equalsIgnoringAlpha(N)) return;
                    N.copyRgb(b)
                } else {
                    "percent" === aa && (V /= 100);
                    if (ja[N] === V) return;
                    ja[N] = V
                }
                ha.IsEffectIndexActive(L) && this._runtime.UpdateRender()
            }
        }
    }

    function cb() {
        return this.GetWorldInfo().HasParent()
    }

    function db() {
        return this.GetWorldInfo().HasChildren()
    }

    function eb(L, N) {
        const V = this.GetCurrentSol().GetInstances();
        if (0 === V.length) return !1;
        const aa = L.GetCurrentSol();
        var ha = aa.GetInstances();
        if (0 === ha.length) return !1;
        ha = new Set(ha);
        const ja = new Set;
        for (let ta = 0, sa = V.length; ta < sa; ++ta) {
            var ea = V[ta];
            if (1 === N)
                for (const ya of ea.parents()) ya.BelongsToObjectClass(L) && ha.has(ya) && ja.add(ya);
            else {
                if (0 === N) {
                    if (ea = ea.GetParent(), null === ea) continue
                } else ea = ea.GetTopParent();
                ea.BelongsToObjectClass(L) && ha.has(ea) &&
                    ja.add(ea)
            }
        }
        if (0 === ja.size) return !1;
        aa.SetSetPicked(ja);
        L.ApplySolToContainer();
        return !0
    }

    function fb(L, N) {
        const V = this.GetCurrentSol().GetInstances();
        if (0 === V.length) return !1;
        const aa = L.GetCurrentSol();
        var ha = aa.GetInstances();
        if (0 === ha.length) return !1;
        ha = new Set(ha);
        const ja = new Set;
        for (let ea = 0, ta = V.length; ea < ta; ++ea) {
            const sa = V[ea];
            2 === N && !sa.HasChildren() && sa.BelongsToObjectClass(L) && ha.has(sa) && ja.add(sa);
            for (const ya of 0 === N ? sa.children() : sa.allChildren()) 2 === N && ya.HasChildren() || ya.BelongsToObjectClass(L) &&
                ha.has(ya) && ja.add(ya)
        }
        if (0 === ja.size) return !1;
        aa.SetSetPicked(ja);
        L.ApplySolToContainer();
        return !0
    }

    function gb(L, N) {
        const V = this.GetCurrentSol().GetInstances();
        if (0 === V.length) return !1;
        const aa = L.GetCurrentSol();
        var ha = aa.GetInstances();
        if (0 === ha.length) return !1;
        ha = new Set(ha);
        const ja = [];
        for (let ea = 0, ta = V.length; ea < ta; ++ea) {
            const sa = V[ea].GetChildAt(N);
            null !== sa && sa.BelongsToObjectClass(L) && ha.has(sa) && ja.push(sa)
        }
        if (0 === ja.length) return !1;
        aa.SetArrayPicked(ja);
        L.ApplySolToContainer();
        return !0
    }

    function hb(L, N) {
        return f.compare(this._inst.GetChildCount(), L, N)
    }

    function ib(L, N, V, aa, ha, ja, ea, ta) {
        const sa = this._inst,
            ya = this._runtime.GetCurrentAction().GetObjectClass();
        for (const Ha of L.allCorrespondingInstances(sa, ya)) {
            if (!Ha.GetPlugin().SupportsSceneGraph()) break;
            sa.AddChild(Ha, {
                transformX: N,
                transformY: V,
                transformWidth: aa,
                transformHeight: ha,
                transformAngle: ja,
                transformZElevation: ea,
                destroyWithParent: ta
            })
        }
    }

    function jb(L) {
        const N = this._inst,
            V = this._runtime.GetCurrentAction().GetObjectClass();
        for (const aa of L.allCorrespondingInstances(N, V)) N.RemoveChild(aa)
    }

    function na() {
        this._inst.HasParent() && this._inst.GetParent().RemoveChild(this._inst)
    }

    function Ga() {
        return this._inst.GetChildCount()
    }

    function kb(L, N) {
        L = Math.floor(L);
        N = Math.floor(N);
        const V = this.GetWorldInfo();
        2 > L || 2 > N || !isFinite(L) || !isFinite(N) ? (V.ReleaseMesh(), V.SetBboxChanged()) : V.CreateMesh(L, N)
    }

    function lb(L, N, V, aa, ha, ja, ea, ta) {
        const sa = this.GetWorldInfo();
        sa.SetMeshPoint(L, N, {
            mode: 0 === V ? "absolute" : "relative",
            x: aa,
            y: ha,
            zElevation: ja,
            u: ea,
            v: ta
        }) && sa.SetBboxChanged()
    }

    function mb() {
        const L = this.GetWorldInfo();
        return L.HasMesh() ? L.GetSourceMesh().GetHSize() : 0
    }

    function nb() {
        const L = this.GetWorldInfo();
        return L.HasMesh() ? L.GetSourceMesh().GetVSize() : 0
    }

    function ob(L) {
        const N = this.GetWorldInfo();
        L = 2 === L ? !N.IsVisible() : 0 !== L;
        N.IsVisible() !== L && N.SetVisible(L)
    }

    function pb(L, N) {
        this.SetElementCSSStyle(L, N)
    }

    function La(L, N) {
        this.SetElementAttribute(L, "" + N)
    }

    function Ma(L) {
        this.RemoveElementAttribute(L)
    }

    function Na() {
        this.FocusElement()
    }

    function Oa() {
        this.BlurElement()
    }

    function Ia() {
        return this.IsElementFocused()
    }

    function g(L) {
        this._SetEnabled(0 !== L)
    }

    function l() {
        return this._IsEnabled()
    }

    function v(L, N, V) {
        return f.compare(this.GetInstance().GetInstanceVariableValue(L), N, V)
    }

    function y(L) {
        return !!this.GetInstance().GetInstanceVariableValue(L)
    }

    function A(L, N) {
        const V = this.GetCurrentSol(),
            aa = V.GetInstances();
        if (!aa.length) return !1;
        let ha = aa[0],
            ja = ha,
            ea = ha.GetInstanceVariableValue(N);
        for (let ta = 1, sa = aa.length; ta < sa; ++ta) {
            ha = aa[ta];
            const ya = ha.GetInstanceVariableValue(N);
            if (0 === L && ya < ea || 1 === L && ya > ea) ea = ya, ja = ha
        }
        V.PickOne(ja);
        return !0
    }

    function D(L) {
        return this._runtime.GetCurrentCondition().IsInverted() ? H(this, L) : E(this, L)
    }

    function E(L, N) {
        N = L.GetRuntime().GetInstanceByUID(N);
        if (!N) return !1;
        const V = L.GetCurrentSol();
        if (!V.IsSelectAll() && !V._GetOwnInstances().includes(N)) return !1;
        if (L.IsFamily()) {
            if (N.GetObjectClass().BelongsToFamily(L)) return V.PickOne(N), L.ApplySolToContainer(), !0
        } else if (N.GetObjectClass() === L) return V.PickOne(N), L.ApplySolToContainer(), !0;
        return !1
    }

    function H(L, N) {
        const V = L.GetCurrentSol();
        if (V.IsSelectAll()) {
            V._SetSelectAll(!1);
            V.ClearArrays();
            var aa = L.GetInstances();
            for (let ja = 0, ea = aa.length; ja < ea; ++ja) {
                var ha = aa[ja];
                ha.GetUID() === N ? V._PushElseInstance(ha) : V._PushInstance(ha)
            }
            L.ApplySolToContainer();
            return !!V._GetOwnInstances().length
        }
        aa = V._GetOwnInstances();
        ha = 0;
        for (let ja = 0, ea = aa.length; ja < ea; ++ja) {
            const ta = aa[ja];
            aa[ha] = ta;
            ta.GetUID() === N ? V._PushElseInstance(ta) : ++ha
        }
        f.truncateArray(aa, ha);
        L.ApplySolToContainer();
        return !!aa.length
    }

    function K() {
        this._runtime.DestroyInstance(this._inst)
    }

    function M() {
        return !0
    }

    function R() {
        return !0
    }

    function S(L, N) {
        this.GetInstance().SetInstanceVariableValue(L, N)
    }

    function W(L, N) {
        const V = this.GetInstance(),
            aa = V.GetInstanceVariableValue(L);
        "number" === typeof aa && "number" !== typeof N ? N = parseFloat(N) : "string" === typeof aa && "string" !== typeof N && (N = N.toString());
        V.SetInstanceVariableValue(L, aa + N)
    }

    function U(L, N) {
        const V = this.GetInstance(),
            aa = V.GetInstanceVariableValue(L);
        "number" === typeof aa && ("number" !== typeof N && (N = parseFloat(N)), V.SetInstanceVariableValue(L,
            aa - N))
    }

    function da(L, N) {
        this.GetInstance().SetInstanceVariableValue(L, N ? 1 : 0)
    }

    function ca(L) {
        const N = this.GetInstance();
        N.SetInstanceVariableValue(L, 0 === N.GetInstanceVariableValue(L) ? 1 : 0)
    }

    function Y(L) {
        let N;
        try {
            N = JSON.parse(L)
        } catch (V) {
            console.error("Failed to load from JSON string: ", V);
            return
        }
        L = this.GetInstance();
        L._OnBeforeLoad("state");
        L.LoadFromJson(N, "state")
    }

    function ra() {
        return JSON.stringify(this.GetInstance().SaveToJson("state"))
    }

    function ma() {
        return this.GetInstance().GetObjectClass().GetName()
    }

    function pa() {
        const L = this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass();
        let N = L.GetInstanceCount();
        const V = this._runtime._GetInstancesPendingCreate();
        for (const aa of V) L.IsFamily() ? aa.GetObjectClass().BelongsToFamily(L) && ++N : aa.GetObjectClass() === L && ++N;
        return N
    }

    function qa() {
        return this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass().GetCurrentSol().GetInstances().length
    }

    function oa() {
        return this._inst.GetIID()
    }

    function za() {
        return this._inst.GetUID()
    }
    f.AddCommonACEs =
        function(L, N) {
            const V = L[1],
                aa = L[4],
                ha = L[5],
                ja = L[6],
                ea = L[7],
                ta = L[8],
                sa = L[10],
                ya = L[11],
                Ha = L[12],
                qb = L[13],
                rb = L[14],
                va = N.Cnds,
                la = N.Acts;
            N = N.Exps;
            L[3] && (va.CompareX = a, va.CompareY = d, va.IsOnScreen = c, va.IsOutsideLayout = e, va.PickDistance = k, la.SetX = h, la.SetY = p, la.SetPos = n, la.SetPosToObject = m, la.MoveForward = t, la.MoveAtAngle = q, N.X = u, N.Y = r, N.dt = x);
            aa && (va.CompareWidth = z, va.CompareHeight = C, la.SetWidth = w, la.SetHeight = B, la.SetSize = F, N.Width = J, N.Height = O, N.BBoxLeft = G, N.BBoxTop = I, N.BBoxRight = P, N.BBoxBottom = Q);
            ha &&
                (va.AngleWithin = T, va.IsClockwiseFrom = X, va.IsBetweenAngles = Z, la.SetAngle = fa, la.RotateClockwise = ia, la.RotateCounterclockwise = ba, la.RotateTowardAngle = xa, la.RotateTowardPosition = ua, la.SetTowardPosition = Da, N.Angle = Ea);
            ja && (va.IsVisible = Aa, va.CompareOpacity = Ba, la.SetVisible = ka, la.SetOpacity = Fa, la.SetDefaultColor = wa, N.Opacity = Pa, N.ColorValue = Ca);
            ea && (va.IsOnLayer = Qa, va.PickTopBottom = Ra, va.CompareZElevation = Ja, la.MoveToTop = Sa, la.MoveToBottom = Ta, la.MoveToLayer = Ua, la.ZMoveToObject = Va, la.SetZElevation = Wa, N.LayerNumber =
                Xa, N.LayerName = Ya, N.ZIndex = Ka, N.ZElevation = Za, N.TotalZElevation = $a);
            ta && (la.SetEffectEnabled = ab, la.SetEffectParam = bb);
            qb && (va.HasParent = cb, va.HasChildren = db, va.PickParent = eb, va.PickChildren = fb, va.PickNthChild = gb, va.CompareChildCount = hb, la.AddChild = ib, la.RemoveChild = jb, la.RemoveFromParent = na, N.ChildCount = Ga);
            rb && (la.SetMeshSize = kb, la.SetMeshPoint = lb, N.MeshColumns = mb, N.MeshRows = nb);
            sa && (va.IsVisible = Aa, la.SetVisible = ob, la.SetCSSStyle = pb, la.SetElemAttribute = La, la.RemoveElemAttribute = Ma);
            ya && (va.IsFocused =
                Ia, la.SetFocus = Na, la.SetBlur = Oa);
            Ha && (va.IsEnabled = l, la.SetEnabled = g);
            V || (va.CompareInstanceVar = v, va.IsBoolInstanceVarSet = y, va.PickInstVarHiLow = A, va.PickByUID = D, la.SetInstanceVar = S, la.AddInstanceVar = W, la.SubInstanceVar = U, la.SetBoolInstanceVar = da, la.ToggleBoolInstanceVar = ca, va.OnCreated = M, va.OnDestroyed = R, la.Destroy = K, la.LoadFromJsonString || (la.LoadFromJsonString = Y), N.AsJSON || (N.AsJSON = ra), N.Count = pa, N.PickedCount = qa, N.IID = oa, N.UID = za, N.ObjectTypeName = ma)
        }
}
"use strict"; {
    const f = self.C3;
    f.ScheduledWait = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._isSignalled = !1;
            this._event = null;
            this._actIndex = 0;
            this._solModifiers = [];
            this._sols = new Map;
            this._callingFunctionBlock = null;
            this._asyncId = -1;
            this._functionInnerLocalVars = this._functionParameters = null;
            this._shouldRelease = !1
        }
        Release() {
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._functionInnerLocalVars = this._functionParameters = this._callingFunctionBlock =
                this._event = null;
            this._asyncId = -1;
            f.clearArray(this._solModifiers);
            for (const b of this._sols.values()) b.Release();
            this._sols.clear()
        }
        _Init() {
            var b = this._eventSheetManager,
                a = b.GetRuntime().GetAllObjectClasses();
            const d = b.GetCurrentEventStackFrame();
            this._event = d.GetCurrentEvent();
            this._actIndex = d.GetActionIndex() + 1;
            if (b = b.FindFirstFunctionBlockParent(this._event)) this._callingFunctionBlock = b, this._functionParameters = b.CaptureFunctionParameters(), this._functionInnerLocalVars = b._GetAllInnerLocalVariables().map(c =>
                c.GetValue()), b.IsAsync() && (this._asyncId = b.PauseCurrentAsyncFunction());
            for (const c of a)
                if (a = c.GetCurrentSol(), !a.IsSelectAll() || this._event.HasSolModifier(c)) this._solModifiers.push(c), this._sols.set(c, f.New(f.SolState, a))
        }
        InitTimer(b) {
            this._type = "timer";
            this._Init();
            this._time = this._eventSheetManager.GetRuntime().GetGameTime() + b
        }
        InitSignal(b) {
            this._type = "signal";
            this._Init();
            this._signalTag = b.toLowerCase()
        }
        InitPromise(b) {
            this._type = "promise";
            this._Init();
            b.then(() => this.SetSignalled()).catch(a => {
                console.warn("[C3 runtime] Promise rejected in 'Wait for previous actions to complete': ", a);
                this.SetSignalled()
            })
        }
        IsTimer() {
            return "timer" === this._type
        }
        IsSignal() {
            return "signal" === this._type
        }
        IsPromise() {
            return "promise" === this._type
        }
        GetSignalTag() {
            return this._signalTag
        }
        IsSignalled() {
            return this._isSignalled
        }
        SetSignalled() {
            this._isSignalled = !0
        }
        _ShouldRun() {
            return this.IsTimer() ? this._time <= this._eventSheetManager.GetRuntime().GetGameTime() : this.IsSignalled()
        }
        _RestoreState(b) {
            b._Restore(this._event,
                this._actIndex);
            for (const [a, d] of this._sols.entries()) b = a.GetCurrentSol(), d._Restore(b);
            if (b = this._callingFunctionBlock) b.SetFunctionParameters(this._functionParameters), b._GetAllInnerLocalVariables().map((a, d) => a.SetValue(this._functionInnerLocalVars[d])), b.IsAsync() && b.ResumeAsyncFunction(this._asyncId)
        }
        _Run(b) {
            this._RestoreState(b);
            this._event._ResumeActionsAndSubEvents(b);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        async _DebugRun(b) {
            this._RestoreState(b);
            for (const a of this._event._DebugResumeActionsAndSubEvents(b)) await this._eventSheetManager.GetRuntime().DebugBreak(a);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        ShouldRelease() {
            return this._shouldRelease
        }
        RemoveInstances(b) {
            for (const a of this._sols.values()) a.RemoveInstances(b)
        }
        _SaveToJson() {
            const b = {},
                a = {
                    t: this._time,
                    st: this._signalTag,
                    s: this._isSignalled,
                    ev: this._event.GetSID(),
                    sm: this._solModifiers.map(d => d.GetSID()),
                    sols: b
                };
            this._event._HasActionIndex(this._actIndex) && (a.act = this._event.GetActionAt(this._actIndex).GetSID());
            for (const [d, c] of this._sols) b[d.GetSID().toString()] = c._SaveToJson();
            return a
        }
        static _CreateFromJson(b, a) {
            const d = b.GetRuntime();
            var c = b.GetEventBlockBySID(a.ev);
            if (!c) return null;
            let e = 0;
            if (a.hasOwnProperty("act")) {
                var k = b.GetActionBySID(a.act);
                if (!k) return null;
                e = k.GetIndex()
            }
            k =
                f.New(f.ScheduledWait, b);
            k._time = a.t;
            k._type = -1 === k._time ? "signal" : "timer";
            k._signalTag = a.st;
            k._isSignalled = a.s;
            k._event = c;
            k._actIndex = e;
            for (var h of a.sm)(c = d.GetObjectClassBySID(h)) && k._solModifiers.push(c);
            for (const [p, n] of Object.entries(a.sols))
                if (a = parseInt(p, 10), a = d.GetObjectClassBySID(a)) h = f.New(f.SolState, null), h._LoadFromJson(b, n), k._sols.set(a, h);
            return k
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SolState = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = null;
            this._isSelectAll = !0;
            this._instances = [];
            b && (this._objectClass = b.GetObjectClass(), this._isSelectAll = b.IsSelectAll(), f.shallowAssignArray(this._instances, b._GetOwnInstances()))
        }
        Release() {
            this._objectClass = null;
            f.clearArray(this._instances)
        }
        _Restore(b) {
            b._SetSelectAll(this._isSelectAll);
            f.shallowAssignArray(b._GetOwnInstances(), this._instances)
        }
        RemoveInstances(b) {
            f.arrayRemoveAllInSet(this._instances,
                b)
        }
        _SaveToJson() {
            return {
                sa: this._isSelectAll,
                insts: this._instances.map(b => b.GetUID())
            }
        }
        _LoadFromJson(b, a) {
            b = b.GetRuntime();
            this._isSelectAll = !!a.sa;
            f.clearArray(this._instances);
            for (const d of a.insts)(a = b.GetInstanceByUID(d)) && this._instances.push(a)
        }
    }
}
"use strict"; {
    const f = self.C3;

    function b(a, d) {
        let c = a.get(d);
        c || (c = new Map, a.set(d, c));
        return c
    }
    f.SDKPluginBase = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._isSingleGlobal = !!a.isSingleGlobal;
            this._isWorldType = !!a.isWorld;
            this._isRotatable = !!a.isRotatable;
            this._mustPredraw = !!a.mustPredraw;
            this._hasEffects = !!a.hasEffects;
            this._supportsSceneGraph = !!a.supportsSceneGraph;
            this._supportsMesh = !!a.supportsMesh;
            this._singleGlobalObjectClass = null;
            this._boundACEMethodCache = new Map;
            this._boundACEMethodCache_1param =
                new Map;
            this._boundACEMethodCache_2params = new Map;
            this._boundACEMethodCache_3params = new Map
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        IsSingleGlobal() {
            return this._isSingleGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        IsRotatable() {
            return this._isRotatable
        }
        MustPreDraw() {
            return this._mustPredraw
        }
        HasEffects() {
            return this._hasEffects
        }
        SupportsSceneGraph() {
            return this._supportsSceneGraph
        }
        SupportsMesh() {
            return this._supportsMesh
        }
        _GetBoundACEMethod(a, d) {
            if (!d) throw Error("missing 'this' binding");
            let c = this._boundACEMethodCache.get(a);
            if (c) return c;
            c = a.bind(d);
            this._boundACEMethodCache.set(a, c);
            return c
        }
        _GetBoundACEMethod_1param(a, d, c) {
            if (!d) throw Error("missing 'this' binding");
            const e = b(this._boundACEMethodCache_1param, a);
            let k = e.get(c);
            if (k) return k;
            k = a.bind(d, c);
            e.set(c, k);
            return k
        }
        _GetBoundACEMethod_2params(a, d, c, e) {
            if (!d) throw Error("missing 'this' binding");
            var k = b(this._boundACEMethodCache_2params, a);
            k = b(k, c);
            let h = k.get(e);
            if (h) return h;
            h = a.bind(d, c, e);
            k.set(e, h);
            return h
        }
        _GetBoundACEMethod_3params(a,
            d, c, e, k) {
            if (!d) throw Error("missing 'this' binding");
            var h = b(this._boundACEMethodCache_3params, a);
            h = b(h, c);
            h = b(h, e);
            let p = h.get(k);
            if (p) return p;
            p = a.bind(d, c, e, k);
            h.set(k, p);
            return p
        }
        _SetSingleGlobalObjectClass(a) {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            this._singleGlobalObjectClass = a
        }
        GetSingleGlobalObjectClass() {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass
        }
        GetSingleGlobalInstance() {
            if (!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass.GetSingleGlobalInstance()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SDKDOMPluginBase = class extends f.SDKPluginBase {
        constructor(b, a) {
            super(b);
            this._domComponentId = a;
            this._nextElementId = 0;
            this._instMap = new Map;
            this.AddElementMessageHandler("elem-focused", d => d._OnElemFocused());
            this.AddElementMessageHandler("elem-blurred", d => {
                d && d._OnElemBlurred()
            })
        }
        Release() {
            super.Release()
        }
        _AddElement(b) {
            const a = this._nextElementId++;
            this._instMap.set(a, b);
            return a
        }
        _RemoveElement(b) {
            this._instMap.delete(b)
        }
        AddElementMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, d => {
                    const c = this._instMap.get(d.elementId);
                    a(c, d)
                })
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SDKTypeBase = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetImageInfo() {
            return this._objectClass.GetImageInfo()
        }
        FinishCondition(b) {}
        LoadTextures(b) {}
        ReleaseTextures() {}
        OnDynamicTextureLoadComplete() {}
        PreloadTexturesWithInstances(b) {}
        LoadTilemapData() {}
        GetScriptInterfaceClass() {
            return null
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SDKInstanceBase = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._domComponentId = a;
            this._runtime = b.GetRuntime();
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._tick2Func = this._tickFunc = null;
            this._isTicking2 = this._isTicking = !1;
            this._disposables = null;
            this._wasReleased = !1
        }
        Release() {
            this._wasReleased = !0;
            this._StopTicking();
            this._StopTicking2();
            this._tick2Func = this._tickFunc = null;
            this._disposables && (this._disposables.Release(),
                this._disposables = null);
            this._sdkType = this._objectClass = this._runtime = this._inst = null
        }
        WasReleased() {
            return this._wasReleased
        }
        GetInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetPlugin() {
            return this._sdkType.GetPlugin()
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._inst.GetInterfaceClass()
        }
        Trigger(b) {
            return this._runtime.Trigger(b, this._inst, null)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b, this._inst, null)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b,
                this._inst, null)
        }
        FastTrigger(b, a) {
            return this._runtime.FastTrigger(b, this._inst, a)
        }
        DebugFastTrigger(b, a) {
            return this._runtime.DebugFastTrigger(b, this._inst, a)
        }
        ScheduleTriggers(b) {
            return this._runtime.ScheduleTriggers(b)
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId, b, a)
        }
        AddDOMMessageHandlers(b) {
            for (const [a, d] of b) this.AddDOMMessageHandler(a, d)
        }
        PostToDOM(b, a) {
            this._runtime.PostComponentMessageToDOM(this._domComponentId, b, a)
        }
        PostToDOMAsync(b, a) {
            return this._runtime.PostComponentMessageToDOMAsync(this._domComponentId,
                b, a)
        }
        _PostToDOMMaybeSync(b, a) {
            if (this._runtime.IsInWorker()) this.PostToDOM(b, a);
            else return window.c3_runtimeInterface._OnMessageFromRuntime({
                type: "event",
                component: this._domComponentId,
                handler: b,
                data: a,
                responseId: null
            })
        }
        Tick() {}
        Tick2() {}
        _StartTicking() {
            this._isTicking || (this._tickFunc || (this._tickFunc = () => this.Tick()), this._runtime.Dispatcher().addEventListener("tick", this._tickFunc), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime.Dispatcher().removeEventListener("tick", this._tickFunc),
                this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._tick2Func || (this._tick2Func = () => this.Tick2()), this._runtime.Dispatcher().addEventListener("tick2", this._tick2Func), this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime.Dispatcher().removeEventListener("tick2", this._tick2Func), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        GetDebuggerProperties() {
            return []
        }
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b,
            a) {}
        OffsetPropertyValueByIndex(b, a) {
            if (0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if ("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SDKWorldInstanceBase = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, a);
            this._worldInfo = b.GetWorldInfo();
            this._webglcontextrestored_handler = this._webglcontextlost_handler = null
        }
        Release() {
            if (this._webglcontextlost_handler) {
                const b = this._runtime.Dispatcher();
                b.removeEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.removeEventListener("webglcontextrestored", this._webglcontextrestored_handler);
                this._webglcontextrestored_handler = this._webglcontextlost_handler =
                    null
            }
            this._worldInfo = null;
            super.Release()
        }
        HandleWebGLContextLoss() {
            if (!this._webglcontextlost_handler) {
                this._webglcontextlost_handler = () => this.OnWebGLContextLost();
                this._webglcontextrestored_handler = () => this.OnWebGLContextRestored();
                var b = this._runtime.Dispatcher();
                b.addEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.addEventListener("webglcontextrestored", this._webglcontextrestored_handler)
            }
        }
        OnWebGLContextLost() {}
        OnWebGLContextRestored() {}
        GetWorldInfo() {
            return this._worldInfo
        }
        IsOriginalSizeKnown() {
            return !1
        }
        GetOriginalWidth() {
            if (!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if (b) return b.GetWidth()
        }
        GetOriginalHeight() {
            if (!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if (b) return b.GetHeight()
        }
        GetCurrentImageInfo() {
            return null
        }
        GetCurrentSurfaceSize() {
            var b = this.GetCurrentImageInfo();
            return b && (b = b.GetTexture()) ? [b.GetWidth(), b.GetHeight()] : [100, 100]
        }
        GetCurrentTexRect() {
            const b = this.GetCurrentImageInfo();
            return b ? b.GetTexRect() : null
        }
        GetImagePoint(b) {
            b = this._inst.GetWorldInfo();
            return [b.GetX(),
                b.GetY()
            ]
        }
        LoadTilemapData(b, a, d) {}
        TestPointOverlapTile(b, a) {}
    }
}
"use strict"; {
    const f = self.C3,
        b = f.New(f.Rect);
    f.SDKDOMInstanceBase = class extends f.SDKWorldInstanceBase {
        constructor(a, d) {
            super(a, d);
            this._elementId = this.GetPlugin()._AddElement(this);
            this._isElementShowing = !0;
            this._autoFontSize = this._elemHasFocus = !1;
            this._lastRect = f.New(f.Rect, 0, 0, -1, -1);
            a = this._runtime.GetCanvasManager();
            this._lastWindowWidth = a.GetLastWidth();
            this._lastWindowHeight = a.GetLastHeight();
            this._isPendingUpdateState = !1;
            this._StartTicking()
        }
        Release() {
            this.GetPlugin()._RemoveElement(this._elementId);
            this.PostToDOMElement("destroy");
            this._elementId = -1;
            super.Release()
        }
        _GetElementInDOMMode() {
            if (this._runtime.IsInWorker()) throw Error("not valid in worker mode");
            return this._PostToDOMElementMaybeSync("get-element")
        }
        PostToDOMElement(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            this.PostToDOM(a, d)
        }
        _PostToDOMElementMaybeSync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this._PostToDOMMaybeSync(a, d)
        }
        PostToDOMElementAsync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this.PostToDOMAsync(a, d)
        }
        CreateElement(a) {
            a || (a = {});
            const d =
                this.GetWorldInfo().IsVisible();
            a.elementId = this._elementId;
            a.isVisible = d;
            Object.assign(a, this.GetElementState());
            this._isElementShowing = !!a.isVisible;
            this._PostToDOMMaybeSync("create", a);
            this._UpdatePosition(!0)
        }
        SetElementVisible(a) {
            a = !!a;
            this._isElementShowing !== a && (this._isElementShowing = a, this.PostToDOMElement("set-visible", {
                isVisible: a
            }))
        }
        Tick() {
            this._UpdatePosition(!1)
        }
        _ShouldPreserveElement() {
            const a = this._runtime.GetCanvasManager().GetFullscreenMode();
            return "Android" === f.Platform.OS && ("scale-inner" ===
                a || "scale-outer" === a || "crop" === a)
        }
        _UpdatePosition(a) {
            var d = this.GetWorldInfo();
            const c = d.GetLayer();
            var e = d.GetX(),
                k = d.GetY();
            let [h, p] = c.LayerToCanvasCss(e, k), [n, m] = c.LayerToCanvasCss(e + d.GetWidth(), k + d.GetHeight());
            e = this._runtime.GetCanvasManager();
            k = e.GetCssWidth();
            const t = e.GetCssHeight();
            if (d.IsVisible() && c.IsVisible()) {
                if (!this._ShouldPreserveElement()) {
                    if (0 >= n || 0 >= m || h >= k || p >= t) {
                        this.SetElementVisible(!1);
                        return
                    }
                    1 > h && (h = 1);
                    1 > p && (p = 1);
                    n >= k && (n = k - 1);
                    m >= t && (m = t - 1)
                }
                b.set(h, p, n, m);
                d = e.GetLastWidth();
                k = e.GetLastHeight();
                !a && b.equals(this._lastRect) && this._lastWindowWidth === d && this._lastWindowHeight === k ? this.SetElementVisible(!0) : (this._lastRect.copy(b), this._lastWindowWidth = d, this._lastWindowHeight = k, this.SetElementVisible(!0), a = null, this._autoFontSize && (a = c.GetDisplayScale() - .2), this.PostToDOMElement("update-position", {
                    left: Math.round(this._lastRect.getLeft()) + e.GetCanvasClientX(),
                    top: Math.round(this._lastRect.getTop()) + e.GetCanvasClientY(),
                    width: Math.round(this._lastRect.width()),
                    height: Math.round(this._lastRect.height()),
                    fontSize: a
                }))
            } else this.SetElementVisible(!1)
        }
        FocusElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !0
            })
        }
        BlurElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !1
            })
        }
        _OnElemFocused() {
            this._elemHasFocus = !0
        }
        _OnElemBlurred() {
            this._elemHasFocus = !1
        }
        IsElementFocused() {
            return this._elemHasFocus
        }
        SetElementCSSStyle(a, d) {
            this.PostToDOMElement("set-css-style", {
                prop: f.CSSToCamelCase(a),
                val: d
            })
        }
        SetElementAttribute(a, d) {
            this.PostToDOMElement("set-attribute", {
                name: a,
                val: d
            })
        }
        RemoveElementAttribute(a) {
            this.PostToDOMElement("remove-attribute", {
                name: a
            })
        }
        UpdateElementState() {
            this._isPendingUpdateState || (this._isPendingUpdateState = !0, Promise.resolve().then(() => {
                this._isPendingUpdateState = !1;
                this.PostToDOMElement("update-state", this.GetElementState())
            }))
        }
        GetElementState() {}
        GetElementId() {
            return this._elementId
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.IBehavior;
    f.SDKBehaviorBase = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._myObjectClasses = f.New(f.ArraySet);
            this._myInstances = f.New(f.ArraySet);
            this._iBehavior = null;
            this._scriptInterfaceClass = a.scriptInterfaceClass || null
        }
        Release() {
            this._myInstances.Release();
            this._myObjectClasses.Release();
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        _AddObjectClass(a) {
            this._myObjectClasses.Add(a)
        }
        GetObjectClasses() {
            return this._myObjectClasses.GetArray()
        }
        _AddInstance(a) {
            this._myInstances.Add(a)
        }
        _RemoveInstance(a) {
            this._myInstances.Delete(a)
        }
        GetInstances() {
            return this._myInstances.GetArray()
        }
        GetIBehavior() {
            if (null ===
                this._iBehavior) {
                const a = this._scriptInterfaceClass;
                if (a) {
                    if (this._iBehavior = new a(this), !(this._iBehavior instanceof b)) throw new TypeError("script interface class must derive from IBehavior");
                } else this._iBehavior = new b(this)
            }
            return this._iBehavior
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SDKBehaviorTypeBase = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b.GetRuntime();
            this._behaviorType = b;
            this._objectClass = b.GetObjectClass();
            this._behavior = b.GetBehavior();
            this._behavior._AddObjectClass(this._objectClass)
        }
        Release() {
            this._behavior = this._objectClass = this._behaviorType = this._runtime = null
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehavior() {
            return this._behavior
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SDKBehaviorInstanceBase = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._behInst = b;
            this._domComponentId = a;
            this._inst = b.GetObjectInstance();
            this._runtime = b.GetRuntime();
            this._behaviorType = b.GetBehaviorType();
            this._sdkType = this._behaviorType.GetSdkType();
            this._isPostTicking = this._isTicking2 = this._isTicking = !1;
            this._disposables = null
        }
        Release() {
            this._StopTicking();
            this._StopTicking2();
            this._StopPostTicking();
            this._disposables && (this._disposables.Release(), this._disposables =
                null);
            this._sdkType = this._behaviorType = this._runtime = this._inst = this._behInst = null
        }
        GetBehavior() {
            return this._behaviorType.GetBehavior()
        }
        GetBehaviorInstance() {
            return this._behInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetObjectClass() {
            return this._inst.GetObjectClass()
        }
        GetWorldInfo() {
            return this._inst.GetWorldInfo()
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._behInst.GetScriptInterface()
        }
        Trigger(b) {
            return this._runtime.Trigger(b,
                this._inst, this._behaviorType)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b, this._inst, this._behaviorType)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, this._behaviorType)
        }
        PostCreate() {}
        Tick() {}
        Tick2() {}
        PostTick() {}
        _StartTicking() {
            this._isTicking || (this._runtime._AddBehInstToTick(this), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime._RemoveBehInstToTick(this), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._runtime._AddBehInstToTick2(this),
                this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime._RemoveBehInstToTick2(this), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        _StartPostTicking() {
            this._isPostTicking || (this._runtime._AddBehInstToPostTick(this), this._isPostTicking = !0)
        }
        _StopPostTicking() {
            this._isPostTicking && (this._runtime._RemoveBehInstToPostTick(this), this._isPostTicking = !1)
        }
        IsPostTicking() {
            return this._isPostTicking
        }
        GetDebuggerProperties() {
            return []
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, a)
        }
        OnSpriteFrameChanged(b, a) {}
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b, a) {}
        OffsetPropertyValueByIndex(b, a) {
            if (0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if ("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins = {};
    f.Behaviors = {};
    f.PluginManager = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allPlugins = [];
            this._pluginsByCtor = new Map;
            this._systemPlugin = null;
            this._allBehaviors = [];
            this._behaviorsByCtor = new Map;
            this._jumpthruBehavior = this._solidBehavior = null
        }
        CreatePlugin(b) {
            const a = this._runtime.GetObjectReference(b[0]);
            if (!a) throw Error("missing plugin");
            f.AddCommonACEs(b, a);
            b = f.New(a, {
                runtime: this._runtime,
                isSingleGlobal: b[1],
                isWorld: b[2],
                isRotatable: b[5],
                hasEffects: b[8],
                mustPredraw: b[9],
                supportsSceneGraph: b[13],
                supportsMesh: b[14]
            });
            b.OnCreate();
            this._allPlugins.push(b);
            this._pluginsByCtor.set(a, b)
        }
        CreateSystemPlugin() {
            this._systemPlugin = f.New(f.Plugins.System, {
                runtime: this._runtime,
                isSingleGlobal: !0
            });
            this._systemPlugin.OnCreate()
        }
        CreateBehavior(b) {
            b = this._runtime.GetObjectReference(b[1]);
            if (!b) throw Error("missing behavior");
            const a = f.New(b, {
                runtime: this._runtime
            });
            a.OnCreate();
            this._allBehaviors.push(a);
            this._behaviorsByCtor.set(b, a);
            !this._solidBehavior &&
                f.Behaviors.solid && a instanceof f.Behaviors.solid ? this._solidBehavior = a : !this._jumpthruBehavior && f.Behaviors.jumpthru && a instanceof f.Behaviors.jumpthru && (this._jumpthruBehavior = a)
        }
        GetPluginByConstructorFunction(b) {
            return this._pluginsByCtor.get(b) || null
        }
        HasBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.has(b)
        }
        GetBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.get(b) || null
        }
        GetSystemPlugin() {
            return this._systemPlugin
        }
        GetSolidBehavior() {
            return this._solidBehavior
        }
        GetJumpthruBehavior() {
            return this._jumpthruBehavior
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new Set;
    f.ImageInfo = class extends f.DefendedBase {
        constructor() {
            super();
            this._url = "";
            this._height = this._width = this._offsetY = this._offsetX = this._pixelFormat = this._size = 0;
            this._hasMetaData = !1;
            this._imageAsset = null;
            this._textureState = "";
            this._rcTex = f.New(f.Rect);
            b.add(this)
        }
        Release() {
            this.ReleaseTexture();
            this._imageAsset = null;
            b.delete(this)
        }
        static OnWebGLContextLost() {
            for (const a of b) a._textureState = "", a._rcTex.set(0, 0, 0, 0)
        }
        LoadData(a) {
            this._url = a[0];
            this._size = a[1];
            this._pixelFormat =
                a[2];
            this._offsetX = a[3];
            this._offsetY = a[4];
            this._width = a[5];
            this._height = a[6];
            this._hasMetaData = !0
        }
        LoadAnimationFrameData(a) {
            this._url = a[0];
            this._size = a[1];
            this._offsetX = a[2];
            this._offsetY = a[3];
            this._width = a[4];
            this._height = a[5];
            this._pixelFormat = a[11];
            this._hasMetaData = !0
        }
        LoadDynamicAsset(a, d) {
            if (this._imageAsset) throw Error("already loaded asset");
            this._url = d;
            const c = {};
            f.IsAbsoluteURL(d) && (c.loadPolicy = "remote");
            this.LoadAsset(a, c);
            return this._imageAsset.Load()
        }
        ReplaceWith(a) {
            if (a === this) throw Error("cannot replace with self");
            this.ReleaseTexture();
            this._url = a._url;
            this._size = a._size;
            this._pixelFormat = a._pixelFormat;
            this._offsetX = a._offsetX;
            this._offsetY = a._offsetY;
            this._width = a._width;
            this._height = a._height;
            this._hasMetaData = a._hasMetaData;
            this._imageAsset = a._imageAsset;
            this._textureState = a._textureState;
            this._rcTex = a._rcTex
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        GetPixelFormat() {
            return this._pixelFormat
        }
        GetOffsetX() {
            return this._offsetX
        }
        GetOffsetY() {
            return this._offsetY
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetSheetWidth() {
            return this._imageAsset.GetWidth()
        }
        GetSheetHeight() {
            return this._imageAsset.GetHeight()
        }
        LoadAsset(a,
            d) {
            if (this._imageAsset) throw Error("already got asset");
            d = Object.assign({}, d, {
                url: this.GetURL(),
                size: this.GetSize()
            });
            this._imageAsset = a.LoadImage(d)
        }
        IsLoaded() {
            return this._imageAsset && this._imageAsset.IsLoaded()
        }
        async LoadStaticTexture(a, d) {
            if (!this._imageAsset) throw Error("no asset");
            if (this._textureState) throw Error("already loaded texture");
            this._textureState = "loading";
            a = await this._imageAsset.LoadStaticTexture(a, d);
            if (!a) return this._textureState = "", null;
            this._textureState = "loaded";
            this._hasMetaData ||
                (this._width = a.GetWidth(), this._height = a.GetHeight(), this._hasMetaData = !0);
            this._rcTex.set(this._offsetX, this._offsetY, this._offsetX + this._width, this._offsetY + this._height);
            this._rcTex.divide(a.GetWidth(), a.GetHeight());
            return a
        }
        ReleaseTexture() {
            this._textureState && (this._imageAsset && this._imageAsset.ReleaseTexture(), this._textureState = "", this._rcTex.set(0, 0, 0, 0))
        }
        GetTexture() {
            return this._imageAsset ? this._imageAsset.GetTexture() : null
        }
        GetTexRect() {
            return this._rcTex
        }
        async ExtractImageToCanvas() {
            const a =
                await this._imageAsset.LoadToDrawable(),
                d = f.CreateCanvas(this._width, this._height);
            d.getContext("2d").drawImage(a, this._offsetX, this._offsetY, this._width, this._height, 0, 0, this._width, this._height);
            return d
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.AnimationInfo = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._name = b[0];
            this._speed = b[1];
            this._isLooping = !!b[2];
            this._repeatCount = b[3];
            this._repeatTo = b[4];
            this._isPingPong = !!b[5];
            this._sid = b[6];
            this._frames = b[7].map(a => f.New(f.AnimationFrameInfo, a))
        }
        Release() {
            for (const b of this._frames) b.Release();
            f.clearArray(this._frames)
        }
        LoadAllAssets(b) {
            for (const a of this._frames) a.GetImageInfo().LoadAsset(b)
        }
        LoadAllTextures(b, a) {
            return Promise.all(this._frames.map(d => d.GetImageInfo().LoadStaticTexture(b,
                a)))
        }
        ReleaseAllTextures() {
            for (const b of this._frames) b.GetImageInfo().ReleaseTexture()
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetFrameCount() {
            return this._frames.length
        }
        GetFrames() {
            return this._frames
        }
        GetFrameAt(b) {
            b = Math.floor(b);
            if (0 > b || b >= this._frames.length) throw new RangeError("invalid frame");
            return this._frames[b]
        }
        GetSpeed() {
            return this._speed
        }
        IsLooping() {
            return this._isLooping
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        GetRepeatTo() {
            return this._repeatTo
        }
        IsPingPong() {
            return this._isPingPong
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.AnimationFrameInfo = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._imageInfo = f.New(f.ImageInfo);
            this._imageInfo.LoadAnimationFrameData(b);
            this._duration = b[6];
            this._origin = f.New(f.Vector2, b[7], b[8]);
            this._imagePoints = b[9].map(a => f.New(f.ImagePoint, this, a));
            this._imagePointsByName = new Map;
            for (const a of this._imagePoints) this._imagePointsByName.set(a.GetName().toLowerCase(), a);
            this._collisionPoly = null;
            b = b[10];
            6 <= b.length && (this._collisionPoly = f.New(f.CollisionPoly, b))
        }
        Release() {
            this._collisionPoly &&
                (this._collisionPoly.Release(), this._collisionPoly = null);
            this._imageInfo.Release();
            this._imageInfo = null
        }
        GetImageInfo() {
            return this._imageInfo
        }
        GetDuration() {
            return this._duration
        }
        GetOriginX() {
            return this._origin.getX()
        }
        GetOriginY() {
            return this._origin.getY()
        }
        GetCollisionPoly() {
            return this._collisionPoly
        }
        GetImagePointByName(b) {
            return this._imagePointsByName.get(b.toLowerCase()) || null
        }
        GetImagePointByIndex(b) {
            b = Math.floor(b);
            return 0 > b || b >= this._imagePoints.length ? null : this._imagePoints[b]
        }
        GetImagePointCount() {
            return this._imagePoints.length
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.ImagePoint = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._afi = b;
            this._name = a[0];
            this._pos = f.New(f.Vector2, a[1], a[2])
        }
        Release() {}
        GetName() {
            return this._name
        }
        GetX() {
            return this._pos.getX()
        }
        GetY() {
            return this._pos.getY()
        }
        GetVec2() {
            return this._pos
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3Debugger,
        a = self.IObjectClass;
    f.ObjectClass = class extends f.DefendedBase {
        constructor(d, c, e) {
            super();
            const k = d.GetObjectReference(e[1]);
            this._runtime = d;
            this._plugin = d.GetPluginManager().GetPluginByConstructorFunction(k);
            this._sdkType = null;
            this._instSdkCtor = k.Instance;
            this._index = c;
            this._sid = e[11];
            this._name = e[0];
            this._jsPropName = this._runtime.GetJsPropName(e[14]);
            this._isGlobal = !!e[9];
            this._isFamily = !!e[2];
            this._isOnLoaderLayout = !!e[10];
            this._instVars = e[3].map(h => ({
                sid: h[0],
                type: h[1],
                name: h[2],
                jsPropName: d.GetJsPropName(h[3])
            }));
            this._behaviorsCount = e[4];
            this._effectsCount = e[5];
            this._isWorldType = this._plugin.IsWorldType();
            this._effectList = null;
            this._collisionGrid = f.New(f.SparseGrid, d.GetOriginalViewportWidth(), d.GetOriginalViewportHeight());
            this._anyCollisionCellChanged = !0;
            this._anyInstanceParallaxed = !1;
            this._familyMembersSet = this._familyMembers = null;
            this._familyIndex = -1;
            this._familyEffectMap = this._familyBehaviorMap = this._familyInstVarMap = this._familiesSet = this._families =
                null;
            this._isInContainer = !1;
            this._container = null;
            this._behaviorTypes = e[8].map(h => f.BehaviorType.Create(this, h));
            this._behaviorTypesIncludingInherited = [];
            this._behaviorsByName = new Map;
            this._behaviorNameToIndex = new Map;
            this._usedBehaviorCtors = new Set;
            this._solStack = f.New(f.SolStack, this);
            this._defaultInstanceData = null;
            this._defaultLayerIndex = 0;
            this._isContained = !1;
            this._animationsBySid = this._animationsByName = this._animations = this._imageInfo = this._container = null;
            this._textureRefCount = 0;
            this._savedData =
                new Map;
            this._unsavedData = new Map;
            this._instances = [];
            this._iidsStale = !0;
            this._plugin.HasEffects() && (this._effectList = f.New(f.EffectList, this, e[12]));
            e[6] && (this._imageInfo = f.New(f.ImageInfo), this._imageInfo.LoadData(e[6]));
            if (e[7]) {
                this._animations = e[7].map(h => f.New(f.AnimationInfo, h));
                this._animationsByName = new Map;
                this._animationsBySid = new Map;
                for (const h of this._animations) this._animationsByName.set(h.GetName().toLowerCase(), h), this._animationsBySid.set(h.GetSID(), h)
            }
            this._isFamily ? (this._familyMembers = [], this._familyMembersSet = new Set, this._familyIndex = this._runtime._GetNextFamilyIndex()) : (this._families = [], this._familiesSet = new Set, this._familyInstVarMap = [], this._familyBehaviorMap = [], this._familyEffectMap = []);
            this._sdkType = f.New(k.Type, this, e[15]);
            this._instanceUserScriptClass = this._iObjectClass = null;
            this._userScriptDispatcher = f.New(f.Event.Dispatcher);
            if (c = this._sdkType.GetScriptInterfaceClass()) {
                if (this._iObjectClass = new c(this), !(this._iObjectClass instanceof a)) throw new TypeError("script interface class must derive from IObjectClass");
            } else this._iObjectClass = new a(this);
            e[13] && (c = e[13]) && this._sdkType.LoadTilemapData(c[0], c[1]);
            this._runtime.UsesLoaderLayout() && !this._isFamily && !this._isOnLoaderLayout && this._isWorldType || this.OnCreate();
            this._plugin.IsSingleGlobal() && (this._plugin._SetSingleGlobalObjectClass(this), this._CreateSingleGlobalInstance(e))
        }
        static Create(d, c, e) {
            return f.New(f.ObjectClass, d, c, e)
        }
        Release() {
            this._imageInfo && (this._imageInfo.Release(), this._imageInfo = null);
            if (this._animations) {
                for (const d of this._animations) d.Release();
                f.clearArray(this._animations);
                this._animationsByName.clear();
                this._animationsBySid.clear()
            }
            this._solStack.Release();
            this._solStack = null;
            this._savedData.clear();
            this._unsavedData.clear();
            this._runtime = this._container = null
        }
        _LoadFamily(d) {
            for (let c = 1, e = d.length; c < e; ++c) {
                const k = this._runtime.GetObjectClassByIndex(d[c]);
                this._familyMembers.push(k);
                this._familyMembersSet.add(k);
                k._families.push(this);
                k._familiesSet.add(this)
            }
        }
        _SetContainer(d) {
            this._isInContainer = !0;
            this._container = d
        }
        IsInContainer() {
            return this._isInContainer
        }
        GetContainer() {
            return this._container
        }
        _OnAfterCreate() {
            var d =
                0;
            if (!this._isFamily)
                for (var c of this._families)
                    for (var e of c.GetBehaviorTypes()) {
                        const p = e.GetName().toLowerCase();
                        this._behaviorsByName.set(p, e);
                        this._behaviorNameToIndex.set(p, d);
                        this._behaviorTypesIncludingInherited.push(e);
                        ++d
                    }
            for (var k of this.GetBehaviorTypes()) c = k.GetName().toLowerCase(), this._behaviorsByName.set(c, k), this._behaviorNameToIndex.set(c, d), this._behaviorTypesIncludingInherited.push(k), ++d;
            for (var h of this._behaviorTypesIncludingInherited) this._usedBehaviorCtors.add(h.GetBehavior().constructor);
            if (!this._isFamily && this._families.length) {
                d = this._runtime.GetFamilyCount();
                f.extendArray(this._familyInstVarMap, d, 0);
                f.extendArray(this._familyBehaviorMap, d, 0);
                f.extendArray(this._familyEffectMap, d, 0);
                d = [];
                c = h = k = 0;
                for (const p of this._families)
                    if (e = p.GetFamilyIndex(), this._familyInstVarMap[e] = k, k += p.GetInstanceVariablesCount(), this._familyBehaviorMap[e] = h, h += p.GetBehaviorTypesCount(), this._familyEffectMap[e] = c, c += p.GetEffectTypesCount(), (e = p.GetEffectList()) && this._effectList)
                        for (const n of e.GetAllEffectTypes()) d.push(n.Clone(this._effectList));
                this._effectList && this._effectList.PrependEffectTypes(d)
            }
        }
        _CreateSingleGlobalInstance(d) {
            const c = this._runtime._GetNewUID(),
                e = f.New(f.Instance, {
                    runtime: this._runtime,
                    objectType: this,
                    uid: c
                });
            e._CreateSdkInstance(d[16], []);
            this._runtime._MapInstanceByUID(c, e);
            this._instances.push(e)
        }
        GetSdkType() {
            return this._sdkType
        }
        IsOnLoaderLayout() {
            return this._isOnLoaderLayout
        }
        OnCreate() {
            this._isFamily || this._sdkType.OnCreate()
        }
        HasLoadedTextures() {
            return 0 < this._textureRefCount
        }
        LoadTextures(d) {
            if (this._isFamily) return Promise.resolve();
            this._textureRefCount++;
            return 1 === this._textureRefCount ? this._sdkType.LoadTextures(d) || Promise.resolve() : Promise.resolve()
        }
        ReleaseTextures() {
            if (!this._isFamily) {
                this._textureRefCount--;
                if (0 > this._textureRefCount) throw Error("released textures too many times");
                0 === this._textureRefCount && this._sdkType.ReleaseTextures()
            }
        }
        OnDynamicTextureLoadComplete() {
            if (this._isFamily) throw Error("not applicable to family");
            this._sdkType.OnDynamicTextureLoadComplete()
        }
        PreloadTexturesWithInstances(d) {
            return this._isFamily ?
                Promise.resolve() : this._sdkType.PreloadTexturesWithInstances(d)
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        IsFamily() {
            return this._isFamily
        }
        IsGlobal() {
            return this._isGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        GetFamilyIndex() {
            return this._familyIndex
        }
        GetBehaviorTypes() {
            return this._behaviorTypes
        }
        GetBehaviorTypesCount() {
            return this._behaviorsCount
        }
        UsesBehaviorByCtor(d) {
            return d &&
                this._usedBehaviorCtors.has(d)
        }
        GetInstanceVariablesCount() {
            return this._instVars.length
        }
        GetInstanceVariableSIDs() {
            return this._instVars.map(d => d.sid)
        }
        GetInstanceVariableIndexBySID(d) {
            return this._instVars.findIndex(c => c.sid === d)
        }
        GetInstanceVariableIndexByName(d) {
            return this._instVars.findIndex(c => c.name === d)
        }
        _GetAllInstanceVariableNames() {
            return this._instVars.map(d => d.name)
        }
        _GetAllInstanceVariableJsPropNames() {
            return this._instVars.map(d => d.jsPropName)
        }
        GetInstanceVariableType(d) {
            d = Math.floor(d);
            if (0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].type
        }
        GetInstanceVariableName(d) {
            d = Math.floor(d);
            if (0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].name
        }
        GetEffectTypesCount() {
            return this._effectsCount
        }
        GetBehaviorTypesIncludingInherited() {
            return this._behaviorTypesIncludingInherited
        }
        GetBehaviorTypeByName(d) {
            return this._behaviorsByName.get(d.toLowerCase()) || null
        }
        GetBehaviorIndexByName(d) {
            d =
                this._behaviorNameToIndex.get(d.toLowerCase());
            return "undefined" === typeof d ? -1 : d
        }
        GetEffectList() {
            return this._effectList
        }
        HasEffects() {
            return this._plugin.HasEffects()
        }
        UsesEffects() {
            return this._effectList && this._effectList.HasAnyEffectType()
        }
        GetSolStack() {
            return this._solStack
        }
        GetCurrentSol() {
            return this._solStack.GetCurrentSol()
        }
        GetImageInfo() {
            return this._imageInfo
        }
        SetDefaultInstanceData(d) {
            this._defaultInstanceData = d
        }
        GetDefaultInstanceData() {
            return this._defaultInstanceData
        }
        _SetDefaultLayerIndex(d) {
            this._defaultLayerIndex =
                d
        }
        GetDefaultLayerIndex() {
            return this._defaultLayerIndex
        }
        GetAnimations() {
            return this._animations
        }
        GetAnimationCount() {
            return this._animations.length
        }
        GetFamilies() {
            return this._families
        }
        BelongsToFamily(d) {
            return this._familiesSet.has(d)
        }
        GetFamilyMembers() {
            return this._familyMembers
        }
        FamilyHasMember(d) {
            return this._familyMembersSet.has(d)
        }
        GetFamilyBehaviorOffset(d) {
            return this._familyBehaviorMap[d]
        }
        GetFamilyInstanceVariableOffset(d) {
            return this._familyInstVarMap[d]
        }
        GetAnimationByName(d) {
            if (!this._animations) throw Error("no animations");
            return this._animationsByName.get(d.toLowerCase()) || null
        }
        GetAnimationBySID(d) {
            if (!this._animations) throw Error("no animations");
            return this._animationsBySid.get(d) || null
        }
        GetFirstAnimationFrame() {
            if (!this._animations) throw Error("no animations");
            return this._animations[0].GetFrameAt(0)
        }
        GetDefaultInstanceSize() {
            if (this._animations) {
                const d = this.GetFirstAnimationFrame().GetImageInfo();
                return [d.GetWidth(), d.GetHeight()]
            }
            return this._imageInfo ? [this._imageInfo.GetWidth(), this._imageInfo.GetHeight()] : [100,
                100
            ]
        }
        GetSingleGlobalInstance() {
            if (!this._plugin.IsSingleGlobal()) throw Error("not a single-global plugin");
            return this._instances[0]
        }
        GetInstances() {
            return this._instances
        }* instances() {
            yield* this._instances
        }* instancesIncludingPendingCreate() {
            yield* this._instances;
            for (const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && (yield d)
        }
        GetInstanceCount() {
            return this._instances.length
        }
        _AddInstance(d) {
            this._instances.push(d)
        }
        _SetIIDsStale() {
            this._iidsStale = !0
        }
        _UpdateIIDs() {
            if (this._iidsStale &&
                !this._isFamily) {
                var d = this._instances,
                    c = 0;
                for (let e = d.length; c < e; ++c) d[c]._SetIID(c);
                d = this._runtime._GetInstancesPendingCreate();
                for (const e of d) e.GetObjectClass() === this && e._SetIID(c++);
                this._iidsStale = !1
            }
        }
        GetInstanceByIID(d) {
            var c = this._instances;
            if (d < c.length) return c[d];
            d -= c.length;
            c = this._runtime._GetInstancesPendingCreate();
            for (const e of c)
                if (e.GetObjectClass() === this) {
                    if (0 === d) return e;
                    --d
                }
            return null
        }
        GetFirstPicked(d) {
            if (d && d.IsInContainer() && d.GetObjectClass() !== this)
                for (const c of d.siblings())
                    if (c.GetObjectClass() ===
                        this) return c;
            d = this.GetCurrentSol().GetInstances();
            return d.length ? d[0] : null
        }
        GetPairedInstance(d) {
            const c = this.GetCurrentSol().GetInstances();
            return 0 < c.length ? c[d.GetIID() % c.length] : null
        }* allCorrespondingInstances(d, c) {
            const e = this.GetCurrentSol().GetInstances();
            var k = e.length;
            const h = c.GetCurrentSol(),
                p = c.GetCurrentSol().GetInstances(),
                n = p.length;
            var m = d.GetIID();
            if (c.IsFamily() || !h.IsSelectAll()) m = p.indexOf(d);
            d = Math.ceil(k / n);
            k %= n;
            0 === k || m < k ? (m *= d, k = d) : (m = k * d + (m - k) * (d - 1), k = d - 1);
            for (let t = m, q =
                    m + k; t < q; ++t) yield e[t]
        }
        FinishCondition(d) {
            this._sdkType.FinishCondition(d)
        }
        ApplySolToContainer() {
            if (this._isInContainer && !this._isFamily) {
                this._UpdateIIDs();
                var d = this.GetCurrentSol(),
                    c = d._GetOwnInstances(),
                    e = d.IsSelectAll(),
                    k = this._runtime.GetCurrentEventStackFrame();
                k = k && k.GetCurrentEvent() && k.GetCurrentEvent().IsOrBlock();
                for (const n of this._container.objectTypes())
                    if (n !== this) {
                        n._UpdateIIDs();
                        var h = n.GetCurrentSol();
                        h._SetSelectAll(e);
                        if (!e) {
                            var p = h._GetOwnInstances();
                            f.clearArray(p);
                            for (const m of c) p.push(n.GetInstanceByIID(m.GetIID()));
                            if (k) {
                                p = d._GetOwnElseInstances();
                                h = h._GetOwnElseInstances();
                                f.clearArray(h);
                                for (const m of p) h.push(n.GetInstanceByIID(m.GetIID()))
                            }
                        }
                    }
            }
        }
        _TruncateContainerSols(d, c) {
            for (const e of this.GetContainer().objectTypes()) {
                const k = e.GetCurrentSol();
                d ? f.truncateArray(k._GetOwnElseInstances(), c) : f.truncateArray(k._GetOwnInstances(), c)
            }
        }
        _GetCollisionCellGrid() {
            return this._collisionGrid
        }
        _SetAnyCollisionCellChanged(d) {
            this._anyCollisionCellChanged = !!d
        }
        _SetAnyInstanceParallaxed(d) {
            this._anyInstanceParallaxed = !!d
        }
        IsAnyInstanceParallaxed() {
            return this._anyInstanceParallaxed
        }
        _UpdateAllCollisionCells() {
            if (this._anyCollisionCellChanged &&
                this._isWorldType) {
                for (const d of this._instances) d.GetWorldInfo()._UpdateCollisionCell();
                for (const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && d.GetWorldInfo()._UpdateCollisionCell();
                this._anyCollisionCellChanged = !1
            }
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        HasSolidBehavior() {
            return this.UsesBehaviorByCtor(f.Behaviors.solid)
        }
        HasNoSaveBehavior() {
            return this.UsesBehaviorByCtor(f.Behaviors.NoSave)
        }
        HasPersistBehavior() {
            return this.UsesBehaviorByCtor(f.Behaviors.Persist)
        }
        _SaveToJson() {
            const d = {
                instances: this._instances.map(c => c.SaveToJson())
            };
            this._savedData && this._savedData.size && (d.ex = f.ToSuperJSON(this._savedData));
            return d
        }
        _LoadFromJson(d) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            var c = d.ex;
            c && (this._savedData = f.FromSuperJSON(c));
            c = this._instances;
            d = d.instances;
            for (let e = 0, k = Math.min(c.length, d.length); e < k; ++e) c[e].LoadFromJson(d[e]);
            for (let e = d.length, k = c.length; e < k; ++e) this._runtime.DestroyInstance(c[e]);
            for (let e = c.length, k = d.length; e < k; ++e) {
                c = d[e];
                let h =
                    null;
                if (this.IsWorldType() && (h = this._runtime.GetMainRunningLayout().GetLayerBySID(c.w.l), !h)) continue;
                this._runtime.CreateInstanceFromData(this._defaultInstanceData || this, h, !1, 0, 0, !0).LoadFromJson(c)
            }
            this._SetIIDsStale()
        }
        GetIObjectClass() {
            return this._iObjectClass
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        _GetUserScriptInstanceClass() {
            return this._instanceUserScriptClass
        }
        _SetUserScriptInstanceClass(d) {
            this._instanceUserScriptClass = d
        }
        DispatchUserScriptEvent(d) {
            var c = this._runtime;
            (c =
                c.IsDebug() && !c.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(d);
            c && b.AddScriptTime()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Container = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._objectTypes = a;
            for (const d of this._objectTypes) d._SetContainer(this)
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectTypes() {
            return this._objectTypes
        }
        objectTypes() {
            return this._objectTypes
        }
        HasAnyWorldType() {
            return this._objectTypes.some(b => b.IsWorldType())
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3Debugger,
        a = self.IInstance,
        d = [];
    let c = 0;
    const e = new WeakMap,
        k = new WeakMap;
    f.Instance = class extends f.DefendedBase {
        constructor(h) {
            super();
            this._runtime = h.runtime;
            this._objectType = h.objectType;
            this._iScriptInterface = this._sdkInst = this._worldInfo = null;
            this._iid = 0;
            this._uid = h.uid;
            this._puid = c++;
            this._flags = 0;
            this._behaviorInstances = this._instVarValues = d;
            var p = this._objectType.GetBehaviorTypesIncludingInherited();
            0 < p.length && (this._behaviorInstances = p.map((n, m) => f.New(f.BehaviorInstance, {
                runtime: this._runtime,
                behaviorType: n,
                instance: this,
                index: m
            })));
            this._siblings = this._objectType.IsInContainer() ? [] : null;
            this._timeScale = -1;
            this._dispatcher = null;
            p = this.GetPlugin();
            p.MustPreDraw() && (this._flags |= 4);
            if (p.IsWorldType())
                if (this._worldInfo = f.New(f.WorldInfo, this, h.layer), h.worldData) this._worldInfo.Init(h.worldData);
                else {
                    this._worldInfo.InitNoData();
                    const [n, m] = this._objectType.GetDefaultInstanceSize();
                    this._worldInfo.SetSize(n, m);
                    this.GetObjectClass().UsesEffects() && this._worldInfo.GetInstanceEffectList().LoadDefaultEffectParameters()
                }
            h.instVarData ?
                this._LoadInstanceVariableData(h.instVarData) : this._LoadDefaultInstanceVariables()
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            if (0 < this._behaviorInstances.length) {
                for (var h of this._behaviorInstances) h.Release();
                f.clearArray(this._behaviorInstances)
            }
            this._sdkInst.Release();
            this._sdkInst = null;
            if (h = e.get(this)) h.clear(), e.delete(this);
            if (h = k.get(this)) h.clear(), k.delete(this);
            this._siblings && f.clearArray(this._siblings);
            this._dispatcher && (this._dispatcher.Release(),
                this._dispatcher = null);
            this._objectType = this._runtime = null;
            0 < this._instVarValues.length && f.clearArray(this._instVarValues);
            this._worldInfo && (this._worldInfo.Release(), this._worldInfo = null)
        }
        _LoadInstanceVariableData(h) {
            0 < h.length && (this._instVarValues = [], f.shallowAssignArray(this._instVarValues, h))
        }
        _LoadDefaultInstanceVariables() {
            const h = this._objectType.GetInstanceVariablesCount();
            if (0 !== h) {
                this._instVarValues = [];
                var p = [0, 0, ""];
                for (let n = 0; n < h; ++n) this._instVarValues.push(p[this._objectType.GetInstanceVariableType(n)])
            }
        }
        _CreateSdkInstance(h,
            p) {
            if (this._sdkInst) throw Error("already got sdk instance");
            for (let n = 0, m = this._behaviorInstances.length; n < m; ++n) this._behaviorInstances[n]._CreateSdkInstance(p ? p[n] : null);
            this._sdkInst = f.New(this._objectType.GetInstanceSdkCtor(), this, h);
            if (!(this._sdkInst instanceof f.SDKInstanceBase)) throw Error("sdk type must derive from SDKInstanceBase");
            for (let n = 0, m = this._behaviorInstances.length; n < m; ++n) this._behaviorInstances[n].PostCreate();
            this._objectType._GetUserScriptInstanceClass() && this._InitUserScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetWorldInfo() {
            return this._worldInfo
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimeScale() {
            return this._timeScale
        }
        GetActiveTimeScale() {
            const h =
                this._timeScale;
            return -1 === h ? this.GetRuntime().GetTimeScale() : h
        }
        SetTimeScale(h) {
            h = +h;
            if (0 > h || !isFinite(h)) h = 0;
            this._timeScale = h
        }
        RestoreTimeScale() {
            this._timeScale = -1
        }
        Dispatcher() {
            this._dispatcher || (this._dispatcher = f.New(f.Event.Dispatcher));
            return this._dispatcher
        }
        Draw(h) {
            this._sdkInst.Draw(h)
        }
        OnCreate(h) {
            this._sdkInst.OnCreate(h)
        }
        _SetHasTilemap() {
            this._flags |= 2
        }
        HasTilemap() {
            return 0 !== (this._flags & 2)
        }
        _MarkDestroyed() {
            this._flags |= 1
        }
        IsDestroyed() {
            return 0 !== (this._flags & 1)
        }
        MustPreDraw() {
            return 0 !==
                (this._flags & 4)
        }
        _IsSolidEnabled() {
            return 0 !== (this._flags & 8)
        }
        _SetSolidEnabled(h) {
            this._flags = h ? this._flags | 8 : this._flags & -9
        }
        _IsJumpthruEnabled() {
            return 0 !== (this._flags & 16)
        }
        _SetJumpthruEnabled(h) {
            this._flags = h ? this._flags | 16 : this._flags & -17
        }
        SetFlag(h, p) {
            h <<= 16;
            this._flags = p ? this._flags | h : this._flags & ~h
        }
        GetFlag(h) {
            return 0 !== (this._flags & h << 16)
        }
        GetCurrentImageInfo() {
            return this._sdkInst.GetCurrentImageInfo()
        }
        GetCurrentSurfaceSize() {
            return this._sdkInst.GetCurrentSurfaceSize()
        }
        GetCurrentTexRect() {
            return this._sdkInst.GetCurrentTexRect()
        }
        GetImagePoint(h) {
            return this._sdkInst.GetImagePoint(h)
        }
        GetObjectClass() {
            return this._objectType
        }
        BelongsToObjectClass(h) {
            return h.IsFamily() ?
                h.FamilyHasMember(this.GetObjectClass()) : this.GetObjectClass() === h
        }
        VerifySupportsSceneGraph() {
            if (!this.GetPlugin().SupportsSceneGraph()) throw Error("object does not support scene graph");
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            var h = this.GetWorldInfo();
            return h ? (h = h.GetParent()) ? h.GetInstance() : null : null
        }
        GetTopParent() {
            var h = this.GetWorldInfo();
            return h ? (h = h.GetTopParent()) ? h.GetInstance() : null : null
        }* parents() {
            const h = this.GetWorldInfo();
            if (h)
                for (const p of h.parents()) yield p.GetInstance()
        }
        HasChildren() {
            const h =
                this.GetWorldInfo();
            return h ? h.HasChildren() : !1
        }
        GetChildren() {
            const h = this.GetWorldInfo();
            return h ? h.GetChildren().map(p => p.GetInstance()) : []
        }* children() {
            const h = this.GetWorldInfo();
            if (h)
                for (const p of h.children()) yield p.GetInstance()
        }* allChildren() {
            const h = this.GetWorldInfo();
            if (h)
                for (const p of h.allChildren()) yield p.GetInstance()
        }
        GetChildCount() {
            const h = this.GetWorldInfo();
            return h ? h.GetChildCount() : 0
        }
        GetChildAt(h) {
            const p = this.GetWorldInfo();
            return p ? (h = p.GetChildAt(h)) ? h.GetInstance() : null :
                null
        }
        AddChild(h, p) {
            this.VerifySupportsSceneGraph();
            h.VerifySupportsSceneGraph();
            this.GetWorldInfo().AddChild(h.GetWorldInfo(), p || {})
        }
        RemoveChild(h) {
            const p = this.GetWorldInfo();
            p && p.RemoveChild(h.GetWorldInfo())
        }
        GetDestroyWithParent() {
            const h = this.GetWorldInfo();
            return h ? h.GetDestroyWithParent() : !1
        }
        SetupInitialSceneGraphConnections() {
            var h = this.GetWorldInfo();
            if (h && (h = h.GetSceneGraphChildrenExportData()))
                for (const p of h)
                    if (h = this._runtime.GetInstanceByUID(p[2])) {
                        const n = p[3];
                        this.AddChild(h, {
                            transformX: !!(n >>
                                0 & 1),
                            transformY: !!(n >> 1 & 1),
                            transformWidth: !!(n >> 2 & 1),
                            transformHeight: !!(n >> 3 & 1),
                            transformAngle: !!(n >> 4 & 1),
                            destroyWithParent: !!(n >> 5 & 1),
                            transformZElevation: !!(n >> 6 & 1)
                        })
                    }
        }
        IsInContainer() {
            return null !== this._siblings
        }
        _AddSibling(h) {
            this._siblings.push(h)
        }
        GetSiblings() {
            return this._siblings
        }
        HasSibling(h) {
            return !!this.GetSibling(h)
        }
        GetSibling(h) {
            const p = this.siblings();
            if (null === p || 0 === p.length) return !1;
            for (const n of p)
                if (n.GetObjectClass() === h) return n;
            return null
        }
        siblings() {
            return this._siblings
        }
        SetSiblingsSinglePicked() {
            for (const h of this.siblings()) h.GetObjectClass().GetCurrentSol().SetSinglePicked(h)
        }
        _PushSiblingsToSolInstances() {
            for (const h of this.siblings()) h.GetObjectClass().GetCurrentSol()._PushInstance(h)
        }
        _SetSiblingsToSolInstancesIndex(h) {
            for (const p of this.siblings()) p.GetObjectClass().GetCurrentSol()._GetOwnInstances()[h] =
                p
        }
        _PushSiblingsToSolElseInstances() {
            for (const h of this.siblings()) h.GetObjectClass().GetCurrentSol()._PushElseInstance(h)
        }
        _SetSiblingsToSolElseInstancesIndex(h) {
            for (const p of this.siblings()) p.GetObjectClass().GetCurrentSol()._GetOwnElseInstances()[h] = p
        }
        GetPlugin() {
            return this._objectType.GetPlugin()
        }
        _SetIID(h) {
            this._iid = h
        }
        GetIID() {
            this._objectType._UpdateIIDs();
            return this._iid
        }
        GetUID() {
            return this._uid
        }
        GetPUID() {
            return this._puid
        }
        GetBehaviorInstances() {
            return this._behaviorInstances
        }
        GetBehaviorInstanceFromCtor(h) {
            if (!h) return null;
            for (const p of this._behaviorInstances)
                if (p.GetBehavior() instanceof h) return p;
            return null
        }
        GetBehaviorSdkInstanceFromCtor(h) {
            return h ? (h = this.GetBehaviorInstanceFromCtor(h)) ? h.GetSdkInstance() : null : null
        }
        GetBehaviorIndexBySID(h) {
            const p = this._behaviorInstances;
            for (let n = 0, m = p.length; n < m; ++n)
                if (p[n].GetBehaviorType().GetSID() === h) return n;
            return -1
        }
        GetAllInstanceVariableValues() {
            return this._instVarValues
        }
        _GetAllInstanceVariableNames() {
            return this._objectType._GetAllInstanceVariableNames()
        }
        GetInstanceVariableCount() {
            return this._instVarValues.length
        }
        GetInstanceVariableValue(h) {
            h |=
                0;
            const p = this._instVarValues;
            if (0 > h || h >= p.length) throw new RangeError("invalid instance variable");
            return p[h]
        }
        _GetInstanceVariableValueUnchecked(h) {
            return this._instVarValues[h]
        }
        _GetInstanceVariableTypedValue(h) {
            const p = this._instVarValues[h];
            return 0 === this._objectType.GetInstanceVariableType(h) ? !!p : p
        }
        SetInstanceVariableValue(h, p) {
            h |= 0;
            const n = this._instVarValues;
            if (0 > h || h >= n.length) throw new RangeError("invalid instance variable");
            switch (this._objectType.GetInstanceVariableType(h)) {
                case 0:
                    n[h] =
                        p ? 1 : 0;
                    break;
                case 1:
                    n[h] = "number" === typeof p ? p : parseFloat(p);
                    break;
                case 2:
                    n[h] = "string" === typeof p ? p : p.toString();
                    break;
                default:
                    throw Error("unknown instance variable type");
            }
        }
        SetInstanceVariableOffset(h, p) {
            if (0 !== p) {
                h |= 0;
                var n = this._instVarValues;
                if (0 > h || h >= n.length) throw new RangeError("invalid instance variable");
                var m = n[h];
                if ("number" === typeof m) n[h] = "number" === typeof p ? n[h] + p : n[h] + parseFloat(p);
                else {
                    if ("boolean" === typeof m) throw Error("can not set offset of boolean variable");
                    if ("string" === typeof m) throw Error("can not set offset of string variable");
                    throw Error("unknown instance variable type");
                }
            }
        }
        GetSavedDataMap() {
            let h = e.get(this);
            if (h) return h;
            h = new Map;
            e.set(this, h);
            return h
        }
        GetUnsavedDataMap() {
            let h = k.get(this);
            if (h) return h;
            h = new Map;
            k.set(this, h);
            return h
        }
        _HasAnyCreateDestroyHandler(h) {
            const p = this.GetObjectClass();
            if (p.UserScriptDispatcher().HasAnyHandlerFor(h)) return !0;
            for (const n of p.GetFamilies())
                if (n.UserScriptDispatcher().HasAnyHandlerFor(h)) return !0;
            return this._runtime.UserScriptDispatcher().HasAnyHandlerFor(h) ? !0 : !1
        }
        _TriggerOnCreatedOnSelfAndRelated() {
            const h =
                new Set;
            h.add(this);
            const p = this.GetWorldInfo();
            if (p && p.HasChildren())
                for (const n of this.allChildren())
                    if (h.add(n), n.IsInContainer())
                        for (const m of n.siblings()) h.add(m);
            if (this.IsInContainer())
                for (const n of this.siblings()) h.add(n);
            for (const n of h.values()) n._TriggerOnCreated()
        }
        _TriggerOnCreated() {
            if (this._HasAnyCreateDestroyHandler("instancecreate")) {
                const h = this.GetObjectClass(),
                    p = new f.Event("instancecreate");
                p.instance = this.GetInterfaceClass();
                h.DispatchUserScriptEvent(p);
                for (const n of h.GetFamilies()) n.DispatchUserScriptEvent(p);
                this._runtime.DispatchUserScriptEvent(p)
            }
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnCreated, this, null)
        }
        _TriggerOnDestroyed() {
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnDestroyed, this, null)
        }
        _FireDestroyedScriptEvents(h) {
            if (this._iScriptInterface) {
                var p = new f.Event("destroy");
                p.isEndingLayout = h;
                this.DispatchUserScriptEvent(p)
            }
            if (this._HasAnyCreateDestroyHandler("instancedestroy")) {
                p = this.GetObjectClass();
                var n = new f.Event("instancedestroy");
                n.instance = this.GetInterfaceClass();
                n.isEndingLayout = h;
                p.DispatchUserScriptEvent(n);
                for (const m of p.GetFamilies()) m.DispatchUserScriptEvent(n);
                this._runtime.DispatchUserScriptEvent(n)
            }
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson(h = "full") {
            const p = {};
            "full" === h ? p.uid = this.GetUID() : p.c3 = !0;
            if ("visual-state" !== h) {
                var n = e.get(this);
                n && n.size && (p.ex = f.ToSuperJSON(n)); - 1 !== this.GetTimeScale() && (p.mts = this.GetTimeScale());
                if (0 < this._objectType.GetInstanceVariablesCount()) {
                    n = {};
                    var m = this._objectType.GetInstanceVariableSIDs();
                    for (let t = 0, q = this._instVarValues.length; t < q; ++t) n[m[t].toString()] = this._instVarValues[t];
                    p.ivs = n
                }
                if (this._behaviorInstances.length) {
                    n = {};
                    for (const t of this._behaviorInstances)(m = t.SaveToJson()) && (n[t.GetBehaviorType().GetSID().toString()] = m);
                    p.behs = n
                }
            }
            this._worldInfo && (p.w = this._worldInfo._SaveToJson(h));
            (h = this._sdkInst.SaveToJson()) && (p.data = h);
            return p
        }
        _OnBeforeLoad(h = "full") {
            this._worldInfo && this._worldInfo._OnBeforeLoad(h)
        }
        LoadFromJson(h, p = "full") {
            if ("full" === p) this._uid = h.uid;
            else if (!h.c3) return;
            if ("visual-state" !== p) {
                var n = e.get(this);
                n && (n.clear(), e.delete(this));
                if (n = h.ex) n = f.FromSuperJSON(n), e.set(this, n);
                this._timeScale = h.hasOwnProperty("mts") ? h.mts : -1;
                if (n = h.ivs)
                    for (const [q, u] of Object.entries(n))
                        if (n = parseInt(q, 10), n = this._objectType.GetInstanceVariableIndexBySID(n), !(0 > n || n >= this._instVarValues.length)) {
                            var m = u;
                            null === m && (m = NaN);
                            this._instVarValues[n] = m
                        }
            }
            if (this.GetPlugin().IsWorldType()) {
                n = h.w;
                var t = n.l;
                this._worldInfo.GetLayer().GetSID() !== t && (m = this._worldInfo.GetLayer(), (t = m.GetLayout().GetLayerBySID(t)) ?
                    (this._worldInfo._SetLayer(t), m._RemoveInstance(this, !0), t._AddInstance(this, !0), t.SetZIndicesChanged(), this._worldInfo.SetBboxChanged()) : "full" === p && this._runtime.DestroyInstance(this));
                this._worldInfo._LoadFromJson(n, p)
            }
            if ("visual-state" !== p && (p = h.behs))
                for (const [q, u] of Object.entries(p)) p = parseInt(q, 10), p = this.GetBehaviorIndexBySID(p), 0 > p || p >= this._behaviorInstances.length || this._behaviorInstances[p].LoadFromJson(u);
            (h = h.data) && this._sdkInst.LoadFromJson(h)
        }
        GetInterfaceClass() {
            return this._iScriptInterface ||
                this._InitUserScriptInterface()
        }
        _InitUserScriptInterface() {
            var h = this._worldInfo ? self.IWorldInstance : a;
            const p = this._sdkInst.GetScriptInterfaceClass(),
                n = this._objectType._GetUserScriptInstanceClass(),
                m = n || p || h;
            a._Init(this);
            this._iScriptInterface = new m;
            a._Init(null);
            if (p && !(this._iScriptInterface instanceof h)) throw new TypeError(`script interface class '${p.name}' does not extend the right base class '${h.name}'`);
            if (n && (h = p || h, !(this._iScriptInterface instanceof h))) throw new TypeError(`setInstanceClass(): class '${n.name}' does not extend the right base class '${h.name}'`);
            return this._iScriptInterface
        }
        _GetInstVarsScriptDescriptor(h) {
            if (0 !== this._instVarValues.length) {
                var p = {},
                    n = this._objectType._GetAllInstanceVariableJsPropNames();
                for (let m = 0, t = n.length; m < t; ++m) p[n[m]] = {
                    configurable: !1,
                    enumerable: !0,
                    get: f.Instance.prototype._GetInstanceVariableTypedValue.bind(this, m),
                    set: f.Instance.prototype.SetInstanceVariableValue.bind(this, m)
                };
                p = Object.create(Object.prototype, p);
                h.instVars = {
                    value: p,
                    writable: !1
                }
            }
        }
        _GetBehaviorsScriptDescriptor(h) {
            var p = this._behaviorInstances;
            if (0 !==
                p.length) {
                var n = {};
                for (const m of p) n[m.GetBehaviorType().GetJsPropName()] = {
                    value: m.GetScriptInterface(),
                    writable: !1
                };
                p = Object.create(Object.prototype, n);
                h.behaviors = {
                    value: p,
                    writable: !1
                }
            }
        }
        DispatchUserScriptEvent(h) {
            h.instance = this.GetInterfaceClass();
            var p = this._runtime;
            (p = p.IsDebug() && !p.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this.GetInterfaceClass().dispatchEvent(h);
            p && b.AddScriptTime()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SceneGraphInfo = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._owner = b;
            this._parent = null;
            this._children = [];
            this._startWidth = b.GetWidth();
            this._startHeight = b.GetHeight();
            this._startScaleY = this._startScaleX = 1;
            this._parentStartAngle = 0
        }
        Release() {
            this._parent = null;
            f.clearArray(this._children)
        }
        SetParent(b) {
            this._parentStartAngle = (this._parent = b) ? b.GetAngle() : 0
        }
        GetParent() {
            return this._parent
        }
        HasChildren() {
            return 0 < this._children.length
        }
        GetChildren() {
            return this._children
        }
        GetStartScaleX() {
            return this._startScaleX
        }
        SetStartScaleX(b) {
            this._startScaleX =
                b
        }
        GetStartScaleY() {
            return this._startScaleY
        }
        SetStartScaleY(b) {
            this._startScaleY = b
        }
        _GetStartWidth() {
            return this._startWidth
        }
        _GetStartHeight() {
            return this._startHeight
        }
        GetParentScaleX() {
            return this._owner.GetTransformWithParentWidth() ? this._parent.GetWidth() / this._parent._GetSceneGraphInfo()._GetStartWidth() : 1
        }
        GetParentScaleY() {
            return this._owner.GetTransformWithParentHeight() ? this._parent.GetHeight() / this._parent._GetSceneGraphInfo()._GetStartHeight() : 1
        }
        GetParentStartAngle() {
            return this._parentStartAngle
        }
        _SaveToJson() {
            return {
                sw: this._startWidth,
                sh: this._startHeight,
                sx: this._startScaleX,
                sy: this._startScaleY,
                psa: this._parentStartAngle,
                c: this._children.map(b => {
                    let a = "";
                    b.GetTransformWithParentX() && (a += "x");
                    b.GetTransformWithParentY() && (a += "y");
                    b.GetTransformWithParentWidth() && (a += "w");
                    b.GetTransformWithParentHeight() && (a += "h");
                    b.GetTransformWithParentAngle() && (a += "a");
                    b.GetTransformWithParentZElevation() && (a += "z");
                    b.GetDestroyWithParent() && (a += "d");
                    return {
                        uid: b.GetInstance().GetUID(),
                        f: a
                    }
                })
            }
        }
        _LoadFromJson(b) {
            this._startWidth = b.sw;
            this._startHeight =
                b.sh;
            this._startScaleX = b.sx;
            this._startScaleY = b.sy;
            this._parentStartAngle = b.psa
        }
        _OnAfterLoad(b) {
            const a = this._owner,
                d = a.GetRuntime();
            for (const c of b.c) {
                b = d.GetInstanceByUID(c.uid).GetWorldInfo();
                const e = c.f,
                    k = {};
                k.transformX = e.includes("x");
                k.transformY = e.includes("y");
                k.transformWidth = e.includes("w");
                k.transformHeight = e.includes("h");
                k.transformAngle = e.includes("a");
                k.transformZElevation = e.includes("z");
                k.destroyWithParent = e.includes("d");
                a.AddChild(b, k)
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = f.New(f.Rect),
        a = f.New(f.Quad),
        d = f.New(f.Event, "bboxchange", !1),
        c = f.New(f.Color, 0, 0, 0, 0),
        e = f.New(f.CollisionPoly),
        k = f.New(f.Color, 1, 1, 1, 1),
        h = f.New(f.Rect, 0, 0, -1, -1),
        p = f.New(f.Rect, 0, 0, -1, -1),
        n = new Set(["absolute", "relative"]),
        m = [];
    let t = !0;
    f.WorldInfo = class extends f.DefendedBase {
        constructor(q, u) {
            super();
            this._inst = q;
            this._objectClass = q.GetObjectClass();
            this._runtime = q.GetRuntime();
            this._layer = u;
            this._zIndex = -1;
            this._flags = 196635;
            this._objectClass.GetPlugin().IsRotatable() && (this._flags |=
                128);
            this._oy = this._ox = this._cosA = this._sinA = this._a = this._h = this._w = this._zElevation = this._y = this._x = NaN;
            this._boundingBox = f.New(f.Rect);
            this._boundingQuad = f.New(f.Quad);
            this._collisionCells = p;
            this._renderCells = h;
            this._solidFilterTags = this._transformedPolyInfo = this._sourceCollisionPoly = null;
            this._colorPremultiplied = this._color = k;
            this._instanceEffectList = this._stateGroup = null;
            this._inst.GetObjectClass().UsesEffects() && (this._instanceEffectList = f.New(f.InstanceEffectList, this._inst, this));
            this._sceneGraphInfo =
                null;
            this._sceneGraphFlagsExportData = NaN;
            this._sceneGraphChildrenExportData = null;
            this._sceneGraphZIndex = this._sceneGraphZIndexExportData = NaN;
            this._meshInfo = null
        }
        _MarkDestroyed() {
            this._flags |= 256
        }
        Release() {
            this._stateGroup && (this._runtime.GetRenderer().ReleaseStateGroup(this._stateGroup), this._stateGroup = null);
            this._sourceCollisionPoly = null;
            this._transformedPolyInfo && (this._transformedPolyInfo.poly.Release(), this._transformedPolyInfo = null);
            this._solidFilterTags && (this._solidFilterTags.clear(), this._solidFilterTags =
                null);
            this.ReleaseMesh();
            this.HasParent() && this.GetParent().RemoveChild(this);
            if (this.HasChildren()) {
                const q = [...this.GetChildren()];
                for (const u of q) this.RemoveChild(u)
            }
            this._ReleaseSceneGraphInfo();
            this._layer = this._runtime = this._objectClass = this._inst = null
        }
        Init(q) {
            t = !1;
            this.SetXY(q[0], q[1]);
            this.SetZElevation(q[2]);
            this.SetSize(q[3], q[4]);
            this.IsRotatable() ? this.SetAngle(q[6]) : this._a = 0;
            c.setFromJSON(q[7]);
            this._SetColor(c);
            this.SetOriginX(q[8]);
            this.SetOriginY(q[9]);
            this.SetBlendMode(q[10]);
            this._instanceEffectList &&
                this._instanceEffectList._LoadEffectParameters(q[12]);
            q[14] && (this._sceneGraphFlagsExportData = q[14][0], this._sceneGraphChildrenExportData = q[14][1], this._sceneGraphZIndexExportData = q[14][2]);
            if (q[15]) {
                var u = q[15];
                this.CreateMesh(u[0], u[1]);
                q = this.GetSourceMesh();
                u = u[2];
                for (let r = 0, x = u.length; r < x; ++r) {
                    const z = u[r];
                    for (let C = 0, w = z.length; C < w; ++C) {
                        const B = z[C],
                            F = q.GetMeshPointAt(C, r);
                        F.SetX(B[0]);
                        F.SetY(B[1]);
                        F.SetZElevation(B[2]);
                        F.SetU(B[3]);
                        F.SetV(B[4])
                    }
                }
            }
            t = !0;
            this._UpdateRendererStateGroup()
        }
        InitNoData() {
            this._sinA =
                this._a = this._h = this._w = this._zElevation = this._y = this._x = 0;
            this._cosA = 1;
            this._oy = this._ox = 0;
            this._UpdateRendererStateGroup()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetInstance() {
            return this._inst
        }
        _GetParentOffsetAngle() {
            return this.GetTransformWithParentAngle() ? this.GetParent().GetAngle() - this._sceneGraphInfo.GetParentStartAngle() : 0
        }
        SetX(q) {
            q = +q;
            if (this.GetTransformWithParentX()) {
                const u = this._sceneGraphInfo;
                q -= this.GetX();
                const r = -this._GetParentOffsetAngle();
                0 === r ? this._x += q / u.GetParentScaleX() : (this._x += Math.cos(r) * q / u.GetParentScaleX(), this.GetTransformWithParentY() && (this._y += Math.sin(r) * q / u.GetParentScaleY()))
            } else this._x = q
        }
        OffsetX(q) {
            q = +q;
            this.GetTransformWithParentX() ? this.SetX(this.GetX() + q) : this._x += q
        }
        GetX() {
            if (this.GetTransformWithParentX()) {
                let q = this._x;
                const u = this._sceneGraphInfo,
                    r = this.GetParent(),
                    x = this._GetParentOffsetAngle();
                0 === x ? q *= u.GetParentScaleX() : (q = q * u.GetParentScaleX() * Math.cos(x), this.GetTransformWithParentY() && (q -= this._y *
                    u.GetParentScaleY() * Math.sin(x)));
                return r.GetX() + q
            }
            return this._x
        }
        SetY(q) {
            q = +q;
            if (this.GetTransformWithParentY()) {
                const u = this._sceneGraphInfo;
                q -= this.GetY();
                const r = -this._GetParentOffsetAngle();
                0 === r ? this._y += q / u.GetParentScaleY() : (this.GetTransformWithParentX() && (this._x -= Math.sin(r) * q / u.GetParentScaleX()), this._y += Math.cos(r) * q / u.GetParentScaleY())
            } else this._y = q
        }
        OffsetY(q) {
            q = +q;
            this.GetTransformWithParentY() ? this.SetY(this.GetY() + q) : this._y += q
        }
        GetY() {
            if (this.GetTransformWithParentY()) {
                let q =
                    this._y;
                const u = this._sceneGraphInfo,
                    r = this.GetParent(),
                    x = this._GetParentOffsetAngle();
                0 === x ? q *= u.GetParentScaleY() : (q = q * u.GetParentScaleY() * Math.cos(x), this.GetTransformWithParentX() && (q += this._x * u.GetParentScaleX() * Math.sin(x)));
                return r.GetY() + q
            }
            return this._y
        }
        SetXY(q, u) {
            q = +q;
            u = +u;
            if (this.GetTransformWithParentXOrY()) {
                const x = this.GetTransformWithParentX(),
                    z = this.GetTransformWithParentY(),
                    C = this._sceneGraphInfo,
                    w = q - this.GetX(),
                    B = u - this.GetY();
                var r = -this._GetParentOffsetAngle();
                if (0 === r) this._x =
                    x ? this._x + w / C.GetParentScaleX() : q, this._y = z ? this._y + B / C.GetParentScaleY() : u;
                else {
                    const F = Math.sin(r);
                    r = Math.cos(r);
                    this._x = x ? z ? this._x + (r * w - F * B) / C.GetParentScaleX() : this._x + r * w / C.GetParentScaleX() : q;
                    this._y = z ? x ? this._y + (F * w + r * B) / C.GetParentScaleY() : this._y + r * B / C.GetParentScaleY() : u
                }
            } else this._x = q, this._y = u
        }
        OffsetXY(q, u) {
            q = +q;
            u = +u;
            this.GetTransformWithParentXOrY() ? this.SetXY(this.GetX() + q, this.GetY() + u) : (this._x += q, this._y += u)
        }
        EqualsXY(q, u) {
            return this.GetX() === q && this.GetY() === u
        }
        SetZElevation(q) {
            q = +q;
            this.GetTransformWithParentZElevation() && (q -= this.GetParent().GetZElevation());
            this._zElevation !== q && (this._zElevation = q, this._UpdateZElevation(), q = this.GetLayer(), 0 !== this._zElevation && q._SetAnyInstanceZElevated(), q.SetZIndicesChanged())
        }
        _UpdateZElevation() {
            this._UpdateRendererStateGroup();
            if (this.HasChildren()) {
                const q = this.GetChildren();
                for (let u = 0, r = q.length; u < r; u++) {
                    const x = q[u];
                    x.GetTransformWithParentZElevation() && x._UpdateZElevation()
                }
            }
        }
        OffsetZElevation(q) {
            this.SetZElevation(this.GetZElevation() +
                q)
        }
        GetZElevation() {
            return this.GetTransformWithParentZElevation() ? this.GetParent().GetZElevation() + this._zElevation : this._zElevation
        }
        GetTotalZElevation() {
            return this.GetLayer().GetZElevation() + this.GetZElevation()
        }
        SetWidth(q) {
            q = +q;
            this.GetTransformWithParentWidth() ? this._w *= q / this.GetWidth() : this._w = q
        }
        OffsetWidth(q) {
            q = +q;
            this.GetTransformWithParentWidth() ? this.SetWidth(this.GetWidth() + q) : this._w += q
        }
        GetWidth() {
            return this.GetTransformWithParentWidth() ? this.GetParent().GetWidth() * this._w : this._w
        }
        SetHeight(q) {
            q = +q;
            this.GetTransformWithParentHeight() ? this._h *= q / this.GetHeight() : this._h = q
        }
        OffsetHeight(q) {
            q = +q;
            this.GetTransformWithParentHeight() ? this.SetHeight(this.GetHeight() + q) : this._h += q
        }
        GetHeight() {
            return this.GetTransformWithParentHeight() ? this.GetParent().GetHeight() * this._h : this._h
        }
        SetSize(q, u) {
            q = +q;
            u = +u;
            this.GetTransformWithParentWidth() ? this._w *= q / this.GetWidth() : this._w = q;
            this.GetTransformWithParentHeight() ? this._h *= u / this.GetHeight() : this._h = u
        }
        GetSceneGraphScale() {
            if (this.HasParent()) {
                const q = this._sceneGraphInfo;
                return Math.min(q.GetParentScaleX(), q.GetParentScaleY())
            }
            return 1
        }
        IsRotatable() {
            return 0 !== (this._flags & 128)
        }
        SetAngle(q) {
            q = +q;
            this.IsRotatable() && (this.GetTransformWithParentAngle() && (q -= this.GetParent().GetAngle()), q = f.clampAngle(q), this._a !== q && (this._a = q, this._MarkSinCosAngleChanged()))
        }
        OffsetAngle(q) {
            q = +q;
            0 !== q && this.IsRotatable() && (this._a = f.clampAngle(this._a + q), this._MarkSinCosAngleChanged())
        }
        _MarkSinCosAngleChanged() {
            this._flags |= 262144;
            if (this.HasChildren()) {
                const q = this.GetChildren();
                for (let u =
                        0, r = q.length; u < r; u++) q[u]._MarkSinCosAngleChanged()
            }
        }
        GetAngle() {
            return this.GetTransformWithParentAngle() ? f.clampAngle(this.GetParent().GetAngle() + this._a) : this._a
        }
        _MaybeUpdateSinCosAngle() {
            const q = this._flags;
            if (0 !== (q & 262144)) {
                var u = this.GetAngle();
                this._sinA = Math.sin(u);
                this._cosA = Math.cos(u);
                this._flags = q & -262145
            }
        }
        GetSinAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._sinA
        }
        GetCosAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._cosA
        }
        SetOriginX(q) {
            this._ox = +q
        }
        OffsetOriginX(q) {
            this._ox += +q
        }
        GetOriginX() {
            return this._ox
        }
        SetOriginY(q) {
            this._oy = +q
        }
        OffsetOriginY(q) {
            this._oy += +q
        }
        GetOriginY() {
            return this._oy
        }
        _SetColor(q) {
            this._color.equals(q) || (this._color === k ? (this._color = f.New(f.Color, q), this._colorPremultiplied = f.New(f.Color, q), this._colorPremultiplied.premultiply()) : q.equalsRgba(1, 1, 1, 1) ? this._colorPremultiplied = this._color = k : (this._color.set(q), this._colorPremultiplied.set(q), this._colorPremultiplied.premultiply()), this._UpdateRendererStateGroup())
        }
        SetOpacity(q) {
            q = f.clamp(+q, 0, 1);
            this._color.a !== q && (c.copyRgb(this._color), c.a = q, this._SetColor(c))
        }
        OffsetOpacity(q) {
            this.SetOpacity(this.GetOpacity() +
                q)
        }
        GetOpacity() {
            return this._color.a
        }
        SetUnpremultipliedColor(q) {
            this._color.equalsIgnoringAlpha(q) || (c.copyRgb(q), c.a = this._color.a, this._SetColor(c))
        }
        SetUnpremultipliedColorRGB(q, u, r) {
            c.setRgb(q, u, r);
            this.SetUnpremultipliedColor(c)
        }
        OffsetUnpremultipliedColorRGB(q, u, r) {
            if (0 !== q || 0 !== u || 0 !== r) c.copyRgb(this._color), c.r += q, c.g += u, c.b += r, this.SetUnpremultipliedColor(c)
        }
        GetUnpremultipliedColor() {
            return this._color
        }
        GetPremultipliedColor() {
            return this._colorPremultiplied
        }
        GetDestroyWithParent() {
            return 0 !==
                (this._flags & 512)
        }
        SetDestroyWithParent(q) {
            this._SetFlag(512, q)
        }
        GetTransformWithParentX() {
            return 0 !== (this._flags & 1024)
        }
        SetTransformWithParentX(q) {
            this._SetFlag(1024, q)
        }
        GetTransformWithParentY() {
            return 0 !== (this._flags & 2048)
        }
        GetTransformWithParentXOrY() {
            return 0 !== (this._flags & 3072)
        }
        SetTransformWithParentY(q) {
            this._SetFlag(2048, q)
        }
        GetTransformWithParentWidth() {
            return 0 !== (this._flags & 4096)
        }
        SetTransformWithParentWidth(q) {
            this._SetFlag(4096, q)
        }
        GetTransformWithParentHeight() {
            return 0 !== (this._flags & 8192)
        }
        SetTransformWithParentHeight(q) {
            this._SetFlag(8192,
                q)
        }
        GetTransformWithParentAngle() {
            return 0 !== (this._flags & 16384)
        }
        SetTransformWithParentAngle(q) {
            this._SetFlag(16384, q)
        }
        GetTransformWithParentZElevation() {
            return 0 !== (this._flags & 32768)
        }
        SetTransformWithParentZElevation(q) {
            this._SetFlag(32768, q)
        }
        _ClearAllSceneGraphFlags() {
            this._flags &= -65025
        }
        AddChild(q, u) {
            if (q !== this && !q.HasParent() && !this._HasChildRecursive(q) && !this._HasAnyParent(q)) {
                var r = q.GetX(),
                    x = q.GetY(),
                    z = q.GetWidth(),
                    C = q.GetHeight(),
                    w = q.GetAngle(),
                    B = q.GetZElevation();
                q._SetParent(this);
                q.SetTransformWithParentX(u.transformX);
                q.SetTransformWithParentY(u.transformY);
                q.SetTransformWithParentWidth(u.transformWidth);
                q.SetTransformWithParentHeight(u.transformHeight);
                q.SetTransformWithParentAngle(u.transformAngle);
                q.SetTransformWithParentZElevation(u.transformZElevation);
                q.SetDestroyWithParent(u.destroyWithParent);
                u.transformX && (q._x = r - this.GetX(), u.transformWidth && (q._x /= this.GetWidth() / this._sceneGraphInfo._GetStartWidth()));
                u.transformY && (q._y = x - this.GetY(), u.transformHeight && (q._y /= this.GetHeight() / this._sceneGraphInfo._GetStartHeight()));
                u.transformWidth && (q._w = z / this.GetWidth(), q._sceneGraphInfo.SetStartScaleX(q._w));
                u.transformHeight && (q._h = C / this.GetHeight(), q._sceneGraphInfo.SetStartScaleY(q._h));
                u.transformAngle && (q._a = w - this.GetAngle());
                u.transformZElevation && (q._zElevation = B - this.GetZElevation());
                this._AddChildToSceneGraphInfo(q);
                this.SetBboxChanged()
            }
        }
        RemoveChild(q) {
            if (q.GetParent() === this) {
                var u = q.GetX(),
                    r = q.GetY(),
                    x = q.GetWidth(),
                    z = q.GetHeight(),
                    C = q.GetAngle(),
                    w = q.GetZElevation();
                q._SetParent(null);
                q._ClearAllSceneGraphFlags();
                q.SetXY(u, r);
                q.SetSize(x, z);
                q.SetAngle(C);
                q.SetZElevation(w);
                this._RemoveChildFromSceneGraphInfo(q);
                this.SetBboxChanged()
            }
        }
        _ResetAllSceneGraphState() {
            for (var q of this.children()) this.RemoveChild(q);
            (q = this.GetParent()) && q.RemoveChild(this);
            this._ClearAllSceneGraphFlags()
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            const q = this._sceneGraphInfo;
            return null !== q ? q.GetParent() : null
        }
        GetTopParent() {
            let q = this;
            for (; q.HasParent();) q = q.GetParent();
            return q
        }* parents() {
            let q = this.GetParent();
            for (; q;) yield q,
                q = q.GetParent()
        }
        HasChild(q) {
            return this.GetChildren().includes(q)
        }
        HasChildren() {
            const q = this._sceneGraphInfo;
            return null !== q ? q.HasChildren() : !1
        }
        GetChildren() {
            const q = this._sceneGraphInfo;
            return null !== q ? q.GetChildren() : m
        }
        children() {
            return this.GetChildren()
        }* allChildren() {
            for (const q of this.children()) yield q, yield* q.allChildren()
        }
        GetChildCount() {
            return this.GetChildren().length
        }
        GetChildAt(q) {
            const u = this.GetChildren();
            q = Math.floor(+q);
            return 0 > q || q >= u.length ? null : u[q]
        }
        _CreateSceneGraphInfo(q) {
            this._sceneGraphInfo ||
                (this._sceneGraphInfo = f.New(f.SceneGraphInfo, this));
            q && this._sceneGraphInfo.SetParent(q)
        }
        _GetSceneGraphInfo() {
            return this._sceneGraphInfo
        }
        _ReleaseSceneGraphInfo() {
            this._sceneGraphInfo && (this._sceneGraphInfo.Release(), this._sceneGraphInfo = null)
        }
        _SetParent(q) {
            q ? (q._CreateSceneGraphInfo(null), this._CreateSceneGraphInfo(q)) : (this._sceneGraphInfo && this._sceneGraphInfo.SetParent(null), this.HasChildren() || this._ReleaseSceneGraphInfo())
        }
        _HasAnyParent(q) {
            if (!this.HasParent()) return !1;
            const u = this.GetParent();
            return u === q ? !0 : u._HasAnyParent(q)
        }
        _HasChildRecursive(q) {
            if (this.HasChild(q)) return !0;
            for (const u of this.GetChildren())
                if (u._HasChildRecursive(q)) return !0;
            return !1
        }
        _AddChildToSceneGraphInfo(q) {
            this._sceneGraphInfo.GetChildren().push(q)
        }
        _RemoveChildFromSceneGraphInfo(q) {
            const u = this._sceneGraphInfo.GetChildren(),
                r = u.indexOf(q); - 1 !== r && u.splice(r, 1);
            0 !== u.length || this.HasParent() || this._ReleaseSceneGraphInfo();
            q.HasChildren() || q._ReleaseSceneGraphInfo()
        }
        GetSceneGraphChildrenExportData() {
            return this._sceneGraphChildrenExportData
        }
        GetSceneGraphZIndexExportData() {
            return this._sceneGraphZIndexExportData
        }
        GetSceneGraphZIndex() {
            return this._sceneGraphZIndex
        }
        SetSceneGraphZIndex(q) {
            this._sceneGraphZIndex =
                q
        }
        _UpdateRendererStateGroup() {
            if (t) {
                var q = this._runtime.GetRenderer();
                this._stateGroup && q.ReleaseStateGroup(this._stateGroup);
                this._stateGroup = q.AcquireStateGroup(q.GetTextureFillShaderProgram() || "<default>", this.GetBlendMode(), this._colorPremultiplied, this.GetZElevation())
            }
        }
        GetRendererStateGroup() {
            return this._stateGroup
        }
        HasDefaultColor() {
            return this._color === k
        }
        SetBlendMode(q) {
            q |= 0;
            if (0 > q || 31 < q) throw new RangeError("invalid blend mode");
            this.GetBlendMode() !== q && (this._flags = this._flags & -2080374785 |
                q << 26, this._UpdateRendererStateGroup())
        }
        GetBlendMode() {
            return (this._flags & 2080374784) >> 26
        }
        _SetLayer(q) {
            this._layer = q;
            0 !== this.GetZElevation() && this._layer._SetAnyInstanceZElevated()
        }
        GetLayer() {
            return this._layer
        }
        GetLayout() {
            return this.GetLayer().GetLayout()
        }
        _SetZIndex(q) {
            this._zIndex = q | 0
        }
        GetZIndex() {
            this._layer._UpdateZIndices();
            return this._zIndex
        }
        _GetLastCachedZIndex() {
            return this._zIndex
        }
        _SetFlag(q, u) {
            this._flags = u ? this._flags | q : this._flags & ~q
        }
        IsVisible() {
            return 0 !== (this._flags & 1)
        }
        SetVisible(q) {
            this._SetFlag(1,
                q)
        }
        IsCollisionEnabled() {
            return 0 !== (this._flags & 8)
        }
        SetCollisionEnabled(q) {
            q = !!q;
            this.IsCollisionEnabled() !== q && (this._SetFlag(8, q), q ? this.SetBboxChanged() : this._RemoveFromCollisionCells())
        }
        SetSolidCollisionFilter(q, u) {
            this._SetFlag(32, q);
            this._solidFilterTags && this._solidFilterTags.clear();
            if (u.trim()) {
                this._solidFilterTags || (this._solidFilterTags = new Set);
                for (const r of u.split(" ")) r && this._solidFilterTags.add(r.toLowerCase())
            } else this._solidFilterTags = null
        }
        IsSolidCollisionAllowed(q) {
            const u = 0 !==
                (this._flags & 32),
                r = this._solidFilterTags;
            if (!q || !r) return !u;
            for (const x of r)
                if (q.has(x)) return u;
            return !u
        }
        SetBboxChanged() {
            this._flags |= 65554;
            this._objectClass._SetAnyCollisionCellChanged(!0);
            this._runtime.UpdateRender();
            this._layer.UsesRenderCells() && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0), this._flags &= -3, this._UpdateRenderCell());
            0 !== (this._flags & 4) && this._inst.Dispatcher().dispatchEvent(d);
            if (null !== this._sceneGraphInfo) {
                const q = this._sceneGraphInfo.GetChildren();
                for (let u =
                        0, r = q.length; u < r; ++u) q[u].SetBboxChanged()
            }
        }
        CalculateBbox(q, u, r) {
            const x = this.GetX(),
                z = this.GetY(),
                C = this.GetWidth(),
                w = this.GetHeight(),
                B = this.GetAngle();
            q.setWH(x - this._ox * C, z - this._oy * w, C, w);
            r && this.HasMesh() && this._ExpandBboxForMesh(q);
            0 === B ? u.setFromRect(q) : (q.offset(-x, -z), u.setFromRotatedRectPrecalc(q, this.GetSinAngle(), this.GetCosAngle()), u.offset(x, z), u.getBoundingBox(q));
            q.normalize()
        }
        _UpdateBbox() {
            const q = this._flags;
            0 !== (q & 2) && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0),
                this._flags = q & -3)
        }
        GetBoundingBox() {
            this._UpdateBbox();
            return this._boundingBox
        }
        GetBoundingQuad() {
            this._UpdateBbox();
            return this._boundingQuad
        }
        PixelRoundQuad(q) {
            var u = this.GetX(),
                r = this.GetY();
            u = Math.round(u) - u;
            r = Math.round(r) - r;
            if (0 === u && 0 === r) return q;
            a.copy(q);
            a.offset(u, r);
            return a
        }
        OverwriteBoundingBox(q) {
            this._boundingBox.copy(q);
            this._boundingQuad.setFromRect(this._boundingBox);
            this._flags &= -3;
            this._UpdateCollisionCell();
            this._UpdateRenderCell()
        }
        SetBboxChangeEventEnabled(q) {
            this._SetFlag(4, q)
        }
        IsBboxChangeEventEnabled() {
            return 0 !==
                (this._flags & 4)
        }
        IsInViewport(q) {
            return 0 === this.GetZElevation() ? q.intersectsRect(this.GetBoundingBox()) : this._IsInViewport_ZElevated()
        }
        _IsInViewport_ZElevated() {
            const q = this.GetLayer(),
                u = this.GetTotalZElevation();
            if (u >= q.GetCameraZ()) return !1;
            q.GetViewportForZ(u, b);
            return b.intersectsRect(this.GetBoundingBox())
        }
        SetSourceCollisionPoly(q) {
            this._sourceCollisionPoly = q;
            this._DiscardTransformedCollisionPoly();
            this.HasMesh() && (this._meshInfo.meshPoly = null)
        }
        GetSourceCollisionPoly() {
            return this._sourceCollisionPoly
        }
        HasOwnCollisionPoly() {
            return null !==
                this._sourceCollisionPoly || this.HasMesh()
        }
        GetTransformedCollisionPoly() {
            return this._GetCustomTransformedCollisionPolyPrecalc(this.GetWidth(), this.GetHeight(), this.GetAngle(), this.GetSinAngle(), this.GetCosAngle())
        }
        GetCustomTransformedCollisionPoly(q, u, r) {
            let x = 0,
                z = 1;
            0 !== r && (x = Math.sin(r), z = Math.cos(r));
            return this._GetCustomTransformedCollisionPolyPrecalc(q, u, r, x, z)
        }
        _GetCustomTransformedCollisionPolyPrecalc(q, u, r, x, z) {
            let C = this._transformedPolyInfo;
            null === C && (this._transformedPolyInfo = C = {
                poly: f.New(f.CollisionPoly),
                width: NaN,
                height: NaN,
                angle: NaN
            });
            const w = C.poly;
            if (C.width === q && C.height === u && C.angle === r) return w;
            const B = this._sourceCollisionPoly;
            if (this.HasMesh()) {
                const F = this.GetOriginX(),
                    J = this.GetOriginY(),
                    O = this.GetSourceMesh();
                let G = this._meshInfo.meshPoly;
                G || (B ? (e.copy(B), e.offset(F, J)) : e.setDefaultPoints(), G = O.InsertPolyMeshVertices(e), this._meshInfo.meshPoly = G);
                O.TransformCollisionPoly(G, w);
                w.offset(-F, -J);
                w.transformPrecalc(q, u, x, z)
            } else B ? (w.copy(B), w.transformPrecalc(q, u, x, z)) : w.setFromQuad(this.GetBoundingQuad(), -this.GetX(), -this.GetY());
            C.width = q;
            C.height = u;
            C.angle = r;
            return w
        }
        _DiscardTransformedCollisionPoly() {
            this.SetPhysicsBodyChanged(!0);
            const q = this._transformedPolyInfo;
            null !== q && (q.width = NaN)
        }
        CreateMesh(q, u) {
            q = Math.floor(q);
            u = Math.floor(u);
            if (!this.GetInstance().GetPlugin().SupportsMesh()) throw Error("object does not support mesh");
            this.ReleaseMesh();
            this._meshInfo = {
                sourceMesh: f.New(f.Gfx.Mesh, q, u),
                transformedMesh: f.New(f.Gfx.Mesh, q, u),
                meshPoly: null
            }
        }
        HasMesh() {
            return null !== this._meshInfo
        }
        GetSourceMesh() {
            if (!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.sourceMesh
        }
        GetTransformedMesh() {
            if (!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.transformedMesh
        }
        SetMeshChanged(q) {
            this._SetFlag(65536, q)
        }
        IsMeshChanged() {
            return 0 !== (this._flags & 65536)
        }
        SetPhysicsBodyChanged(q) {
            this._SetFlag(131072, q)
        }
        IsPhysicsBodyChanged() {
            return 0 !== (this._flags & 131072)
        }
        _ExpandBboxForMesh(q) {
            var u = this._meshInfo.sourceMesh;
            const r = Math.min(u.GetMinX(), 0),
                x = Math.min(u.GetMinY(), 0),
                z = Math.max(u.GetMaxX(), 1);
            u = Math.max(u.GetMaxY(), 1);
            const C = q.width(),
                w = q.height();
            q.offsetLeft(r * C);
            q.offsetTop(x * w);
            q.offsetRight((z - 1) * C);
            q.offsetBottom((u - 1) * w)
        }
        ReleaseMesh() {
            this._meshInfo && (this._meshInfo.sourceMesh.Release(), this._meshInfo.transformedMesh.Release(), this._meshInfo = null, this._DiscardTransformedCollisionPoly())
        }
        SetMeshPoint(q, u, r) {
            q = Math.floor(q);
            u = Math.floor(u);
            var x = r.mode || "absolute";
            if (!n.has(x)) throw Error("invalid mode");
            x = "relative" === x;
            let z = r.x,
                C = r.y;
            const w = r.zElevation;
            let B = "number" === typeof r.u ? r.u : x ? 0 : -1;
            r = "number" === typeof r.v ? r.v :
                x ? 0 : -1;
            if (!this.HasMesh()) return !1;
            const F = this.GetSourceMesh(),
                J = F.GetMeshPointAt(q, u);
            if (null === J) return !1;
            let O = !1;
            "number" === typeof w && J.GetZElevation() !== w && (J.SetZElevation(w), O = !0);
            x && (z += q / (F.GetHSize() - 1), C += u / (F.GetVSize() - 1)); - 1 !== B || x ? (x && (B += q / (F.GetHSize() - 1)), B = f.clamp(B, 0, 1)) : B = J.GetU(); - 1 !== r || x ? (x && (r += u / (F.GetVSize() - 1)), r = f.clamp(r, 0, 1)) : r = J.GetV();
            if (J.GetX() === z && J.GetY() === C && J.GetU() === B && J.GetV() === r) return O;
            J.SetX(z);
            J.SetY(C);
            J.SetU(B);
            J.SetV(r);
            this._DiscardTransformedCollisionPoly();
            return !0
        }
        HasTilemap() {
            return this._inst.HasTilemap()
        }
        ContainsPoint(q, u) {
            return this.GetBoundingBox().containsPoint(q, u) && this.GetBoundingQuad().containsPoint(q, u) ? this.HasTilemap() ? this._inst.GetSdkInstance().TestPointOverlapTile(q, u) : this.HasOwnCollisionPoly() ? this.GetTransformedCollisionPoly().containsPoint(q - this.GetX(), u - this.GetY()) : !0 : !1
        }
        _IsCollisionCellChanged() {
            return 0 !== (this._flags & 16)
        }
        _UpdateCollisionCell() {
            if (this._IsCollisionCellChanged() && this.IsCollisionEnabled() && 0 === (this._flags &
                    256)) {
                var q = this.GetBoundingBox(),
                    u = this._objectClass._GetCollisionCellGrid(),
                    r = this._collisionCells;
                b.set(u.XToCell(q.getLeft()), u.YToCell(q.getTop()), u.XToCell(q.getRight()), u.YToCell(q.getBottom()));
                r.equals(b) || (q = this._inst, r === p ? (u.Update(q, null, b), this._collisionCells = f.New(f.Rect, b)) : (u.Update(q, r, b), r.copy(b)), this._flags &= -17)
            }
        }
        _RemoveFromCollisionCells() {
            const q = this._collisionCells;
            q !== p && (this._objectClass._GetCollisionCellGrid().Update(this._inst, q, null), this._collisionCells = p)
        }
        _UpdateRenderCell() {
            const q =
                this.GetLayer();
            if (q.UsesRenderCells() && 0 === (this._flags & 256)) {
                var u = q.GetRenderGrid(),
                    r = this.GetBoundingBox(),
                    x = this._renderCells;
                b.set(u.XToCell(r.getLeft()), u.YToCell(r.getTop()), u.XToCell(r.getRight()), u.YToCell(r.getBottom()));
                x.equals(b) || (r = this._inst, x === h ? (u.Update(r, null, b), this._renderCells = f.New(f.Rect, b)) : (u.Update(r, x, b), x.copy(b)), q.SetRenderListStale())
            }
        }
        _RemoveFromRenderCells() {
            const q = this._renderCells;
            q !== h && (this.GetLayer().GetRenderGrid().Update(this._inst, q, null), this._renderCells =
                h)
        }
        GetRenderCellRange() {
            return this._renderCells
        }
        ZOrderMoveToTop() {
            const q = this._inst,
                u = this._layer,
                r = u._GetInstances();
            r.length && r[r.length - 1] === q || (u._RemoveInstance(q, !1), u._AddInstance(q, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToBottom() {
            const q = this._inst,
                u = this._layer,
                r = u._GetInstances();
            r.length && r[0] === q || (u._RemoveInstance(q, !1), u._PrependInstance(q, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToLayer(q) {
            const u = this._inst,
                r = this._layer;
            if (r.GetLayout() !== q.GetLayout()) throw Error("layer from different layout");
            q !== r && (r._RemoveInstance(u, !0), this._SetLayer(q), q._AddInstance(u, !0), this._runtime.UpdateRender())
        }
        ZOrderMoveAdjacentToInstance(q, u) {
            const r = this._inst,
                x = this._layer;
            if (q.GetUID() !== r.GetUID()) {
                var z = q.GetWorldInfo();
                if (!z) throw Error("expected world instance");
                var C = z.GetLayer();
                z = !1;
                x.GetIndex() !== C.GetIndex() && (x._RemoveInstance(r, !0), this._SetLayer(C), C._AddInstance(r, !0), z = !0);
                q = C.MoveInstanceAdjacent(r, q, !!u);
                (z || q) && this._runtime.UpdateRender()
            }
        }
        GetInstanceEffectList() {
            return this._instanceEffectList
        }
        _SetHasAnyActiveEffect(q) {
            this._SetFlag(64,
                q)
        }
        HasAnyActiveEffect() {
            return 0 !== (this._flags & 64)
        }
        _SaveToJson(q) {
            const u = {
                x: this.GetX(),
                y: this.GetY(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                l: this.GetLayer().GetSID(),
                zi: this.GetZIndex()
            };
            0 !== this.GetZElevation() && (u.ze = this.GetZElevation());
            0 !== this.GetAngle() && (u.a = this.GetAngle());
            this.HasDefaultColor() || (u.c = this._color.toJSON());
            .5 !== this.GetOriginX() && (u.oX = this.GetOriginX());
            .5 !== this.GetOriginY() && (u.oY = this.GetOriginY());
            0 !== this.GetBlendMode() && (u.bm = this.GetBlendMode());
            this.IsVisible() ||
                (u.v = this.IsVisible());
            this.IsCollisionEnabled() || (u.ce = this.IsCollisionEnabled());
            this.IsBboxChangeEventEnabled() && (u.be = this.IsBboxChangeEventEnabled());
            this._instanceEffectList && (u.fx = this._instanceEffectList._SaveToJson());
            const r = 0 !== (this._flags & 32);
            r && (u.sfi = r);
            this._solidFilterTags && (u.sft = [...this._solidFilterTags].join(" "));
            this._sceneGraphInfo && "visual-state" !== q && (u.sgi = this._sceneGraphInfo._SaveToJson());
            this.HasMesh() && (u.mesh = this.GetSourceMesh().SaveToJson());
            return u
        }
        _OnBeforeLoad(q) {
            "visual-state" !==
            q && this._ResetAllSceneGraphState()
        }
        _LoadFromJson(q, u) {
            t = !1;
            this.SetX(q.x);
            this.SetY(q.y);
            this.SetWidth(q.w);
            this.SetHeight(q.h);
            this._SetZIndex(q.zi);
            this.SetZElevation(q.hasOwnProperty("ze") ? q.ze : 0);
            this.SetAngle(q.hasOwnProperty("a") ? q.a : 0);
            q.hasOwnProperty("c") ? c.setFromJSON(q.c) : q.hasOwnProperty("o") ? (c.copyRgb(this._color), c.a = q.o) : c.setRgba(1, 1, 1, 1);
            this._SetColor(c);
            this.SetOriginX(q.hasOwnProperty("oX") ? q.oX : .5);
            this.SetOriginY(q.hasOwnProperty("oY") ? q.oY : .5);
            this.SetBlendMode(q.hasOwnProperty("bm") ?
                q.bm : 0);
            this.SetVisible(q.hasOwnProperty("v") ? q.v : !0);
            this.SetCollisionEnabled(q.hasOwnProperty("ce") ? q.ce : !0);
            this.SetBboxChangeEventEnabled(q.hasOwnProperty("be") ? q.be : !1);
            this.SetSolidCollisionFilter(q.hasOwnProperty("sfi") ? q.sfi : !1, q.hasOwnProperty("sft") ? q.sft : "");
            this._instanceEffectList && q.hasOwnProperty("fx") && this._instanceEffectList._LoadFromJson(q.fx);
            if (q.hasOwnProperty("sgi") && "visual-state" !== u) {
                this._CreateSceneGraphInfo(null);
                const r = this._sceneGraphInfo,
                    x = q.sgi;
                r._LoadFromJson(x);
                const z = this.GetRuntime().Dispatcher(),
                    C = () => {
                        z.removeEventListener("afterload", C);
                        0 === (this._flags & 256) && r._OnAfterLoad(x)
                    };
                z.addEventListener("afterload", C)
            }
            q.hasOwnProperty("mesh") ? (q = q.mesh, this.CreateMesh(q.cols, q.rows), this.GetSourceMesh().LoadFromJson(q)) : this.ReleaseMesh();
            this.SetBboxChanged();
            t = !0;
            this._UpdateRendererStateGroup()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.BehaviorType = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            const d = b.GetRuntime(),
                c = d.GetPluginManager(),
                e = d.GetObjectReference(a[1]);
            c.HasBehaviorByConstructorFunction(e) || c.CreateBehavior(a);
            this._runtime = d;
            this._objectClass = b;
            this._behavior = c.GetBehaviorByConstructorFunction(e);
            this._sdkType = null;
            this._instSdkCtor = e.Instance;
            this._sid = a[2];
            this._name = a[0];
            this._jsPropName = this._runtime.GetJsPropName(a[3]);
            this._sdkType = f.New(e.Type, this);
            this.OnCreate()
        }
        static Create(b,
            a) {
            return f.New(f.BehaviorType, b, a)
        }
        Release() {
            this._behavior = this._runtime = null;
            this._sdkType.Release();
            this._instSdkCtor = this._sdkType = null
        }
        GetSdkType() {
            return this._sdkType
        }
        OnCreate() {
            this._sdkType.OnCreate()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehavior() {
            return this._behavior
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetJsPropName() {
            return this._jsPropName
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.IBehaviorInstance;
    f.BehaviorInstance = class extends f.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._behaviorType = a.behaviorType;
            this._behavior = this._behaviorType.GetBehavior();
            this._inst = a.instance;
            this._index = a.index;
            this._iScriptInterface = this._sdkInst = null;
            this._behavior._AddInstance(this._inst)
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            this._behavior._RemoveInstance(this._inst);
            this._sdkInst.Release();
            this._inst = this._behavior = this._behaviorType = this._runtime = this._iScriptInterface = this._sdkInst = null
        }
        _CreateSdkInstance(a) {
            if (this._sdkInst) throw Error("already got sdk instance");
            this._sdkInst = f.New(this._behaviorType.GetInstanceSdkCtor(), this, a);
            this._InitScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetBehavior() {
            return this._behavior
        }
        _GetIndex() {
            return this._index
        }
        PostCreate() {
            this._sdkInst.PostCreate()
        }
        OnSpriteFrameChanged(a,
            d) {
            this._sdkInst.OnSpriteFrameChanged(a, d)
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson() {
            return this._sdkInst.SaveToJson()
        }
        LoadFromJson(a) {
            return this._sdkInst.LoadFromJson(a)
        }
        static SortByTickSequence(a, d) {
            var c = a.GetObjectInstance(),
                e = d.GetObjectInstance();
            const k = c.GetObjectClass().GetIndex(),
                h = e.GetObjectClass().GetIndex();
            if (k !== h) return k - h;
            c = c.GetPUID();
            e = e.GetPUID();
            return c !== e ? c - e : a.GetBehaviorInstance()._GetIndex() - d.GetBehaviorInstance()._GetIndex()
        }
        _InitScriptInterface() {
            const a =
                this._sdkInst.GetScriptInterfaceClass(),
                d = a || b;
            b._Init(this);
            this._iScriptInterface = new d;
            b._Init(null);
            if (a && !(this._iScriptInterface instanceof b)) throw new TypeError(`script interface class '${a.name}' does not extend the right base class '${b.name}'`);
        }
        GetScriptInterface() {
            return this._iScriptInterface
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.EffectList = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._owner = b;
            this._allEffectTypes = [];
            this._activeEffectTypes = [];
            this._effectTypesByName = new Map;
            this._effectParams = [];
            this._preservesOpaqueness = !0;
            for (const d of a) b = f.New(f.EffectType, this, d, this._allEffectTypes.length), this._allEffectTypes.push(b), this._effectTypesByName.set(b.GetName().toLowerCase(), b), 3 <= d.length && this._effectParams.push(this._LoadSingleEffectParameters(d[2]));
            this.GetRuntime()._AddEffectList(this)
        }
        Release() {
            f.clearArray(this._allEffectTypes);
            f.clearArray(this._activeEffectTypes);
            this._effectTypesByName.clear();
            f.clearArray(this._effectParams);
            this._owner = null
        }
        PrependEffectTypes(b) {
            if (b.length) {
                this._allEffectTypes = b.concat(this._allEffectTypes);
                for (const a of b) this._effectTypesByName.set(a.GetName().toLowerCase(), a);
                for (let a = 0, d = this._allEffectTypes.length; a < d; ++a) this._allEffectTypes[a]._SetIndex(a)
            }
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if (Array.isArray(c)) {
                    const e = f.New(f.Color);
                    e.setFromJSON(c);
                    b[a] = e
                }
            }
            return b
        }
        GetOwner() {
            return this._owner
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        UpdateActiveEffects() {
            f.clearArray(this._activeEffectTypes);
            let b = !0;
            for (const a of this._allEffectTypes) a.IsActive() && (this._activeEffectTypes.push(a), a.GetShaderProgram().PreservesOpaqueness() || (b = !1));
            this._preservesOpaqueness = b
        }
        GetAllEffectTypes() {
            return this._allEffectTypes
        }
        HasAnyEffectType() {
            return 0 < this._allEffectTypes.length
        }
        GetEffectTypeByName(b) {
            return this._effectTypesByName.get(b.toLowerCase()) ||
                null
        }
        GetEffectTypeByIndex(b) {
            b = Math.floor(+b);
            if (0 > b || b >= this._allEffectTypes.length) throw new RangeError("invalid effect type index");
            return this._allEffectTypes[b]
        }
        IsEffectIndexActive(b) {
            return this.GetEffectTypeByIndex(b).IsActive()
        }
        SetEffectIndexActive(b, a) {
            this.GetEffectTypeByIndex(b).SetActive(a)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        HasAnyActiveEffect() {
            return 0 < this._activeEffectTypes.length
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        static SaveFxParamToJson(b) {
            return b &&
                b instanceof f.Color ? {
                    t: "color",
                    v: b.toJSON()
                } : b
        }
        static LoadFxParamFromJson(b) {
            if ("object" === typeof b) {
                if ("color" === b.t) {
                    const a = f.New(f.Color);
                    a.setFromJSON(b.v);
                    return a
                }
                throw Error("invalid effect parameter type");
            }
            return b
        }
        static SaveFxParamsToJson(b) {
            return b.map(f.EffectList.SaveFxParamToJson)
        }
        static LoadFxParamsFromJson(b) {
            return b.map(f.EffectList.LoadFxParamFromJson)
        }
        SaveToJson() {
            return this._allEffectTypes.map(b => ({
                name: b.GetName(),
                active: b.IsActive(),
                params: f.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        LoadFromJson(b) {
            for (const a of b)
                if (b =
                    this.GetEffectTypeByName(a.name)) b.SetActive(a.active), this._effectParams[b.GetIndex()] = f.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.EffectType = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._effectList = b;
            this._id = a[0];
            this._name = a[1];
            this._index = d;
            this._shaderProgram = null;
            this._isActive = !0
        }
        Release() {
            this._shaderProgram = this._effectList = null
        }
        Clone(b) {
            b = f.New(f.EffectType, b, [this._id, this._name], -1);
            b._shaderProgram = this._shaderProgram;
            b._isActive = this._isActive;
            return b
        }
        _InitRenderer(b) {
            b = b.GetShaderProgramByName(this._id);
            if (!b) throw Error("failed to find shader program '" + this._id + "'");
            this._shaderProgram =
                b
        }
        GetEffectList() {
            return this._effectList
        }
        GetName() {
            return this._name
        }
        _SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        GetOwner() {
            return this._effectList.GetOwner()
        }
        GetRuntime() {
            return this._effectList.GetRuntime()
        }
        SetActive(b) {
            this._isActive = !!b
        }
        IsActive() {
            return this._isActive
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        GetDefaultParameterValues() {
            const b = [];
            for (let a = 0, d = this._shaderProgram.GetParameterCount(); a < d; ++a) {
                const c = this._shaderProgram.GetParameterType(a);
                if ("float" === c || "percent" ===
                    c) b.push(0);
                else if ("color" === c) b.push(f.New(f.Color, 1, 1, 1, 1));
                else throw new TypeError("unknown effect parameter type");
            }
            return b
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.InstanceEffectList = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._inst = b;
            this._wi = a;
            this._effectList = b.GetObjectClass().GetEffectList();
            this._activeEffectFlags = [];
            this._activeEffectTypes = [];
            this._preservesOpaqueness = !0;
            this._effectParams = [];
            for (const c of this._effectList.GetAllEffectTypes()) this._activeEffectFlags.push(!0);
            this.UpdateActiveEffects()
        }
        Release() {
            f.clearArray(this._activeEffectFlags);
            f.clearArray(this._activeEffectTypes);
            f.clearArray(this._effectParams);
            this._effectList = this._inst = null
        }
        _LoadEffectParameters(b) {
            for (const a of b) this._effectParams.push(this._LoadSingleEffectParameters(a))
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for (let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if (Array.isArray(c)) {
                    const e = f.New(f.Color);
                    e.setFromJSON(c);
                    b[a] = e
                }
            }
            return b
        }
        LoadDefaultEffectParameters() {
            for (const b of this._effectList.GetAllEffectTypes()) this._effectParams.push(b.GetDefaultParameterValues())
        }
        GetOwner() {
            return this._owner
        }
        GetEffectList() {
            return this._effectList
        }
        GetRuntime() {
            return this._inst.GetRuntime()
        }
        UpdateActiveEffects() {
            f.clearArray(this._activeEffectTypes);
            const b = this._effectList.GetAllEffectTypes(),
                a = this._activeEffectTypes,
                d = this._activeEffectFlags;
            let c = !0;
            for (let e = 0, k = b.length; e < k; ++e)
                if (d[e]) {
                    const h = b[e];
                    a.push(h);
                    h.GetShaderProgram().PreservesOpaqueness() || (c = !1)
                }
            this._preservesOpaqueness = c;
            this._wi._SetHasAnyActiveEffect(!!a.length)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        HasAnyActiveBackgroundBlendingEffect() {
            return this._activeEffectTypes.some(b =>
                b.GetShaderProgram().UsesDest())
        }
        IsEffectIndexActive(b) {
            return this._activeEffectFlags[b]
        }
        SetEffectIndexActive(b, a) {
            this._activeEffectFlags[b] = !!a
        }
        GetAllEffectTypes() {
            return this._effectList.GetAllEffectTypes()
        }
        _SaveToJson() {
            return this._effectList.GetAllEffectTypes().map(b => ({
                name: b.GetName(),
                active: this._activeEffectFlags[b.GetIndex()],
                params: f.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        _LoadFromJson(b) {
            for (const a of b)
                if (b = this._effectList.GetEffectTypeByName(a.name)) this._activeEffectFlags[b.GetIndex()] =
                    a.active, this._effectParams[b.GetIndex()] = f.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [],
        a = [],
        d = [],
        c = f.New(f.CollisionPoly),
        e = f.New(f.CollisionPoly),
        k = f.New(f.Quad),
        h = f.New(f.Rect),
        p = f.New(f.Rect);
    f.CollisionEngine = class extends f.DefendedBase {
        constructor(n) {
            super();
            this._runtime = n;
            this._registeredCollisions = [];
            this._polyCheckSec = this._polyCheckCount = this._collisionCheckSec = this._collisionCheckCount = 0
        }
        Release() {
            this._runtime = null
        }
        _Update1sStats() {
            this._collisionCheckSec = this._collisionCheckCount;
            this._collisionCheckCount = 0;
            this._polyCheckSec = this._polyCheckCount;
            this._polyCheckCount = 0
        }
        Get1secCollisionChecks() {
            return this._collisionCheckSec
        }
        Get1secPolyChecks() {
            return this._polyCheckSec
        }
        RegisterCollision(n, m) {
            const t = n.GetWorldInfo(),
                q = m.GetWorldInfo();
            t && q && t.IsCollisionEnabled() && q.IsCollisionEnabled() && this._registeredCollisions.push([n, m])
        }
        AddRegisteredCollisionCandidates(n, m, t) {
            for (const [q, u] of this._registeredCollisions) {
                let r;
                if (n === q) r = u;
                else if (n === u) r = q;
                else continue;
                r.BelongsToObjectClass(m) && (t.includes(r) || t.push(r))
            }
        }
        CheckRegisteredCollision(n,
            m) {
            if (!this._registeredCollisions.length) return !1;
            for (const [t, q] of this._registeredCollisions)
                if (n === t && m === q || n === q && m === t) return !0;
            return !1
        }
        ClearRegisteredCollisions() {
            f.clearArray(this._registeredCollisions)
        }
        TestOverlap(n, m) {
            if (!n || !m || n === m) return !1;
            n = n.GetWorldInfo();
            m = m.GetWorldInfo();
            if (!n.IsCollisionEnabled() || !m.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            const t = n.GetLayer(),
                q = m.GetLayer();
            return t.IsTransformCompatibleWith(q) ? this._TestOverlap_SameLayers(n, m) : this._TestOverlap_DifferentLayers(n,
                m)
        }
        _TestOverlap_SameLayers(n, m) {
            if (!n.GetBoundingBox().intersectsRect(m.GetBoundingBox())) return !1;
            this._polyCheckCount++;
            if (!n.GetBoundingQuad().intersectsQuad(m.GetBoundingQuad()) || n.HasTilemap() && m.HasTilemap()) return !1;
            if (n.HasTilemap()) return this.TestTilemapOverlap(n, m);
            if (m.HasTilemap()) return this.TestTilemapOverlap(m, n);
            if (!n.HasOwnCollisionPoly() && !m.HasOwnCollisionPoly()) return !0;
            const t = n.GetTransformedCollisionPoly(),
                q = m.GetTransformedCollisionPoly();
            return t.intersectsPoly(q, m.GetX() -
                n.GetX(), m.GetY() - n.GetY())
        }
        _TestOverlap_DifferentLayers(n, m) {
            var t = n.GetLayer();
            const q = m.GetLayer();
            c.copy(n.GetTransformedCollisionPoly());
            e.copy(m.GetTransformedCollisionPoly());
            var u = c.pointsArr();
            for (let r = 0, x = u.length; r < x; r += 2) {
                const z = r + 1,
                    C = u[z],
                    [w, B] = t.LayerToCanvasCss(u[r] + n.GetX(), C + n.GetY());
                u[r] = w;
                u[z] = B
            }
            n = e.pointsArr();
            for (let r = 0, x = n.length; r < x; r += 2) {
                t = r + 1;
                u = n[t];
                const [z, C] = q.LayerToCanvasCss(n[r] + m.GetX(), u + m.GetY());
                n[r] = z;
                n[t] = C
            }
            c.setBboxChanged();
            e.setBboxChanged();
            this._polyCheckCount++;
            return c.intersectsPoly(e, 0, 0)
        }
        TestTilemapOverlap(n, m) {
            const t = m.GetBoundingBox(),
                q = n.GetX(),
                u = n.GetY();
            var r = n.GetInstance().GetSdkInstance();
            n = m.GetX();
            const x = m.GetY(),
                z = m.HasOwnCollisionPoly(),
                C = m.GetBoundingQuad();
            r.GetCollisionRectCandidates(t, a);
            for (let F = 0, J = a.length; F < J; ++F) {
                var w = a[F];
                r = w.GetRect();
                this._collisionCheckCount++;
                if (t.intersectsRectOffset(r, q, u) && (k.setFromRect(r), k.offset(q, u), k.intersectsQuad(C)))
                    if (z) {
                        var B = m.GetTransformedCollisionPoly();
                        if (w = w.GetPoly()) {
                            if (this._polyCheckCount++,
                                w.intersectsPoly(B, n - (q + r.getLeft()), x - (u + r.getTop()))) return f.clearArray(a), !0
                        } else if (c.setFromQuad(k, 0, 0), c.intersectsPoly(B, n, x)) return f.clearArray(a), !0
                    } else if (B = w.GetPoly()) {
                    if (c.setFromQuad(C, 0, 0), B.intersectsPoly(c, -(q + r.getLeft()), -(u + r.getTop()))) return f.clearArray(a), !0
                } else return f.clearArray(a), !0
            }
            f.clearArray(a);
            return !1
        }
        TestAndSelectCanvasPointOverlap(n, m, t, q) {
            const u = n.GetCurrentSol();
            var r = this._runtime.GetCurrentEvent();
            if (!r) throw Error("cannot call outside event");
            r = r.IsOrBlock();
            if (u.IsSelectAll()) {
                q || (u._SetSelectAll(!1), f.clearArray(u._GetOwnInstances()));
                for (var x of n.GetInstances()) {
                    var z = x.GetWorldInfo(),
                        C = z.GetLayer();
                    const [w, B] = C.CanvasCssToLayer(m, t, z.GetTotalZElevation());
                    if (z.ContainsPoint(w, B)) {
                        if (q) return !1;
                        u._PushInstance(x)
                    } else r && u._PushElseInstance(x)
                }
            } else {
                x = r ? u._GetOwnElseInstances() : u._GetOwnInstances();
                z = 0;
                for (let w = 0, B = x.length; w < B; ++w) {
                    C = x[w];
                    const F = C.GetWorldInfo(),
                        J = F.GetLayer(),
                        [O, G] = J.CanvasCssToLayer(m, t, F.GetTotalZElevation());
                    if (F.ContainsPoint(O,
                            G)) {
                        if (q) return !1;
                        r ? u._PushInstance(C) : x[z++] = C
                    } else r && (x[z++] = C)
                }
                q || (x.length = z)
            }
            n.ApplySolToContainer();
            return q ? !0 : u.HasAnyInstances()
        }
        GetCollisionCandidates(n, m, t, q) {
            n = n ? 1 !== n.GetParallaxX() || 1 !== n.GetParallaxY() : !1;
            if (m.IsFamily())
                for (const u of m.GetFamilyMembers()) n || u.IsAnyInstanceParallaxed() ? f.appendArray(q, u.GetInstances()) : (u._UpdateAllCollisionCells(), u._GetCollisionCellGrid().QueryRange(t, q));
            else n || m.IsAnyInstanceParallaxed() ? f.appendArray(q, m.GetInstances()) : (m._UpdateAllCollisionCells(),
                m._GetCollisionCellGrid().QueryRange(t, q))
        }
        GetObjectClassesCollisionCandidates(n, m, t, q) {
            for (const u of m) this.GetCollisionCandidates(n, u, t, q)
        }
        GetSolidCollisionCandidates(n, m, t) {
            const q = this._runtime.GetSolidBehavior();
            q && this.GetObjectClassesCollisionCandidates(n, q.GetObjectClasses(), m, t)
        }
        GetJumpthruCollisionCandidates(n, m, t) {
            const q = this._runtime.GetJumpthruBehavior();
            q && this.GetObjectClassesCollisionCandidates(n, q.GetObjectClasses(), m, t)
        }
        IsSolidCollisionAllowed(n, m) {
            return n._IsSolidEnabled() &&
                (!m || m.GetWorldInfo().IsSolidCollisionAllowed(n.GetSavedDataMap().get("solidTags")))
        }
        TestOverlapSolid(n) {
            const m = n.GetWorldInfo();
            this.GetSolidCollisionCandidates(m.GetLayer(), m.GetBoundingBox(), b);
            for (const t of b)
                if (this.IsSolidCollisionAllowed(t, n) && this.TestOverlap(n, t)) return f.clearArray(b), t;
            f.clearArray(b);
            return null
        }
        TestRectOverlapSolid(n, m) {
            this.GetSolidCollisionCandidates(null, n, b);
            for (const t of b)
                if (this.IsSolidCollisionAllowed(t, m) && this.TestRectOverlap(n, t)) return f.clearArray(b),
                    t;
            f.clearArray(b);
            return null
        }
        TestOverlapJumpthru(n, m) {
            let t = null;
            m && (t = d, f.clearArray(t));
            const q = n.GetWorldInfo();
            this.GetJumpthruCollisionCandidates(q.GetLayer(), q.GetBoundingBox(), b);
            for (const u of b)
                if (u._IsJumpthruEnabled() && this.TestOverlap(n, u))
                    if (m) t.push(u);
                    else return f.clearArray(b), u;
            f.clearArray(b);
            return t
        }
        PushOut(n, m, t, q, u) {
            q = q || 50;
            const r = n.GetWorldInfo(),
                x = r.GetX(),
                z = r.GetY();
            for (let C = 0; C < q; ++C)
                if (r.SetXY(x + m * C, z + t * C), r.SetBboxChanged(), !this.TestOverlap(n, u)) return !0;
            r.SetXY(x,
                z);
            r.SetBboxChanged();
            return !1
        }
        PushOutSolid(n, m, t, q, u, r) {
            q = q || 50;
            const x = n.GetWorldInfo(),
                z = x.GetX(),
                C = x.GetY();
            let w = null,
                B = null;
            for (let F = 0; F < q; ++F)
                if (x.SetXY(z + m * F, C + t * F), x.SetBboxChanged(), !this.TestOverlap(n, w))
                    if (w = this.TestOverlapSolid(n)) B = w;
                    else if (u && (w = r ? this.TestOverlap(n, r) ? r : null : this.TestOverlapJumpthru(n)) && (B = w), !w) return B && this.PushInFractional(n, m, t, B, 16, !0), !0;
            x.SetXY(z, C);
            x.SetBboxChanged();
            return !1
        }
        PushOutSolidAxis(n, m, t, q) {
            q = q || 50;
            const u = n.GetWorldInfo(),
                r = u.GetX(),
                x = u.GetY();
            let z = null,
                C = null;
            for (let w = 0; w < q; ++w)
                for (let B = 0; 2 > B; ++B) {
                    const F = 2 * B - 1;
                    u.SetXY(r + m * w * F, x + t * w * F);
                    u.SetBboxChanged();
                    if (!this.TestOverlap(n, z))
                        if (z = this.TestOverlapSolid(n)) C = z;
                        else return C && this.PushInFractional(n, m * F, t * F, C, 16, !0), !0
                }
            u.SetXY(r, x);
            u.SetBboxChanged();
            return !1
        }
        PushInFractional(n, m, t, q, u, r) {
            let x = 2,
                z = !1;
            var C = !1;
            const w = n.GetWorldInfo();
            let B = w.GetX(),
                F = w.GetY();
            for (; x <= u;) C = 1 / x, x *= 2, w.OffsetXY(m * C * (z ? 1 : -1), t * C * (z ? 1 : -1)), w.SetBboxChanged(), this.TestOverlap(n, q) || r && this.TestOverlapSolid(n) ?
                C = z = !0 : (C = z = !1, B = w.GetX(), F = w.GetY());
            C && (w.SetXY(B, F), w.SetBboxChanged())
        }
        PushOutSolidNearest(n, m = 100) {
            let t = 0;
            const q = n.GetWorldInfo(),
                u = q.GetX(),
                r = q.GetY();
            let x = 0,
                z = this.TestOverlapSolid(n);
            if (!z) return !0;
            for (; t <= m;) {
                let C = 0,
                    w = 0;
                switch (x) {
                    case 0:
                        C = 0;
                        w = -1;
                        t++;
                        break;
                    case 1:
                        C = 1;
                        w = -1;
                        break;
                    case 2:
                        C = 1;
                        w = 0;
                        break;
                    case 3:
                        w = C = 1;
                        break;
                    case 4:
                        C = 0;
                        w = 1;
                        break;
                    case 5:
                        C = -1;
                        w = 1;
                        break;
                    case 6:
                        C = -1;
                        w = 0;
                        break;
                    case 7:
                        w = C = -1
                }
                x = (x + 1) % 8;
                q.SetXY(Math.floor(u + C * t), Math.floor(r + w * t));
                q.SetBboxChanged();
                if (!this.TestOverlap(n,
                        z) && (z = this.TestOverlapSolid(n), !z)) return !0
            }
            q.SetXY(u, r);
            q.SetBboxChanged();
            return !1
        }
        CalculateBounceAngle(n, m, t, q) {
            const u = n.GetWorldInfo(),
                r = u.GetX(),
                x = u.GetY(),
                z = Math.max(10, f.distanceTo(m, t, r, x));
            var C = f.angleTo(m, t, r, x),
                w = q || this.TestOverlapSolid(n);
            if (!w) return f.clampAngle(C + Math.PI);
            let B = w;
            var F = 0,
                J = 0;
            const O = f.toRadians(5);
            let G;
            for (G = 1; 36 > G; ++G) {
                const I = C - G * O;
                u.SetXY(m + Math.cos(I) * z, t + Math.sin(I) * z);
                u.SetBboxChanged();
                if (!this.TestOverlap(n, B) && (B = q ? null : this.TestOverlapSolid(n), !B)) {
                    F =
                        I;
                    break
                }
            }
            36 === G && (F = f.clampAngle(C + Math.PI));
            B = w;
            for (G = 1; 36 > G; ++G)
                if (w = C + G * O, u.SetXY(m + Math.cos(w) * z, t + Math.sin(w) * z), u.SetBboxChanged(), !this.TestOverlap(n, B) && (B = q ? null : this.TestOverlapSolid(n), !B)) {
                    J = w;
                    break
                }
            36 === G && (J = f.clampAngle(C + Math.PI));
            u.SetXY(r, x);
            u.SetBboxChanged();
            if (J === F) return J;
            n = f.angleDiff(J, F) / 2;
            n = f.angleClockwise(J, F) ? f.clampAngle(F + n + Math.PI) : f.clampAngle(J + n);
            F = Math.cos(C);
            C = Math.sin(C);
            J = Math.cos(n);
            n = Math.sin(n);
            m = F * J + C * n;
            return f.angleTo(0, 0, F - 2 * m * J, C - 2 * m * n)
        }
        TestSegmentOverlap(n,
            m, t, q, u) {
            if (!u) return !1;
            const r = u.GetWorldInfo();
            if (!r.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            h.set(Math.min(n, t), Math.min(m, q), Math.max(n, t), Math.max(m, q));
            if (!r.GetBoundingBox().intersectsRect(h)) return !1;
            if (u.HasTilemap()) return this._TestSegmentOverlapTilemap(n, m, t, q, u, r);
            this._polyCheckCount++;
            return r.GetBoundingQuad().intersectsSegment(n, m, t, q) ? r.HasOwnCollisionPoly() ? r.GetTransformedCollisionPoly().intersectsSegment(r.GetX(), r.GetY(), n, m, t, q) : !0 : !1
        }
        _TestSegmentOverlapTilemap(n,
            m, t, q, u, r) {
            const x = r.GetX();
            r = r.GetY();
            u = u.GetSdkInstance();
            p.set(n, m, t, q);
            p.normalize();
            u.GetCollisionRectCandidates(p, a);
            for (let C = 0, w = a.length; C < w; ++C) {
                var z = a[C];
                u = z.GetRect();
                this._collisionCheckCount++;
                if (h.intersectsRectOffset(u, x, r) && (k.setFromRect(u), k.offset(x, r), k.intersectsSegment(n, m, t, q)))
                    if (z = z.GetPoly()) {
                        if (this._polyCheckCount++, z.intersectsSegment(x + u.getLeft(), r + u.getTop(), n, m, t, q)) return f.clearArray(a), !0
                    } else return f.clearArray(a), !0
            }
            f.clearArray(a);
            return !1
        }
        TestRectOverlap(n,
            m) {
            if (!m) return !1;
            const t = m.GetWorldInfo();
            if (!t.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            if (!t.GetBoundingBox().intersectsRect(n)) return !1;
            if (m.HasTilemap()) return this._TestRectOverlapTilemap(n, m, t);
            this._polyCheckCount++;
            k.setFromRect(n);
            if (!t.GetBoundingQuad().intersectsQuad(k)) return !1;
            if (!t.HasOwnCollisionPoly()) return !0;
            c.setFromRect(n, t.GetX(), t.GetY());
            n = t.GetTransformedCollisionPoly();
            return c.intersectsPoly(n, 0, 0)
        }
        _TestRectOverlapTilemap(n, m, t) {
            const q = t.GetX();
            t = t.GetY();
            m.GetSdkInstance().GetCollisionRectCandidates(n, a);
            for (let r = 0, x = a.length; r < x; ++r) {
                var u = a[r];
                m = u.GetRect();
                this._collisionCheckCount++;
                if (n.intersectsRectOffset(m, q, t))
                    if (u = u.GetPoly()) {
                        if (this._polyCheckCount++, c.setFromRect(n, 0, 0), u.intersectsPoly(c, -(q + m.getLeft()), -(t + m.getTop()))) return f.clearArray(a), !0
                    } else return f.clearArray(a), !0
            }
            f.clearArray(a);
            return !1
        }
        TestRayIntersectsInstance(n, m) {
            if (n) {
                var t = n.GetWorldInfo();
                t.IsCollisionEnabled() && (this._collisionCheckCount++, t.GetBoundingBox().intersectsRect(m.rect) &&
                    (n.HasTilemap() ? this._TestRayIntersectsTilemap(n, t, m) : (this._polyCheckCount++, t.HasOwnCollisionPoly() ? m.TestInstancePoly(n, t.GetX(), t.GetY(), t.GetTransformedCollisionPoly()) : m.TestInstanceQuad(n, t.GetBoundingQuad()))))
            }
        }
        _TestRayIntersectsTilemap(n, m, t) {
            const q = m.GetX(),
                u = m.GetY();
            n.GetSdkInstance().GetCollisionRectCandidates(t.rect, a);
            for (let x = 0, z = a.length; x < z; x++) {
                var r = a[x];
                const C = r.GetRect();
                this._collisionCheckCount++;
                t.rect.intersectsRectOffset(C, q, u) && (r = r.GetPoly(), this._polyCheckCount++,
                    r ? t.TestInstancePoly(n, q + C.getLeft(), u + C.getTop(), r) : t.TestInstanceRect(n, m.GetX(), m.GetY(), C))
            }
            f.clearArray(a)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.SparseGrid = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = f.New(f.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = f.New(f.GridCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            b = Math.floor(b / this._cellWidth);
            return isFinite(b) ? b : 0
        }
        YToCell(b) {
            b = Math.floor(b / this._cellHeight);
            return isFinite(b) ? b : 0
        }
        Update(b, a, d) {
            if (a)
                for (let c = a.getLeft(), e = a.getRight(); c <=
                    e; ++c)
                    for (let k = a.getTop(), h = a.getBottom(); k <= h; ++k) {
                        if (d && d.containsPoint(c, k)) continue;
                        const p = this.GetCell(c, k, !1);
                        p && (p.Remove(b), p.IsEmpty() && this._cells.Delete(c, k))
                    }
            if (d)
                for (let c = d.getLeft(), e = d.getRight(); c <= e; ++c)
                    for (let k = d.getTop(), h = d.getBottom(); k <= h; ++k) a && a.containsPoint(c, k) || this.GetCell(c, k, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                e = this.XToCell(b.getRight());
            b = this.YToCell(b.getBottom());
            if (isFinite(e) && isFinite(b))
                for (; d <=
                    e; ++d)
                    for (let k = c; k <= b; ++k) {
                        const h = this.GetCell(d, k, !1);
                        h && h.Dump(a)
                    }
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.GridCell = class extends f.DefendedBase {
        constructor(b, a, d) {
            super();
            this._grid = b;
            this._x = a;
            this._y = d;
            this._instances = f.New(f.ArraySet)
        }
        Release() {
            this._instances.Release();
            this._grid = this._instances = null
        }
        IsEmpty() {
            return this._instances.IsEmpty()
        }
        Insert(b) {
            this._instances.Add(b)
        }
        Remove(b) {
            this._instances.Delete(b)
        }
        Dump(b) {
            f.appendArray(b, this._instances.GetArray())
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Ray = class {
        constructor() {
            this.dy = this.dx = this.y2 = this.x2 = this.y1 = this.x1 = 0;
            this.rect = new f.Rect;
            this.hitFraction = 2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0
        }
        DidCollide() {
            return 1.000001 > this.hitFraction
        }
        Set(b, a, d, c) {
            this.x1 = b;
            this.y1 = a;
            this.x2 = d;
            this.y2 = c;
            this.dx = d - b;
            this.dy = c - a;
            this.rect.set(b, a, d, c);
            this.rect.normalize();
            this.hitFraction = 2;
            this.hitUid =
                null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0;
            return this
        }
        Complete() {
            if (!1 !== this.DidCollide()) {
                var b = this.dx * this.hitFraction,
                    a = this.dy * this.hitFraction,
                    d = Math.sqrt(b * b + a * a);
                b /= d;
                a /= d;
                this.distance = d - 1E-6;
                this.hitX = this.x1 + b * this.distance;
                this.hitY = this.y1 + a * this.distance;
                this.hitNormal = Math.atan2(this.hitNormalDy, this.hitNormalDx) + Math.PI / 2;
                this.normalX = Math.cos(this.hitNormal);
                this.normalY =
                    Math.sin(this.hitNormal);
                d = b * this.normalX + a * this.normalY;
                this.reflectionX = b - 2 * this.normalX * d;
                this.reflectionY = a - 2 * this.normalY * d;
                0 < d && (this.hitNormal = f.clampAngle(this.hitNormal + Math.PI), this.normalX = -this.normalX, this.normalY = -this.normalY)
            }
        }
        TestInstanceSegment(b, a, d, c, e) {
            const k = f.rayIntersect(this.x1, this.y1, this.x2, this.y2, a, d, c, e);
            0 <= k && k < this.hitFraction && (this.hitFraction = k, this.hitUid = b.GetUID(), this.hitNormalDx = a - c, this.hitNormalDy = d - e)
        }
        TestInstanceRect(b, a, d, c) {
            const e = a + c.getLeft();
            a +=
                c.getRight();
            const k = d + c.getTop();
            d += c.getBottom();
            this.TestInstanceSegment(b, e, k, a, k);
            this.TestInstanceSegment(b, a, k, a, d);
            this.TestInstanceSegment(b, a, d, e, d);
            this.TestInstanceSegment(b, e, d, e, k)
        }
        TestInstanceQuad(b, a) {
            const d = a.getTlx(),
                c = a.getTly(),
                e = a.getTrx(),
                k = a.getTry(),
                h = a.getBrx(),
                p = a.getBry(),
                n = a.getBlx();
            a = a.getBly();
            this.TestInstanceSegment(b, d, c, e, k);
            this.TestInstanceSegment(b, e, k, h, p);
            this.TestInstanceSegment(b, h, p, n, a);
            this.TestInstanceSegment(b, n, a, d, c)
        }
        TestInstancePoly(b, a, d, c) {
            c = c.pointsArr();
            for (let e = 0, k = c.length; e < k; e += 2) {
                const h = (e + 2) % k;
                this.TestInstanceSegment(b, c[e] + a, c[e + 1] + d, c[h] + a, c[h + 1] + d)
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = new Set("off crop scale-inner scale-outer letterbox-scale letterbox-integer-scale".split(" ")),
        a = new Set(["high", "low"]),
        d = f.New(f.Quad),
        c = f.New(f.Rect);
    f.CanvasManager = class extends f.DefendedBase {
        constructor(e) {
            super();
            this._runtime = e;
            this._webglRenderer = this._canvas = null;
            this._gpuPreference = "high-performance";
            this._canvasCssOffsetY = this._canvasCssOffsetX = this._canvasDeviceHeight = this._canvasDeviceWidth = this._canvasCssHeight = this._canvasCssWidth = this._windowInnerHeight = this._windowInnerWidth =
                0;
            this._enableMipmaps = !0;
            this._drawHeight = this._drawWidth = this._textureAnisotropy = 0;
            this._documentFullscreenMode = this._fullscreenMode = "letterbox-scale";
            this._deviceTransformOffY = this._deviceTransformOffX = 0;
            this._fullscreenScalingQuality = this._wantFullscreenScalingQuality = "high";
            this._isDocumentFullscreen = !1;
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets = new Set;
            this._gpuFrameTimingsBuffer = this._shaderData = null;
            this._gpuTimeEndFrame = this._gpuTimeStartFrame = 0;
            this._gpuCurUtilisation =
                NaN;
            this._gpuLastUtilisation = 0;
            this._layersGpuProfile = new Map;
            this._snapshotFormat = "";
            this._snapshotQuality = 1;
            this._snapshotArea = f.New(f.Rect);
            this._snapshotUrl = "";
            this._snapshotResolve = this._snapshotPromise = null;
            this._loaderStartTime = 0;
            this._rafId = -1;
            this._loadingProgress = 0;
            this._loadingprogress_handler = k => this._loadingProgress = k.progress;
            this._percentText = null;
            this._splashTextures = {
                logo: null,
                powered: null,
                website: null
            };
            this._splashFadeOutStartTime = this._splashFadeInFinishTime = this._splashFrameNumber =
                0;
            this._splashState = "fade-in";
            this._splashDoneResolve = null;
            this._splashDonePromise = new Promise(k => this._splashDoneResolve = k)
        }
        _SetGPUPowerPreference(e) {
            this._gpuPreference = e
        }
        async CreateCanvas(e) {
            this._canvas = e.canvas;
            this._canvas.addEventListener("webglcontextlost", h => this._OnWebGLContextLost(h));
            this._canvas.addEventListener("webglcontextrestored", h => this._OnWebGLContextRestored(h));
            const k = {
                powerPreference: this._gpuPreference,
                enableGpuProfiling: !0,
                depth: this._runtime.Uses3DFeatures()
            };
            "Android" ===
            f.Platform.OS && "Chromium" === f.Platform.BrowserEngine && 75 > f.Platform.BrowserVersionNumber && (console.warn("[Construct 3] Disabling WebGL 2 because this device appears to be affected by crbug.com/934823. Install software updates to avoid this."), k.maxWebGLVersion = 1);
            "standard" === this._runtime.GetCompositingMode() ? k.alpha = !0 : (k.alpha = !1, k.lowLatency = !0);
            this._webglRenderer = f.New(f.Gfx.WebGLRenderer, this._canvas, k);
            await this._webglRenderer.InitState();
            this._webglRenderer.SupportsGPUProfiling() || (this._gpuLastUtilisation =
                NaN);
            this._runtime.AddDOMComponentMessageHandler("runtime", "window-resize", h => this._OnWindowResize(h));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenchange", h => this._OnFullscreenChange(h));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenerror", h => this._OnFullscreenError(h));
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.windowInnerWidth, e.windowInnerHeight, !0);
            this._shaderData = self.C3_Shaders;
            await this._LoadShaderPrograms();
            e = !1;
            for (const h of this._runtime._GetAllEffectLists()) {
                for (const p of h.GetAllEffectTypes()) p._InitRenderer(this._webglRenderer),
                    p.GetShaderProgram().UsesDest() && (e = !0);
                h.UpdateActiveEffects()
            }
            this._runtime._SetUsesAnyBackgroundBlending(e);
            this._webglRenderer.SupportsGPUProfiling() && (this._gpuFrameTimingsBuffer = f.New(f.Gfx.WebGLQueryResultBuffer, this._webglRenderer));
            this._webglRenderer.SetMipmapsEnabled(this._enableMipmaps)
        }
        async _LoadShaderPrograms() {
            if (this._shaderData) {
                var e = [];
                for (const [k, h] of Object.entries(this._shaderData)) {
                    const p = f.Gfx.WebGLShaderProgram.GetDefaultVertexShaderSource();
                    e.push(this._webglRenderer.CreateShaderProgram(h,
                        p, k))
                }
                await Promise.all(e);
                this._webglRenderer.ResetLastProgram();
                this._webglRenderer.SetTextureFillMode()
            }
        }
        Release() {
            this._canvas = this._webglRenderer = this._runtime = null
        }
        _OnWindowResize(e) {
            const k = e.devicePixelRatio;
            this._runtime.IsInWorker() && (self.devicePixelRatio = k);
            this._runtime._SetDevicePixelRatio(k);
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.innerWidth, e.innerHeight);
            this._runtime.UpdateRender()
        }
        _OnFullscreenChange(e) {
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.innerWidth,
                e.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        _OnFullscreenError(e) {
            this._isDocumentFullscreen = !!e.isFullscreen;
            this.SetSize(e.innerWidth, e.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        SetSize(e, k, h = !1) {
            e = Math.floor(e);
            k = Math.floor(k);
            if (0 >= e || 0 >= k) throw Error("invalid size");
            if (this._windowInnerWidth !== e || this._windowInnerHeight !== k || h) {
                this._windowInnerWidth = e;
                this._windowInnerHeight = k;
                h = this.GetCurrentFullscreenMode();
                "letterbox-scale" === h ? this._CalculateLetterboxScale(e, k) : "letterbox-integer-scale" ===
                    h ? this._CalculateLetterboxIntegerScale(e, k) : "off" === h ? this._CalculateFixedSizeCanvas(e, k) : this._CalculateFullsizeCanvas(e, k);
                this._UpdateFullscreenScalingQuality(h);
                this._canvas.width = this._canvasDeviceWidth;
                this._canvas.height = this._canvasDeviceHeight;
                this._runtime.PostComponentMessageToDOM("canvas", "update-size", {
                    marginLeft: this._canvasCssOffsetX,
                    marginTop: this._canvasCssOffsetY,
                    styleWidth: this._canvasCssWidth,
                    styleHeight: this._canvasCssHeight
                });
                this._webglRenderer.SetSize(this._canvasDeviceWidth,
                    this._canvasDeviceHeight, !0);
                for (const p of this._availableAdditionalRenderTargets) this._webglRenderer.DeleteRenderTarget(p);
                f.clearArray(this._availableAdditionalRenderTargets)
            }
        }
        _CalculateLetterboxScale(e, k) {
            const h = this._runtime.GetDevicePixelRatio(),
                p = this._runtime.GetOriginalViewportWidth(),
                n = this._runtime.GetOriginalViewportHeight(),
                m = p / n;
            e / k > m ? (this._canvasCssWidth = Math.round(k * m), this._canvasCssHeight = k, this._canvasCssOffsetX = Math.floor((e - this._canvasCssWidth) / 2), this._canvasCssOffsetY = 0) :
                (this._canvasCssWidth = e, this._canvasCssHeight = Math.round(e / m), this._canvasCssOffsetX = 0, this._canvasCssOffsetY = Math.floor((k - this._canvasCssHeight) / 2));
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * h);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * h);
            this._runtime.SetViewportSize(p, n)
        }
        _CalculateLetterboxIntegerScale(e, k) {
            const h = this._runtime.GetDevicePixelRatio();
            1 !== h && (e += 1, k += 1);
            const p = this._runtime.GetOriginalViewportWidth(),
                n = this._runtime.GetOriginalViewportHeight();
            var m =
                p / n;
            m = e / k > m ? k * m * h / p : e / m * h / n;
            1 < m ? m = Math.floor(m) : 1 > m && (m = 1 / Math.ceil(1 / m));
            this._canvasDeviceWidth = Math.round(p * m);
            this._canvasDeviceHeight = Math.round(n * m);
            this._canvasCssWidth = this._canvasDeviceWidth / h;
            this._canvasCssHeight = this._canvasDeviceHeight / h;
            this._canvasCssOffsetX = Math.max(Math.floor((e - this._canvasCssWidth) / 2), 0);
            this._canvasCssOffsetY = Math.max(Math.floor((k - this._canvasCssHeight) / 2), 0);
            this._runtime.SetViewportSize(p, n)
        }
        _CalculateFullsizeCanvas(e, k) {
            const h = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = e;
            this._canvasCssHeight = k;
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * h);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * h);
            this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            e = this.GetDisplayScale();
            this._runtime.SetViewportSize(this._canvasCssWidth / e, this._canvasCssHeight / e)
        }
        _CalculateFixedSizeCanvas(e, k) {
            const h = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = this._runtime.GetViewportWidth();
            this._canvasCssHeight = this._runtime.GetViewportHeight();
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * h);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * h);
            this.IsDocumentFullscreen() ? (this._canvasCssOffsetX = Math.floor((e - this._canvasCssWidth) / 2), this._canvasCssOffsetY = Math.floor((k - this._canvasCssHeight) / 2)) : this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            this._runtime.SetViewportSize(this._runtime.GetViewportWidth(), this._runtime.GetViewportHeight())
        }
        _UpdateFullscreenScalingQuality(e) {
            if ("high" === this._wantFullscreenScalingQuality) this._drawWidth =
                this._canvasDeviceWidth, this._drawHeight = this._canvasDeviceHeight, this._fullscreenScalingQuality = "high";
            else {
                let h;
                if ("off" === this.GetCurrentFullscreenMode()) {
                    var k = this._runtime.GetViewportWidth();
                    h = this._runtime.GetViewportHeight()
                } else k = this._runtime.GetOriginalViewportWidth(), h = this._runtime.GetOriginalViewportHeight();
                this._canvasDeviceWidth < k && this._canvasDeviceHeight < h ? (this._drawWidth = this._canvasDeviceWidth, this._drawHeight = this._canvasDeviceHeight, this._fullscreenScalingQuality = "high") :
                    (this._drawWidth = k, this._drawHeight = h, this._fullscreenScalingQuality = "low", "scale-inner" === e ? (e = k / h, k = this._windowInnerWidth / this._windowInnerHeight, k < e ? this._drawWidth = this._drawHeight * k : k > e && (this._drawHeight = this._drawWidth / k)) : "scale-outer" === e && (e = k / h, k = this._windowInnerWidth / this._windowInnerHeight, k > e ? this._drawWidth = this._drawHeight * k : k < e && (this._drawHeight = this._drawWidth / k)))
            }
        }
        IsDocumentFullscreen() {
            return this._isDocumentFullscreen
        }
        SetFullscreenMode(e) {
            if (!b.has(e)) throw Error("invalid fullscreen mode");
            this._fullscreenMode = e
        }
        GetFullscreenMode() {
            return this._fullscreenMode
        }
        SetDocumentFullscreenMode(e) {
            if (!b.has(e)) throw Error("invalid fullscreen mode");
            this._documentFullscreenMode = e
        }
        GetDocumentFullscreenMode() {
            return this._documentFullscreenMode
        }
        GetCurrentFullscreenMode() {
            return this.IsDocumentFullscreen() ? this.GetDocumentFullscreenMode() : this.GetFullscreenMode()
        }
        SetFullscreenScalingQuality(e) {
            if (!a.has(e)) throw Error("invalid fullscreen scaling quality");
            this._wantFullscreenScalingQuality = e
        }
        GetSetFullscreenScalingQuality() {
            return this._wantFullscreenScalingQuality
        }
        GetCurrentFullscreenScalingQuality() {
            return this._fullscreenScalingQuality
        }
        static _FullscreenModeNumberToString(e) {
            switch (e) {
                case 0:
                    return "off";
                case 1:
                    return "crop";
                case 2:
                    return "scale-inner";
                case 3:
                    return "scale-outer";
                case 4:
                    return "letterbox-scale";
                case 5:
                    return "letterbox-integer-scale";
                default:
                    throw Error("invalid fullscreen mode");
            }
        }
        GetLastWidth() {
            return this._windowInnerWidth
        }
        GetLastHeight() {
            return this._windowInnerHeight
        }
        GetDrawWidth() {
            return this._drawWidth
        }
        GetDrawHeight() {
            return this._drawHeight
        }
        SetMipmapsEnabled(e) {
            this._enableMipmaps = !!e
        }
        _SetTextureAnisotropy(e) {
            this._textureAnisotropy = e
        }
        GetTextureAnisotropy() {
            return this._textureAnisotropy
        }
        IsWebGLContextLost() {
            return this._webglRenderer.IsContextLost()
        }
        _OnWebGLContextLost(e) {
            console.log("[Construct 3] WebGL context lost");
            e.preventDefault();
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets.clear();
            this._webglRenderer.OnContextLost();
            this._runtime._OnWebGLContextLost()
        }
        async _OnWebGLContextRestored(e) {
            await this._webglRenderer.OnContextRestored();
            await this._LoadShaderPrograms();
            for (const k of this._runtime._GetAllEffectLists())
                for (const h of k.GetAllEffectTypes()) h._InitRenderer(this._webglRenderer);
            await this._runtime._OnWebGLContextRestored();
            console.log("[Construct 3] WebGL context restored")
        }
        GetWebGLRenderer() {
            return this._webglRenderer
        }
        GetRenderScale() {
            return "low" ===
                this._fullscreenScalingQuality ? 1 / this._runtime.GetDevicePixelRatio() : this.GetDisplayScale()
        }
        GetDisplayScale() {
            const e = this.GetCurrentFullscreenMode();
            if ("off" === e || "crop" === e) return 1;
            const k = this._runtime.GetOriginalViewportWidth(),
                h = this._runtime.GetOriginalViewportHeight(),
                p = k / h,
                n = this._canvasDeviceWidth / this._canvasDeviceHeight;
            return "scale-inner" !== e && n > p || "scale-inner" === e && n < p ? this._canvasCssHeight / h : this._canvasCssWidth / k
        }
        SetDeviceTransformOffset(e, k) {
            this._deviceTransformOffX = e;
            this._deviceTransformOffY =
                k
        }
        SetDeviceTransform(e, k, h) {
            k = (k || this._drawWidth) / 2 + this._deviceTransformOffX;
            h = (h || this._drawHeight) / 2 + this._deviceTransformOffY;
            e.SetCameraXYZ(k, h, 100 * this._runtime.GetDevicePixelRatio());
            e.SetLookXYZ(k, h, 0);
            e.ResetModelView();
            e.UpdateModelView()
        }
        SetCssTransform(e) {
            const k = this._canvasCssWidth / 2,
                h = this._canvasCssHeight / 2;
            e.SetCameraXYZ(k, h, 100);
            e.SetLookXYZ(k, h, 0);
            e.ResetModelView();
            e.UpdateModelView()
        }
        GetDeviceWidth() {
            return this._canvasDeviceWidth
        }
        GetDeviceHeight() {
            return this._canvasDeviceHeight
        }
        GetCssWidth() {
            return this._canvasCssWidth
        }
        GetCssHeight() {
            return this._canvasCssHeight
        }
        GetCanvasClientX() {
            return this._canvasCssOffsetX
        }
        GetCanvasClientY() {
            return this._canvasCssOffsetY
        }
        GetAdditionalRenderTarget(e) {
            e.depth =
                this._runtime.Uses3DFeatures();
            const k = this._availableAdditionalRenderTargets,
                h = k.findIndex(n => n.IsCompatibleWithOptions(e));
            let p; - 1 !== h ? (p = k[h], k.splice(h, 1)) : p = this._webglRenderer.CreateRenderTarget(e);
            this._usedAdditionalRenderTargets.add(p);
            return p
        }
        ReleaseAdditionalRenderTarget(e) {
            if (!this._usedAdditionalRenderTargets.has(e)) throw Error("render target not in use");
            this._usedAdditionalRenderTargets.delete(e);
            this._availableAdditionalRenderTargets.push(e)
        }* activeLayersGpuProfiles() {
            for (const e of this._runtime.GetLayoutManager().runningLayouts())
                for (const k of e.GetLayers()) {
                    const h =
                        this._layersGpuProfile.get(k);
                    h && (yield h)
                }
        }
        GetLayerTimingsBuffer(e) {
            if (!this._webglRenderer.SupportsGPUProfiling()) return null;
            let k = this._layersGpuProfile.get(e);
            k || (k = {
                name: e.GetName(),
                timingsBuffer: f.New(f.Gfx.WebGLQueryResultBuffer, this._webglRenderer),
                curUtilisation: 0,
                lastUtilisation: 0
            }, this._layersGpuProfile.set(e, k));
            return k.timingsBuffer
        }
        _Update1sFrameRange() {
            if (this._webglRenderer.SupportsGPUProfiling() && 0 === this._gpuTimeEndFrame) {
                this._gpuTimeEndFrame = this._webglRenderer.GetFrameNumber();
                this._gpuCurUtilisation = NaN;
                for (const e of this.activeLayersGpuProfiles()) e.curUtilisation = NaN
            }
        }
        _UpdateTick() {
            if (this._webglRenderer.SupportsGPUProfiling() && isNaN(this._gpuCurUtilisation) && (this._gpuCurUtilisation = this._gpuFrameTimingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), !isNaN(this._gpuCurUtilisation))) {
                if (this._runtime.IsDebug())
                    for (const e of this.activeLayersGpuProfiles())
                        if (e.curUtilisation = e.timingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame,
                                this._gpuTimeEndFrame), isNaN(e.curUtilisation)) return;
                this._gpuFrameTimingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame);
                this._gpuLastUtilisation = Math.min(this._gpuCurUtilisation, 1);
                if (this._runtime.IsDebug()) {
                    for (const e of this.activeLayersGpuProfiles()) e.timingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame), e.lastUtilisation = Math.min(e.curUtilisation, 1);
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, [...this.activeLayersGpuProfiles()])
                }
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        GetGPUFrameTimingsBuffer() {
            return this._gpuFrameTimingsBuffer
        }
        GetGPUUtilisation() {
            return this._gpuLastUtilisation
        }
        SnapshotCanvas(e, k, h, p, n, m) {
            this._snapshotFormat = e;
            this._snapshotQuality = k;
            this._snapshotArea.setWH(h, p, n, m);
            return this._snapshotPromise ? this._snapshotPromise : this._snapshotPromise = new Promise(t => {
                this._snapshotResolve = t
            })
        }
        _MaybeTakeSnapshot() {
            if (this._snapshotFormat) {
                var e = this._canvas,
                    k = this._snapshotArea,
                    h = f.clamp(Math.floor(k.getLeft()), 0, e.width),
                    p = f.clamp(Math.floor(k.getTop()),
                        0, e.height),
                    n = k.width();
                n = 0 === n ? e.width - h : f.clamp(Math.floor(n), 0, e.width - h);
                k = k.height();
                k = 0 === k ? e.height - p : f.clamp(Math.floor(k), 0, e.height - p);
                (0 !== h || 0 !== p || n !== e.width || k !== e.height) && 0 < n && 0 < k && (e = f.CreateCanvas(n, k), e.getContext("2d").drawImage(this._canvas, h, p, n, k, 0, 0, n, k));
                f.CanvasToBlob(e, this._snapshotFormat, this._snapshotQuality).then(m => {
                    this._snapshotUrl = URL.createObjectURL(m);
                    this._snapshotPromise = null;
                    this._snapshotResolve(this._snapshotUrl)
                });
                this._snapshotFormat = "";
                this._snapshotQuality =
                    1
            }
        }
        GetCanvasSnapshotUrl() {
            return this._snapshotUrl
        }
        InitLoadingScreen(e) {
            2 === e ? (this._percentText = f.New(f.Gfx.RendererText, this._webglRenderer), this._percentText.SetIsAsync(!1), this._percentText.SetFontName("Arial"), this._percentText.SetFontSize(16), this._percentText.SetHorizontalAlignment("center"), this._percentText.SetVerticalAlignment("center"), this._percentText.SetSize(300, 200)) : 0 === e ? (e = this._runtime.GetLoadingLogoAsset()) && e.LoadStaticTexture(this._webglRenderer).catch(k => console.warn("[C3 runtime] Failed to create texture for loading logo: ",
                k)) : 4 === e && (this._LoadSvgSplashImage("splash-images/splash-logo.svg").then(k => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(k) : this._splashTextures.logo = k
            }).catch(k => console.warn("Failed to load splash image: ", k)), this._LoadBitmapSplashImage("splash-images/splash-poweredby-512.png").then(k => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(k) : this._splashTextures.powered = k
            }).catch(k => console.warn("Failed to load splash image: ", k)), this._LoadBitmapSplashImage("splash-images/splash-website-512.png").then(k => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(k) : this._splashTextures.website = k
            }).catch(k => console.warn("Failed to load splash image: ", k)))
        }
        async _LoadSvgSplashImage(e) {
            e = (new URL(e, this._runtime.GetBaseURL())).toString();
            e = await f.FetchBlob(e);
            e = await this._runtime.RasterSvgImage(e, 2048, 2048);
            return await this._webglRenderer.CreateStaticTextureAsync(e, {
                mipMapQuality: "high"
            })
        }
        async _LoadBitmapSplashImage(e) {
            e = (new URL(e, this._runtime.GetBaseURL())).toString();
            e = await f.FetchBlob(e);
            return await this._webglRenderer.CreateStaticTextureAsync(e, {
                mipMapQuality: "high"
            })
        }
        HideCordovaSplashScreen() {
            this._runtime.PostComponentMessageToDOM("runtime", "hide-cordova-splash")
        }
        StartLoadingScreen() {
            this._loaderStartTime = Date.now();
            this._runtime.Dispatcher().addEventListener("loadingprogress", this._loadingprogress_handler);
            this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen());
            3 !== this._runtime.GetLoaderStyle() && this.HideCordovaSplashScreen()
        }
        async EndLoadingScreen() {
            this._loadingProgress =
                1;
            const e = this._runtime.GetLoaderStyle();
            4 === e && await this._splashDonePromise;
            this._splashDonePromise = this._splashDoneResolve = null; - 1 !== this._rafId && (cancelAnimationFrame(this._rafId), this._rafId = -1);
            this._runtime.Dispatcher().removeEventListener("loadingprogress", this._loadingprogress_handler);
            this._loadingprogress_handler = null;
            this._percentText && (this._percentText.Release(), this._percentText = null);
            this._runtime.ReleaseLoadingLogoAsset();
            this._webglRenderer.Start();
            this._splashTextures.logo && (this._webglRenderer.DeleteTexture(this._splashTextures.logo),
                this._splashTextures.logo = null);
            this._splashTextures.powered && (this._webglRenderer.DeleteTexture(this._splashTextures.powered), this._splashTextures.powered = null);
            this._splashTextures.website && (this._webglRenderer.DeleteTexture(this._splashTextures.website), this._splashTextures.website = null);
            this._webglRenderer.ClearRgba(0, 0, 0, 0);
            this._webglRenderer.Finish();
            this._splashState = "done";
            this._gpuTimeStartFrame = this._webglRenderer.GetFrameNumber();
            3 === e && this.HideCordovaSplashScreen()
        }
        _DrawLoadingScreen() {
            if (-1 !==
                this._rafId) {
                var e = this._webglRenderer;
                e.Start();
                this._rafId = -1;
                var k = this._runtime.GetAssetManager().HasHadErrorLoading(),
                    h = this._runtime.GetLoaderStyle();
                3 !== h && (this.SetCssTransform(e), e.ClearRgba(0, 0, 0, 0), e.ResetColor(), e.SetTextureFillMode(), e.SetTexture(null));
                if (0 === h) this._DrawProgressBarAndLogoLoadingScreen(k);
                else if (1 === h) this._DrawProgressBarLoadingScreen(k, 120, 0);
                else if (2 === h) this._DrawPercentTextLoadingScreen(k);
                else if (3 === h) f.noop();
                else if (4 === h) this._DrawSplashLoadingScreen(k);
                else throw Error("invalid loader style");
                e.Finish();
                this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen())
            }
        }
        _DrawPercentTextLoadingScreen(e) {
            e ? this._percentText.SetColorRgb(1, 0, 0) : this._percentText.SetColorRgb(.6, .6, .6);
            this._percentText.SetText(Math.round(100 * this._loadingProgress) + "%");
            e = this._canvasCssWidth / 2;
            const k = this._canvasCssHeight / 2;
            d.setRect(e - 150, k - 100, e + 150, k + 100);
            this._webglRenderer.SetTexture(this._percentText.GetTexture());
            this._webglRenderer.Quad3(d, this._percentText.GetTexRect())
        }
        _DrawProgressBarLoadingScreen(e,
            k, h) {
            const p = this._webglRenderer;
            p.SetColorFillMode();
            e ? p.SetColorRgba(1, 0, 0, 1) : p.SetColorRgba(.118, .565, 1, 1);
            e = this._canvasCssWidth / 2;
            const n = this._canvasCssHeight / 2,
                m = k / 2;
            c.setWH(e - m, n - 4 + h, Math.floor(k * this._loadingProgress), 8);
            p.Rect(c);
            c.setWH(e - m, n - 4 + h, k, 8);
            c.offset(-.5, -.5);
            c.inflate(.5, .5);
            p.SetColorRgba(0, 0, 0, 1);
            p.LineRect2(c);
            c.inflate(1, 1);
            p.SetColorRgba(1, 1, 1, 1);
            p.LineRect2(c)
        }
        _DrawProgressBarAndLogoLoadingScreen(e) {
            var k = this._runtime.GetLoadingLogoAsset();
            if (k)
                if (k = k.GetTexture()) {
                    var h =
                        k.GetWidth(),
                        p = k.GetHeight(),
                        n = this._canvasCssWidth / 2,
                        m = this._canvasCssHeight / 2,
                        t = h / 2;
                    p /= 2;
                    d.setRect(n - t, m - p, n + t, m + p);
                    this._webglRenderer.SetTexture(k);
                    this._webglRenderer.Quad(d);
                    this._DrawProgressBarLoadingScreen(e, h, p + 16)
                } else this._DrawProgressBarLoadingScreen(e, 120, 0);
            else this._DrawProgressBarLoadingScreen(e, 120, 0)
        }
        _DrawSplashLoadingScreen(e) {
            const k = this._webglRenderer,
                h = this._splashTextures.logo,
                p = this._splashTextures.powered,
                n = this._splashTextures.website,
                m = Date.now();
            0 === this._splashFrameNumber &&
                (this._loaderStartTime = m);
            const t = this._runtime.IsPreview() || this._runtime.IsFBInstantAvailable() && !this._runtime.IsCordova(),
                q = t ? 0 : 200,
                u = t ? 0 : 3E3;
            let r = 1;
            "fade-in" === this._splashState ? r = Math.min((m - this._loaderStartTime) / 300, 1) : "fade-out" === this._splashState && (r = Math.max(1 - (m - this._splashFadeOutStartTime) / 300, 0));
            k.SetColorFillMode();
            k.SetColorRgba(.231 * r, .251 * r, .271 * r, r);
            c.set(0, 0, this._canvasCssWidth, this._canvasCssHeight);
            k.Rect(c);
            const x = Math.ceil(this._canvasCssWidth),
                z = Math.ceil(this._canvasCssHeight);
            let C;
            256 < this._canvasCssHeight ? (k.SetColorRgba(.302 * r, .334 * r, .365 * r, r), C = Math.max(.005 * z, 2), c.setWH(0, .8 * z - C / 2, x, C), k.Rect(c), e ? k.SetColorRgba(r, 0, 0, r) : k.SetColorRgba(.161 * r, .953 * r, .816 * r, r), e = x * this._loadingProgress, c.setWH(.5 * x - e / 2, .8 * z - C / 2, e, C), k.Rect(c), k.SetColorRgba(r, r, r, r), k.SetTextureFillMode(), p && (e = 1.5 * f.clamp(.22 * z, 105, .6 * x), C = e / 8, c.setWH(.5 * x - e / 2, .2 * z - C / 2, e, C), k.SetTexture(p), k.Rect(c)), h && (C = e = Math.min(.395 * z, .95 * x), c.setWH(.5 * x - e / 2, .485 * z - C / 2, e, C), k.SetTexture(h), k.Rect(c)), n && (e =
                1.5 * f.clamp(.22 * z, 105, .6 * x), C = e / 8, c.setWH(.5 * x - e / 2, .868 * z - C / 2, e, C), k.SetTexture(n), k.Rect(c))) : (k.SetColorRgba(.302 * r, .334 * r, .365 * r, r), C = Math.max(.005 * z, 2), c.setWH(0, .85 * z - C / 2, x, C), k.Rect(c), e ? k.SetColorRgba(r, 0, 0, r) : k.SetColorRgba(.161 * r, .953 * r, .816 * r, r), e = x * this._loadingProgress, c.setWH(.5 * x - e / 2, .85 * z - C / 2, e, C), k.Rect(c), k.SetColorRgba(r, r, r, r), k.SetTextureFillMode(), h && (C = e = .55 * z, c.setWH(.5 * x - e / 2, .45 * z - C / 2, e, C), k.SetTexture(h), k.Rect(c)));
            this._splashFrameNumber++;
            "fade-in" === this._splashState &&
                300 <= m - this._loaderStartTime && 2 <= this._splashFrameNumber && (this._splashState = "wait", this._splashFadeInFinishTime = m);
            "wait" === this._splashState && m - this._splashFadeInFinishTime >= u && 1 <= this._loadingProgress && (this._splashState = "fade-out", this._splashFadeOutStartTime = m);
            ("fade-out" === this._splashState && m - this._splashFadeOutStartTime >= 300 + q || t && 1 <= this._loadingProgress && 500 > m - this._loaderStartTime) && this._splashDoneResolve()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3Debugger,
        a = {
            messagePort: null,
            baseUrl: "",
            headless: !1,
            hasDom: !0,
            isInWorker: !1,
            useAudio: !0,
            projectData: "",
            exportType: ""
        };
    let d = !0;
    f.Runtime = class extends f.DefendedBase {
        constructor(c) {
            c = Object.assign({}, a, c);
            super();
            this._messagePort = c.messagePort;
            this._baseUrl = c.baseUrl;
            this._isHeadless = !!c.headless;
            this._hasDom = !!c.hasDom;
            this._isInWorker = !!c.isInWorker;
            d = c.ife;
            this._useAudio = !!c.useAudio;
            this._exportType = c.exportType;
            this._isiOSCordova = !!c.isiOSCordova;
            this._isiOSWebView = !!c.isiOSWebView;
            this._isFBInstantAvailable = !!c.isFBInstantAvailable;
            this._opusWasmScriptUrl = c.opusWasmScriptUrl;
            this._opusWasmBinaryUrl = c.opusWasmBinaryUrl;
            this._isDebugging = this._breakpointsEnabled = this._isDebug = !("preview" !== this._exportType || !c.isDebug);
            this._debuggingDisabled = 0;
            this._additionalLoadPromises = [];
            this._additionalCreatePromises = [];
            this._isUsingCreatePromises = !1;
            this._appId = this._projectUniqueId = this._projectVersion = this._projectName = "";
            this._originalViewportHeight = this._originalViewportWidth =
                0;
            this._devicePixelRatio = self.devicePixelRatio;
            this._loaderStyle = this._viewportHeight = this._viewportWidth = this._parallaxYorigin = this._parallaxXorigin = 0;
            this._usesLoaderLayout = !1;
            this._isLoading = !0;
            this._usesAnyBackgroundBlending = !1;
            this._loadingLogoAsset = null;
            this._assetManager = f.New(f.AssetManager, this, c);
            this._layoutManager = f.New(f.LayoutManager, this);
            this._eventSheetManager = f.New(f.EventSheetManager, this);
            this._pluginManager = f.New(f.PluginManager, this);
            this._collisionEngine = f.New(f.CollisionEngine,
                this);
            this._timelineManager = f.New(f.TimelineManager, this);
            this._transitionManager = f.New(f.TransitionManager, this);
            this._allObjectClasses = [];
            this._objectClassesByName = new Map;
            this._objectClassesBySid = new Map;
            this._familyCount = 0;
            this._allContainers = [];
            this._allEffectLists = [];
            this._currentLayoutStack = [];
            this._instancesPendingCreate = [];
            this._instancesPendingDestroy = new Map;
            this._isFlushingPendingInstances = this._hasPendingInstances = !1;
            this._nextUid = this._objectCount = 0;
            this._instancesByUid = new Map;
            this._instancesToReleaseAtEndOfTick =
                new Set;
            this._instancesToReleaseAffectedObjectClasses = new Set;
            this._objectReferenceTable = [];
            this._jsPropNameTable = [];
            this._canvasManager = null;
            this._uses3dFeatures = !1;
            this._framerateMode = "vsync";
            this._compositingMode = "standard";
            this._sampling = "trilinear";
            this._isPixelRoundingEnabled = !1;
            this._needRender = !0;
            this._isPausedOnBlur = this._pauseOnBlur = !1;
            this._tickCallbacks = {
                normal: e => {
                    this._ruafId = this._rafId = -1;
                    this.Tick(e)
                },
                tickOnly: e => {
                    this._ruafId = -1;
                    this.Tick(e, !1, "skip-render")
                },
                renderOnly: () => {
                    this._rafId = -1;
                    this.Render()
                }
            };
            this._ruafId = this._rafId = -1;
            this._execCount = this._tickCountNoSave = this._tickCount = 0;
            this._hasStartedTicking = this._isInTick = this._hasStarted = !1;
            this._isLayoutFirstTick = !0;
            this._suspendCount = 0;
            this._scheduleTriggersThrottle = new f.PromiseThrottle(1);
            this._randomNumberCallback = () => Math.random();
            this._dt = this._dt1 = this._lastTickTime = this._startTime = 0;
            this._timeScale = 1;
            this._minimumFramerate = 30;
            this._gameTime = f.New(f.KahanSum);
            this._wallTime = f.New(f.KahanSum);
            this._fpsFrameCount = -1;
            this._mainThreadTime =
                this._mainThreadTimeCounter = this._fps = this._fpsLastTime = 0;
            this._isLoadingState = !1;
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null;
            this._lastSaveJson = "";
            this._savegamesStorage = this._projectStorage = null;
            this._dispatcher = f.New(f.Event.Dispatcher);
            this._domEventHandlers = new Map;
            this._pendingResponsePromises = new Map;
            this._nextDomResponseId = 0;
            this._isReadyToHandleEvents = this._didRequestDeviceMotionEvent = this._didRequestDeviceOrientationEvent = !1;
            this._waitingToHandleEvents = [];
            this._eventObjects = {
                pretick: f.New(f.Event, "pretick", !1),
                tick: f.New(f.Event, "tick", !1),
                tick2: f.New(f.Event, "tick2", !1),
                instancedestroy: f.New(f.Event, "instancedestroy", !1),
                beforelayoutchange: f.New(f.Event, "beforelayoutchange", !1),
                layoutchange: f.New(f.Event, "layoutchange", !1)
            };
            this._eventObjects.instancedestroy.instance = null;
            this._userScriptDispatcher = f.New(f.Event.Dispatcher);
            this._userScriptEventObjects = null;
            this._behInstsToTick = f.New(f.RedBlackSet, f.BehaviorInstance.SortByTickSequence);
            this._behInstsToPostTick = f.New(f.RedBlackSet,
                f.BehaviorInstance.SortByTickSequence);
            this._behInstsToTick2 = f.New(f.RedBlackSet, f.BehaviorInstance.SortByTickSequence);
            this._jobScheduler = f.New(f.JobSchedulerRuntime, this, c.jobScheduler);
            c.canvas && (this._canvasManager = f.New(f.CanvasManager, this));
            this._messagePort.onmessage = e => this._OnMessageFromDOM(e.data);
            this.AddDOMComponentMessageHandler("runtime", "visibilitychange", e => this._OnVisibilityChange(e));
            this.AddDOMComponentMessageHandler("runtime", "opus-decode", e => this._WasmDecodeWebMOpus(e.arrayBuffer));
            this.AddDOMComponentMessageHandler("runtime", "get-remote-preview-status-info", () => this._GetRemotePreviewStatusInfo());
            this.AddDOMComponentMessageHandler("runtime", "js-invoke-function", e => this._InvokeFunctionFromJS(e));
            this.AddDOMComponentMessageHandler("runtime", "go-to-last-error-script", self.goToLastErrorScript);
            this._dispatcher.addEventListener("window-blur", e => this._OnWindowBlur(e));
            this._dispatcher.addEventListener("window-focus", () => this._OnWindowFocus());
            this._timelineManager.AddRuntimeListeners();
            this._iRuntime = null;
            this._interfaceMap = new WeakMap;
            this._commonScriptInterfaces = {
                keyboard: null,
                mouse: null,
                touch: null
            }
        }
        static Create(c) {
            return f.New(f.Runtime, c)
        }
        Release() {
            f.clearArray(this._allObjectClasses);
            this._objectClassesByName.clear();
            this._objectClassesBySid.clear();
            this._layoutManager.Release();
            this._layoutManager = null;
            this._eventSheetManager.Release();
            this._eventSheetManager = null;
            this._pluginManager.Release();
            this._pluginManager = null;
            this._assetManager.Release();
            this._assetManager = null;
            this._collisionEngine.Release();
            this._collisionEngine = null;
            this._timelineManager.Release();
            this._timelineManager = null;
            this._transitionManager.Release();
            this._transitionManager = null;
            this._canvasManager && (this._canvasManager.Release(), this._canvasManager = null);
            this._dispatcher.Release();
            this._tickEvent = this._dispatcher = null
        }["_OnMessageFromDOM"](c) {
            const e = c.type;
            if ("event" === e) this._OnEventFromDOM(c);
            else if ("result" === e) this._OnResultFromDOM(c);
            else throw Error(`unknown message '${e}'`);
        }
        _OnEventFromDOM(c) {
            if (this._isReadyToHandleEvents) {
                var e =
                    c.component,
                    k = c.handler,
                    h = c.data,
                    p = c.dispatchOpts,
                    n = !(!p || !p.dispatchRuntimeEvent);
                p = !(!p || !p.dispatchUserScriptEvent);
                var m = c.responseId;
                if ("runtime" === e && (n && (c = new f.Event(k), c.data = h, this._dispatcher.dispatchEventAndWaitAsyncSequential(c)), p)) {
                    c = new f.Event(k, !0);
                    for (const [t, q] of Object.entries(h)) c[t] = q;
                    this.DispatchUserScriptEvent(c)
                }
                if (c = this._domEventHandlers.get(e))
                    if (c = c.get(k)) {
                        n = null;
                        try {
                            n = c(h)
                        } catch (t) {
                            console.error(`Exception in '${e}' handler '${k}':`, t);
                            null !== m && this._PostResultToDOM(m, !1, "" + t);
                            return
                        }
                        null !== m && (n && n.then ? n.then(t => this._PostResultToDOM(m, !0, t)).catch(t => {
                            console.error(`Rejection from '${e}' handler '${k}':`, t);
                            this._PostResultToDOM(m, !1, "" + t)
                        }) : this._PostResultToDOM(m, !0, n))
                    } else n || p || console.warn(`[Runtime] No DOM handler '${k}' for component '${e}'`);
                else n || p || console.warn(`[Runtime] No DOM event handlers for component '${e}'`)
            } else this._waitingToHandleEvents.push(c)
        }
        _PostResultToDOM(c, e, k) {
            this._messagePort.postMessage({
                type: "result",
                responseId: c,
                isOk: e,
                result: k
            })
        }
        _OnResultFromDOM(c) {
            const e = c.responseId,
                k = c.isOk;
            c = c.result;
            const h = this._pendingResponsePromises.get(e);
            k ? h.resolve(c) : h.reject(c);
            this._pendingResponsePromises.delete(e)
        }
        AddDOMComponentMessageHandler(c, e, k) {
            let h = this._domEventHandlers.get(c);
            h || (h = new Map, this._domEventHandlers.set(c, h));
            if (h.has(e)) throw Error(`[Runtime] Component '${c}' already has handler '${e}'`);
            h.set(e, k)
        }
        PostComponentMessageToDOM(c, e, k) {
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: e,
                data: k,
                responseId: null
            })
        }
        PostComponentMessageToDOMAsync(c, e, k) {
            const h = this._nextDomResponseId++,
                p = new Promise((n, m) => {
                    this._pendingResponsePromises.set(h, {
                        resolve: n,
                        reject: m
                    })
                });
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: e,
                data: k,
                responseId: h
            });
            return p
        }
        PostToDebugger(c) {
            if (!this.IsDebug()) throw Error("not in debug mode");
            this.PostComponentMessageToDOM("runtime", "post-to-debugger", c)
        }
        async Init(c) {
            this.IsDebug() ? await b.Init(this) : self.C3Debugger && self.C3Debugger.InitPreview(this);
            var [e] = await Promise.all([this._assetManager.FetchJson("data.json"), this._MaybeLoadOpusDecoder(), this._jobScheduler.Init()]);
            this._LoadDataJson(e);
            await this._InitialiseCanvas(c);
            this.IsPreview() || console.info("Made with Construct 3, the game and app creator :: https://www.construct.net");
            e = this.GetWebGLRenderer();
            console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with WebGL ${e.GetWebGLVersionNumber()} [${e.GetUnmaskedRenderer()}] (${e.IsDesynchronized()?"desynchronized":
"standard"} compositing)`);
            e.HasMajorPerformanceCaveat() && console.warn("[C3 runtime] WebGL indicates a major performance caveat. Software rendering may be in use. This can result in significantly degraded performance.");
            this._isReadyToHandleEvents = !0;
            for (const k of this._waitingToHandleEvents) this._OnEventFromDOM(k);
            f.clearArray(this._waitingToHandleEvents);
            this._canvasManager && this._canvasManager.StartLoadingScreen();
            for (const k of c.runOnStartupFunctions) this._additionalLoadPromises.push(this._RunOnStartupFunction(k));
            await Promise.all([this._assetManager.WaitForAllToLoad(), ...this._additionalLoadPromises]);
            f.clearArray(this._additionalLoadPromises);
            if (this._assetManager.HasHadErrorLoading()) this._canvasManager && this._canvasManager.HideCordovaSplashScreen();
            else return this._canvasManager && await this._canvasManager.EndLoadingScreen(), await this._dispatcher.dispatchEventAndWaitAsync(new f.Event("beforeruntimestart")), await this.Start(), this._messagePort.postMessage({
                type: "runtime-ready"
            }), this
        }
        async _RunOnStartupFunction(c) {
            try {
                await c(this._iRuntime)
            } catch (e) {
                console.error("[C3 runtime] Error in runOnStartup function: ",
                    e)
            }
        }
        _LoadDataJson(c) {
            c = c.project;
            this._projectName = c[0];
            this._projectVersion = c[16];
            this._projectUniqueId = c[31];
            this._appId = c[38];
            const e = c[39] || "loading-logo.png";
            this._isPixelRoundingEnabled = !!c[9];
            this._originalViewportWidth = this._viewportWidth = c[10];
            this._originalViewportHeight = this._viewportHeight = c[11];
            this._parallaxXorigin = this._originalViewportWidth / 2;
            this._parallaxYorigin = this._originalViewportHeight / 2;
            this._compositingMode = c[36];
            this._framerateMode = c[37];
            "low-latency" === this._compositingMode &&
                this.IsAndroidWebView() && 77 >= f.Platform.BrowserVersionNumber && (console.warn("[C3 runtime] Desynchronized (low-latency) compositing is enabled, but is disabled in the Android WebView <=77 due to crbug.com/1008842. Reverting to synchronized (standard) compositing."), this._compositingMode = "standard");
            this._uses3dFeatures = !!c[40];
            this._sampling = c[14];
            this._usesLoaderLayout = !!c[18];
            this._loaderStyle = c[19];
            this._nextUid = c[21];
            this._pauseOnBlur = c[22];
            const k = this._assetManager;
            k._SetAudioFiles(c[7], c[25]);
            k._SetMediaSubfolder(c[8]);
            k._SetFontsSubfolder(c[32]);
            k._SetIconsSubfolder(c[28]);
            k._SetWebFonts(c[29]);
            if (0 === this._loaderStyle) {
                let t = "";
                this.IsPreview() ? k._HasLocalUrlBlob(e) && (t = k.GetLocalUrlAsBlobUrl(e)) : t = k.GetIconsSubfolder() + e;
                t && (this._loadingLogoAsset = k.LoadImage({
                    url: t
                }))
            }
            this._canvasManager && (this._canvasManager.SetFullscreenMode(f.CanvasManager._FullscreenModeNumberToString(c[12])), this._canvasManager.SetFullscreenScalingQuality(c[23] ? "high" : "low"), this._canvasManager.SetMipmapsEnabled(0 !==
                c[24]), this._canvasManager._SetGPUPowerPreference(c[34]), this._canvasManager._SetTextureAnisotropy(c[41]));
            this._pluginManager.CreateSystemPlugin();
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            for (var h of c[2]) this._pluginManager.CreatePlugin(h);
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            this._LoadJsPropNameTable();
            for (var p of c[3]) h = f.ObjectClass.Create(this, this._allObjectClasses.length, p), this._allObjectClasses.push(h), this._objectClassesByName.set(h.GetName().toLowerCase(),
                h), this._objectClassesBySid.set(h.GetSID(), h);
            for (const t of c[4]) this._allObjectClasses[t[0]]._LoadFamily(t);
            for (var n of c[27]) p = n.map(t => this._allObjectClasses[t]), this._allContainers.push(f.New(f.Container, this, p));
            for (const t of this._allObjectClasses) t._OnAfterCreate();
            for (const t of c[5]) this._layoutManager.Create(t);
            (n = c[1]) && (n = this._layoutManager.GetLayoutByName(n)) && this._layoutManager.SetFirstLayout(n);
            for (var m of c[33]) this._timelineManager.Create(m);
            for (const t of c[35]) this._transitionManager.Create(t);
            this._InitScriptInterfaces();
            for (const t of c[6]) this._eventSheetManager.Create(t);
            this._eventSheetManager._PostInit();
            this._InitGlobalVariableScriptInterface();
            f.clearArray(this._objectReferenceTable);
            this.FlushPendingInstances();
            m = "any";
            c = c[20];
            1 === c ? m = "portrait" : 2 === c && (m = "landscape");
            this.PostComponentMessageToDOM("runtime", "set-target-orientation", {
                targetOrientation: m
            })
        }
        GetLoaderStyle() {
            return this._loaderStyle
        }
        IsFBInstantAvailable() {
            return this._isFBInstantAvailable
        }
        IsLoading() {
            return this._isLoading
        }
        AddLoadPromise(c) {
            this._additionalLoadPromises.push(c)
        }
        SetUsingCreatePromises(c) {
            this._isUsingCreatePromises = !!c
        }
        AddCreatePromise(c) {
            this._isUsingCreatePromises && this._additionalCreatePromises.push(c)
        }
        GetCreatePromises() {
            return this._additionalCreatePromises
        }
        _GetNextFamilyIndex() {
            return this._familyCount++
        }
        GetFamilyCount() {
            return this._familyCount
        }
        _AddEffectList(c) {
            this._allEffectLists.push(c)
        }
        _GetAllEffectLists() {
            return this._allEffectLists
        }
        async _InitialiseCanvas(c) {
            this._canvasManager && (await this._canvasManager.CreateCanvas(c), this._canvasManager.InitLoadingScreen(this._loaderStyle))
        }
        async _MaybeLoadOpusDecoder() {
            if (!this._assetManager.IsAudioFormatSupported("audio/webm; codecs=opus")) {
                var c =
                    null;
                try {
                    c = this.IsiOSCordova() && "file:" === location.protocol ? await this._assetManager.CordovaFetchLocalFileAsArrayBuffer(this._opusWasmBinaryUrl) : await this._assetManager.FetchArrayBuffer(this._opusWasmBinaryUrl)
                } catch (e) {
                    console.info("Failed to fetch Opus decoder WASM; assuming project has no Opus audio.", e);
                    return
                }
                c ? this.AddJobWorkerBuffer(c, "opus-decoder-wasm") : this.AddJobWorkerBlob(null, "opus-decoder-wasm");
                await this.AddJobWorkerScripts([this._opusWasmScriptUrl])
            }
        }
        async _WasmDecodeWebMOpus(c) {
            return await this.AddJob("OpusDecode", {
                arrayBuffer: c
            }, [c])
        }
        async Start() {
            this._hasStarted = !0;
            this._startTime = Date.now();
            if (this._usesLoaderLayout) {
                for (var c of this._allObjectClasses) c.IsFamily() || c.IsOnLoaderLayout() || !c.IsWorldType() || c.OnCreate();
                this._assetManager.WaitForAllToLoad().then(() => {
                    this._isLoading = !1;
                    this._OnLoadFinished()
                })
            } else this._isLoading = !1;
            this._assetManager.SetInitialLoadFinished();
            this.IsDebug() && b.RuntimeInit(d);
            for (const e of this._layoutManager.GetAllLayouts()) e._CreateGlobalNonWorlds();
            c = this._layoutManager.GetFirstLayout();
            await c._Load(null, this.GetWebGLRenderer());
            await c._StartRunning(!0);
            this._fpsLastTime = performance.now();
            this._usesLoaderLayout || this._OnLoadFinished();
            (await this.PostComponentMessageToDOMAsync("runtime", "before-start-ticking")).isSuspended ? this._suspendCount++ : this.Tick()
        }
        _OnLoadFinished() {
            this.Trigger(f.Plugins.System.Cnds.OnLoadFinished, null, null);
            this.PostComponentMessageToDOM("runtime", "register-sw")
        }
        GetObjectReference(c) {
            c = Math.floor(c);
            const e = this._objectReferenceTable;
            if (0 > c || c >= e.length) throw Error("invalid object reference");
            return e[c]
        }
        _LoadJsPropNameTable() {
            for (const c of self.C3_JsPropNameTable) {
                const e = f.first(Object.keys(c));
                this._jsPropNameTable.push(e)
            }
        }
        GetJsPropName(c) {
            c = Math.floor(c);
            const e = this._jsPropNameTable;
            if (0 > c || c >= e.length) throw Error("invalid prop reference");
            return e[c]
        }
        HasDOM() {
            return this._hasDom
        }
        IsHeadless() {
            return this._isHeadless
        }
        IsInWorker() {
            return this._isInWorker
        }
        GetBaseURL() {
            return this._baseUrl
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetEventStack() {
            return this._eventSheetManager.GetEventStack()
        }
        GetCurrentEventStackFrame() {
            return this._eventSheetManager.GetCurrentEventStackFrame()
        }
        GetCurrentEvent() {
            return this._eventSheetManager.GetCurrentEvent()
        }
        GetCurrentCondition() {
            return this._eventSheetManager.GetCurrentCondition()
        }
        IsCurrentConditionFirst() {
            return 0 ===
                this.GetCurrentEventStackFrame().GetConditionIndex()
        }
        GetCurrentAction() {
            return this._eventSheetManager.GetCurrentAction()
        }
        GetPluginManager() {
            return this._pluginManager
        }
        GetSystemPlugin() {
            return this._pluginManager.GetSystemPlugin()
        }
        GetObjectClassByIndex(c) {
            c = Math.floor(c);
            if (0 > c || c >= this._allObjectClasses.length) throw new RangeError("invalid index");
            return this._allObjectClasses[c]
        }
        GetObjectClassByName(c) {
            return this._objectClassesByName.get(c.toLowerCase()) || null
        }
        GetObjectClassBySID(c) {
            return this._objectClassesBySid.get(c) ||
                null
        }
        GetSingleGlobalObjectClassByCtor(c) {
            return (c = this._pluginManager.GetPluginByConstructorFunction(c)) ? c.GetSingleGlobalObjectClass() : null
        }
        GetAllObjectClasses() {
            return this._allObjectClasses
        }* allInstances() {
            for (const c of this._allObjectClasses) c.IsFamily() || (yield* c.instances())
        }
        Dispatcher() {
            return this._dispatcher
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(c) {
            c.runtime = this.GetIRuntime();
            const e = this.IsDebug() && !this._eventSheetManager.IsInEventEngine();
            e &&
                b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(c);
            e && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(c) {
            c.runtime = this.GetIRuntime();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(c)
        }
        GetOriginalViewportWidth() {
            return this._originalViewportWidth
        }
        GetOriginalViewportHeight() {
            return this._originalViewportHeight
        }
        SetOriginalViewportSize(c, e) {
            this._originalViewportWidth = c;
            this._originalViewportHeight = e
        }
        GetViewportWidth() {
            return this._viewportWidth
        }
        GetViewportHeight() {
            return this._viewportHeight
        }
        SetViewportSize(c,
            e) {
            this._viewportWidth = c;
            this._viewportHeight = e
        }
        _SetDevicePixelRatio(c) {
            this._devicePixelRatio = c
        }
        GetDevicePixelRatio() {
            return this._devicePixelRatio
        }
        GetParallaxXOrigin() {
            return this._parallaxXorigin
        }
        GetParallaxYOrigin() {
            return this._parallaxYorigin
        }
        GetCanvasManager() {
            return this._canvasManager
        }
        GetDrawWidth() {
            return this._canvasManager ? this._canvasManager.GetDrawWidth() : this._viewportWidth
        }
        GetDrawHeight() {
            return this._canvasManager ? this._canvasManager.GetDrawHeight() : this._viewportHeight
        }
        GetRenderScale() {
            return this._canvasManager ?
                this._canvasManager.GetRenderScale() : 1
        }
        GetDisplayScale() {
            return this._canvasManager ? this._canvasManager.GetDisplayScale() : 1
        }
        GetCanvasClientX() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientX() : 0
        }
        GetCanvasClientY() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientY() : 0
        }
        GetCanvasCssWidth() {
            return this._canvasManager ? this._canvasManager.GetCssWidth() : 0
        }
        GetCanvasCssHeight() {
            return this._canvasManager ? this._canvasManager.GetCssHeight() : 0
        }
        GetFullscreenMode() {
            return this._canvasManager ?
                this._canvasManager.GetFullscreenMode() : "off"
        }
        GetAdditionalRenderTarget(c) {
            return this._canvasManager ? this._canvasManager.GetAdditionalRenderTarget(c) : null
        }
        ReleaseAdditionalRenderTarget(c) {
            this._canvasManager && this._canvasManager.ReleaseAdditionalRenderTarget(c)
        }
        _SetUsesAnyBackgroundBlending(c) {
            this._usesAnyBackgroundBlending = !!c
        }
        UsesAnyBackgroundBlending() {
            return this._usesAnyBackgroundBlending
        }
        GetGPUUtilisation() {
            return this._canvasManager ? this._canvasManager.GetGPUUtilisation() : NaN
        }
        IsLinearSampling() {
            return "nearest" !==
                this.GetSampling()
        }
        GetFramerateMode() {
            return this._framerateMode
        }
        GetCompositingMode() {
            return this._compositingMode
        }
        GetSampling() {
            return this._sampling
        }
        UsesLoaderLayout() {
            return this._usesLoaderLayout
        }
        GetLoadingLogoAsset() {
            return this._loadingLogoAsset
        }
        ReleaseLoadingLogoAsset() {
            this._loadingLogoAsset && (this._loadingLogoAsset.Release(), this._loadingLogoAsset = null)
        }
        GetLayoutManager() {
            return this._layoutManager
        }
        GetMainRunningLayout() {
            return this._layoutManager.GetMainRunningLayout()
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetTransitionManager() {
            return this._transitionManager
        }
        GetAssetManager() {
            return this._assetManager
        }
        LoadImage(c) {
            return this._assetManager.LoadImage(c)
        }
        CreateInstance(c,
            e, k, h, p) {
            return this.CreateInstanceFromData(c, e, !1, k, h, !1, p)
        }
        CreateInstanceFromData(c, e, k, h, p, n, m) {
            var t = null;
            let q = null;
            if (c instanceof f.ObjectClass) {
                q = c;
                if (q.IsFamily()) {
                    c = q.GetFamilyMembers();
                    var u = Math.floor(this.Random() * c.length);
                    q = c[u]
                }
                t = q.GetDefaultInstanceData()
            } else t = c, q = this.GetObjectClassByIndex(t[1]);
            var r = q.GetPlugin().IsWorldType();
            if (this._isLoading && r && !q.IsOnLoaderLayout()) return null;
            const x = e;
            r || (e = null);
            var z = k && !n && t && !this._instancesByUid.has(t[2]) ? t[2] : this._nextUid++;
            u =
                t ? t[0] : null;
            c = f.New(f.Instance, {
                runtime: this,
                objectType: q,
                layer: e,
                worldData: u,
                instVarData: t ? t[3] : null,
                uid: z
            });
            this._instancesByUid.set(z, c);
            z = null;
            r && (z = c.GetWorldInfo(), "undefined" !== typeof h && "undefined" !== typeof p && (z.SetX(h), z.SetY(p)), q._SetAnyCollisionCellChanged(!0));
            e && (m || e._AddInstance(c, !0), 1 === e.GetParallaxX() && 1 === e.GetParallaxY() || q._SetAnyInstanceParallaxed(!0), e.GetLayout().MaybeLoadTexturesFor(q));
            this._objectCount++;
            if (q.IsInContainer() && !k && !n) {
                for (var C of q.GetContainer().objectTypes()) {
                    if (C ===
                        q) continue;
                    const w = this.CreateInstanceFromData(C, x, !1, z ? z.GetX() : h, z ? z.GetY() : p, !0, !1);
                    c._AddSibling(w)
                }
                for (const w of c.siblings()) {
                    w._AddSibling(c);
                    for (const B of c.siblings()) w !== B && w._AddSibling(B)
                }
            }
            r && !k && m && this._CreateChildInstancesFromData(c, u, z, e, h, p);
            if (q.IsInContainer() && !k && !n && m)
                for (const w of c.siblings()) k = w.GetWorldInfo(), C = w.GetObjectClass().GetDefaultInstanceData()[0], this._CreateChildInstancesFromData(w, C, k, e, k.GetX(), k.GetY());
            !n && m && ("undefined" === typeof h && (h = u[0]), "undefined" ===
                typeof p && (p = u[1]), e = z.GetTopParent(), h = h - z.GetX() + e.GetX(), p = p - z.GetY() + e.GetY(), e.SetXY(h, p));
            q._SetIIDsStale();
            p = t ? f.cloneArray(t[5]) : null;
            t = t ? t[4].map(w => f.cloneArray(w)) : null;
            (r = r && u && u[13]) && c._SetHasTilemap();
            c._CreateSdkInstance(p, t);
            r && (u = u[13], c.GetSdkInstance().LoadTilemapData(u[2], u[0], u[1]));
            this._instancesPendingCreate.push(c);
            this._hasPendingInstances = !0;
            this.IsDebug() && b.InstanceCreated(c);
            return c
        }
        _CreateChildInstancesFromData(c, e, k, h, p, n) {
            var m = k.GetSceneGraphZIndexExportData(),
                t = k.GetSceneGraphChildrenExportData();
            c.GetWorldInfo().SetSceneGraphZIndex(m);
            if (t) {
                "undefined" === typeof p && (p = e[0]);
                "undefined" === typeof n && (n = e[1]);
                m = new Set;
                k = e[0];
                e = e[1];
                for (const z of t) {
                    var q = z[1],
                        u = z[2];
                    t = z[3];
                    var r = !!z[4];
                    const C = z[5];
                    u = this._layoutManager.GetLayoutBySID(z[0]).GetLayer(q).GetInitialInstanceData(u);
                    q = this.GetObjectClassByIndex(u[1]);
                    var x = c.HasSibling(q);
                    const w = m.has(q);
                    x && !w && r ? (r = c.GetSibling(q), x = p + u[0][0] - k, u = n + u[0][1] - e, r.GetWorldInfo().SetXY(x, u), r.GetWorldInfo().SetSceneGraphZIndex(C),
                        c.AddChild(r, {
                            transformX: !!(t >> 0 & 1),
                            transformY: !!(t >> 1 & 1),
                            transformWidth: !!(t >> 2 & 1),
                            transformHeight: !!(t >> 3 & 1),
                            transformAngle: !!(t >> 4 & 1),
                            destroyWithParent: !!(t >> 5 & 1),
                            transformZElevation: !!(t >> 6 & 1)
                        }), m.add(q)) : (q = this.CreateInstanceFromData(u, h, !1, p + u[0][0] - k, n + u[0][1] - e, !1, !0), q.GetWorldInfo().SetSceneGraphZIndex(C), c.AddChild(q, {
                        transformX: !!(t >> 0 & 1),
                        transformY: !!(t >> 1 & 1),
                        transformWidth: !!(t >> 2 & 1),
                        transformHeight: !!(t >> 3 & 1),
                        transformAngle: !!(t >> 4 & 1),
                        destroyWithParent: !!(t >> 5 & 1),
                        transformZElevation: !!(t >>
                            6 & 1)
                    }))
                }
            }
        }
        DestroyInstance(c) {
            if (!this._instancesToReleaseAtEndOfTick.has(c)) {
                var e = c.GetObjectClass(),
                    k = this._instancesPendingDestroy.get(e);
                if (k) {
                    if (k.has(c)) return;
                    k.add(c)
                } else k = new Set, k.add(c), this._instancesPendingDestroy.set(e, k);
                this.IsDebug() && b.InstanceDestroyed(c);
                c._MarkDestroyed();
                this._hasPendingInstances = !0;
                if (c.IsInContainer())
                    for (const h of c.siblings()) this.DestroyInstance(h);
                for (const h of c.children()) h.GetDestroyWithParent() && this.DestroyInstance(h);
                this._layoutManager.IsEndingLayout() ||
                    this._isLoadingState || (e = this.GetEventSheetManager(), e.BlockFlushingInstances(!0), c._TriggerOnDestroyed(), e.BlockFlushingInstances(!1));
                c._FireDestroyedScriptEvents(this._layoutManager.IsEndingLayout())
            }
        }
        FlushPendingInstances() {
            this._hasPendingInstances && (this._isFlushingPendingInstances = !0, this._FlushInstancesPendingCreate(), this._FlushInstancesPendingDestroy(), this._hasPendingInstances = this._isFlushingPendingInstances = !1, this.UpdateRender())
        }
        _FlushInstancesPendingCreate() {
            for (const c of this._instancesPendingCreate) {
                const e =
                    c.GetObjectClass();
                e._AddInstance(c);
                for (const k of e.GetFamilies()) k._AddInstance(c), k._SetIIDsStale()
            }
            f.clearArray(this._instancesPendingCreate)
        }
        _FlushInstancesPendingDestroy() {
            this._dispatcher.SetDelayRemoveEventsEnabled(!0);
            for (const [c, e] of this._instancesPendingDestroy.entries()) this._FlushInstancesPendingDestroyForObjectClass(c, e), e.clear();
            this._instancesPendingDestroy.clear();
            this._dispatcher.SetDelayRemoveEventsEnabled(!1)
        }
        _FlushInstancesPendingDestroyForObjectClass(c, e) {
            for (const h of e) {
                var k =
                    this._eventObjects.instancedestroy;
                k.instance = h;
                this._dispatcher.dispatchEvent(k);
                this._instancesByUid.delete(h.GetUID());
                if (k = h.GetWorldInfo()) k._RemoveFromCollisionCells(), k._RemoveFromRenderCells(), k._MarkDestroyed();
                this._instancesToReleaseAtEndOfTick.add(h);
                this._objectCount--
            }
            f.arrayRemoveAllInSet(c.GetInstances(), e);
            c._SetIIDsStale();
            this._instancesToReleaseAffectedObjectClasses.add(c);
            0 === c.GetInstances().length && c._SetAnyInstanceParallaxed(!1);
            for (const h of c.GetFamilies()) f.arrayRemoveAllInSet(h.GetInstances(),
                e), h._SetIIDsStale(), this._instancesToReleaseAffectedObjectClasses.add(h);
            if (c.GetPlugin().IsWorldType()) {
                c = new Set([...e].map(h => h.GetWorldInfo().GetLayer()));
                for (const h of c) h._RemoveAllInstancesInSet(e)
            }
        }
        _GetInstancesPendingCreate() {
            return this._instancesPendingCreate
        }
        _GetNewUID() {
            return this._nextUid++
        }
        _MapInstanceByUID(c, e) {
            this._instancesByUid.set(c, e)
        }
        _OnWebGLContextLost() {
            this._dispatcher.dispatchEvent(f.New(f.Event, "webglcontextlost"));
            this.SetSuspended(!0);
            for (var c of this._allObjectClasses) !c.IsFamily() &&
                c.HasLoadedTextures() && c.ReleaseTextures();
            (c = this.GetMainRunningLayout()) && c._OnWebGLContextLost();
            f.ImageInfo.OnWebGLContextLost();
            f.ImageAsset.OnWebGLContextLost()
        }
        async _OnWebGLContextRestored() {
            await this.GetMainRunningLayout()._Load(null, this.GetWebGLRenderer());
            this._dispatcher.dispatchEvent(f.New(f.Event, "webglcontextrestored"));
            this.SetSuspended(!1);
            this.UpdateRender()
        }
        _OnVisibilityChange(c) {
            this.SetSuspended(c.hidden)
        }
        _OnWindowBlur(c) {
            this.IsPreview() && this._pauseOnBlur && !f.Platform.IsMobile &&
                !c.data.parentHasFocus && (this.SetSuspended(!0), this._isPausedOnBlur = !0)
        }
        _OnWindowFocus() {
            this._isPausedOnBlur && (this.SetSuspended(!1), this._isPausedOnBlur = !1)
        }
        _RequestAnimationFrame() {
            const c = this._tickCallbacks;
            "vsync" === this._framerateMode ? -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.normal)) : "unlimited-tick" === this._framerateMode ? (-1 === this._ruafId && (this._ruafId = f.RequestUnlimitedAnimationFrame(c.tickOnly)), -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.renderOnly))) :
                -1 === this._ruafId && (this._ruafId = f.RequestUnlimitedAnimationFrame(c.normal))
        }
        _CancelAnimationFrame() {
            -1 !== this._rafId && (self.cancelAnimationFrame(this._rafId), this._rafId = -1); - 1 !== this._ruafId && (f.CancelUnlimitedAnimationFrame(this._ruafId), this._ruafId = -1)
        }
        IsSuspended() {
            return 0 < this._suspendCount
        }
        SetSuspended(c) {
            var e = this.IsSuspended();
            this._suspendCount += c ? 1 : -1;
            0 > this._suspendCount && (this._suspendCount = 0);
            c = this.IsSuspended();
            !e && c ? (console.log("[Construct 3] Suspending"), this._CancelAnimationFrame(),
                this._dispatcher.dispatchEvent(f.New(f.Event, "suspend")), this.Trigger(f.Plugins.System.Cnds.OnSuspend, null, null)) : e && !c && (console.log("[Construct 3] Resuming"), this._fpsLastTime = this._lastTickTime = e = performance.now(), this._mainThreadTimeCounter = this._mainThreadTime = this._fps = this._fpsFrameCount = 0, this._dispatcher.dispatchEvent(f.New(f.Event, "resume")), this.Trigger(f.Plugins.System.Cnds.OnResume, null, null), this.HitBreakpoint() || this.Tick(e))
        }
        _AddBehInstToTick(c) {
            this._behInstsToTick.Add(c)
        }
        _AddBehInstToPostTick(c) {
            this._behInstsToPostTick.Add(c)
        }
        _AddBehInstToTick2(c) {
            this._behInstsToTick2.Add(c)
        }
        _RemoveBehInstToTick(c) {
            this._behInstsToTick.Remove(c)
        }
        _RemoveBehInstToPostTick(c) {
            this._behInstsToPostTick.Remove(c)
        }
        _RemoveBehInstToTick2(c) {
            this._behInstsToTick2.Remove(c)
        }
        _BehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick) c.Tick();
            this._behInstsToTick.SetQueueingEnabled(!1)
        }
        _BehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToPostTick) c.PostTick();
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }
        _BehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick2) c.Tick2();
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick) {
                const e =
                    c.Tick();
                f.IsIterator(e) && (yield* e)
            }
            this._behInstsToTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for (const c of this._behInstsToPostTick) {
                const e = c.PostTick();
                f.IsIterator(e) && (yield* e)
            }
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for (const c of this._behInstsToTick2) {
                const e = c.Tick2();
                f.IsIterator(e) && (yield* e)
            }
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }
        async Tick(c, e,
            k) {
            this._hasStartedTicking = !0;
            const h = "background-wake" === k;
            k = "background-wake" !== k && "skip-render" !== k;
            this._hasStarted && (!this.IsSuspended() || e || h) && (e = performance.now(), this._isInTick = !0, c || (c = e), this._MeasureDt(c), c = this.Step_BeforePreTick(), this.IsDebugging() && await c, c = this._dispatcher.dispatchEventAndWait_AsyncOptional(this._eventObjects.pretick), c instanceof Promise && await c, c = this.Step_AfterPreTick(), this.IsDebugging() && await c, this._NeedsHandleSaveOrLoad() && await this._HandleSaveOrLoad(),
                this.GetLayoutManager().IsPendingChangeMainLayout() && await this._MaybeChangeLayout(), c = this.Step_RunEventsEtc(), this.IsDebugging() && await c, k && this.Render(), this.IsSuspended() || h || this._RequestAnimationFrame(), this._tickCount++, this._tickCountNoSave++, this._execCount++, this._isInTick = !1, this._mainThreadTimeCounter += performance.now() - e)
        }
        async Step_BeforePreTick() {
            const c = this._eventSheetManager,
                e = this.IsDebug();
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0);
            this.PushCurrentLayout(this.GetMainRunningLayout());
            e && b.StartMeasuringTime();
            this.IsDebugging() ? await c.DebugRunScheduledWaits() : c.RunScheduledWaits();
            e && b.AddEventsTime();
            this.PopCurrentLayout();
            c.BlockFlushingInstances(!1);
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0)
        }
        async Step_AfterPreTick() {
            const c = this.IsDebug(),
                e = this.IsDebugging(),
                k = this._dispatcher,
                h = this._eventObjects,
                p = this._userScriptEventObjects;
            c && b.StartMeasuringTime();
            e ? await this.DebugIterateAndBreak(this._DebugBehaviorTick()) : this._BehaviorTick();
            e ? await this.DebugIterateAndBreak(this._DebugBehaviorPostTick()) :
                this._BehaviorPostTick();
            c && b.AddBehaviorTickTime();
            c && b.StartMeasuringTime();
            e ? await this.DebugFireGeneratorEventAndBreak(h.tick) : k.dispatchEvent(h.tick);
            c && b.AddPluginTickTime();
            this._eventSheetManager.BlockFlushingInstances(!1);
            this.DispatchUserScriptEvent(p.tick)
        }
        async Step_RunEventsEtc() {
            const c = this._eventSheetManager,
                e = this._dispatcher,
                k = this._eventObjects,
                h = this.IsDebug(),
                p = this.IsDebugging();
            h && b.StartMeasuringTime();
            p ? await c.DebugRunEvents(this._layoutManager) : c.RunEvents(this._layoutManager);
            h && b.AddEventsTime();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            this._isLayoutFirstTick = !1;
            c.BlockFlushingInstances(!0);
            h && b.StartMeasuringTime();
            p ? await this.DebugIterateAndBreak(this._DebugBehaviorTick2()) : this._BehaviorTick2();
            h && b.AddBehaviorTickTime();
            h && b.StartMeasuringTime();
            p ? await this.DebugFireGeneratorEventAndBreak(k.tick2) : e.dispatchEvent(k.tick2);
            h && b.AddPluginTickTime();
            c.BlockFlushingInstances(!1);
            p && await c.RunQueuedDebugTriggersAsync()
        }
        _ReleaseInstancesAtEndOfTick() {
            if (0 !==
                this._instancesToReleaseAtEndOfTick.size) {
                var c = this._dispatcher;
                c.SetDelayRemoveEventsEnabled(!0);
                for (const e of this._instancesToReleaseAffectedObjectClasses) e.GetSolStack().RemoveInstances(this._instancesToReleaseAtEndOfTick);
                this._instancesToReleaseAffectedObjectClasses.clear();
                this._eventSheetManager.RemoveInstancesFromScheduledWaits(this._instancesToReleaseAtEndOfTick);
                for (const e of this._instancesToReleaseAtEndOfTick) e.Release();
                this._instancesToReleaseAtEndOfTick.clear();
                c.SetDelayRemoveEventsEnabled(!1)
            }
        }
        async _MaybeChangeLayout() {
            const c =
                this.GetLayoutManager();
            let e = 0;
            for (; c.IsPendingChangeMainLayout() && 10 > e++;) await this._DoChangeLayout(c.GetPendingChangeMainLayout())
        }
        _MeasureDt(c) {
            if (0 !== this._lastTickTime) {
                this._dt1 = Math.max(c - this._lastTickTime, 0) / 1E3;
                const e = 1 / this._minimumFramerate;
                .5 < this._dt1 ? this._dt1 = 0 : this._dt1 > e && (this._dt1 = e)
            }
            this._lastTickTime = c;
            this._dt = this._dt1 * this._timeScale;
            this._gameTime.Add(this._dt);
            this._wallTime.Add(this._dt1);
            this._canvasManager && this._canvasManager._UpdateTick();
            1E3 <= c - this._fpsLastTime &&
                (this._fpsLastTime += 1E3, 1E3 <= c - this._fpsLastTime && (this._fpsLastTime = c), this._fps = this._fpsFrameCount, this._fpsFrameCount = 0, this._mainThreadTime = Math.min(this._mainThreadTimeCounter / 1E3, 1), this._mainThreadTimeCounter = 0, this._canvasManager && this._canvasManager._Update1sFrameRange(), this._collisionEngine._Update1sStats(), this.IsDebug() && b.Update1sPerfStats());
            this._fpsFrameCount++
        }
        async _DoChangeLayout(c) {
            const e = this._dispatcher,
                k = this.GetLayoutManager().GetMainRunningLayout();
            await k._StopRunning();
            k._Unload(c, this.GetWebGLRenderer());
            k === c && this._eventSheetManager.ClearAllScheduledWaits();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            e.dispatchEvent(this._eventObjects.beforelayoutchange);
            f.Asyncify.SetHighThroughputMode(!0);
            await c._Load(k, this.GetWebGLRenderer());
            f.Asyncify.SetHighThroughputMode(!1);
            await c._StartRunning(!1);
            e.dispatchEvent(this._eventObjects.layoutchange);
            this.UpdateRender();
            this._isLayoutFirstTick = !0;
            this.FlushPendingInstances()
        }
        UpdateRender() {
            this._needRender = !0
        }
        GetWebGLRenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGLRenderer() : null
        }
        GetRenderer() {
            return this.GetWebGLRenderer()
        }
        Render() {
            const c = this._canvasManager;
            if (c && !c.IsWebGLContextLost()) {
                var e = this.GetWebGLRenderer();
                e.Start();
                e.CheckForQueryResults();
                if (this._needRender) {
                    var k = this.IsDebug();
                    k && b.StartMeasuringTime();
                    this._needRender = !1;
                    var h = null;
                    e.SupportsGPUProfiling() && (h = this._canvasManager.GetGPUFrameTimingsBuffer().AddTimeElapsedQuery(), e.StartQuery(h));
                    this.Uses3DFeatures() &&
                        "low" === c.GetCurrentFullscreenScalingQuality() ? e.SetFixedSizeDepthBuffer(c.GetDrawWidth(), c.GetDrawHeight()) : e.SetAutoSizeDepthBuffer();
                    e.SetTextureFillMode();
                    e.SetAlphaBlend();
                    e.SetColorRgba(1, 1, 1, 1);
                    e.SetRenderTarget(null);
                    e.SetTexture(null);
                    e.SetDepthEnabled(this.Uses3DFeatures());
                    this._layoutManager.GetMainRunningLayout().Draw(e);
                    h && e.EndQuery(h);
                    e.Finish();
                    k && (b.AddDrawCallsTime(), b.UpdateInspectHighlight());
                    c && c._MaybeTakeSnapshot()
                } else e.IncrementFrameNumber()
            }
        }
        Trigger(c, e, k) {
            if (!this._hasStarted) return !1;
            var h = !this._isInTick && !this._eventSheetManager.IsInTrigger();
            let p = 0;
            h && (p = performance.now());
            const n = this.IsDebug();
            n && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._Trigger(this._layoutManager, c, e, k);
            h && (h = performance.now() - p, this._mainThreadTimeCounter += h, n && b.AddTriggersTime(h));
            n && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugTrigger(c, e, k) {
            if (!this.IsDebug()) return this.Trigger(c, e, k);
            if (this.HitBreakpoint()) throw Error("called DebugTrigger() while stopped on breakpoint");
            if (!this._isInTick &&
                !this._eventSheetManager.IsInTrigger()) throw Error("called DebugTrigger() outside of event code - use TriggerAsync() instead");
            return this._eventSheetManager._DebugTrigger(this._layoutManager, c, e, k)
        }
        async TriggerAsync(c, e, k) {
            if (!this.IsDebugging()) return this.Trigger(c, e, k);
            if (!this._hasStarted) return !1;
            if (this.HitBreakpoint()) return this._eventSheetManager.QueueDebugTrigger(c, e, k);
            if (!this.GetMainRunningLayout()) return this._eventSheetManager.QueueTrigger(c, e, k);
            const h = performance.now();
            c = this._eventSheetManager._DebugTrigger(this._layoutManager,
                c, e, k);
            for (e = c.next(); !e.done;) await this.DebugBreak(e.value), e = c.next();
            this.IsSuspended() || this._eventSheetManager.IsInTrigger() || (await this._eventSheetManager.RunQueuedDebugTriggersAsync(), this._hasStartedTicking && !this._isInTick && this._RequestAnimationFrame());
            this._mainThreadTimeCounter += performance.now() - h;
            return e.value
        }
        FastTrigger(c, e, k) {
            const h = this.IsDebug();
            h && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._FastTrigger(this._layoutManager, c, e, k);
            h && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugFastTrigger(c, e, k) {
            return this._eventSheetManager._DebugFastTrigger(this._layoutManager, c, e, k)
        }
        ScheduleTriggers(c) {
            return this._scheduleTriggersThrottle.Add(c)
        }
        PushCurrentLayout(c) {
            this._currentLayoutStack.push(c)
        }
        PopCurrentLayout() {
            if (!this._currentLayoutStack.length) throw Error("layout stack empty");
            this._currentLayoutStack.pop()
        }
        GetCurrentLayout() {
            return this._currentLayoutStack.length ? this._currentLayoutStack[this._currentLayoutStack.length - 1] : this.GetMainRunningLayout()
        }
        GetDt(c) {
            return c &&
                -1 !== c.GetTimeScale() ? this._dt1 * c.GetTimeScale() : this._dt
        }
        _GetDtFast() {
            return this._dt
        }
        GetDt1() {
            return this._dt1
        }
        GetTimeScale() {
            return this._timeScale
        }
        SetTimeScale(c) {
            if (isNaN(c) || 0 > c) c = 0;
            this._timeScale = c
        }
        SetMinimumFramerate(c) {
            this._minimumFramerate = f.clamp(c, 1, 120)
        }
        GetMinimumFramerate() {
            return this._minimumFramerate
        }
        GetFPS() {
            return this._fps
        }
        GetMainThreadTime() {
            return this._mainThreadTime
        }
        GetStartTime() {
            return this._startTime
        }
        GetGameTime() {
            return this._gameTime.Get()
        }
        GetWallTime() {
            return this._wallTime.Get()
        }
        GetTickCount() {
            return this._tickCount
        }
        GetTickCountNoSave() {
            return this._tickCountNoSave
        }
        IncrementExecCount() {
            ++this._execCount
        }
        GetExecCount() {
            return this._execCount
        }
        GetObjectCount() {
            return this._objectCount
        }
        GetProjectName() {
            return this._projectName
        }
        GetProjectVersion() {
            return this._projectVersion
        }
        GetProjectUniqueId() {
            return this._projectUniqueId
        }
        GetAppId() {
            return this._appId
        }
        GetInstanceByUID(c) {
            if (this._isLoadingState) throw Error("cannot call while loading state - wait until afterload event");
            return this._instancesByUid.get(c) || null
        }
        _RefreshUidMap() {
            this._instancesByUid.clear();
            for (const c of this._allObjectClasses)
                if (!c.IsFamily())
                    for (const e of c.GetInstances()) this._instancesByUid.set(e.GetUID(), e)
        }
        IsPreview() {
            return "preview" === this._exportType
        }
        IsDebug() {
            return this._isDebug
        }
        GetExportType() {
            return this._exportType
        }
        IsCordova() {
            return "cordova" === this._exportType
        }
        IsAndroidWebView() {
            return "Android" === f.Platform.OS && ("cordova" === this._exportType || "playable-ad" === this._exportType || "instant-games" ===
                this._exportType)
        }
        IsiOSCordova() {
            return this._isiOSCordova
        }
        IsiOSWebView() {
            return this._isiOSWebView
        }
        GetCollisionEngine() {
            return this._collisionEngine
        }
        GetSolidBehavior() {
            return this._pluginManager.GetSolidBehavior()
        }
        GetJumpthruBehavior() {
            return this._pluginManager.GetJumpthruBehavior()
        }
        Uses3DFeatures() {
            return this._uses3dFeatures
        }
        IsLayoutFirstTick() {
            return this._isLayoutFirstTick
        }
        SetPixelRoundingEnabled(c) {
            c = !!c;
            this._isPixelRoundingEnabled !== c && (this._isPixelRoundingEnabled = c, this.UpdateRender())
        }
        IsPixelRoundingEnabled() {
            return this._isPixelRoundingEnabled
        }
        SaveToSlot(c) {
            this._saveToSlotName =
                c
        }
        LoadFromSlot(c) {
            this._loadFromSlotName = c
        }
        LoadFromJsonString(c) {
            this._loadFromJson = c
        }
        GetLastSaveJsonString() {
            return this._lastSaveJson
        }
        _NeedsHandleSaveOrLoad() {
            return !(!this._saveToSlotName && !this._loadFromSlotName && null === this._loadFromJson)
        }
        async _HandleSaveOrLoad() {
            this._saveToSlotName && (this.FlushPendingInstances(), await this._DoSaveToSlot(this._saveToSlotName), this._ClearSaveOrLoad());
            this._loadFromSlotName && (await this._DoLoadFromSlot(this._loadFromSlotName), this._ClearSaveOrLoad(), this.IsDebug() &&
                b.StepIfPausedInDebugger());
            if (null !== this._loadFromJson) {
                this.FlushPendingInstances();
                try {
                    await this._DoLoadFromJsonString(this._loadFromJson), this._lastSaveJson = this._loadFromJson, await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadComplete, null), this._lastSaveJson = ""
                } catch (c) {
                    console.error("[Construct 3] Failed to load state from JSON string: ", c), await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadFailed, null)
                }
                this._ClearSaveOrLoad()
            }
        }
        _ClearSaveOrLoad() {
            this._loadFromSlotName = this._saveToSlotName =
                "";
            this._loadFromJson = null
        }
        _GetProjectStorage() {
            this._projectStorage || (this._projectStorage = localforage.createInstance({
                name: "c3-localstorage-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._projectStorage
        }
        _GetSavegamesStorage() {
            this._savegamesStorage || (this._savegamesStorage = localforage.createInstance({
                name: "c3-savegames-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._savegamesStorage
        }
        async _DoSaveToSlot(c) {
            const e = await this._SaveToJsonString();
            try {
                await this._GetSavegamesStorage().setItem(c, e), console.log("[Construct 3] Saved state to storage (" + e.length + " chars)"), this._lastSaveJson = e, await this.TriggerAsync(f.Plugins.System.Cnds.OnSaveComplete, null), this._lastSaveJson = ""
            } catch (k) {
                console.error("[Construct 3] Failed to save state to storage: ", k), await this.TriggerAsync(f.Plugins.System.Cnds.OnSaveFailed, null)
            }
        }
        async _DoLoadFromSlot(c) {
            try {
                const e = await this._GetSavegamesStorage().getItem(c);
                if (!e) throw Error("empty slot");
                console.log("[Construct 3] Loaded state from storage (" +
                    e.length + " chars)");
                await this._DoLoadFromJsonString(e);
                this._lastSaveJson = e;
                await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadComplete, null);
                this._lastSaveJson = ""
            } catch (e) {
                console.error("[Construct 3] Failed to load state from storage: ", e), await this.TriggerAsync(f.Plugins.System.Cnds.OnLoadFailed, null)
            }
        }
        async _SaveToJsonString() {
            const c = {
                c3save: !0,
                version: 1,
                rt: {
                    time: this.GetGameTime(),
                    walltime: this.GetWallTime(),
                    timescale: this.GetTimeScale(),
                    tickcount: this.GetTickCount(),
                    execcount: this.GetExecCount(),
                    next_uid: this._nextUid,
                    running_layout: this.GetMainRunningLayout().GetSID(),
                    start_time_offset: Date.now() - this._startTime
                },
                types: {},
                layouts: {},
                events: this._eventSheetManager._SaveToJson(),
                timelines: this._timelineManager._SaveToJson(),
                user_script_data: null
            };
            for (var e of this._allObjectClasses) e.IsFamily() || e.HasNoSaveBehavior() || (c.types[e.GetSID().toString()] = e._SaveToJson());
            for (const k of this._layoutManager.GetAllLayouts()) c.layouts[k.GetSID().toString()] = k._SaveToJson();
            e = this._CreateUserScriptEvent("save");
            e.saveData = null;
            await this.DispatchUserScriptEventAsyncWait(e);
            c.user_script_data = e.saveData;
            return JSON.stringify(c)
        }
        IsLoadingState() {
            return this._isLoadingState
        }
        async _DoLoadFromJsonString(c) {
            c = JSON.parse(c);
            if (c.c2save) throw Error("C2 saves are incompatible with C3 runtime");
            if (!c.c3save) throw Error("not valid C3 save data");
            if (1 < c.version) throw Error("C3 save data from future version");
            this._dispatcher.dispatchEvent(f.New(f.Event, "beforeload"));
            for (var e of this.allInstances()) e._OnBeforeLoad();
            this._isLoadingState = !0;
            e = c.rt;
            this._gameTime.Set(e.time);
            this._wallTime.Set(e.walltime);
            this._timeScale = e.timescale;
            this._tickCount = e.tickcount;
            this._execCount = e.execcount;
            this._startTime = Date.now() - e.start_time_offset;
            var k = e.running_layout;
            if (k !== this.GetMainRunningLayout().GetSID())
                if (k = this._layoutManager.GetLayoutBySID(k)) await this._DoChangeLayout(k);
                else return;
            for (const [p, n] of Object.entries(c.types)) k = parseInt(p, 10), k = this.GetObjectClassBySID(k), !k || k.IsFamily() || k.HasNoSaveBehavior() ||
                k._LoadFromJson(n);
            this.FlushPendingInstances();
            this._RefreshUidMap();
            this._isLoadingState = !1;
            this._nextUid = e.next_uid;
            for (const [p, n] of Object.entries(c.layouts)) e = parseInt(p, 10), (e = this._layoutManager.GetLayoutBySID(e)) && e._LoadFromJson(n);
            this._eventSheetManager._LoadFromJson(c.events);
            for (var h of this._allObjectClasses)
                if (!h.IsFamily() && h.IsInContainer())
                    for (const p of h.GetInstances()) {
                        e = p.GetIID();
                        for (const n of h.GetContainer().objectTypes())
                            if (n !== h) {
                                k = n.GetInstances();
                                if (0 > e || e >= k.length) throw Error("missing sibling instance");
                                p._AddSibling(k[e])
                            }
                    }
            this._timelineManager._LoadFromJson(c.timelines);
            this._dispatcher.dispatchEvent(f.New(f.Event, "afterload"));
            h = this._CreateUserScriptEvent("load");
            h.saveData = c.user_script_data;
            await this.DispatchUserScriptEventAsyncWait(h);
            this.UpdateRender()
        }
        async AddJobWorkerScripts(c) {
            c = (await Promise.all(c.map(e => this._assetManager.FetchBlob(e)))).map(e => URL.createObjectURL(e));
            this._jobScheduler.ImportScriptsToJobWorkers(c)
        }
        AddJobWorkerBlob(c, e) {
            this._jobScheduler.SendBlobToJobWorkers(c,
                e)
        }
        AddJobWorkerBuffer(c, e) {
            this._jobScheduler.SendBufferToJobWorkers(c, e)
        }
        AddJob(c, e, k) {
            return this._jobScheduler.AddJob(c, e, k)
        }
        BroadcastJob(c, e, k) {
            return this._jobScheduler.BroadcastJob(c, e, k)
        }
        InvokeDownload(c, e) {
            this.PostComponentMessageToDOM("runtime", "invoke-download", {
                url: c,
                filename: e
            })
        }
        async RasterSvgImage(c, e, k, h, p, n) {
            h = h || e;
            p = p || k;
            if (this.IsInWorker()) return (await this.PostComponentMessageToDOMAsync("runtime", "raster-svg-image", {
                blob: c,
                imageWidth: e,
                imageHeight: k,
                surfaceWidth: h,
                surfaceHeight: p,
                imageBitmapOpts: n
            })).imageBitmap;
            c = await self.C3_RasterSvgImageBlob(c, e, k, h, p);
            return n ? await self.createImageBitmap(c, n) : c
        }
        async GetSvgImageSize(c) {
            return this.IsInWorker() ? await this.PostComponentMessageToDOMAsync("runtime", "get-svg-image-size", {
                blob: c
            }) : await self.C3_GetSvgImageSize(c)
        }
        RequestDeviceOrientationEvent() {
            this._didRequestDeviceOrientationEvent || (this._didRequestDeviceOrientationEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-orientation"))
        }
        RequestDeviceMotionEvent() {
            this._didRequestDeviceMotionEvent ||
                (this._didRequestDeviceMotionEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-motion"))
        }
        Random() {
            return this._randomNumberCallback()
        }
        SetRandomNumberGeneratorCallback(c) {
            this._randomNumberCallback = c
        }
        _GetRemotePreviewStatusInfo() {
            return {
                fps: this.GetFPS(),
                cpu: this.GetMainThreadTime(),
                gpu: this.GetGPUUtilisation(),
                layout: this.GetMainRunningLayout() ? this.GetMainRunningLayout().GetName() : "",
                renderer: this.GetWebGLRenderer().GetUnmaskedRenderer()
            }
        }
        HitBreakpoint() {
            return this.IsDebug() ? b.HitBreakpoint() :
                !1
        }
        DebugBreak(c) {
            return this.IsDebugging() ? b.DebugBreak(c) : Promise.resolve()
        }
        DebugBreakNext() {
            return this.IsDebugging() ? b.BreakNext() : !1
        }
        SetDebugBreakpointsEnabled(c) {
            this._breakpointsEnabled = !!c;
            this._UpdateDebuggingFlag()
        }
        AreDebugBreakpointsEnabled() {
            return this._breakpointsEnabled
        }
        IsDebugging() {
            return this._isDebugging
        }
        SetDebuggingEnabled(c) {
            c ? this._debuggingDisabled-- : this._debuggingDisabled++;
            this._UpdateDebuggingFlag()
        }
        _UpdateDebuggingFlag() {
            this._isDebugging = this.IsDebug() && this._breakpointsEnabled &&
                0 === this._debuggingDisabled
        }
        IsCPUProfiling() {
            return this.IsDebug() && b.IsCPUProfiling()
        }
        IsGPUProfiling() {
            return this.IsDebug() && this.GetWebGLRenderer().SupportsGPUProfiling() && b.IsGPUProfiling()
        }
        async DebugIterateAndBreak(c) {
            if (c)
                for (const e of c) await this.DebugBreak(e)
        }
        DebugFireGeneratorEventAndBreak(c) {
            return this.DebugIterateAndBreak(this._dispatcher.dispatchGeneratorEvent(c))
        }
        _InvokeFunctionFromJS(c) {
            return this._eventSheetManager._InvokeFunctionFromJS(c.name, c.params)
        }
        GetIRuntime() {
            return this._iRuntime
        }
        _CreateUserScriptEvent(c) {
            c =
                f.New(f.Event, c, !1);
            c.runtime = this._iRuntime;
            return c
        }
        _InitScriptInterfaces() {
            var c = {};
            for (const e of this._allObjectClasses) c[e.GetJsPropName()] = {
                value: e.GetIObjectClass(),
                enumerable: !0,
                writable: !1
            };
            c = Object.create(Object.prototype, c);
            this._iRuntime = new self.IRuntime(this, c);
            this._userScriptEventObjects = {
                tick: this._CreateUserScriptEvent("tick")
            }
        }
        _InitGlobalVariableScriptInterface() {
            const c = {};
            for (const e of this.GetEventSheetManager().GetAllGlobalVariables()) c[e.GetJsPropName()] = e._GetScriptInterfaceDescriptor();
            this._iRuntime._InitGlobalVars(c)
        }
        _GetCommonScriptInterfaces() {
            return this._commonScriptInterfaces
        }
        _MapScriptInterface(c, e) {
            this._interfaceMap.set(c, e)
        }
        _UnwrapScriptInterface(c) {
            return this._interfaceMap.get(c)
        }
        _UnwrapIObjectClass(c) {
            if (!(c instanceof self.IObjectClass)) throw new TypeError("expected IObjectClass");
            c = this._UnwrapScriptInterface(c);
            if (!(c && c instanceof f.ObjectClass)) throw Error("invalid IObjectClass");
            return c
        }
        _UnwrapIWorldInstance(c) {
            if (!(c instanceof self.IWorldInstance)) throw new TypeError("expected IWorldInstance");
            c = this._UnwrapScriptInterface(c);
            if (!(c && c instanceof f.Instance)) throw Error("invalid IInstance");
            return c
        }
    };
    self.C3_CreateRuntime = f.Runtime.Create;
    self.C3_InitRuntime = (c, e) => c.Init(e)
}
"use strict"; {
    const f = self.C3;
    f.JobSchedulerRuntime = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._jobPromises = new Map;
            this._nextJobId = 0;
            this._inputPort = a.inputPort;
            a.outputPort.onmessage = d => this._OnJobWorkerMessage(d);
            this._maxNumWorkers = a.maxNumWorkers;
            this._jobWorkerCount = 1;
            this._hadErrorCreatingWorker = this._isCreatingWorker = !1
        }
        async Init() {}
        ImportScriptsToJobWorkers(b) {
            this._inputPort.postMessage({
                type: "_import_scripts",
                scripts: b
            })
        }
        SendBlobToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_blob",
                blob: b,
                id: a
            })
        }
        SendBufferToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_buffer",
                buffer: b,
                id: a
            }, [b])
        }
        AddJob(b, a, d, c, e) {
            d || (d = []);
            const k = this._nextJobId++;
            b = {
                type: b,
                isBroadcast: !1,
                jobId: k,
                params: a,
                transferables: d
            };
            a = new Promise((h, p) => {
                this._jobPromises.set(k, {
                    resolve: h,
                    progress: c,
                    reject: p,
                    cancelled: !1
                })
            });
            e && e.SetAction(() => this._CancelJob(k));
            this._inputPort.postMessage(b, d);
            this._MaybeCreateExtraWorker();
            return a
        }
        BroadcastJob(b, a, d) {
            d || (d = []);
            const c = this._nextJobId++;
            this._inputPort.postMessage({
                type: b,
                isBroadcast: !0,
                jobId: c,
                params: a,
                transferables: d
            }, d)
        }
        _CancelJob(b) {
            const a = this._jobPromises.get(b);
            a && (a.cancelled = !0, a.resolve = null, a.progress = null, a.reject = null, this._inputPort.postMessage({
                type: "_cancel",
                jobId: b
            }))
        }
        _OnJobWorkerMessage(b) {
            b = b.data;
            const a = b.type,
                d = b.jobId;
            switch (a) {
                case "result":
                    this._OnJobResult(d, b.result);
                    break;
                case "progress":
                    this._OnJobProgress(d, b.progress);
                    break;
                case "error":
                    this._OnJobError(d, b.error);
                    break;
                case "ready":
                    this._OnJobWorkerReady();
                    break;
                default:
                    throw Error(`unknown message from worker '${a}'`);
            }
        }
        _OnJobResult(b, a) {
            const d = this._jobPromises.get(b);
            if (!d) throw Error("invalid job ID");
            d.cancelled || d.resolve(a);
            this._jobPromises.delete(b)
        }
        _OnJobProgress(b, a) {
            b = this._jobPromises.get(b);
            if (!b) throw Error("invalid job ID");
            !b.cancelled && b.progress && b.progress(a)
        }
        _OnJobError(b, a) {
            const d = this._jobPromises.get(b);
            if (!d) throw Error("invalid job ID");
            d.cancelled || d.reject(a);
            this._jobPromises.delete(b)
        }
        _OnJobWorkerReady() {
            this._isCreatingWorker && (this._isCreatingWorker = !1, this._jobWorkerCount++, this._jobWorkerCount <
                this._maxNumWorkers ? this._MaybeCreateExtraWorker() : this._inputPort.postMessage({
                    type: "_no_more_workers"
                }))
        }
        async _MaybeCreateExtraWorker() {
            if (!(this._jobWorkerCount >= this._maxNumWorkers || this._isCreatingWorker || this._hadErrorCreatingWorker || this._jobPromises.size <= this._jobWorkerCount)) try {
                this._isCreatingWorker = !0, (await this._runtime.PostComponentMessageToDOMAsync("runtime", "create-job-worker")).outputPort.onmessage = b => this._OnJobWorkerMessage(b)
            } catch (b) {
                this._hadErrorCreatingWorker = !0, this._isCreatingWorker = !1, console.error(`[Construct 3] Failed to create job worker; stopping creating any more (created ${this._jobWorkerCount} so far)`, b)
            }
        }
    }
}
self.C3_Shaders = {};
"use strict"; {
    const f = self.C3;
    let b = null,
        a = "",
        d = "",
        c = [],
        e = "",
        k = "",
        h = "";
    const p = f.New(f.ArrayStack);

    function n(m, t) {
        m = m[1];
        t = t[1];
        if ("number" === typeof m && "number" === typeof t) return m - t;
        m = "" + m;
        t = "" + t;
        return m < t ? -1 : m > t ? 1 : 0
    }
    f.Plugins.System = class extends f.SDKPluginBase {
        constructor(m) {
            super(m);
            this._loopStack = this._runtime.GetEventSheetManager().GetLoopStack();
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._imagesLoadingComplete = this._imagesLoadingTotal = 0;
            this._functionMaps = new Map
        }
        Release() {
            super.Release()
        }
        UpdateRender() {
            this._runtime.UpdateRender()
        }
        Trigger(m) {
            this._runtime.Trigger(m,
                null, null)
        }
        GetRegex(m, t) {
            b && m === a && t === d || (b = new RegExp(m, t), a = m, d = t);
            b.lastIndex = 0;
            return b
        }
        GetRegexMatches(m, t, q) {
            if (m === e && t === k && q === h) return c;
            const u = this.GetRegex(t, q);
            c = m.match(u);
            e = m;
            k = t;
            h = q;
            return c
        }
        async _LoadTexturesForObjectClasses(m, t) {
            if (t.length) {
                this._imagesLoadingTotal += t.length;
                var q = [];
                for (const u of t) q.push(m.MaybeLoadTexturesFor(u));
                await f.PromiseAllWithProgress(q, () => {
                    this._imagesLoadingComplete++
                });
                this._imagesLoadingComplete++;
                this._imagesLoadingComplete === this._imagesLoadingTotal &&
                    (this._runtime.Trigger(f.Plugins.System.Cnds.OnImageLoadingComplete, null, null), this._imagesLoadingTotal = this._imagesLoadingComplete = 0)
            }
        }
        _UnloadTexturesForObjectClasses(m, t) {
            for (const q of t) 0 === q.GetInstanceCount() && m.MaybeUnloadTexturesFor(q)
        }
        _GetForEachStack() {
            return p
        }
        _Repeat(m) {
            var t = this._runtime.GetEventSheetManager();
            const q = t.GetEventStack(),
                u = q.GetCurrentStackFrame(),
                r = u.GetCurrentEvent(),
                x = r.GetSolModifiers();
            var z = u.IsSolModifierAfterCnds();
            const C = q.Push(r),
                w = t.GetLoopStack(),
                B = w.Push();
            B.SetEnd(m);
            if (z)
                for (z = 0; z < m && !B.IsStopped(); ++z) t.PushCopySol(x), B.SetIndex(z), r.Retrigger(u, C), t.PopSol(x);
            else
                for (t = 0; t < m && !B.IsStopped(); ++t) B.SetIndex(t), r.Retrigger(u, C);
            q.Pop();
            w.Pop();
            return !1
        }* _DebugRepeat(m) {
            var t = this._runtime.GetEventSheetManager();
            const q = t.GetEventStack(),
                u = q.GetCurrentStackFrame(),
                r = u.GetCurrentEvent(),
                x = r.GetSolModifiers();
            var z = u.IsSolModifierAfterCnds();
            const C = q.Push(r),
                w = t.GetLoopStack(),
                B = w.Push();
            B.SetEnd(m);
            if (z)
                for (z = 0; z < m && !B.IsStopped(); ++z) t.PushCopySol(x),
                    B.SetIndex(z), yield* r.DebugRetrigger(u, C), t.PopSol(x);
            else
                for (t = 0; t < m && !B.IsStopped(); ++t) B.SetIndex(t), yield* r.DebugRetrigger(u, C);
            q.Pop();
            w.Pop();
            return !1
        }
        _While() {
            var m = this._runtime.GetEventSheetManager();
            const t = m.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                u = q.GetCurrentEvent(),
                r = u.GetSolModifiers();
            var x = q.IsSolModifierAfterCnds();
            const z = t.Push(u),
                C = m.GetLoopStack(),
                w = C.Push();
            if (x)
                for (x = 0; !w.IsStopped(); ++x) m.PushCopySol(r), w.SetIndex(x), u.Retrigger(q, z) || w.Stop(), m.PopSol(r);
            else
                for (m =
                    0; !w.IsStopped(); ++m) w.SetIndex(m), u.Retrigger(q, z) || w.Stop();
            t.Pop();
            C.Pop();
            return !1
        }* _DebugWhile() {
            var m = this._runtime.GetEventSheetManager();
            const t = m.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                u = q.GetCurrentEvent(),
                r = u.GetSolModifiers();
            var x = q.IsSolModifierAfterCnds();
            const z = t.Push(u),
                C = m.GetLoopStack(),
                w = C.Push();
            if (x)
                for (x = 0; !w.IsStopped(); ++x) m.PushCopySol(r), w.SetIndex(x), (yield* u.DebugRetrigger(q, z)) || w.Stop(), m.PopSol(r);
            else
                for (m = 0; !w.IsStopped(); ++m) w.SetIndex(m), (yield* u.DebugRetrigger(q,
                    z)) || w.Stop();
            t.Pop();
            C.Pop();
            return !1
        }
        _For(m, t, q) {
            var u = this._runtime.GetEventSheetManager();
            const r = u.GetEventStack(),
                x = r.GetCurrentStackFrame(),
                z = x.GetCurrentEvent(),
                C = z.GetSolModifiers(),
                w = x.IsSolModifierAfterCnds(),
                B = r.Push(z),
                F = u.GetLoopStack(),
                J = F.Push();
            J.SetName(m);
            J.SetEnd(q);
            if (q < t)
                if (w)
                    for (m = t; m >= q && !J.IsStopped(); --m) u.PushCopySol(C), J.SetIndex(m), z.Retrigger(x, B), u.PopSol(C);
                else
                    for (u = t; u >= q && !J.IsStopped(); --u) J.SetIndex(u), z.Retrigger(x, B);
            else if (w)
                for (m = t; m <= q && !J.IsStopped(); ++m) u.PushCopySol(C),
                    J.SetIndex(m), z.Retrigger(x, B), u.PopSol(C);
            else
                for (u = t; u <= q && !J.IsStopped(); ++u) J.SetIndex(u), z.Retrigger(x, B);
            r.Pop();
            F.Pop();
            return !1
        }* _DebugFor(m, t, q) {
            var u = this._runtime.GetEventSheetManager();
            const r = u.GetEventStack(),
                x = r.GetCurrentStackFrame(),
                z = x.GetCurrentEvent(),
                C = z.GetSolModifiers(),
                w = x.IsSolModifierAfterCnds(),
                B = r.Push(z),
                F = u.GetLoopStack(),
                J = F.Push();
            J.SetName(m);
            J.SetEnd(q);
            if (q < t)
                if (w)
                    for (m = t; m >= q && !J.IsStopped(); --m) u.PushCopySol(C), J.SetIndex(m), yield* z.DebugRetrigger(x, B), u.PopSol(C);
                else
                    for (u = t; u >= q && !J.IsStopped(); --u) J.SetIndex(u), yield* z.DebugRetrigger(x, B);
            else if (w)
                for (m = t; m <= q && !J.IsStopped(); ++m) u.PushCopySol(C), J.SetIndex(m), yield* z.DebugRetrigger(x, B), u.PopSol(C);
            else
                for (u = t; u <= q && !J.IsStopped(); ++u) J.SetIndex(u), yield* z.DebugRetrigger(x, B);
            r.Pop();
            F.Pop();
            return !1
        }
        _ForEach(m) {
            var t = this._runtime.GetEventSheetManager();
            const q = t.GetEventStack(),
                u = q.GetCurrentStackFrame(),
                r = u.GetCurrentEvent(),
                x = r.GetSolModifiers();
            var z = u.IsSolModifierAfterCnds();
            const C = q.Push(r),
                w = t.GetLoopStack(),
                B = w.Push(),
                F = m.IsInContainer(),
                J = m.GetCurrentSol(),
                O = p.Push();
            f.shallowAssignArray(O, J.GetInstances());
            B.SetEnd(O.length);
            if (z)
                for (let G = 0, I = O.length; G < I && !B.IsStopped(); ++G) t.PushCopySol(x), z = O[G], m.GetCurrentSol().SetSinglePicked(z), F && z.SetSiblingsSinglePicked(), B.SetIndex(G), r.Retrigger(u, C), t.PopSol(x);
            else {
                J._SetSelectAll(!1);
                m = J._GetOwnInstances();
                f.clearArray(m);
                m.push(null);
                for (let G = 0, I = O.length; G < I && !B.IsStopped(); ++G) t = O[G], m[0] = t, F && t.SetSiblingsSinglePicked(), B.SetIndex(G),
                    r.Retrigger(u, C)
            }
            q.Pop();
            w.Pop();
            f.clearArray(O);
            p.Pop();
            return !1
        }* _DebugForEach(m) {
            var t = this._runtime.GetEventSheetManager();
            const q = t.GetEventStack(),
                u = q.GetCurrentStackFrame(),
                r = u.GetCurrentEvent(),
                x = r.GetSolModifiers();
            var z = u.IsSolModifierAfterCnds();
            const C = q.Push(r),
                w = t.GetLoopStack(),
                B = w.Push(),
                F = m.IsInContainer(),
                J = m.GetCurrentSol(),
                O = p.Push();
            f.shallowAssignArray(O, J.GetInstances());
            B.SetEnd(O.length);
            if (z)
                for (let G = 0, I = O.length; G < I && !B.IsStopped(); ++G) t.PushCopySol(x), z = O[G], m.GetCurrentSol().SetSinglePicked(z),
                    F && z.SetSiblingsSinglePicked(), B.SetIndex(G), yield* r.DebugRetrigger(u, C), t.PopSol(x);
            else {
                J._SetSelectAll(!1);
                m = J._GetOwnInstances();
                f.clearArray(m);
                m.push(null);
                for (let G = 0, I = O.length; G < I && !B.IsStopped(); ++G) t = O[G], m[0] = t, F && t.SetSiblingsSinglePicked(), B.SetIndex(G), yield* r.DebugRetrigger(u, C)
            }
            q.Pop();
            w.Pop();
            f.clearArray(O);
            p.Pop();
            return !1
        }
        _ForEachOrdered(m, t) {
            var q = this._runtime.GetEventSheetManager();
            const u = q.GetEventStack(),
                r = q.GetCurrentCondition(),
                x = u.GetCurrentStackFrame(),
                z = x.GetCurrentEvent(),
                C = z.GetSolModifiers(),
                w = x.IsSolModifierAfterCnds(),
                B = u.Push(z),
                F = q.GetLoopStack(),
                J = F.Push(),
                O = m.IsInContainer(),
                G = m.GetCurrentSol(),
                I = p.Push();
            f.clearArray(I);
            const P = G.GetInstances();
            J.SetEnd(P.length);
            for (let Q = 0, T = P.length; Q < T; ++Q) I.push([P[Q], r.ReevaluateParameter(1, Q)]);
            I.sort(n);
            1 === t && I.reverse();
            if (w)
                for (let Q = 0, T = I.length; Q < T && !J.IsStopped(); ++Q) q.PushCopySol(C), t = I[Q][0], m.GetCurrentSol().SetSinglePicked(t), O && t.SetSiblingsSinglePicked(), J.SetIndex(Q), z.Retrigger(x, B), q.PopSol(C);
            else {
                G._SetSelectAll(!1);
                m = G._GetOwnInstances();
                f.clearArray(m);
                m.push(null);
                for (let Q = 0, T = I.length; Q < T && !J.IsStopped(); ++Q) q = I[Q][0], m[0] = q, O && q.SetSiblingsSinglePicked(), J.SetIndex(Q), z.Retrigger(x, B)
            }
            u.Pop();
            F.Pop();
            f.clearArray(I);
            p.Pop();
            return !1
        }* _DebugForEachOrdered(m, t) {
            var q = this._runtime.GetEventSheetManager();
            const u = q.GetEventStack(),
                r = q.GetCurrentCondition(),
                x = u.GetCurrentStackFrame(),
                z = x.GetCurrentEvent(),
                C = z.GetSolModifiers(),
                w = x.IsSolModifierAfterCnds(),
                B = u.Push(z),
                F = q.GetLoopStack(),
                J = F.Push(),
                O = m.IsInContainer(),
                G = m.GetCurrentSol(),
                I = p.Push();
            f.clearArray(I);
            const P = G.GetInstances();
            J.SetEnd(P.length);
            for (let Q = 0, T = P.length; Q < T; ++Q) I.push([P[Q], r.ReevaluateParameter(1, Q)]);
            I.sort(n);
            1 === t && I.reverse();
            if (w)
                for (let Q = 0, T = I.length; Q < T && !J.IsStopped(); ++Q) q.PushCopySol(C), t = I[Q][0], m.GetCurrentSol().SetSinglePicked(t), O && t.SetSiblingsSinglePicked(), J.SetIndex(Q), yield* z.DebugRetrigger(x, B), q.PopSol(C);
            else {
                G._SetSelectAll(!1);
                m = G._GetOwnInstances();
                f.clearArray(m);
                m.push(null);
                for (let Q = 0, T = I.length; Q < T && !J.IsStopped(); ++Q) q =
                    I[Q][0], m[0] = q, O && q.SetSiblingsSinglePicked(), J.SetIndex(Q), yield* z.DebugRetrigger(x, B)
            }
            u.Pop();
            F.Pop();
            f.clearArray(I);
            p.Pop();
            return !1
        }
        _GetFunctionMap(m, t) {
            let q = this._functionMaps.get(m);
            if (q) return q;
            if (!t) return null;
            q = {
                defaultFunc: null,
                strMap: new Map
            };
            this._functionMaps.set(m, q);
            return q
        }
        _DoCallMappedFunction(m, t, q, u, r) {
            t.GetEventBlock().RunAsMappedFunctionCall(q);
            u && m.PopSol(r)
        }* _DebugDoCallMappedFunction(m, t, q, u, r) {
            yield* t.GetEventBlock().DebugRunAsMappedFunctionCall(q);
            u && m.PopSol(r)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.System.Type = class extends f.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        OnCreate() {}
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.System.Instance = class extends f.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._runtime = this._inst.GetRuntime()
        }
        Release() {
            this._runtime = this._sdkType = this._objectClass = this._inst = null
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [];
    f.Plugins.System.Cnds = {
        EveryTick() {
            return !0
        },
        OnLayoutStart() {
            return !0
        },
        OnLayoutEnd() {
            return !0
        },
        OnSuspend() {
            return !0
        },
        OnResume() {
            return !0
        },
        IsSuspended() {
            return this._runtime.IsSuspended()
        },
        Else() {
            const a = this._runtime.GetCurrentEventStackFrame();
            return a.GetElseBranchRan() ? !1 : !a.GetLastEventTrue()
        },
        TriggerOnce() {
            const a = this._runtime.GetCurrentCondition().GetSavedDataMap();
            let d = a.get("TriggerOnce_lastTick");
            "undefined" === typeof d && (d = -1, a.set("TriggerOnce_lastTick", -1));
            const c =
                this._runtime.GetTickCount();
            a.set("TriggerOnce_lastTick", c);
            return this._runtime.IsLayoutFirstTick() || d !== c - 1
        },
        Every(a) {
            const d = this._runtime.GetCurrentCondition().GetSavedDataMap(),
                c = d.get("Every_lastTime") || 0,
                e = this._runtime.GetGameTime();
            d.has("Every_seconds") || d.set("Every_seconds", a);
            const k = d.get("Every_seconds");
            if (e >= c + k) return d.set("Every_lastTime", c + k), e >= d.get("Every_lastTime") + .04 && d.set("Every_lastTime", e), d.set("Every_seconds", a), !0;
            e < c - .1 && d.set("Every_lastTime", e);
            return !1
        },
        IsGroupActive(a) {
            return (a =
                this._runtime.GetEventSheetManager().GetEventGroupByName(a)) && a.IsGroupActive()
        },
        IsPreview() {
            return this._runtime.IsPreview()
        },
        IsMobile() {
            return f.Platform.IsMobile
        },
        OnLoadFinished() {
            return !0
        },
        OnCanvasSnapshot() {
            return !0
        },
        EffectsSupported() {
            return !0
        },
        OnSaveComplete() {
            return !0
        },
        OnSaveFailed() {
            return !0
        },
        OnLoadComplete() {
            return !0
        },
        OnLoadFailed() {
            return !0
        },
        ObjectUIDExists(a) {
            return !!this._runtime.GetInstanceByUID(a)
        },
        IsOnPlatform(a) {
            switch (a) {
                case 0:
                    return "browser" === f.Platform.Context;
                case 1:
                    return "iOS" ===
                        f.Platform.OS;
                case 2:
                    return "Android" === f.Platform.OS;
                case 8:
                    return "cordova" === f.Platform.Context;
                case 9:
                    return "scirra-arcade" === this._runtime.GetExportType();
                case 10:
                    return "nwjs" === f.Platform.Context;
                case 13:
                    return "windows-uwp" === this._runtime.GetExportType();
                default:
                    return !1
            }
        },
        RegexTest(a, d, c) {
            return this.GetRegex(d, c).test(a)
        },
        Compare(a, d, c) {
            return f.compare(a, d, c)
        },
        CompareBetween(a, d, c) {
            return a >= d && a <= c
        },
        CompareVar(a, d, c) {
            return f.compare(a.GetValue(), d, c)
        },
        CompareBoolVar(a) {
            return !!a.GetValue()
        },
        CompareTime(a, d) {
            const c = this._runtime.GetGameTime();
            return 0 === a ? (a = this._runtime.GetCurrentCondition().GetSavedDataMap(), !a.get("CompareTime_executed") && c >= d ? (a.set("CompareTime_executed", !0), !0) : !1) : f.compare(c, a, d)
        },
        IsNaN(a) {
            return isNaN(a)
        },
        AngleWithin(a, d, c) {
            return f.angleDiff(f.toRadians(a), f.toRadians(c)) <= f.toRadians(d)
        },
        IsClockwiseFrom(a, d) {
            return f.angleClockwise(f.toRadians(a), f.toRadians(d))
        },
        IsBetweenAngles(a, d, c) {
            a = f.toRadians(a);
            d = f.toRadians(d);
            c = f.toRadians(c);
            return f.angleClockwise(c,
                d) ? f.angleClockwise(a, d) && !f.angleClockwise(a, c) : !(!f.angleClockwise(a, d) && f.angleClockwise(a, c))
        },
        IsValueType(a, d) {
            return "number" === typeof a ? 0 === d : 1 === d
        },
        EvaluateExpression(a) {
            return !!a
        },
        PickByComparison(a, d, c, e) {
            if (!a) return !1;
            const k = this._GetForEachStack(),
                h = k.Push(),
                p = a.GetCurrentSol();
            f.shallowAssignArray(h, p.GetInstances());
            p.IsSelectAll() && f.clearArray(p._GetOwnElseInstances());
            const n = this._runtime.GetCurrentCondition();
            let m = 0;
            for (let t = 0, q = h.length; t < q; ++t) {
                const u = h[t];
                h[m] = u;
                d = n.ReevaluateParameter(1,
                    t);
                e = n.ReevaluateParameter(3, t);
                f.compare(d, c, e) ? ++m : p._PushElseInstance(u)
            }
            f.truncateArray(h, m);
            p.SetArrayPicked(h);
            d = !!h.length;
            f.clearArray(h);
            k.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickByEvaluate(a, d) {
            if (!a) return !1;
            const c = this._GetForEachStack(),
                e = c.Push(),
                k = a.GetCurrentSol();
            f.shallowAssignArray(e, k.GetInstances());
            k.IsSelectAll() && f.clearArray(k._GetOwnElseInstances());
            const h = this._runtime.GetCurrentCondition();
            let p = 0;
            for (let n = 0, m = e.length; n < m; ++n) {
                const t = e[n];
                e[p] = t;
                (d = h.ReevaluateParameter(1,
                    n)) ? ++p: k._PushElseInstance(t)
            }
            f.truncateArray(e, p);
            k.SetArrayPicked(e);
            d = !!e.length;
            f.clearArray(e);
            c.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickNth(a, d) {
            if (!a) return !1;
            const c = a.GetCurrentSol(),
                e = c.GetInstances();
            d = Math.floor(d);
            if (d >= e.length) return !1;
            c.PickOne(e[d]);
            a.ApplySolToContainer();
            return !0
        },
        PickRandom(a) {
            if (!a) return !1;
            const d = a.GetCurrentSol(),
                c = d.GetInstances(),
                e = Math.floor(this._runtime.Random() * c.length);
            if (e >= c.length) return !1;
            d.PickOne(c[e]);
            a.ApplySolToContainer();
            return !0
        },
        PickAll(a) {
            if (!a ||
                !a.GetInstanceCount()) return !1;
            a.GetCurrentSol()._SetSelectAll(!0);
            a.ApplySolToContainer();
            return !0
        },
        PickOverlappingPoint(a, d, c) {
            if (!a) return !1;
            const e = a.GetCurrentSol();
            var k = e.GetInstances();
            const h = this._runtime.GetCurrentEvent().IsOrBlock(),
                p = this._runtime.GetCurrentCondition().IsInverted();
            e.IsSelectAll() ? (f.shallowAssignArray(b, k), e.ClearArrays(), e._SetSelectAll(!1)) : h ? (f.shallowAssignArray(b, e._GetOwnElseInstances()), f.clearArray(e._GetOwnElseInstances())) : (f.shallowAssignArray(b, e._GetOwnInstances()),
                f.clearArray(e._GetOwnInstances()));
            for (let n = 0, m = b.length; n < m; ++n) k = b[n], f.xor(k.GetWorldInfo().ContainsPoint(d, c), p) ? e._PushInstance(k) : e._PushElseInstance(k);
            a.ApplySolToContainer();
            return f.xor(!!e._GetOwnInstances().length, p)
        },
        PickLastCreated(a) {
            if (!a) return !1;
            var d = a.IsFamily();
            let c = null;
            const e = this._runtime._GetInstancesPendingCreate();
            for (let k = e.length - 1; 0 <= k; --k) {
                const h = e[k];
                if (d) {
                    if (h.GetObjectClass().BelongsToFamily(a)) {
                        c = h;
                        break
                    }
                } else if (h.GetObjectClass() === a) {
                    c = h;
                    break
                }
            }
            c || (d = a.GetInstances(),
                d.length && (c = d[d.length - 1]));
            if (!c) return !1;
            a.GetCurrentSol().PickOne(c);
            a.ApplySolToContainer();
            return !0
        },
        Repeat(a) {
            return this._runtime.IsDebugging() ? this._DebugRepeat(a) : this._Repeat(a)
        },
        While() {
            return this._runtime.IsDebugging() ? this._DebugWhile() : this._While()
        },
        For(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugFor(a, d, c) : this._For(a, d, c)
        },
        ForEach(a) {
            return this._runtime.IsDebugging() ? this._DebugForEach(a) : this._ForEach(a)
        },
        ForEachOrdered(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugForEachOrdered(a,
                c) : this._ForEachOrdered(a, c)
        },
        LayerVisible(a) {
            return a ? a.IsVisible() : !1
        },
        LayerEmpty(a) {
            return a ? !a.GetInstanceCount() : !1
        },
        LayerCmpOpacity(a, d, c) {
            return a ? f.compare(100 * a.GetOpacity(), d, c) : !1
        },
        OnImageLoadingComplete() {
            return !0
        },
        IsLoadingImages() {
            return 0 < this._imagesLoadingTotal
        }
    }
}
"use strict"; {
    const f = self.C3;

    function b(h, p) {
        const n = h[0] - p[0];
        return 0 !== n ? n : h[1] - p[1]
    }

    function a(h, p) {
        return h[1] - p[1]
    }
    const d = [],
        c = [],
        e = f.New(f.Rect),
        k = f.New(f.Color);
    f.Plugins.System.Acts = {
        SetVar(h, p) {
            h.SetValue(p)
        },
        AddVar(h, p) {
            h.IsNumber() && "number" !== typeof p && (p = parseFloat(p));
            h.SetValue(h.GetValue() + p)
        },
        SubVar(h, p) {
            h.IsNumber() && h.SetValue(h.GetValue() - p)
        },
        SetBoolVar(h, p) {
            h.SetValue(!!p)
        },
        ToggleBoolVar(h) {
            h.SetValue(!h.GetValue())
        },
        ResetGlobals() {
            this._runtime.GetEventSheetManager().ResetAllGlobalsToInitialValue()
        },
        CreateObject(h, p, n, m, t) {
            h && p && (n = this._runtime.CreateInstance(h, p, n, m, t)) && (t && p.SortAndAddSceneGraphInstancesByZIndex(n), p = this._runtime.GetEventSheetManager(), p.BlockFlushingInstances(!0), n._TriggerOnCreatedOnSelfAndRelated(), p.BlockFlushingInstances(!1), h.GetCurrentSol().SetSinglePicked(n), n.IsInContainer() && n.SetSiblingsSinglePicked())
        },
        CreateObjectByName(h, p, n, m, t) {
            h && p && (h = this._runtime.GetObjectClassByName(h)) && f.Plugins.System.Acts.CreateObject.call(this, h, p, n, m, t)
        },
        RecreateInitialObjects(h,
            p, n, m, t, q, u, r, x, z) {
            if (h) {
                var C = this._runtime.GetCurrentLayout();
                if (q && (C = this._runtime.GetLayoutManager().GetLayoutByName(q), !C)) return;
                q = null;
                if ("number" !== typeof u || 0 <= u)
                    if (q = C.GetLayer(u), !q) return;
                e.set(p, n, m, t);
                p = C.RecreateInitialObjects(h, e, q, r, x, z);
                h.GetCurrentSol().SetArrayPicked(p);
                h.ApplySolToContainer()
            }
        },
        StopLoop() {
            const h = this._loopStack;
            h.IsInLoop() && h.GetCurrent().Stop()
        },
        SetGroupActive(h, p) {
            (h = this._runtime.GetEventSheetManager().GetEventGroupByName(h)) && (0 === p ? h.SetGroupActive(!1) :
                1 === p ? h.SetGroupActive(!0) : h.SetGroupActive(!h.IsGroupActive()))
        },
        SetTimescale(h) {
            this._runtime.SetTimeScale(h)
        },
        SetObjectTimescale(h, p) {
            0 > p && (p = 0);
            if (h) {
                h = h.GetCurrentSol().GetInstances();
                for (const n of h) n.SetTimeScale(p)
            }
        },
        RestoreObjectTimescale(h) {
            if (h) {
                h = h.GetCurrentSol().GetInstances();
                for (const p of h) p.RestoreTimeScale()
            }
        },
        Wait(h) {
            if (!(0 > h)) return this._runtime.GetEventSheetManager().AddScheduledWait().InitTimer(h), !0
        },
        WaitForSignal(h) {
            this._runtime.GetEventSheetManager().AddScheduledWait().InitSignal(h);
            return !0
        },
        WaitForPreviousActions() {
            const h = this._runtime.GetEventSheetManager();
            h.AddScheduledWait().InitPromise(h.GetPromiseForAllAsyncActions());
            return !0
        },
        Signal(h) {
            h = h.toLowerCase();
            for (const p of this._runtime.GetEventSheetManager().scheduledWaits()) p.IsSignal() && p.GetSignalTag() === h && p.SetSignalled()
        },
        async SnapshotCanvas(h, p, n, m, t, q) {
            const u = this._runtime.GetCanvasManager();
            u && (this.UpdateRender(), await u.SnapshotCanvas(0 === h ? "image/png" : "image/jpeg", p / 100, n, m, t, q), await this._runtime.TriggerAsync(f.Plugins.System.Cnds.OnCanvasSnapshot,
                null))
        },
        SetCanvasSize(h, p) {
            if (!(0 >= h || 0 >= p)) {
                this._runtime.SetViewportSize(h, p);
                var n = this._runtime.GetCurrentLayout();
                n.BoundScrolling();
                for (const m of n.GetLayers()) m.UpdateViewport();
                if (n = this._runtime.GetCanvasManager()) "off" !== n.GetCurrentFullscreenMode() && this._runtime.SetOriginalViewportSize(h, p), n.SetSize(n.GetLastWidth(), n.GetLastHeight(), !0), this._runtime.UpdateRender()
            }
        },
        SetFullscreenQuality(h) {
            const p = this._runtime.GetCanvasManager();
            p && "off" !== p.GetCurrentFullscreenMode() && (p.SetFullscreenScalingQuality(0 !==
                h ? "high" : "low"), p.SetSize(p.GetLastWidth(), p.GetLastHeight(), !0))
        },
        SaveState(h) {
            this._runtime.SaveToSlot(h)
        },
        LoadState(h) {
            this._runtime.LoadFromSlot(h)
        },
        LoadStateJSON(h) {
            this._runtime.LoadFromJsonString(h)
        },
        SetHalfFramerateMode(h) {},
        ResetPersisted() {
            for (const h of this._runtime.GetLayoutManager().GetAllLayouts()) h.ResetPersistData()
        },
        SetPixelRounding(h) {
            this._runtime.SetPixelRoundingEnabled(0 !== h)
        },
        SetMinimumFramerate(h) {
            this._runtime.SetMinimumFramerate(h)
        },
        SortZOrderByInstVar(h, p) {
            if (h) {
                var n = h.GetCurrentSol().GetInstances(),
                    m = this._runtime.GetCurrentLayout(),
                    t = h.IsFamily();
                h = h.GetFamilyIndex();
                for (let u = 0, r = n.length; u < r; ++u) {
                    var q = n[u];
                    const x = q.GetWorldInfo();
                    if (!x) continue;
                    let z;
                    z = t ? q.GetInstanceVariableValue(p + q.GetObjectClass().GetFamilyInstanceVariableOffset(h)) : q.GetInstanceVariableValue(p);
                    d.push([x.GetLayer().GetIndex(), x.GetZIndex()]);
                    c.push([q, z])
                }
                if (d.length) {
                    d.sort(b);
                    c.sort(a);
                    p = !1;
                    for (let u = 0, r = d.length; u < r; ++u) n = c[u][0], t = m.GetLayerByIndex(d[u][0]), h = d[u][1], q = t._GetInstances(), q[h] !== n && (q[h] = n, n.GetWorldInfo()._SetLayer(t),
                        t.SetZIndicesChanged(), p = !0);
                    p && this._runtime.UpdateRender();
                    f.clearArray(d);
                    f.clearArray(c)
                }
            }
        },
        GoToLayout(h) {
            if (!this._runtime.IsLoading()) {
                var p = this._runtime.GetLayoutManager();
                p.IsPendingChangeMainLayout() || p.ChangeMainLayout(h)
            }
        },
        GoToLayoutByName(h) {
            if (!this._runtime.IsLoading()) {
                var p = this._runtime.GetLayoutManager();
                p.IsPendingChangeMainLayout() || (h = p.GetLayoutByName(h)) && p.ChangeMainLayout(h)
            }
        },
        NextPrevLayout(h) {
            if (!this._runtime.IsLoading()) {
                var p = this._runtime.GetLayoutManager();
                if (!p.IsPendingChangeMainLayout()) {
                    var n =
                        p.GetAllLayouts(),
                        m = n.indexOf(p.GetMainRunningLayout());
                    h && 0 === m || (h || m !== n.length - 1) && p.ChangeMainLayout(n[m + (h ? -1 : 1)])
                }
            }
        },
        RestartLayout() {
            if (!this._runtime.IsLoading()) {
                var h = this._runtime.GetLayoutManager();
                h.IsPendingChangeMainLayout() || (h.ChangeMainLayout(h.GetMainRunningLayout()), this._runtime.GetEventSheetManager().ResetAllGroupsInitialActivation())
            }
        },
        SetLayerVisible(h, p) {
            h && h.SetVisible(p)
        },
        SetLayerOpacity(h, p) {
            h && h.SetOpacity(p / 100)
        },
        SetLayerScale(h, p) {
            h && h.SetOwnScale(p)
        },
        SetLayerScaleRate(h,
            p) {
            h && h.SetScaleRate(p)
        },
        SetLayerAngle(h, p) {
            h && (p = f.clampAngle(f.toRadians(+p)), h.GetOwnAngle() !== p && (h.SetAngle(p), this.UpdateRender()))
        },
        SetLayerParallax(h, p, n) {
            h && h.SetParallax(p / 100, n / 100)
        },
        SetLayerZElevation(h, p) {
            h && h.SetZElevation(p)
        },
        SetLayerBackground(h, p) {
            h && (k.setFromRgbValue(p), k.clamp(), h = h.GetBackgroundColor(), h.equalsIgnoringAlpha(k) || (h.copyRgb(k), this.UpdateRender()))
        },
        SetLayerTransparent(h, p) {
            h && (p = !!p, h.IsTransparent() !== p && (h.SetTransparent(p), this.UpdateRender()))
        },
        SetLayerBlendMode(h,
            p) {
            h && h.GetBlendMode() !== p && (h.SetBlendMode(p), this.UpdateRender())
        },
        SetLayerEffectEnabled(h, p, n) {
            h && (h = h.GetEffectList(), n = h.GetEffectTypeByName(n)) && (p = 1 === p, n.IsActive() !== p && (n.SetActive(p), h.UpdateActiveEffects(), this._runtime.UpdateRender()))
        },
        SetLayerEffectParam(h, p, n, m) {
            if (h && (h = h.GetEffectList(), p = h.GetEffectTypeByName(p))) {
                var t = p.GetIndex();
                h = h.GetEffectParametersForIndex(t);
                n = Math.floor(n);
                if (!(0 > n || n >= h.length)) {
                    t = p.GetShaderProgram().GetParameterType(n);
                    if ("color" === t) {
                        k.setFromRgbValue(m);
                        n = h[n];
                        if (k.equalsIgnoringAlpha(n)) return;
                        n.copyRgb(k)
                    } else {
                        "percent" === t && (m /= 100);
                        if (h[n] === m) return;
                        h[n] = m
                    }
                    p.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayerForceOwnTexture(h, p) {
            h && (p = !!p, h.IsForceOwnTexture() !== p && (h.SetForceOwnTexture(p), this.UpdateRender()))
        },
        SetLayoutScale(h) {
            const p = this._runtime.GetCurrentLayout();
            p.GetScale() !== h && (p.SetScale(h), this.UpdateRender())
        },
        SetLayoutAngle(h) {
            h = f.clampAngle(f.toRadians(+h));
            const p = this._runtime.GetCurrentLayout();
            p.GetAngle() !== h && (p.SetAngle(h),
                this.UpdateRender())
        },
        SetLayoutEffectEnabled(h, p) {
            const n = this._runtime.GetCurrentLayout().GetEffectList();
            if (p = n.GetEffectTypeByName(p)) h = 1 === h, p.IsActive() !== h && (p.SetActive(h), n.UpdateActiveEffects(), this._runtime.UpdateRender())
        },
        SetLayoutEffectParam(h, p, n) {
            var m = this._runtime.GetCurrentLayout().GetEffectList();
            if (h = m.GetEffectTypeByName(h)) {
                var t = h.GetIndex();
                m = m.GetEffectParametersForIndex(t);
                p = Math.floor(p);
                if (!(0 > p || p >= m.length)) {
                    t = h.GetShaderProgram().GetParameterType(p);
                    if ("color" === t) {
                        k.setFromRgbValue(n);
                        p = m[p];
                        if (k.equalsIgnoringAlpha(p)) return;
                        p.copyRgb(k)
                    } else {
                        "percent" === t && (n /= 100);
                        if (m[p] === n) return;
                        m[p] = n
                    }
                    h.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        ScrollX(h) {
            this._runtime.GetCurrentLayout().SetScrollX(h)
        },
        ScrollY(h) {
            this._runtime.GetCurrentLayout().SetScrollY(h)
        },
        Scroll(h, p) {
            const n = this._runtime.GetCurrentLayout();
            n.SetScrollX(h);
            n.SetScrollY(p)
        },
        ScrollToObject(h) {
            if (h && (h = h.GetFirstPicked()) && (h = h.GetWorldInfo())) {
                var p = this._runtime.GetCurrentLayout();
                p.SetScrollX(h.GetX());
                p.SetScrollY(h.GetY())
            }
        },
        async LoadObjectTextures(h) {
            const p = this._runtime.GetMainRunningLayout();
            p && h && !this._runtime.IsLoading() && (h = h.IsFamily() ? h.GetFamilyMembers() : [h], await this._LoadTexturesForObjectClasses(p, h))
        },
        async LoadObjectTexturesByName(h) {
            await f.Plugins.System.Acts.LoadObjectTextures.call(this, this._runtime.GetObjectClassByName(h))
        },
        UnloadObjectTextures(h) {
            const p = this._runtime.GetMainRunningLayout();
            p && h && (h = h.IsFamily() ? h.GetFamilyMembers() : [h], this._UnloadTexturesForObjectClasses(p, h))
        },
        UnloadObjectTexturesByName(h) {
            f.Plugins.System.Acts.UnloadObjectTexturesByName.call(this,
                this._runtime.GetObjectClassByName(h))
        },
        UnloadUnusedTextures() {
            const h = this._runtime.GetMainRunningLayout();
            if (h) {
                var p = h._GetTextureLoadedObjectTypes();
                this._UnloadTexturesForObjectClasses(h, p)
            }
        },
        async LoadLayoutTextures(h) {
            const p = this._runtime.GetMainRunningLayout();
            h && p && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(p, h._GetInitialObjectClasses())
        },
        async LoadLayoutTexturesByName(h) {
            const p = this._runtime.GetMainRunningLayout();
            (h = this._runtime.GetLayoutManager().GetLayoutByName(h)) &&
            p && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(p, h._GetInitialObjectClasses())
        },
        SetFunctionReturnValue(h) {
            const p = this._eventStack.GetCurrentExpFuncStackFrame();
            if (p) switch (p.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof h && p.SetFunctionReturnValue(h);
                    break;
                case 2:
                    "string" === typeof h && p.SetFunctionReturnValue(h);
                    break;
                case 3:
                    p.SetFunctionReturnValue(h)
            }
        },
        MapFunction(h, p, n) {
            var m = this._GetFunctionMap(h.toLowerCase(), !0);
            const t = m.strMap,
                q = p.toLowerCase();
            t.has(q) && console.warn(`[Construct 3] Function map '${h}' string '${p}' already in map; overwriting entry`);
            if (m = f.first(t.values()) || m.defaultFunc) {
                m = 0 !== m.GetReturnType();
                const u = 0 !== n.GetReturnType();
                if (m !== u) {
                    console.error(`[Construct 3] Function map '${h}' string '${p}' function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            t.set(q, n)
        },
        MapFunctionDefault(h, p) {
            const n = this._GetFunctionMap(h.toLowerCase(), !0);
            n.defaultFunc && console.warn(`[Construct 3] Function map '${h}' already has a default; overwriting entry`);
            var m = f.first(n.strMap.values()) || n.defaultFunc;
            if (m) {
                m =
                    0 !== m.GetReturnType();
                const t = 0 !== p.GetReturnType();
                if (m !== t) {
                    console.error(`[Construct 3] Function map '${h}' default: function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            n.defaultFunc = p
        },
        CallMappedFunction(h, p, n) {
            n = Math.floor(n);
            var m = this._GetFunctionMap(h.toLowerCase(), !1);
            if (m) {
                var t = m.strMap.get(p.toLowerCase());
                if (!t)
                    if (m.defaultFunc) t = m.defaultFunc, n = 0;
                    else {
                        console.warn(`[Construct 3] Call mapped function: no function associated with map '${h}' string '${p}'; call ignored (consider setting a default)`);
                        return
                    }
                if (t.IsEnabled())
                    if (0 !== t.GetReturnType()) console.warn(`[Construct 3] Call mapped function: map '${h}' string '${p}' has a return type so cannot be called`);
                    else {
                        h = this._runtime;
                        p = h.GetEventSheetManager();
                        var q = p.GetCurrentEvent();
                        m = q.GetSolModifiersIncludingParents();
                        var u = 0 < m.length;
                        u && p.PushCleanSol(m);
                        var r = [];
                        if (q = p.FindFirstFunctionBlockParent(q)) {
                            q = q.GetFunctionParameters();
                            for (let x = n, z = q.length; x < z; ++x) r.push(q[x].GetValue())
                        }
                        n = t.GetFunctionParameters();
                        for (let x = r.length, z = n.length; x <
                            z; ++x) r.push(n[x].GetInitialValue());
                        return h.IsDebugging() ? this._DebugDoCallMappedFunction(p, t, r, u, m) : this._DoCallMappedFunction(p, t, r, u, m)
                    }
            } else console.warn(`[Construct 3] Call mapped function: map name '${h}' not found; call ignored`)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.System.Exps = {
        int: function(b) {
            "string" === typeof b && (b = parseInt(b, 10), isNaN(b) && (b = 0));
            return Math.floor(b)
        },
        float: function(b) {
            "string" === typeof b && (b = parseFloat(b), isNaN(b) && (b = 0));
            return b
        },
        str(b) {
            return b.toString()
        },
        len(b) {
            return "string" === typeof b ? b.length : 0
        },
        random(b, a) {
            return "undefined" === typeof a ? this._runtime.Random() * b : this._runtime.Random() * (a - b) + b
        },
        choose(...b) {
            const a = Math.floor(this._runtime.Random() * b.length);
            return b[a]
        },
        pi() {
            return Math.PI
        },
        infinity() {
            return Infinity
        },
        sqrt(b) {
            return Math.sqrt(b)
        },
        abs(b) {
            return Math.abs(b)
        },
        round(b) {
            return Math.round(b)
        },
        floor(b) {
            return Math.floor(b)
        },
        ceil(b) {
            return Math.ceil(b)
        },
        sign(b) {
            return Math.sign(b)
        },
        sin(b) {
            return Math.sin(f.toRadians(b))
        },
        cos(b) {
            return Math.cos(f.toRadians(b))
        },
        tan(b) {
            return Math.tan(f.toRadians(b))
        },
        asin(b) {
            return f.toDegrees(Math.asin(b))
        },
        acos(b) {
            return f.toDegrees(Math.acos(b))
        },
        atan(b) {
            return f.toDegrees(Math.atan(b))
        },
        exp(b) {
            return Math.exp(b)
        },
        ln(b) {
            return Math.log(b)
        },
        log10(b) {
            return Math.log(b) /
                Math.LN10
        },
        max(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for (let d = 1, c = b.length; d < c; ++d) {
                let e = b[d];
                "number" === typeof e && a < e && (a = e)
            }
            return a
        },
        min(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for (let d = 1, c = b.length; d < c; ++d) {
                let e = b[d];
                "number" === typeof e && a > e && (a = e)
            }
            return a
        },
        clamp(b, a, d) {
            return f.clamp(b, a, d)
        },
        distance(b, a, d, c) {
            return f.distanceTo(b, a, d, c)
        },
        angle(b, a, d, c) {
            return f.toDegrees(f.angleTo(b, a, d, c))
        },
        lerp(b, a, d) {
            return f.lerp(b, a, d)
        },
        unlerp(b, a, d) {
            return f.unlerp(b, a, d)
        },
        qarp(b, a, d, c) {
            return f.qarp(b,
                a, d, c)
        },
        cubic(b, a, d, c, e) {
            return f.cubic(b, a, d, c, e)
        },
        cosp(b, a, d) {
            return f.cosp(b, a, d)
        },
        anglediff(b, a) {
            return f.toDegrees(f.angleDiff(f.toRadians(b), f.toRadians(a)))
        },
        anglelerp(b, a, d) {
            return f.toDegrees(f.angleLerp(f.toRadians(b), f.toRadians(a), d))
        },
        anglerotate(b, a, d) {
            return f.toDegrees(f.angleRotate(f.toRadians(b), f.toRadians(a), f.toRadians(d)))
        },
        setbit(b, a, d) {
            a |= 0;
            return (b | 0) & ~(1 << a) | (0 !== d ? 1 : 0) << a
        },
        togglebit(b, a) {
            return (b | 0) ^ 1 << (a | 0)
        },
        getbit(b, a) {
            return (b | 0) & 1 << (a | 0) ? 1 : 0
        },
        newline() {
            return "\n"
        },
        uppercase(b) {
            return "string" ===
                typeof b ? b.toUpperCase() : ""
        },
        lowercase(b) {
            return "string" === typeof b ? b.toLowerCase() : ""
        },
        left(b, a) {
            return "string" === typeof b ? b.substr(0, a) : ""
        },
        mid(b, a, d) {
            return "string" !== typeof b ? "" : 0 > d ? b.substr(a) : b.substr(a, d)
        },
        right(b, a) {
            return "string" === typeof b ? b.substr(b.length - a) : ""
        },
        trim(b) {
            return "string" === typeof b ? b.trim() : ""
        },
        tokenat(b, a, d) {
            if ("string" !== typeof b || "string" !== typeof d) return "";
            b = b.split(d);
            a = Math.floor(a);
            return 0 > a || a >= b.length ? "" : b[a]
        },
        tokencount(b, a) {
            return "string" === typeof b && "string" ===
                typeof a && b.length ? b.split(a).length : 0
        },
        find(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(f.EscapeRegex(a), "i")) : -1
        },
        findcase(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(f.EscapeRegex(a), "")) : -1
        },
        replace(b, a, d) {
            return "string" === typeof b && "string" === typeof a && "string" === typeof d ? b.replace(new RegExp(f.EscapeRegex(a), "gi"), d) : "string" === typeof b ? b : ""
        },
        regexsearch(b, a, d) {
            a = this.GetRegex(a, d);
            return b ? b.search(a) : -1
        },
        regexreplace(b, a, d, c) {
            a = this.GetRegex(a,
                d);
            return b ? b.replace(a, c) : ""
        },
        regexmatchcount(b, a, d) {
            return (b = this.GetRegexMatches(b.toString(), a, d)) ? b.length : 0
        },
        regexmatchat(b, a, d, c) {
            c = Math.floor(c);
            b = this.GetRegexMatches(b.toString(), a, d);
            return !b || 0 > c || c >= b.length ? "" : b[c]
        },
        zeropad(b, a) {
            let d = 0 > b ? "-" : "";
            0 > b && (b = -b);
            d += "0".repeat(Math.max(a - b.toString().length, 0));
            return d + b.toString()
        },
        urlencode(b) {
            return encodeURIComponent(b)
        },
        urldecode(b) {
            return decodeURIComponent(b)
        },
        dt() {
            return this._runtime._GetDtFast()
        },
        timescale() {
            return this._runtime.GetTimeScale()
        },
        wallclocktime() {
            return (Date.now() - this._runtime.GetStartTime()) / 1E3
        },
        unixtime() {
            return Date.now()
        },
        time() {
            return this._runtime.GetGameTime()
        },
        tickcount() {
            return this._runtime.GetTickCount()
        },
        objectcount() {
            return this._runtime.GetObjectCount()
        },
        fps() {
            return this._runtime.GetFPS()
        },
        cpuutilisation() {
            return this._runtime.GetMainThreadTime()
        },
        gpuutilisation() {
            return this._runtime.GetGPUUtilisation()
        },
        windowwidth() {
            return this._runtime.GetCanvasManager().GetDeviceWidth()
        },
        windowheight() {
            return this._runtime.GetCanvasManager().GetDeviceHeight()
        },
        originalwindowwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalwindowheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        originalviewportwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalviewportheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        scrollx() {
            return this._runtime.GetCurrentLayout().GetScrollX()
        },
        scrolly() {
            return this._runtime.GetCurrentLayout().GetScrollY()
        },
        layoutname() {
            return this._runtime.GetCurrentLayout().GetName()
        },
        layoutscale() {
            return this._runtime.GetCurrentLayout().GetScale()
        },
        layoutangle() {
            return f.toDegrees(this._runtime.GetCurrentLayout().GetAngle())
        },
        layoutwidth() {
            return this._runtime.GetCurrentLayout().GetWidth()
        },
        layoutheight() {
            return this._runtime.GetCurrentLayout().GetHeight()
        },
        viewportleft(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getLeft() : 0
        },
        viewporttop(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getTop() : 0
        },
        viewportright(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getRight() :
                0
        },
        viewportbottom(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getBottom() : 0
        },
        viewportwidth(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().width() : 0
        },
        viewportheight(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().height() : 0
        },
        canvastolayerx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[0] : 0
        },
        canvastolayery(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a,
                d)[1] : 0
        },
        layertocanvasx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[0] : 0
        },
        layertocanvasy(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[1] : 0
        },
        layerscale(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetOwnScale() : 0
        },
        layerangle(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? f.toDegrees(b.GetOwnAngle()) : 0
        },
        layeropacity(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetOpacity() :
                0
        },
        layerscalerate(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScaleRate() : 0
        },
        layerparallaxx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetParallaxX() : 0
        },
        layerparallaxy(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetParallaxY() : 0
        },
        layerzelevation(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetZElevation() : 0
        },
        layerindex(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetIndex() : -1
        },
        canvassnapshot() {
            const b = this._runtime.GetCanvasManager();
            return b ? b.GetCanvasSnapshotUrl() : ""
        },
        loopindex(b) {
            const a = this._loopStack;
            return a.IsInLoop() ? b ? (b = a.FindByName(b)) ? b.GetIndex() : 0 : a.GetCurrent().GetIndex() : 0
        },
        savestatejson() {
            return this._runtime.GetLastSaveJsonString()
        },
        callmapped(b, a, ...d) {
            var c = this._GetFunctionMap(b.toLowerCase(), !1);
            if (!c) return console.warn(`[Construct 3] Call mapped function: map name '${b}' not found; returning 0`), 0;
            var e = c.strMap.get(a.toLowerCase());
            if (!e)
                if (c.defaultFunc) e = c.defaultFunc;
                else return console.warn(`[Construct 3] Call mapped function: no function associated with map '${b}' string '${a}'; returning 0 (consider setting a default)`),
                    0;
            c = e.GetReturnType();
            const k = e.GetDefaultReturnValue();
            if (0 === c) return console.warn(`[Construct 3] Call mapped function: map '${b}' string '${a}' has no return type so cannot be called from an expression; returning 0`), 0;
            if (!e.IsEnabled()) return k;
            b = this._runtime.GetEventSheetManager();
            a = b.GetCurrentEvent().GetSolModifiersIncludingParents();
            const h = 0 < a.length;
            h && b.PushCleanSol(a);
            const p = e.GetFunctionParameters();
            for (let n = d.length, m = p.length; n < m; ++n) d.push(p[n].GetInitialValue());
            e = e.GetEventBlock();
            d = e.RunAsExpressionFunctionCall(e.GetSolModifiersIncludingParents(), c, k, ...d);
            h && b.PopSol(a);
            return d
        },
        loadingprogress() {
            return this._runtime.GetAssetManager().GetLoadProgress()
        },
        imageloadingprogress() {
            return 0 === this._imagesLoadingTotal ? 1 : this._imagesLoadingComplete / this._imagesLoadingTotal
        },
        renderer() {
            return "webgl"
        },
        rendererdetail() {
            return this._runtime.GetWebGLRenderer().GetUnmaskedRenderer()
        },
        imagememoryusage() {
            let b = this._runtime.GetWebGLRenderer().GetEstimatedTextureMemoryUsage();
            return Math.round(100 *
                b / 1048576) / 100
        },
        rgb(b, a, d) {
            return f.PackRGB(b, a, d)
        },
        rgbex(b, a, d) {
            return f.PackRGBEx(b / 100, a / 100, d / 100)
        },
        rgba(b, a, d, c) {
            return f.PackRGBAEx(b / 100, a / 100, d / 100, c / 100)
        },
        rgbex255(b, a, d) {
            return f.PackRGBEx(b / 255, a / 255, d / 255)
        },
        rgba255(b, a, d, c) {
            return f.PackRGBAEx(b / 255, a / 255, d / 255, c / 255)
        },
        projectname() {
            return this._runtime.GetProjectName()
        },
        projectversion() {
            return this._runtime.GetProjectVersion()
        },
        currenteventsheetname() {
            return this._runtime.GetCurrentEvent().GetEventSheet().GetName()
        },
        currenteventnumber() {
            return this._runtime.GetCurrentEvent().GetDisplayNumber()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Sprite = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Sprite.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b);
            this._animations = b.GetAnimations()
        }
        Release() {
            f.clearArray(this._animations);
            super.Release()
        }
        OnCreate() {
            for (const b of this._animations) b.LoadAllAssets(this._runtime)
        }
        LoadTextures(b) {
            const a = {
                sampling: this._runtime.GetSampling()
            };
            return Promise.all(this._animations.map(d => d.LoadAllTextures(b, a)))
        }
        ReleaseTextures() {
            for (const b of this._animations) b.ReleaseAllTextures()
        }
        OnDynamicTextureLoadComplete() {
            this._UpdateAllCurrentTexture()
        }
        _UpdateAllCurrentTexture() {
            for (const b of this._objectClass.instancesIncludingPendingCreate()) b.GetSdkInstance()._UpdateCurrentTexture()
        }
        FinishCondition(b) {
            f.Plugins.Sprite._FinishCondition(this,
                b)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = f.New(f.Rect),
        d = f.New(f.Quad),
        c = f.New(f.Vector2);
    f.Plugins.Sprite.Instance = class extends f.SDKWorldInstanceBase {
        constructor(h, p) {
            super(h);
            let n = !0,
                m = "",
                t = 0,
                q = !0;
            p && (n = !!p[0], m = p[1], t = p[2], q = p[3]);
            this._currentAnimation = this._objectClass.GetAnimationByName(m) || this._objectClass.GetAnimations()[0];
            this._currentFrameIndex = f.clamp(t, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            p = this._currentAnimationFrame.GetImageInfo();
            this._currentTexture = p.GetTexture();
            this._currentRcTex = p.GetTexRect();
            this.HandleWebGLContextLoss();
            h.SetFlag(2, !0);
            h.SetFlag(1, 0 <= this._currentAnimation.GetSpeed());
            this._currentAnimationSpeed = Math.abs(this._currentAnimation.GetSpeed());
            this._currentAnimationRepeatTo = this._currentAnimation.GetRepeatTo();
            this._animationTimer = f.New(f.KahanSum);
            this._animationRepeats = this._frameStartTime = 0;
            this._animTriggerName = "";
            this._changeAnimFrameIndex = -1;
            this._changeAnimationName = "";
            this._changeAnimationFrom =
                0;
            h = this.GetWorldInfo();
            this._bquadRef = h.GetBoundingQuad();
            h.SetVisible(n);
            h.SetCollisionEnabled(q);
            h.SetOriginX(this._currentAnimationFrame.GetOriginX());
            h.SetOriginY(this._currentAnimationFrame.GetOriginY());
            h.SetSourceCollisionPoly(this._currentAnimationFrame.GetCollisionPoly());
            h.SetBboxChanged();
            1 === this._objectClass.GetAnimationCount() && 1 === this._objectClass.GetAnimations()[0].GetFrameCount() || 0 === this._currentAnimationSpeed || this._StartTicking()
        }
        Release() {
            this._animationTimer = this._currentTexture =
                this._currentAnimationFrame = this._currentAnimation = null;
            super.Release()
        }
        GetCurrentImageInfo() {
            return this._currentAnimationFrame.GetImageInfo()
        }
        IsOriginalSizeKnown() {
            return !0
        }
        OnWebGLContextLost() {
            this._currentTexture = null
        }
        OnWebGLContextRestored() {
            this._UpdateCurrentTexture()
        }
        Draw(h) {
            var p = this._currentTexture;
            null !== p && (h.SetTexture(p), p = this.GetWorldInfo(), p.HasMesh() ? this._DrawMesh(p, h) : this._DrawStandard(p, h))
        }
        _DrawStandard(h, p) {
            let n = this._bquadRef;
            this._runtime.IsPixelRoundingEnabled() && (n = h.PixelRoundQuad(n));
            p.Quad3(n, this._currentRcTex)
        }
        _DrawMesh(h, p) {
            const n = h.GetTransformedMesh();
            if (h.IsMeshChanged()) {
                h.CalculateBbox(a, d, !1);
                let m = d;
                this._runtime.IsPixelRoundingEnabled() && (m = h.PixelRoundQuad(m));
                n.CalculateTransformedMesh(h.GetSourceMesh(), m, this._currentRcTex);
                h.SetMeshChanged(!1)
            }
            n.Draw(p)
        }
        GetAnimationTime() {
            return this._animationTimer.Get()
        }
        IsAnimationPlaying() {
            return this._inst.GetFlag(2)
        }
        SetAnimationPlaying(h) {
            this._inst.SetFlag(2, h)
        }
        IsPlayingForwards() {
            return this._inst.GetFlag(1)
        }
        SetPlayingForwards(h) {
            this._inst.SetFlag(1,
                h)
        }
        IsInAnimationTrigger() {
            return this._inst.GetFlag(4)
        }
        SetInAnimationTrigger(h) {
            this._inst.SetFlag(4, h)
        }
        Tick() {
            this._changeAnimationName && this._DoChangeAnimation();
            0 <= this._changeAnimFrameIndex && this._DoChangeAnimFrame();
            const h = this._currentAnimationSpeed;
            if (this.IsAnimationPlaying() && 0 !== h) {
                var p = this._runtime.GetDt(this._inst);
                this._animationTimer.Add(p);
                p = this.GetAnimationTime();
                var n = this._currentAnimationFrame,
                    m = n.GetDuration() / h;
                if (!(p < this._frameStartTime + m)) {
                    var t = this._currentAnimation,
                        q = this._currentAnimationRepeatTo,
                        u = t.GetFrameCount(),
                        r = t.GetRepeatCount(),
                        x = t.IsLooping(),
                        z = t.IsPingPong();
                    this.IsPlayingForwards() ? this._currentFrameIndex++ : this._currentFrameIndex--;
                    this._frameStartTime += m;
                    this._currentFrameIndex >= u && (z ? (this.SetPlayingForwards(!1), this._currentFrameIndex = u - 2) : x ? this._currentFrameIndex = q : (this._animationRepeats++, this._animationRepeats >= r ? this._FinishAnimation(!1) : this._currentFrameIndex = q));
                    0 > this._currentFrameIndex && (z ? (this._currentFrameIndex = 1, this.SetPlayingForwards(!0),
                        x || (this._animationRepeats++, this._animationRepeats >= r && this._FinishAnimation(!0))) : x ? this._currentFrameIndex = q : (this._animationRepeats++, this._animationRepeats >= r ? this._FinishAnimation(!0) : this._currentFrameIndex = q));
                    this._currentFrameIndex = f.clamp(this._currentFrameIndex, 0, u - 1);
                    m = t.GetFrameAt(this._currentFrameIndex);
                    p > this._frameStartTime + m.GetDuration() / h && (this._frameStartTime = p);
                    this._OnFrameChanged(n, m)
                }
            } else this._StopTicking()
        }
        _FinishAnimation(h) {
            this._currentFrameIndex = h ? 0 : this._currentAnimation.GetFrameCount() -
                1;
            this.SetAnimationPlaying(!1);
            this._animTriggerName = this._currentAnimation.GetName();
            this.SetInAnimationTrigger(!0);
            this.Trigger(f.Plugins.Sprite.Cnds.OnAnyAnimFinished);
            this.Trigger(f.Plugins.Sprite.Cnds.OnAnimFinished);
            this.SetInAnimationTrigger(!1);
            this._animationRepeats = 0
        }
        _OnFrameChanged(h, p) {
            if (h !== p) {
                var n = this.GetWorldInfo(),
                    m = h.GetImageInfo(),
                    t = p.GetImageInfo(),
                    q = m.GetWidth();
                m = m.GetHeight();
                var u = t.GetWidth(),
                    r = t.GetHeight();
                q !== u && n.SetWidth(n.GetWidth() * (u / q));
                m !== r && n.SetHeight(n.GetHeight() *
                    (r / m));
                n.SetOriginX(p.GetOriginX());
                n.SetOriginY(p.GetOriginY());
                n.SetSourceCollisionPoly(p.GetCollisionPoly());
                n.SetBboxChanged();
                this._currentAnimationFrame = p;
                this._currentTexture = t.GetTexture();
                this._currentRcTex = t.GetTexRect();
                n = this.GetInstance().GetBehaviorInstances();
                for (let x = 0, z = n.length; x < z; ++x) n[x].OnSpriteFrameChanged(h, p);
                this.Trigger(f.Plugins.Sprite.Cnds.OnFrameChanged);
                this._runtime.UpdateRender()
            }
        }
        _StartAnim(h) {
            this.SetAnimationPlaying(!0);
            this._frameStartTime = this.GetAnimationTime();
            1 === h && 0 !== this._currentFrameIndex && (this._changeAnimFrameIndex = 0, this.IsInAnimationTrigger() || this._DoChangeAnimFrame());
            this._StartTicking()
        }
        _SetAnim(h, p) {
            this._changeAnimationName = h;
            this._changeAnimationFrom = p;
            this._StartTicking();
            this.IsInAnimationTrigger() || this._DoChangeAnimation()
        }
        _GetCurrentAnimationName() {
            return this._changeAnimationName ? this._changeAnimationName : this._currentAnimation.GetName()
        }
        _SetAnimFrame(h) {
            isFinite(h) && (this._changeAnimFrameIndex = h, this.IsInAnimationTrigger() || this._DoChangeAnimFrame())
        }
        _GetAnimFrame() {
            return this._currentFrameIndex
        }
        _SetAnimSpeed(h) {
            this._currentAnimationSpeed =
                Math.abs(h);
            this.SetPlayingForwards(0 <= h);
            0 < this._currentAnimationSpeed && this._StartTicking()
        }
        _GetAnimSpeed() {
            return this.IsPlayingForwards() ? this._currentAnimationSpeed : -this._currentAnimationSpeed
        }
        _SetAnimRepeatToFrame(h) {
            this._currentAnimationRepeatTo = h = f.clamp(Math.floor(h), 0, this._currentAnimation.GetFrameCount() - 1)
        }
        _GetAnimRepeatToFrame() {
            return this._currentAnimationRepeatTo
        }
        _DoChangeAnimation() {
            const h = this._currentAnimationFrame;
            var p = this._objectClass.GetAnimationByName(this._changeAnimationName);
            this._changeAnimationName = "";
            !p || p === this._currentAnimation && this.IsAnimationPlaying() || (this._currentAnimation = p, this.SetPlayingForwards(0 <= p.GetSpeed()), this._currentAnimationSpeed = Math.abs(p.GetSpeed()), this._currentAnimationRepeatTo = p.GetRepeatTo(), this._currentFrameIndex = f.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1), 1 === this._changeAnimationFrom && (this._currentFrameIndex = 0), this.SetAnimationPlaying(!0), this._frameStartTime = this.GetAnimationTime(), p = this._currentAnimation.GetFrameAt(this._currentFrameIndex),
                this._OnFrameChanged(h, p))
        }
        _DoChangeAnimFrame() {
            const h = this._currentAnimationFrame;
            var p = this._currentFrameIndex;
            this._currentFrameIndex = f.clamp(Math.floor(this._changeAnimFrameIndex), 0, this._currentAnimation.GetFrameCount() - 1);
            this._changeAnimFrameIndex = -1;
            p !== this._currentFrameIndex && (p = this._currentAnimation.GetFrameAt(this._currentFrameIndex), this._OnFrameChanged(h, p), this._frameStartTime = this.GetAnimationTime())
        }
        _UpdateCurrentTexture() {
            const h = this._currentAnimationFrame.GetImageInfo();
            this._currentTexture =
                h.GetTexture();
            this._currentRcTex = h.GetTexRect();
            this.GetWorldInfo().SetMeshChanged(!0)
        }
        GetTexture() {
            return this._currentTexture
        }
        GetTexRect() {
            return this._currentRcTex
        }
        GetImagePointCount() {
            return this._currentAnimationFrame.GetImagePointCount()
        }
        GetImagePoint(h) {
            const p = this._currentAnimationFrame,
                n = this.GetWorldInfo();
            if ("string" === typeof h) h = p.GetImagePointByName(h);
            else if ("number" === typeof h) h = p.GetImagePointByIndex(h - 1);
            else throw new TypeError("expected string or number");
            if (!h) return [n.GetX(),
                n.GetY()
            ];
            c.copy(h.GetVec2());
            if (n.HasMesh()) {
                const [m, t] = n.GetSourceMesh().TransformPoint(c.getX(), c.getY());
                c.set(m, t)
            }
            c.offset(-p.GetOriginX(), -p.GetOriginY());
            c.scale(n.GetWidth(), n.GetHeight());
            c.rotate(n.GetAngle());
            c.offset(n.GetX(), n.GetY());
            return [c.getX(), c.getY()]
        }
        GetCollisionPolyPointCount() {
            return this.GetWorldInfo().GetTransformedCollisionPoly().pointCount()
        }
        GetCollisionPolyPoint(h) {
            h = Math.floor(h);
            const p = this.GetWorldInfo();
            var n = p.GetTransformedCollisionPoly();
            const m = n.pointCount();
            h === m && (h = 0);
            if (0 > h || h >= m) return [0, 0];
            n = n.pointsArr();
            return [n[2 * h] + p.GetX(), n[2 * h + 1] + p.GetY()]
        }
        GetDebuggerProperties() {
            const h = f.Plugins.Sprite.Acts;
            return [{
                title: "plugins.sprite.debugger.animation-properties.title",
                properties: [{
                    name: "plugins.sprite.debugger.animation-properties.current-animation",
                    value: this._currentAnimation.GetName(),
                    onedit: p => this.CallAction(h.SetAnim, p, 0)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.current-frame",
                    value: this._currentFrameIndex,
                    onedit: p => this.CallAction(h.SetAnimFrame,
                        p)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.is-playing",
                    value: this.IsAnimationPlaying(),
                    onedit: p => p ? this.CallAction(h.StartAnim, 0) : this.CallAction(h.StopAnim)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.speed",
                    value: this._currentAnimationSpeed,
                    onedit: p => this.CallAction(h.SetAnimSpeed, p)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.repeats",
                    value: this._animationRepeats,
                    onedit: p => this._animationRepeats = p
                }]
            }]
        }
        SaveToJson() {
            const h = {
                a: this._currentAnimation.GetSID()
            };
            0 !== this._frameStartTime &&
                (h.fs = this._frameStartTime);
            var p = this.GetAnimationTime();
            0 !== p && (h.at = p);
            0 !== this._currentFrameIndex && (h.f = this._currentFrameIndex);
            0 !== this._currentAnimationSpeed && (h.cas = this._currentAnimationSpeed);
            1 !== this._animationRepeats && (h.ar = this._animationRepeats);
            0 !== this._currentAnimationRepeatTo && (h.rt = this._currentAnimationRepeatTo);
            this.IsAnimationPlaying() || (h.ap = this.IsAnimationPlaying());
            this.IsPlayingForwards() || (h.af = this.IsPlayingForwards());
            p = this.GetWorldInfo();
            p.IsCollisionEnabled() && (h.ce =
                p.IsCollisionEnabled());
            return h
        }
        LoadFromJson(h) {
            var p = this.GetObjectClass().GetAnimationBySID(h.a);
            p && (this._currentAnimation = p);
            this._frameStartTime = h.hasOwnProperty("fs") ? h.fs : 0;
            this._animationTimer.Set(h.hasOwnProperty("at") ? h.at : 0);
            p = h.hasOwnProperty("f") ? h.f : 0;
            this._currentFrameIndex = f.clamp(p, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationSpeed = h.hasOwnProperty("cas") ? h.cas : 0;
            this._animationRepeats = h.hasOwnProperty("ar") ? h.ar : 1;
            p = h.hasOwnProperty("rt") ? h.rt : 0;
            this._currentAnimationRepeatTo =
                f.clamp(p, 0, this._currentAnimation.GetFrameCount() - 1);
            this.SetAnimationPlaying(h.hasOwnProperty("ap") ? !!h.ap : !0);
            this.SetPlayingForwards(h.hasOwnProperty("af") ? !!h.af : !0);
            this._currentAnimationFrame = p = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            this._UpdateCurrentTexture();
            const n = this.GetWorldInfo();
            n.SetOriginX(p.GetOriginX());
            n.SetOriginY(p.GetOriginY());
            n.SetSourceCollisionPoly(p.GetCollisionPoly());
            n.SetCollisionEnabled(!!h.ce)
        }
        GetPropertyValueByIndex(h) {
            const p = this.GetWorldInfo();
            switch (h) {
                case 3:
                    return p.IsCollisionEnabled();
                case 2:
                    return f.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1)
            }
        }
        SetPropertyValueByIndex(h, p) {
            var n = this.GetWorldInfo();
            switch (h) {
                case 3:
                    n.SetCollisionEnabled(!!p);
                    break;
                case 2:
                    this.SetAnimationPlaying(!1);
                    h = this._currentAnimation.GetFrameCount() - 1;
                    n = p = f.clamp(p, 0, h);
                    p = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                    const m = this._currentAnimation.GetFrameAt(n);
                    this._OnFrameChanged(p, m);
                    this._currentFrameIndex = f.clamp(n,
                        0, h)
            }
        }
        GetScriptInterfaceClass() {
            return self.ISpriteInstance
        }
    };
    const e = new WeakMap,
        k = new Map([
            ["current-frame", 0],
            ["beginning", 1]
        ]);
    self.ISpriteInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            e.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        getImagePointCount() {
            return e.get(this).GetImagePointCount()
        }
        getImagePointX(h) {
            if ("string" !== typeof h && "number" !== typeof h) throw new TypeError("expected string or number");
            return e.get(this).GetImagePoint(h)[0]
        }
        getImagePointY(h) {
            if ("string" !==
                typeof h && "number" !== typeof h) throw new TypeError("expected string or number");
            return e.get(this).GetImagePoint(h)[1]
        }
        getImagePoint(h) {
            if ("string" !== typeof h && "number" !== typeof h) throw new TypeError("expected string or number");
            return e.get(this).GetImagePoint(h)
        }
        getPolyPointCount() {
            return e.get(this).GetCollisionPolyPointCount()
        }
        getPolyPointX(h) {
            b.RequireFiniteNumber(h);
            return e.get(this).GetCollisionPolyPoint(h)[0]
        }
        getPolyPointY(h) {
            b.RequireFiniteNumber(h);
            return e.get(this).GetCollisionPolyPoint(h)[1]
        }
        getPolyPoint(h) {
            b.RequireFiniteNumber(h);
            return e.get(this).GetCollisionPolyPoint(h)
        }
        stopAnimation() {
            e.get(this).SetAnimationPlaying(!1)
        }
        startAnimation(h = "current-frame") {
            b.RequireString(h);
            h = k.get(h);
            if ("undefined" === typeof h) throw Error("invalid mode");
            e.get(this)._StartAnim(h)
        }
        setAnimation(h, p = "beginning") {
            b.RequireString(h);
            b.RequireString(p);
            p = k.get(p);
            if ("undefined" === typeof p) throw Error("invalid mode");
            e.get(this)._SetAnim(h, p)
        }
        get animationName() {
            return e.get(this)._GetCurrentAnimationName()
        }
        set animationFrame(h) {
            b.RequireFiniteNumber(h);
            e.get(this)._SetAnimFrame(h)
        }
        get animationFrame() {
            return e.get(this)._GetAnimFrame()
        }
        set animationSpeed(h) {
            b.RequireFiniteNumber(h);
            e.get(this)._SetAnimSpeed(h)
        }
        get animationSpeed() {
            return e.get(this)._GetAnimSpeed()
        }
        set animationRepeatToFrame(h) {
            b.RequireFiniteNumber(h);
            e.get(this)._SetAnimRepeatToFrame(h)
        }
        get animationRepeatToFrame() {
            return e.get(this)._GetAnimRepeatToFrame()
        }
        get imageWidth() {
            return e.get(this).GetCurrentImageInfo().GetWidth()
        }
        get imageHeight() {
            return e.get(this).GetCurrentImageInfo().GetHeight()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = f.New(f.Rect),
        a = [],
        d = [];
    let c = !1,
        e = null,
        k = !1;
    const h = new Set;

    function p(r, x, z, C) {
        const w = x.GetUID(),
            B = z.GetUID();
        w < B ? r.Set(x, z, C) : r.Set(z, x, C)
    }

    function n(r, x, z) {
        const C = x.GetUID(),
            w = z.GetUID();
        C < w ? r.Delete(x, z) : r.Delete(z, x)
    }

    function m(r, x) {
        r.DeleteEither(x)
    }

    function t(r, x, z) {
        const C = x.GetUID(),
            w = z.GetUID();
        return C < w ? r.Get(x, z) : r.Get(z, x)
    }

    function q(r, x, z, C) {
        if (!x) return !1;
        r = r.GetInstance();
        const w = 0 !== z || 0 !== C,
            B = r.GetWorldInfo(),
            F = r.GetRuntime(),
            J = F.GetCollisionEngine();
        var O =
            F.GetCurrentCondition();
        const G = O.GetEventBlock().IsOrBlock();
        var I = O.GetObjectClass();
        O = O.IsInverted();
        const P = x.GetCurrentSol();
        I = I !== x;
        e = x;
        c = I && !O;
        k = !1;
        let Q = 0,
            T = 0,
            X = !1;
        P.IsSelectAll() ? (b.copy(B.GetBoundingBox()), b.offset(z, C), J.GetCollisionCandidates(B.GetLayer(), x, b, d), x = d) : G ? F.IsCurrentConditionFirst() && !P._GetOwnElseInstances().length && P._GetOwnInstances().length ? x = P._GetOwnInstances() : (x = P._GetOwnElseInstances(), k = !0) : x = P._GetOwnInstances();
        w && (Q = B.GetX(), T = B.GetY(), B.OffsetXY(z, C), B.SetBboxChanged());
        for (const Z of x)
            if (J.TestOverlap(r, Z)) {
                X = !0;
                if (O) break;
                I && h.add(Z)
            }
        w && (B.SetXY(Q, T), B.SetBboxChanged());
        f.clearArray(d);
        return X
    }

    function u(r) {
        r = r.GetRuntime().GetCurrentEvent().IsOrBlock();
        const x = e.GetCurrentSol(),
            z = x._GetOwnInstances(),
            C = x._GetOwnElseInstances();
        x.IsSelectAll() ? (x.SetSetPicked(h), r && (f.clearArray(C), x.AddElseInstances(h, e.GetInstances()))) : r ? k ? x.TransferElseInstancesToOwn(h) : (x.AddElseInstances(h, z), x.SetSetPicked(h)) : x.SetSetPicked(h);
        e.ApplySolToContainer()
    }
    f.Plugins.Sprite._FinishCondition =
        function(r, x) {
            c && (x && u(r), h.clear(), e = null, c = !1)
        };
    f.Plugins.Sprite.Cnds = {
        OnCollision(r) {
            if (this._runtime.IsDebugging()) return f.Plugins.Sprite.Cnds.DebugOnCollision.call(this, r);
            if (!r) return !1;
            var x = this._runtime;
            const z = x.GetCollisionEngine(),
                C = x.GetEventSheetManager(),
                w = C.GetEventStack();
            var B = C.GetCurrentCondition();
            const F = B.GetObjectClass();
            var J = B.GetSavedDataMap(),
                O = B.GetUnsavedDataMap();
            B = w.GetCurrentStackFrame();
            const G = x.GetTickCount(),
                I = G - 1,
                P = B.GetCurrentEvent(),
                Q = w.Push(P);
            let T = J.get("collmemory");
            T || (T = f.New(f.PairMap), J.set("collmemory", T));
            O.get("spriteCreatedDestroyCallback") || (O.set("spriteCreatedDestroyCallback", !0), x.Dispatcher().addEventListener("instancedestroy", ia => m(T, ia.instance)));
            J = F.GetCurrentSol();
            x = r.GetCurrentSol();
            J = J.GetInstances();
            O = null;
            for (let ia = 0; ia < J.length; ++ia) {
                const ba = J[ia];
                x.IsSelectAll() ? (z.GetCollisionCandidates(ba.GetWorldInfo().GetLayer(), r, ba.GetWorldInfo().GetBoundingBox(), a), O = a, z.AddRegisteredCollisionCandidates(ba, r, O)) : O = x.GetInstances();
                for (let xa =
                        0; xa < O.length; ++xa) {
                    const ua = O[xa];
                    if (z.TestOverlap(ba, ua) || z.CheckRegisteredCollision(ba, ua)) {
                        var X = t(T, ba, ua),
                            Z = !1,
                            fa = -2;
                        "number" === typeof X && (Z = !0, fa = X);
                        X = !Z || fa < I;
                        p(T, ba, ua, G);
                        X && (X = P.GetSolModifiers(), C.PushCopySol(X), fa = F.GetCurrentSol(), Z = r.GetCurrentSol(), fa._SetSelectAll(!1), Z._SetSelectAll(!1), F === r ? (Z = fa._GetOwnInstances(), f.clearArray(Z), Z.push(ba), Z.push(ua), F.ApplySolToContainer()) : (fa = fa._GetOwnInstances(), Z = Z._GetOwnInstances(), f.clearArray(fa), f.clearArray(Z), fa.push(ba), Z.push(ua),
                            F.ApplySolToContainer(), r.ApplySolToContainer()), P.Retrigger(B, Q), C.PopSol(X))
                    } else n(T, ba, ua)
                }
                f.clearArray(a)
            }
            w.Pop();
            return !1
        },
        * DebugOnCollision(r) {
            if (!r) return !1;
            var x = this._runtime;
            const z = x.GetCollisionEngine(),
                C = x.GetEventSheetManager(),
                w = C.GetEventStack(),
                B = w.GetCurrentStackFrame(),
                F = x.GetTickCount(),
                J = F - 1,
                O = B.GetCurrentEvent(),
                G = w.Push(O);
            var I = C.GetCurrentCondition();
            const P = I.GetObjectClass();
            var Q = I.GetSavedDataMap();
            I = I.GetUnsavedDataMap();
            let T = Q.get("collmemory");
            T || (T = f.New(f.PairMap),
                Q.set("collmemory", T));
            I.get("spriteCreatedDestroyCallback") || (I.set("spriteCreatedDestroyCallback", !0), x.Dispatcher().addEventListener("instancedestroy", ia => m(T, ia.instance)));
            Q = P.GetCurrentSol();
            x = r.GetCurrentSol();
            Q = Q.GetInstances();
            I = null;
            for (let ia = 0; ia < Q.length; ++ia) {
                const ba = Q[ia];
                x.IsSelectAll() ? (z.GetCollisionCandidates(ba.GetWorldInfo().GetLayer(), r, ba.GetWorldInfo().GetBoundingBox(), a), I = a, z.AddRegisteredCollisionCandidates(ba, r, I)) : I = x.GetInstances();
                for (let xa = 0; xa < I.length; ++xa) {
                    const ua =
                        I[xa];
                    if (z.TestOverlap(ba, ua) || z.CheckRegisteredCollision(ba, ua)) {
                        var X = t(T, ba, ua),
                            Z = !1,
                            fa = -2;
                        "number" === typeof X && (Z = !0, fa = X);
                        X = !Z || fa < J;
                        p(T, ba, ua, F);
                        X && (X = O.GetSolModifiers(), C.PushCopySol(X), fa = P.GetCurrentSol(), Z = r.GetCurrentSol(), fa._SetSelectAll(!1), Z._SetSelectAll(!1), P === r ? (Z = fa._GetOwnInstances(), f.clearArray(Z), Z.push(ba), Z.push(ua), P.ApplySolToContainer()) : (fa = fa._GetOwnInstances(), Z = Z._GetOwnInstances(), f.clearArray(fa), f.clearArray(Z), fa.push(ba), Z.push(ua), P.ApplySolToContainer(), r.ApplySolToContainer()),
                            yield* O.DebugRetrigger(B, G), C.PopSol(X))
                    } else n(T, ba, ua)
                }
                f.clearArray(a)
            }
            w.Pop();
            return !1
        },
        IsOverlapping(r) {
            return q(this, r, 0, 0)
        },
        IsOverlappingOffset(r, x, z) {
            return q(this, r, x, z)
        },
        IsAnimPlaying(r) {
            return f.equalsNoCase(this._GetCurrentAnimationName(), r)
        },
        CompareFrame(r, x) {
            return f.compare(this._currentFrameIndex, r, x)
        },
        CompareAnimSpeed(r, x) {
            return f.compare(this._GetAnimSpeed(), r, x)
        },
        OnAnimFinished(r) {
            return f.equalsNoCase(this._animTriggerName, r)
        },
        OnAnyAnimFinished() {
            return !0
        },
        OnFrameChanged() {
            return !0
        },
        IsMirrored() {
            return 0 > this.GetWorldInfo().GetWidth()
        },
        IsFlipped() {
            return 0 > this.GetWorldInfo().GetHeight()
        },
        OnURLLoaded() {
            return !0
        },
        OnURLFailed() {
            return !0
        },
        IsCollisionEnabled() {
            return this.GetWorldInfo().IsCollisionEnabled()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Sprite.Acts = {
        Spawn(b, a, d, c) {
            if (b && a) {
                var [e, k] = this.GetImagePoint(d);
                if (d = this._runtime.CreateInstance(b, a, e, k, c)) {
                    c && a.SortAndAddSceneGraphInstancesByZIndex(d);
                    b.GetPlugin().IsRotatable() && (a = d.GetWorldInfo(), a.SetAngle(this.GetWorldInfo().GetAngle()), a.SetBboxChanged());
                    a = this._runtime.GetEventSheetManager();
                    a.BlockFlushingInstances(!0);
                    d._TriggerOnCreatedOnSelfAndRelated();
                    a.BlockFlushingInstances(!1);
                    c = this._runtime.GetCurrentAction().GetSavedDataMap();
                    a = !1;
                    if (!c.has("Spawn_LastExec") ||
                        c.get("Spawn_LastExec") < this._runtime.GetExecCount()) a = !0, c.set("Spawn_LastExec", this._runtime.GetExecCount());
                    if (b !== this.GetObjectClass() && (b = b.GetCurrentSol(), b._SetSelectAll(!1), b = b._GetOwnInstances(), a && f.clearArray(b), b.push(d), d.IsInContainer()))
                        for (const h of d.siblings()) d = h.GetObjectClass().GetCurrentSol(), a ? d.SetSinglePicked(h) : (d._SetSelectAll(!1), d._PushInstance(h))
                }
            }
        },
        StopAnim() {
            this.SetAnimationPlaying(!1)
        },
        StartAnim(b) {
            this._StartAnim(b)
        },
        SetAnim(b, a) {
            this._SetAnim(b, a)
        },
        SetAnimFrame(b) {
            this._SetAnimFrame(b)
        },
        SetAnimSpeed(b) {
            this._SetAnimSpeed(b)
        },
        SetAnimRepeatToFrame(b) {
            this._SetAnimRepeatToFrame(b)
        },
        SetMirrored(b) {
            const a = this.GetWorldInfo(),
                d = a.GetWidth();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetWidth(b), a.SetBboxChanged())
        },
        SetFlipped(b) {
            const a = this.GetWorldInfo(),
                d = a.GetHeight();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetHeight(b), a.SetBboxChanged())
        },
        SetScale(b) {
            const a = this._currentAnimationFrame.GetImageInfo(),
                d = this.GetWorldInfo();
            var c = 0 > d.GetWidth() ? -1 : 1;
            const e = 0 > d.GetHeight() ? -1 : 1;
            c *= a.GetWidth() *
                b;
            b = a.GetHeight() * b * e;
            if (d.GetWidth() !== c || d.GetHeight() !== b) d.SetSize(c, b), d.SetBboxChanged()
        },
        async LoadURL(b, a, d) {
            d = this._currentAnimationFrame.GetImageInfo();
            const c = this.GetWorldInfo(),
                e = this._runtime;
            if (d.GetURL() === b) 0 === a && (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged()), this.Trigger(f.Plugins.Sprite.Cnds.OnURLLoaded);
            else {
                var k = f.New(f.ImageInfo);
                try {
                    await k.LoadDynamicAsset(e, b);
                    if (!k.IsLoaded()) throw Error("image failed to load");
                    await k.LoadStaticTexture(e.GetWebGLRenderer(), {
                        sampling: this._runtime.GetSampling()
                    })
                } catch (h) {
                    console.error("Load image from URL failed: ", h);
                    this.Trigger(f.Plugins.Sprite.Cnds.OnURLFailed);
                    return
                }
                d.ReplaceWith(k);
                this._sdkType._UpdateAllCurrentTexture();
                this.WasReleased() || 0 !== a || (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged());
                e.UpdateRender();
                this.WasReleased() || await this.TriggerAsync(f.Plugins.Sprite.Cnds.OnURLLoaded)
            }
        },
        SetCollisions(b) {
            this.GetWorldInfo().SetCollisionEnabled(b)
        },
        SetSolidCollisionFilter(b, a) {
            this.GetWorldInfo().SetSolidCollisionFilter(0 ===
                b, a)
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        }
    }
}
"use strict";
self.C3.Plugins.Sprite.Exps = {
    AnimationFrame() {
        return this._currentFrameIndex
    },
    AnimationFrameCount() {
        return this._currentAnimation.GetFrameCount()
    },
    AnimationName() {
        return this._currentAnimation.GetName()
    },
    AnimationSpeed() {
        return this._GetAnimSpeed()
    },
    OriginalAnimationSpeed() {
        return this._currentAnimation.GetSpeed()
    },
    ImagePointX(f) {
        return this.GetImagePoint(f)[0]
    },
    ImagePointY(f) {
        return this.GetImagePoint(f)[1]
    },
    ImagePointCount() {
        return this.GetImagePointCount()
    },
    ImageWidth() {
        return this.GetCurrentImageInfo().GetWidth()
    },
    ImageHeight() {
        return this.GetCurrentImageInfo().GetHeight()
    },
    PolyPointXAt(f) {
        return this.GetCollisionPolyPoint(f)[0]
    },
    PolyPointYAt(f) {
        return this.GetCollisionPolyPoint(f)[1]
    },
    PolyPointCount() {
        return this.GetCollisionPolyPointCount()
    }
};
"use strict"; {
    const f = self.C3;
    f.Plugins.Touch = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X;
    f.Plugins.Touch.Type = class extends f.SDKTypeBase {
        constructor(c) {
            super(c)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.ITouchObjectType
        }
    };
    let a = null;

    function d() {
        return a.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.ITouchObjectType = class extends self.IObjectClass {
        constructor(c) {
            super(c);
            a = c;
            c.GetRuntime()._GetCommonScriptInterfaces().touch = this
        }
        requestPermission(c) {
            b.RequireString(c);
            const e = d();
            if ("orientation" === c) return e._RequestPermission(0);
            if ("motion" === c) return e._RequestPermission(1);
            throw Error("invalid type");
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Touch.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, "touch");
            this._touches = new Map;
            this._isMouseDown = this._useMouseInput = !1;
            this._getTouchIndex = this._curTouchY = this._curTouchX = this._triggerPermission = this._triggerId = this._triggerIndex = this._accWithGZ = this._accWithGY = this._accWithGX = this._accZ = this._accY = this._accX = this._orientGamma = this._orientBeta = this._orientAlpha = this._orientCompassHeading = 0;
            this._permissionPromises = [];
            a && (this._useMouseInput = a[0]);
            this.AddDOMMessageHandler("permission-result", d => this._OnPermissionResult(d));
            b = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "pointerdown", d => this._OnPointerDown(d.data)), f.Disposable.From(b, "pointermove", d => this._OnPointerMove(d.data)), f.Disposable.From(b, "pointerup", d => this._OnPointerUp(d.data, !1)), f.Disposable.From(b, "pointercancel", d => this._OnPointerUp(d.data, !0)), f.Disposable.From(b, "deviceorientation", d => this._OnDeviceOrientation(d.data)), f.Disposable.From(b,
                "deviceorientationabsolute", d => this._OnDeviceOrientationAbsolute(d.data)), f.Disposable.From(b, "devicemotion", d => this._OnDeviceMotion(d.data)), f.Disposable.From(b, "tick2", d => this._OnTick2()))
        }
        Release() {
            this._touches.clear();
            super.Release()
        }
        _OnPointerDown(b) {
            if ("mouse" === b.pointerType)
                if (this._useMouseInput) this._isMouseDown = !0;
                else return;
            const a = b.pointerId;
            if (!this._touches.has(a)) {
                var d = b.pageX - this._runtime.GetCanvasClientX();
                b = b.pageY - this._runtime.GetCanvasClientY();
                var c = performance.now(),
                    e =
                    this._touches.size;
                this._triggerIndex = e;
                this._triggerId = a;
                var k = f.New(f.Plugins.Touch.TouchInfo);
                k.Init(c, d, b, a, e);
                this._touches.set(a, k);
                this.Trigger(f.Plugins.Touch.Cnds.OnNthTouchStart);
                this.Trigger(f.Plugins.Touch.Cnds.OnTouchStart);
                this._curTouchX = d;
                this._curTouchY = b;
                this.Trigger(f.Plugins.Touch.Cnds.OnTouchObject)
            }
        }
        _OnPointerMove(b) {
            if ("mouse" !== b.pointerType || this._isMouseDown) {
                var a = this._touches.get(b.pointerId);
                if (a) {
                    var d = performance.now();
                    if (!(2 > d - a.GetTime())) {
                        var c = b.pageX - this._runtime.GetCanvasClientX(),
                            e = b.pageY - this._runtime.GetCanvasClientY();
                        a.Update(d, c, e, b.width, b.height, b.pressure)
                    }
                }
            }
        }
        _OnPointerUp(b, a) {
            if ("mouse" === b.pointerType)
                if (this._isMouseDown) this._isMouseDown = !1;
                else return;
            const d = performance.now();
            b = b.pointerId;
            const c = this._touches.get(b);
            c && (this._triggerIndex = c.GetStartIndex(), this._triggerId = c.GetId(), this.Trigger(f.Plugins.Touch.Cnds.OnNthTouchEnd), this.Trigger(f.Plugins.Touch.Cnds.OnTouchEnd), a || (a = c.ShouldTriggerTap(d), "single-tap" === a ? (this.Trigger(f.Plugins.Touch.Cnds.OnTapGesture),
                this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(f.Plugins.Touch.Cnds.OnTapGestureObject)) : "double-tap" === a && (this.Trigger(f.Plugins.Touch.Cnds.OnDoubleTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(f.Plugins.Touch.Cnds.OnDoubleTapGestureObject))), c.Release(), this._touches.delete(b))
        }
        _RequestPermission(b) {
            this._PostToDOMMaybeSync("request-permission", {
                type: b
            });
            return new Promise((a, d) => {
                this._permissionPromises.push({
                    type: b,
                    resolve: a,
                    reject: d
                })
            })
        }
        _OnPermissionResult(b) {
            const a =
                b.result,
                d = b.type;
            this._triggerPermission = d;
            b = this._permissionPromises.filter(c => c.type === d);
            for (const c of b) c.resolve(a ? "granted" : "denied");
            this._permissionPromises = this._permissionPromises.filter(c => c.type !== d);
            a ? (this.Trigger(f.Plugins.Touch.Cnds.OnPermissionGranted), 0 === d ? this._runtime.RequestDeviceOrientationEvent() : this._runtime.RequestDeviceMotionEvent()) : this.Trigger(f.Plugins.Touch.Cnds.OnPermissionDenied)
        }
        _OnDeviceOrientation(b) {
            "number" === typeof b.webkitCompassHeading ? this._orientCompassHeading =
                b.webkitCompassHeading : b.absolute && (this._orientCompassHeading = b.alpha);
            this._orientAlpha = b.alpha;
            this._orientBeta = b.beta;
            this._orientGamma = b.gamma
        }
        _OnDeviceOrientationAbsolute(b) {
            this._orientCompassHeading = b.alpha
        }
        _OnDeviceMotion(b) {
            const a = b.acceleration;
            a && (this._accX = a.x, this._accY = a.y, this._accZ = a.z);
            if (b = b.accelerationIncludingGravity) this._accWithGX = b.x, this._accWithGY = b.y, this._accWithGZ = b.z
        }
        _OnTick2() {
            const b = performance.now();
            let a = 0;
            for (const d of this._touches.values()) d.GetTime() <= b -
                50 && d._SetLastTime(b), d.ShouldTriggerHold(b) && (this._triggerIndex = d.GetStartIndex(), this._triggerId = d.GetId(), this._getTouchIndex = a, this.Trigger(f.Plugins.Touch.Cnds.OnHoldGesture), this._curTouchX = d.GetX(), this._curTouchY = d.GetY(), this.Trigger(f.Plugins.Touch.Cnds.OnHoldGestureObject), this._getTouchIndex = 0), ++a
        }
        _GetTouchByIndex(b) {
            b = Math.floor(b);
            for (const a of this._touches.values()) {
                if (0 === b) return a;
                --b
            }
            return null
        }
        _IsClientPosOnCanvas(b, a) {
            return 0 <= b && 0 <= a && b < this._runtime.GetCanvasCssWidth() &&
                a < this._runtime.GetCanvasCssHeight()
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.touch.debugger.touches",
                properties: [...this._touches.values()].map(b => ({
                    name: "$" + b.GetId(),
                    value: b.GetX() + ", " + b.GetY()
                }))
            }]
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = [];
    f.Plugins.Touch.Cnds = {
        OnTouchStart() {
            return !0
        },
        OnTouchEnd() {
            return !0
        },
        IsInTouch() {
            return 0 < this._touches.size
        },
        OnTouchObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        IsTouchingObject(a) {
            if (!a) return !1;
            const d = a.GetCurrentSol();
            var c = d.GetInstances();
            for (const e of c) {
                c = e.GetWorldInfo();
                const k = c.GetLayer();
                for (const h of this._touches.values()) {
                    if (!this._IsClientPosOnCanvas(h.GetX(),
                            h.GetY())) continue;
                    const [p, n] = k.CanvasCssToLayer(h.GetX(), h.GetY(), c.GetTotalZElevation());
                    if (c.ContainsPoint(p, n)) {
                        b.push(e);
                        break
                    }
                }
            }
            return b.length ? (d.SetArrayPicked(b), a.ApplySolToContainer(), f.clearArray(b), !0) : !1
        },
        CompareTouchSpeed(a, d, c) {
            return (a = this._GetTouchByIndex(a)) ? f.compare(a.GetSpeed(), d, c) : !1
        },
        OrientationSupported() {
            return !0
        },
        MotionSupported() {
            return !0
        },
        CompareOrientation(a, d, c) {
            this._runtime.RequestDeviceOrientationEvent();
            return f.compare(0 === a ? this._orientAlpha : 1 === a ? this._orientBeta :
                this._orientGamma, d, c)
        },
        CompareAcceleration(a, d, c) {
            this._runtime.RequestDeviceMotionEvent();
            return f.compare(0 === a ? this._accWithGX : 1 === a ? this._accWithGY : 2 === a ? this._accWithGZ : 3 === a ? this._accX : 4 === a ? this._accY : this._accZ, d, c)
        },
        OnNthTouchStart(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        OnNthTouchEnd(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        HasNthTouch(a) {
            a = Math.floor(a);
            return this._touches.size >= a + 1
        },
        OnHoldGesture() {
            return !0
        },
        OnTapGesture() {
            return !0
        },
        OnDoubleTapGesture() {
            return !0
        },
        OnHoldGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnDoubleTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a,
                this._curTouchX, this._curTouchY, !1) : !1
        },
        OnPermissionGranted(a) {
            return this._triggerPermission === a
        },
        OnPermissionDenied(a) {
            return this._triggerPermission === a
        }
    }
}
"use strict";
self.C3.Plugins.Touch.Acts = {
    RequestPermission(f) {
        this._RequestPermission(f)
    }
};
"use strict"; {
    const f = self.C3;
    f.Plugins.Touch.Exps = {
        TouchCount() {
            return this._touches.size
        },
        X(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !0) : 0
        },
        Y(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !1) : 0
        },
        XAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(),
                a, !1) : 0
        },
        XForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        AbsoluteX() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetX() : 0
        },
        AbsoluteY() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetY() : 0
        },
        AbsoluteXAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetX() : 0
        },
        AbsoluteYAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetY() : 0
        },
        AbsoluteXForID(b) {
            return (b =
                this._touches.get(b)) ? b.GetX() : 0
        },
        AbsoluteYForID(b) {
            return (b = this._touches.get(b)) ? b.GetY() : 0
        },
        SpeedAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetSpeed() : 0
        },
        SpeedForID(b) {
            return (b = this._touches.get(b)) ? b.GetSpeed() : 0
        },
        AngleAt(b) {
            return (b = this._GetTouchByIndex(b)) ? f.toDegrees(b.GetAngle()) : 0
        },
        AngleForID(b) {
            return (b = this._touches.get(b)) ? f.toDegrees(b.GetAngle()) : 0
        },
        CompassHeading() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientCompassHeading
        },
        Alpha() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientAlpha
        },
        Beta() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientBeta
        },
        Gamma() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientGamma
        },
        AccelerationXWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGX
        },
        AccelerationYWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGY
        },
        AccelerationZWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGZ
        },
        AccelerationX() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accX
        },
        AccelerationY() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accY
        },
        AccelerationZ() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accZ
        },
        TouchIndex() {
            return this._triggerIndex
        },
        TouchID() {
            return this._triggerId
        },
        WidthForID(b) {
            return (b = this._touches.get(b)) ? b.GetWidth() : 0
        },
        HeightForID(b) {
            return (b = this._touches.get(b)) ? b.GetHeight() : 0
        },
        PressureForID(b) {
            return (b = this._touches.get(b)) ? b.GetPressure() : 0
        }
    }
}
"use strict"; {
    const f = self.C3;
    let b = -1E3,
        a = -1E3,
        d = -1E4;
    f.Plugins.Touch.TouchInfo = class extends f.DefendedBase {
        constructor() {
            super();
            this._pressure = this._height = this._width = this._lastY = this._lastX = this._y = this._x = this._startY = this._startX = this._lastTime = this._time = this._startTime = this._startIndex = this._pointerId = 0;
            this._isTooFarForHold = this._hasTriggeredHold = !1
        }
        Release() {}
        Init(c, e, k, h, p) {
            this._pointerId = h;
            this._startIndex = p;
            this._startTime = this._lastTime = this._time = c;
            this._startX = e;
            this._startY = k;
            this._x = e;
            this._y =
                k;
            this._lastX = e;
            this._lastY = k
        }
        Update(c, e, k, h, p, n) {
            this._lastTime = this._time;
            this._time = c;
            this._lastX = this._x;
            this._lastY = this._y;
            this._x = e;
            this._y = k;
            this._width = h;
            this._height = p;
            this._pressure = n;
            !this._isTooFarForHold && 15 <= f.distanceTo(this._startX, this._startY, this._x, this._y) && (this._isTooFarForHold = !0)
        }
        GetId() {
            return this._pointerId
        }
        GetStartIndex() {
            return this._startIndex
        }
        GetTime() {
            return this._time
        }
        _SetLastTime(c) {
            this._lastTime = c
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSpeed() {
            const c =
                f.distanceTo(this._x, this._y, this._lastX, this._lastY),
                e = (this._time - this._lastTime) / 1E3;
            return 0 < e ? c / e : 0
        }
        GetAngle() {
            return f.angleTo(this._lastX, this._lastY, this._x, this._y)
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetPressure() {
            return this._pressure
        }
        ShouldTriggerHold(c) {
            return this._hasTriggeredHold ? !1 : 500 <= c - this._startTime && !this._isTooFarForHold && 15 > f.distanceTo(this._startX, this._startY, this._x, this._y) ? this._hasTriggeredHold = !0 : !1
        }
        ShouldTriggerTap(c) {
            if (this._hasTriggeredHold) return "";
            if (333 >= c - this._startTime && !this._isTooFarForHold && 15 > f.distanceTo(this._startX, this._startY, this._x, this._y)) {
                if (666 >= c - d && 25 > f.distanceTo(b, a, this._x, this._y)) return a = b = -1E3, d = -1E4, "double-tap";
                b = this._x;
                a = this._y;
                d = c;
                return "single-tap"
            }
            return ""
        }
        GetPositionForLayer(c, e, k) {
            return "undefined" === typeof e ? c.GetLayerByIndex(0).CanvasCssToLayer_DefaultTransform(this._x, this._y)[k ? 0 : 1] : (c = c.GetLayer(e)) ? c.CanvasCssToLayer(this._x, this._y)[k ? 0 : 1] : 0
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Function = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Function.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
}
"use strict"; {
    const f = self.C3;
    class b {
        constructor() {
            this.name = "";
            this.retVal = 0;
            this.params = []
        }
    }
    f.Plugins.Function.Instance = class extends f.SDKInstanceBase {
        constructor(a, d) {
            super(a);
            this._isPreview = this._runtime.IsPreview();
            this._funcStackPtr = -1;
            this._funcStack = [];
            a = (c, e) => this._InvokeFromJS(c, e);
            self.c2_callFunction = a;
            self.c3_callFunction = a
        }
        Release() {
            super.Release()
        }
        Push() {
            const a = this._funcStack,
                d = ++this._funcStackPtr;
            d === a.length && a.push(new b);
            return a[d]
        }
        Pop() {
            --this._funcStackPtr
        }
        GetCurrent() {
            const a = this._funcStackPtr;
            return 0 > a ? null : this._funcStack[a]
        }
        GetOneAbove() {
            const a = this._funcStack;
            return a.length ? a[Math.min(this._funcStackPtr + 1, a.length - 1)] : null
        }
        _CallFunction(a, d) {
            const c = this.Push();
            c.name = a.toLowerCase();
            c.retVal = 0;
            f.shallowAssignArray(c.params, d);
            d = this.FastTrigger(f.Plugins.Function.Cnds.OnFunction, c.name);
            this._isPreview && !d && console.warn(`[Construct 3] Function object: called function '${a}' but no event was triggered. Is the function call spelt incorrectly or no longer used?`);
            this.Pop()
        }* _DebugCallFunction(a,
            d) {
            const c = this.Push();
            c.name = a.toLowerCase();
            c.retVal = 0;
            f.shallowAssignArray(c.params, d);
            d = yield* this.DebugFastTrigger(f.Plugins.Function.Cnds.OnFunction, c.name);
            this._isPreview && !d && console.warn(`[Construct 3] Function object: called function '${a}' but no event was triggered. Is the function call spelt incorrectly or no longer used?`);
            this.Pop()
        }
        _InvokeFromJS(a, d) {
            const c = this.Push();
            c.name = a.toLowerCase();
            c.retVal = 0;
            c.params = (d || []).map(e => "number" === typeof e || "string" === typeof e ? e : "boolean" ===
                typeof e ? e ? 1 : 0 : 0);
            this.FastTrigger(f.Plugins.Function.Cnds.OnFunction, c.name);
            this.Pop();
            return c.retVal
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Function.Cnds = {
        OnFunction(b) {
            return !0
        },
        CompareParam(b, a, d) {
            const c = this.GetCurrent();
            if (!c) return this._isPreview && console.warn("[Construct 3] Function object: used 'Compare parameter' condition when not in a function call"), !1;
            const e = c.params;
            b = Math.floor(b);
            let k = 0;
            0 > b || b >= e.length ? this._isPreview && console.warn(`[Construct 3] Function object: in function '${c.name}', compared parameter out of bounds (accessed index ${b} of ${e.length})`) : k = e[b];
            return f.compare(k, a, d)
        }
    }
}
"use strict";
self.C3.Plugins.Function.Acts = {
    CallFunction(f, b) {
        if (this._runtime.IsDebugging()) return this._DebugCallFunction(f, b);
        this._CallFunction(f, b)
    },
    SetReturnValue(f) {
        const b = this.GetCurrent();
        b ? b.retVal = f : this._isPreview && console.warn("[Construct 3] Function object: used 'Set return value' when not in a function call")
    },
    CallExpression(f) {}
};
"use strict"; {
    const f = self.C3;
    f.Plugins.Function.Exps = {
        ReturnValue() {
            const b = this.GetOneAbove();
            return b ? b.retVal : 0
        },
        ParamCount() {
            const b = this.GetCurrent();
            if (b) return b.params.length;
            this._isPreview && console.warn("[Construct 3] Function object: used 'ParamCount' expression when not in a function call");
            return 0
        },
        Param(b) {
            b = Math.floor(b);
            const a = this.GetCurrent();
            if (a) {
                const d = a.params;
                if (0 <= b && b < d.length) return d[b];
                this._isPreview && console.warn(`[Construct 3] Function object: in function '${a.name}', accessed parameter out of bounds (accessed index ${b} of ${d.length})`);
                return 0
            }
            this._isPreview && console.warn("[Construct 3] Function object: used 'Param' expression when not in a function call");
            return 0
        },
        Call(b, ...a) {
            const d = this.Push();
            d.name = b.toLowerCase();
            d.retVal = 0;
            d.params = a;
            a = this.FastTrigger(f.Plugins.Function.Cnds.OnFunction, d.name);
            this._isPreview && !a && console.warn(`[Construct 3] Function object: expression Function.Call("${b}" ...) was used, but no event was triggered. Is the function call spelt incorrectly or no longer used?`);
            this.Pop();
            return d.retVal
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Mouse = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Mouse.Type = class extends f.SDKTypeBase {
        constructor(d) {
            super(d)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IMouseObjectType
        }
    };
    let b = null;

    function a() {
        return b.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.IMouseObjectType = class extends self.IObjectClass {
        constructor(d) {
            super(d);
            b = d;
            d.GetRuntime()._GetCommonScriptInterfaces().mouse = this
        }
        getMouseX(d) {
            return a().GetMousePositionForLayer(d)[0]
        }
        getMouseY(d) {
            return a().GetMousePositionForLayer(d)[1]
        }
        getMousePosition(d) {
            return a().GetMousePositionForLayer(d)
        }
        isMouseButtonDown(d) {
            return a().IsMouseButtonDown(d)
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Mouse.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, "mouse");
            this._buttonMap = [!1, !1, !1];
            this._triggerDir = this._triggerType = this._triggerButton = this._mouseYcanvas = this._mouseXcanvas = 0;
            b = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "pointermove", d => this._OnPointerMove(d.data)), f.Disposable.From(b, "pointerdown", d => this._OnPointerDown(d.data)), f.Disposable.From(b, "pointerup", d => this._OnPointerUp(d.data)),
                f.Disposable.From(b, "dblclick", d => this._OnDoubleClick(d.data)), f.Disposable.From(b, "wheel", d => this._OnMouseWheel(d.data)), f.Disposable.From(b, "window-blur", () => this._OnWindowBlur()))
        }
        Release() {
            super.Release()
        }
        _OnPointerDown(b) {
            "mouse" === b.pointerType && (this._mouseXcanvas = b.pageX - this._runtime.GetCanvasClientX(), this._mouseYcanvas = b.pageY - this._runtime.GetCanvasClientY(), this._CheckButtonChanges(b.lastButtons, b.buttons))
        }
        _OnPointerMove(b) {
            "mouse" === b.pointerType && (this._mouseXcanvas = b.pageX - this._runtime.GetCanvasClientX(),
                this._mouseYcanvas = b.pageY - this._runtime.GetCanvasClientY(), this._CheckButtonChanges(b.lastButtons, b.buttons))
        }
        _OnPointerUp(b) {
            "mouse" === b.pointerType && this._CheckButtonChanges(b.lastButtons, b.buttons)
        }
        _CheckButtonChanges(b, a) {
            this._CheckButtonChange(b, a, 1, 0);
            this._CheckButtonChange(b, a, 4, 1);
            this._CheckButtonChange(b, a, 2, 2)
        }
        _CheckButtonChange(b, a, d, c) {
            !(b & d) && a & d ? this._OnMouseDown(c) : b & d && !(a & d) && this._OnMouseUp(c)
        }
        _OnMouseDown(b) {
            this._buttonMap[b] = !0;
            this.Trigger(f.Plugins.Mouse.Cnds.OnAnyClick);
            this._triggerButton = b;
            this._triggerType = 0;
            this.Trigger(f.Plugins.Mouse.Cnds.OnClick);
            this.Trigger(f.Plugins.Mouse.Cnds.OnObjectClicked)
        }
        _OnMouseUp(b) {
            this._buttonMap[b] && (this._buttonMap[b] = !1, this._triggerButton = b, this.Trigger(f.Plugins.Mouse.Cnds.OnRelease))
        }
        _OnDoubleClick(b) {
            this._triggerButton = b.button;
            this._triggerType = 1;
            this.Trigger(f.Plugins.Mouse.Cnds.OnClick);
            this.Trigger(f.Plugins.Mouse.Cnds.OnObjectClicked)
        }
        _OnMouseWheel(b) {
            this._triggerDir = 0 > b.deltaY ? 1 : 0;
            this.Trigger(f.Plugins.Mouse.Cnds.OnWheel)
        }
        _OnWindowBlur() {
            for (let b =
                    0, a = this._buttonMap.length; b < a && this._buttonMap[b]; ++b) this._buttonMap[b] = !1, this._triggerButton = b, this.Trigger(f.Plugins.Mouse.Cnds.OnRelease)
        }
        GetMousePositionForLayer(b) {
            const a = this._runtime.GetMainRunningLayout(),
                d = this._mouseXcanvas,
                c = this._mouseYcanvas;
            return "undefined" === typeof b ? a.GetLayerByIndex(0).CanvasCssToLayer_DefaultTransform(d, c) : (b = a.GetLayer(b)) ? b.CanvasCssToLayer(d, c) : [0, 0]
        }
        IsMouseButtonDown(b) {
            b = Math.floor(b);
            return !!this._buttonMap[b]
        }
        _IsMouseOverCanvas() {
            return 0 <= this._mouseXcanvas &&
                0 <= this._mouseYcanvas && this._mouseXcanvas < this._runtime.GetCanvasCssWidth() && this._mouseYcanvas < this._runtime.GetCanvasCssHeight()
        }
        GetDebuggerProperties() {
            return [{
                    title: "plugins.mouse.name",
                    properties: [{
                        name: "plugins.mouse.debugger.absolute-position",
                        value: this._mouseXcanvas + "," + this._mouseYcanvas
                    }, {
                        name: "plugins.mouse.debugger.left-button",
                        value: this._buttonMap[0]
                    }, {
                        name: "plugins.mouse.debugger.middle-button",
                        value: this._buttonMap[1]
                    }, {
                        name: "plugins.mouse.debugger.right-button",
                        value: this._buttonMap[2]
                    }]
                },
                {
                    title: "plugins.mouse.debugger.position-on-each-layer",
                    properties: this._runtime.GetMainRunningLayout().GetLayers().map(b => ({
                        name: "$" + b.GetName(),
                        value: b.CanvasCssToLayer(this._mouseXcanvas, this._mouseYcanvas).join(", ")
                    }))
                }
            ]
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Mouse.Cnds = {
        OnClick(b, a) {
            return this._triggerButton === b && this._triggerType === a
        },
        OnAnyClick() {
            return !0
        },
        IsButtonDown(b) {
            return this._buttonMap[b]
        },
        OnRelease(b) {
            return this._triggerButton === b
        },
        IsOverObject(b) {
            if (!this._IsMouseOverCanvas()) return !1;
            const a = this._runtime.GetCurrentCondition().IsInverted(),
                d = this._mouseXcanvas,
                c = this._mouseYcanvas;
            return f.xor(this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(b, d, c, a), a)
        },
        OnObjectClicked(b, a, d) {
            if (b !== this._triggerButton ||
                a !== this._triggerType || !this._IsMouseOverCanvas()) return !1;
            b = this._mouseXcanvas;
            a = this._mouseYcanvas;
            return this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(d, b, a, !1)
        },
        OnWheel(b) {
            return this._triggerDir === b
        }
    }
}
"use strict"; {
    const f = self.C3;
    let b = null;
    const a = "auto pointer text crosshair move help wait none".split(" ");
    f.Plugins.Mouse.Acts = {
        SetCursor(d) {
            d = a[d];
            b !== d && (b = d, this.PostToDOM("cursor", d))
        },
        SetCursorSprite(d) {
            if (!f.Platform.IsMobile && d && (d = d.GetFirstPicked())) {
                var c = d.GetWorldInfo(),
                    e = d.GetCurrentImageInfo();
                c && e && b !== e && (b = e, e.ExtractImageToCanvas().then(k => f.CanvasToBlob(k)).then(k => {
                    k = `url(${URL.createObjectURL(k)}) ${Math.round(c.GetOriginX()*e.GetWidth())} ${Math.round(c.GetOriginY()*e.GetHeight())}, auto`;
                    this.PostToDOM("cursor", "");
                    this.PostToDOM("cursor", k)
                }))
            }
        }
    }
}
"use strict";
self.C3.Plugins.Mouse.Exps = {
    X(f) {
        return this.GetMousePositionForLayer(f)[0]
    },
    Y(f) {
        return this.GetMousePositionForLayer(f)[1]
    },
    AbsoluteX() {
        return this._mouseXcanvas
    },
    AbsoluteY() {
        return this._mouseYcanvas
    }
};
"use strict"; {
    const f = self.C3;
    f.Plugins.Browser = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Browser.Type = class extends f.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Browser.Instance = class extends f.SDKInstanceBase {
        constructor(b, a) {
            super(b, "browser");
            this._initLocationStr = "";
            this._isOnline = !1;
            this._docTitle = this._referrer = "";
            this._isCookieEnabled = !1;
            this._windowOuterHeight = this._windowOuterWidth = this._screenHeight = this._screenWidth = 0;
            this._isScirraArcade = !1;
            this.AddDOMMessageHandlers([
                ["online-state", d => this._OnOnlineStateChanged(d)],
                ["backbutton", () => this._OnBackButton()],
                ["sw-message", d => this._OnSWMessage(d)],
                ["hashchange", d => this._OnHashChange(d)]
            ]);
            b = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(b, "afterfirstlayoutstart", () => this._OnAfterFirstLayoutStart()), f.Disposable.From(b, "window-resize", () => this._OnWindowResize()), f.Disposable.From(b, "suspend", () => this._OnSuspend()), f.Disposable.From(b, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("get-initial-state", {
                exportType: this._runtime.GetExportType()
            }).then(d => {
                this._initLocationStr = d.location;
                this._isOnline = d.isOnline;
                this._referrer = d.referrer;
                this._docTitle = d.title;
                this._isCookieEnabled = d.isCookieEnabled;
                this._screenWidth = d.screenWidth;
                this._screenHeight = d.screenHeight;
                this._windowOuterWidth = d.windowOuterWidth;
                this._windowOuterHeight = d.windowOuterHeight;
                this._isScirraArcade = d.isScirraArcade
            }))
        }
        Release() {
            super.Release()
        }
        _OnAfterFirstLayoutStart() {
            this.PostToDOM("ready-for-sw-messages")
        }
        async _OnOnlineStateChanged(b) {
            b = !!b.isOnline;
            this._isOnline !== b && ((this._isOnline = b) ? await this.TriggerAsync(f.Plugins.Browser.Cnds.OnOnline) :
                await this.TriggerAsync(f.Plugins.Browser.Cnds.OnOffline))
        }
        async _OnWindowResize() {
            await this.TriggerAsync(f.Plugins.Browser.Cnds.OnResize)
        }
        _OnSuspend() {
            this.Trigger(f.Plugins.Browser.Cnds.OnPageHidden)
        }
        _OnResume() {
            this.Trigger(f.Plugins.Browser.Cnds.OnPageVisible)
        }
        async _OnBackButton() {
            await this.TriggerAsync(f.Plugins.Browser.Cnds.OnBackButton)
        }
        _OnSWMessage(b) {
            b = b.type;
            "downloading-update" === b ? this.Trigger(f.Plugins.Browser.Cnds.OnUpdateFound) : "update-ready" === b || "update-pending" === b ? this.Trigger(f.Plugins.Browser.Cnds.OnUpdateReady) :
                "offline-ready" === b && this.Trigger(f.Plugins.Browser.Cnds.OnOfflineReady)
        }
        _OnHashChange(b) {
            this._initLocationStr = b.location;
            this.Trigger(f.Plugins.Browser.Cnds.OnHashChange)
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.browser.name",
                properties: [{
                    name: "plugins.browser.debugger.user-agent",
                    value: navigator.userAgent
                }, {
                    name: "plugins.browser.debugger.is-online",
                    value: this._isOnline
                }, {
                    name: "plugins.browser.debugger.is-fullscreen",
                    value: this._runtime.GetCanvasManager().IsDocumentFullscreen()
                }]
            }]
        }
    }
}
"use strict";
self.C3.Plugins.Browser.Cnds = {
    IsOnline() {
        return this._isOnline
    },
    OnOnline() {
        return !0
    },
    OnOffline() {
        return !0
    },
    OnResize() {
        return !0
    },
    CookiesEnabled() {
        return this._isCookieEnabled
    },
    IsFullscreen() {
        return this._runtime.GetCanvasManager().IsDocumentFullscreen()
    },
    OnBackButton() {
        return !0
    },
    IsPortraitLandscape(f) {
        const b = this._runtime.GetCanvasManager().GetLastWidth(),
            a = this._runtime.GetCanvasManager().GetLastHeight();
        return (b <= a ? 0 : 1) === f
    },
    OnUpdateFound() {
        return !0
    },
    OnUpdateReady() {
        return !0
    },
    OnOfflineReady() {
        return !0
    },
    OnHashChange() {
        return !0
    },
    PageVisible() {
        return !this._runtime.IsSuspended()
    },
    OnPageHidden() {
        return !0
    },
    OnPageVisible() {
        return !0
    },
    HasJava() {
        return !1
    },
    IsDownloadingUpdate() {
        return !1
    },
    OnMenuButton() {
        return !1
    },
    OnSearchButton() {
        return !1
    },
    IsMetered() {
        return !1
    },
    IsCharging() {
        return !0
    },
    SupportsFullscreen() {
        return !0
    }
};
"use strict"; {
    const f = self.C3,
        b = "portrait landscape portrait-primary portrait-secondary landscape-primary landscape-secondary".split(" ");
    f.Plugins.Browser.Acts = {
        Alert(a) {
            this.PostToDOM("alert", {
                message: a.toString()
            })
        },
        Close() {
            this._isScirraArcade || (this._runtime.IsDebug() ? self.C3Debugger.CloseWindow() : this.PostToDOM("close"))
        },
        Focus() {
            this.PostToDOM("set-focus", {
                isFocus: !0
            })
        },
        Blur() {
            this.PostToDOM("set-focus", {
                isFocus: !1
            })
        },
        GoBack() {
            this._isScirraArcade || this.PostToDOM("navigate", {
                type: "back"
            })
        },
        GoForward() {
            this._isScirraArcade ||
                this.PostToDOM("navigate", {
                    type: "forward"
                })
        },
        GoHome() {},
        Reload() {
            this._isScirraArcade || (this._runtime.IsDebug() ? this._runtime.PostToDebugger({
                type: "reload"
            }) : this.PostToDOM("navigate", {
                type: "reload"
            }))
        },
        GoToURL(a, d) {
            this._PostToDOMMaybeSync("navigate", {
                type: "url",
                url: a,
                target: d,
                exportType: this._runtime.GetExportType()
            })
        },
        GoToURLWindow(a, d) {
            this._PostToDOMMaybeSync("navigate", {
                type: "new-window",
                url: a,
                tag: d,
                exportType: this._runtime.GetExportType()
            })
        },
        RequestFullScreen(a, d) {
            2 <= a && (a += 1);
            6 === a && (a = 2);
            1 === a && (a = 0);
            a = f.CanvasManager._FullscreenModeNumberToString(a);
            this._runtime.GetCanvasManager().SetDocumentFullscreenMode(a);
            this._PostToDOMMaybeSync("request-fullscreen", {
                navUI: d
            })
        },
        CancelFullScreen() {
            this._PostToDOMMaybeSync("exit-fullscreen")
        },
        Vibrate(a) {
            a = a.split(",");
            for (let d = 0, c = a.length; d < c; ++d) a[d] = parseInt(a[d], 10);
            this._PostToDOMMaybeSync("vibrate", {
                pattern: a
            })
        },
        async InvokeDownload(a, d) {
            a && d && (a = await this._runtime.GetAssetManager().GetProjectFileUrl(a), this._runtime.InvokeDownload(a,
                d))
        },
        InvokeDownloadString(a, d, c) {
            c && (a = `data:${d},${encodeURIComponent(a)}`, this._runtime.InvokeDownload(a, c))
        },
        ConsoleLog(a, d) {
            d = d.toString();
            0 === a ? console.log(d) : 1 === a ? console.warn(d) : 2 === a && console.error(d)
        },
        ConsoleGroup(a) {
            console.group(a)
        },
        ConsoleGroupEnd() {
            console.groupEnd()
        },
        ExecJs(a) {
            try {
                eval(a)
            } catch (d) {
                console.error("Error executing JavaScript: ", d)
            }
        },
        LockOrientation(a) {
            a = Math.floor(a);
            0 > a || a >= b.length || this._PostToDOMMaybeSync("lock-orientation", {
                orientation: b[a]
            })
        },
        UnlockOrientation() {
            this._PostToDOMMaybeSync("unlock-orientation")
        },
        LoadStyleSheet(a) {
            this._runtime.GetAssetManager().LoadStyleSheet(a)
        },
        SetHash(a) {
            this.PostToDOM("set-hash", {
                hash: a
            })
        }
    }
}
"use strict";
self.C3.Plugins.Browser.Exps = {
    URL() {
        return this._runtime.IsInWorker() ? this._initLocationStr : location.toString()
    },
    Protocol() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).protocol : location.protocol
    },
    Domain() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).hostname : location.hostname
    },
    Port() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).port : location.port
    },
    PathName() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).pathname :
            location.pathname
    },
    Hash() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).hash : location.hash
    },
    QueryString() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search
    },
    QueryParam(f) {
        const b = this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search;
        return (f = RegExp("[?&]" + f + "=([^&]*)").exec(b)) ? decodeURIComponent(f[1].replace(/\+/g, " ")) : ""
    },
    Referrer() {
        return this._referrer
    },
    Title() {
        return this._docTitle
    },
    Language() {
        return navigator.language
    },
    Platform() {
        return navigator.platform
    },
    UserAgent() {
        return navigator.userAgent
    },
    ExecJS(f) {
        let b = 0;
        try {
            b = eval(f)
        } catch (a) {
            console.error("Error executing JavaScript: ", a)
        }
        return "number" === typeof b || "string" === typeof b ? b : "boolean" === typeof b ? b ? 1 : 0 : 0
    },
    Name() {
        return navigator.appName
    },
    Version() {
        return navigator.appVersion
    },
    Product() {
        return navigator.product
    },
    Vendor() {
        return navigator.vendor
    },
    BatteryLevel() {
        return 1
    },
    BatteryTimeLeft() {
        return Infinity
    },
    Bandwidth() {
        const f = navigator.connection;
        return f ? f.downlink ||
            f.downlinkMax || f.bandwidth || Infinity : Infinity
    },
    ConnectionType() {
        const f = navigator.connection;
        return f ? f.type || "unknown" : "unknown"
    },
    DevicePixelRatio() {
        return self.devicePixelRatio
    },
    ScreenWidth() {
        return this._screenWidth
    },
    ScreenHeight() {
        return this._screenHeight
    },
    WindowInnerWidth() {
        return this._runtime.GetCanvasManager().GetLastWidth()
    },
    WindowInnerHeight() {
        return this._runtime.GetCanvasManager().GetLastHeight()
    },
    WindowOuterWidth() {
        return this._windowOuterWidth
    },
    WindowOuterHeight() {
        return this._windowOuterWidth
    }
};
"use strict"; {
    const f = self.C3;
    f.Plugins.Audio = class extends f.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Audio.Type = class extends f.SDKTypeBase {
        constructor(a) {
            super(a)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IAudioObjectType
        }
    };

    function b() {
        if (self.C3Audio_DOMInterface) return self.C3Audio_DOMInterface;
        throw Error("audio scripting API cannot be used here - make sure the project is using DOM mode, not worker mode");
    }
    self.IAudioObjectType = class extends self.IObjectClass {
        constructor(a) {
            super(a)
        }
        get audioContext() {
            return b().GetAudioContext()
        }
        get destinationNode() {
            return b().GetDestinationNode()
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = ["interactive", "balanced", "playback"];
    f.Plugins.Audio.Instance = class extends f.SDKInstanceBase {
        constructor(a, d) {
            super(a, "audio");
            this._nextPlayTime = 0;
            this._triggerTag = "";
            this._saveLoadMode = this._timeScaleMode = 0;
            this._playInBackground = !1;
            this._distanceModel = this._panningModel = 1;
            this._listenerX = this._runtime.GetViewportWidth() / 2;
            this._listenerY = this._runtime.GetViewportHeight() / 2;
            this._listenerZ = -600;
            this._referenceDistance = 600;
            this._maxDistance = 1E4;
            this._rolloffFactor = 1;
            this._listenerInst =
                null;
            this._loadListenerUid = -1;
            this._masterVolume = 1;
            this._isSilent = !1;
            this._sampleRate = 0;
            this._effectCount = new Map;
            this._preloadCount = this._preloadTotal = 0;
            this._remoteUrls = new Map;
            a = "interactive";
            d && (this._timeScaleMode = d[0], this._saveLoadMode = d[1], this._playInBackground = d[2], a = b[d[3]], this._panningModel = d[4], this._distanceModel = d[5], this._listenerZ = -d[6], this._referenceDistance = d[7], this._maxDistance = d[8], this._rolloffFactor = d[9]);
            this._lastAIState = [];
            this._lastFxState = [];
            this._lastAnalysersData = [];
            this.AddDOMMessageHandlers([
                ["state", c => this._OnUpdateState(c)],
                ["fxstate", c => this._OnUpdateFxState(c)],
                ["trigger", c => this._OnTrigger(c)]
            ]);
            d = this.GetRuntime().Dispatcher();
            this._disposables = new f.CompositeDisposable(f.Disposable.From(d, "instancedestroy", c => this._OnInstanceDestroyed(c.instance)), f.Disposable.From(d, "afterload", () => this._OnAfterLoad()), f.Disposable.From(d, "suspend", () => this._OnSuspend()), f.Disposable.From(d, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("create-audio-context", {
                preloadList: this._runtime.GetAssetManager().GetAudioToPreload().map(c => ({
                    originalUrl: c.originalUrl,
                    url: c.url,
                    type: c.type,
                    fileSize: c.fileSize
                })),
                isiOSCordova: this._runtime.IsiOSCordova(),
                timeScaleMode: this._timeScaleMode,
                latencyHint: a,
                panningModel: this._panningModel,
                distanceModel: this._distanceModel,
                refDistance: this._referenceDistance,
                maxDistance: this._maxDistance,
                rolloffFactor: this._rolloffFactor,
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ]
            }).then(c => {
                this._sampleRate = c.sampleRate
            }));
            this._StartTicking()
        }
        Release() {
            this._listenerInst = null;
            super.Release()
        }
        _OnInstanceDestroyed(a) {
            this._listenerInst === a && (this._listenerInst = null)
        }
        DbToLinearNoCap(a) {
            return Math.pow(10, a / 20)
        }
        DbToLinear(a) {
            a = this.DbToLinearNoCap(a);
            return isFinite(a) ? Math.max(Math.min(a, 1), 0) : 0
        }
        LinearToDbNoCap(a) {
            return Math.log(a) / Math.log(10) * 20
        }
        LinearToDb(a) {
            return this.LinearToDbNoCap(Math.max(Math.min(a, 1), 0))
        }
        _OnSuspend() {
            this._playInBackground || this.PostToDOM("set-suspended", {
                isSuspended: !0
            })
        }
        _OnResume() {
            this._playInBackground ||
                this.PostToDOM("set-suspended", {
                    isSuspended: !1
                })
        }
        _OnUpdateState(a) {
            const d = a.tickCount,
                c = this._lastAIState.filter(e => e.hasOwnProperty("placeholder") && (e.placeholder > d || -1 === e.placeholder));
            this._lastAIState = a.audioInstances;
            this._lastAnalysersData = a.analysers;
            0 < c.length && f.appendArray(this._lastAIState, c)
        }
        _OnUpdateFxState(a) {
            this._lastFxState = a.fxstate
        }
        _GetFirstAudioStateByTag(a) {
            for (const d of this._lastAIState)
                if (f.equalsNoCase(d.tag, a)) return d;
            return null
        }
        _IsTagPlaying(a) {
            return this._lastAIState.some(d =>
                f.equalsNoCase(a, d.tag) && d.isPlaying)
        }
        _MaybeMarkAsPlaying(a, d, c, e) {
            if (this._IsTagPlaying(a)) return null;
            a = {
                tag: a,
                duration: 0,
                volume: e,
                isPlaying: !0,
                playbackTime: 0,
                playbackRate: 1,
                uid: -1,
                bufferOriginalUrl: "",
                bufferUrl: "",
                bufferType: "",
                isMusic: d,
                isLooping: c,
                isMuted: !1,
                resumePosition: 0,
                pan: null,
                placeholder: -1
            };
            this._lastAIState.push(a);
            return a
        }
        async _OnTrigger(a) {
            const d = a.type;
            this._triggerTag = a.tag;
            a = a.aiid;
            if ("ended" === d) {
                for (const c of this._lastAIState)
                    if (c.aiid === a) {
                        c.isPlaying = !1;
                        break
                    }
                await this.TriggerAsync(f.Plugins.Audio.Cnds.OnEnded)
            } else "fade-ended" ===
                d && await this.TriggerAsync(f.Plugins.Audio.Cnds.OnFadeEnded)
        }
        Tick() {
            const a = {
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTime(),
                instPans: this.GetInstancePans(),
                tickCount: this._runtime.GetTickCountNoSave()
            };
            if (this._listenerInst) {
                const d = this._listenerInst.GetWorldInfo();
                this._listenerX = d.GetX();
                this._listenerY = d.GetY();
                a.listenerPos = [this._listenerX, this._listenerY, this._listenerZ]
            }
            this.PostToDOM("tick", a)
        }
        rotatePtAround(a, d, c, e, k) {
            if (0 === c) return [a, d];
            const h = Math.sin(c);
            c = Math.cos(c);
            a -= e;
            d -= k;
            const p = a * h;
            a = a * c - d * h;
            return [a + e, d * c + p + k]
        }
        GetInstancePans() {
            return this._lastAIState.filter(a => -1 !== a.uid).map(a => this._runtime.GetInstanceByUID(a.uid)).filter(a => a).map(a => {
                const d = a.GetWorldInfo(),
                    c = d.GetLayer().GetAngle(),
                    [e, k] = this.rotatePtAround(d.GetX(), d.GetY(), -c, this._listenerX, this._listenerY);
                return {
                    uid: a.GetUID(),
                    x: e,
                    y: k,
                    angle: d.GetAngle() - c
                }
            })
        }
        GetAnalyserData(a, d) {
            for (const c of this._lastAnalysersData)
                if (c.index === d && f.equalsNoCase(c.tag, a)) return c;
            return null
        }
        _IncrementEffectCount(a) {
            this._effectCount.set(a,
                (this._effectCount.get(a) || 0) + 1)
        }
        _ShouldSave(a) {
            return a.hasOwnProperty("placeholder") || 3 === this._saveLoadMode ? !1 : a.isMusic && 1 === this._saveLoadMode ? !1 : a.isMusic || 2 !== this._saveLoadMode ? !0 : !1
        }
        SaveToJson() {
            return {
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                listenerZ: this._listenerZ,
                listenerUid: this._listenerInst ? this._listenerInst.GetUID() : -1,
                remoteUrls: [...this._remoteUrls.entries()],
                playing: this._lastAIState.filter(a => this._ShouldSave(a)),
                effects: this._lastFxState,
                analysers: this._lastAnalysersData
            }
        }
        LoadFromJson(a) {
            this._isSilent =
                a.isSilent;
            this._masterVolume = a.masterVolume;
            this._listenerZ = a.listenerZ;
            this._listenerInst = null;
            this._loadListenerUid = a.listenerUid;
            this._remoteUrls.clear();
            if (a.remoteUrls)
                for (const [d, c] of a.remoteUrls) this._remoteUrls.set(d, c);
            this._lastAIState = a.playing;
            this._lastFxState = a.effects;
            this._lastAnalysersData = a.analysers
        }
        _OnAfterLoad() {
            if (-1 !== this._loadListenerUid && (this._listenerInst = this._runtime.GetInstanceByUID(this._loadListenerUid), this._loadListenerUid = -1, this._listenerInst)) {
                var a = this._listenerInst.GetWorldInfo();
                this._listenerX = a.GetX();
                this._listenerY = a.GetY()
            }
            for (var d of this._lastAIState)(a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d.bufferOriginalUrl)) ? (d.bufferUrl = a.url, d.bufferType = a.type) : d.bufferUrl = null;
            for (const c of Object.values(this._lastFxState))
                for (const e of c) e.hasOwnProperty("bufferOriginalUrl") && (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(e.bufferOriginalUrl)) && (e.bufferUrl = d.url, e.bufferType = d.type);
            this.PostToDOM("load-state", {
                saveLoadMode: this._saveLoadMode,
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTime(),
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ],
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                playing: this._lastAIState.filter(c => null !== c.bufferUrl),
                effects: this._lastFxState
            })
        }
        GetDebuggerProperties() {
            const a = [];
            for (const [d, c] of Object.entries(this._lastFxState)) a.push({
                name: "$" + d,
                value: c.map(e => e.type).join(", ")
            });
            return [{
                title: "plugins.audio.debugger.tag-effects",
                properties: a
            }, {
                title: "plugins.audio.debugger.currently-playing",
                properties: [{
                    name: "plugins.audio.debugger.currently-playing-count",
                    value: this._lastAIState.length
                }, ...this._lastAIState.map((d, c) => ({
                    name: "$#" + c,
                    value: `${d.bufferOriginalUrl} ("${d.tag}") ${Math.round(10*d.playbackTime)/10} / ${Math.round(10*d.duration)/10}`
                }))]
            }]
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Plugins.Audio.Cnds = {
        OnEnded(b) {
            return f.equalsNoCase(this._triggerTag, b)
        },
        OnFadeEnded(b) {
            return f.equalsNoCase(this._triggerTag, b)
        },
        PreloadsComplete() {
            return this._preloadCount === this._preloadTotal
        },
        AdvancedAudioSupported() {
            return !0
        },
        IsSilent() {
            return this._isSilent
        },
        IsAnyPlaying() {
            for (const b of this._lastAIState)
                if (b.isPlaying) return !0;
            return !1
        },
        IsTagPlaying(b) {
            return this._IsTagPlaying(b)
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = "lowpass highpass bandpass lowshelf highshelf peaking notch allpass".split(" ");
    f.Plugins.Audio.Acts = {
        async Play(a, d, c, e) {
            if (!this._isSilent) {
                var k = a[1],
                    h = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (h) {
                    var p = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var n = this._MaybeMarkAsPlaying(e.toLowerCase(), k, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: h.url,
                            type: h.type,
                            isMusic: k,
                            tag: e.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: p,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        n && (n.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPosition(a, d, c, e, k, h, p, n, m, t) {
            if (!this._isSilent) {
                var q = a[1],
                    u = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (u) {
                    var r = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var x = this._MaybeMarkAsPlaying(t.toLowerCase(), q, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: u.url,
                            type: u.type,
                            isMusic: q,
                            tag: t.toLowerCase(),
                            isLooping: 0 !==
                                d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: r,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: e,
                                y: k,
                                angle: f.toRadians(h),
                                innerAngle: f.toRadians(p),
                                outerAngle: f.toRadians(n),
                                outerGain: this.DbToLinear(m)
                            }
                        })
                    } finally {
                        x && (x.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObject(a, d, c, e, k, h, p, n) {
            if (!this._isSilent && e && (e = e.GetFirstPicked()) && e.GetWorldInfo()) {
                var m = e.GetWorldInfo(),
                    t = m.GetLayer().GetAngle(),
                    [q, u] = this.rotatePtAround(m.GetX(), m.GetY(), -t, this._listenerX, this._listenerY),
                    r = a[1],
                    x = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if (x) {
                    var z = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var C = this._MaybeMarkAsPlaying(n.toLowerCase(), r, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: x.url,
                            type: x.type,
                            isMusic: r,
                            tag: n.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: z,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: q,
                                y: u,
                                angle: m.GetAngle() - t,
                                innerAngle: f.toRadians(k),
                                outerAngle: f.toRadians(h),
                                outerGain: this.DbToLinear(p),
                                uid: e.GetUID()
                            }
                        })
                    } finally {
                        C && (C.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayByName(a, d, c, e, k) {
            if (!this._isSilent) {
                a = 1 === a;
                var h = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (h) {
                    var p = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var n = this._MaybeMarkAsPlaying(k.toLowerCase(), a, 0 !== c, this.DbToLinear(e));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: h.url,
                            type: h.type,
                            isMusic: a,
                            tag: k.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(e),
                            pos: 0,
                            off: p,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        n && (n.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPositionByName(a, d, c, e, k, h, p, n, m, t, q) {
            if (!this._isSilent) {
                a = 1 === a;
                var u = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (u) {
                    var r = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var x = this._MaybeMarkAsPlaying(q.toLowerCase(), a, 0 !== c, this.DbToLinear(e));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: u.url,
                            type: u.type,
                            isMusic: a,
                            tag: q.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(e),
                            pos: 0,
                            off: r,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: k,
                                y: h,
                                angle: f.toRadians(p),
                                innerAngle: f.toRadians(n),
                                outerAngle: f.toRadians(m),
                                outerGain: this.DbToLinear(t)
                            }
                        })
                    } finally {
                        x && (x.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObjectByName(a, d, c, e, k, h, p, n, m) {
            if (!this._isSilent && !this._isSilent && k && (k = k.GetFirstPicked()) && k.GetWorldInfo()) {
                var t = k.GetWorldInfo(),
                    q = t.GetLayer().GetAngle(),
                    [u, r] = this.rotatePtAround(t.GetX(),
                        t.GetY(), -q, this._listenerX, this._listenerY);
                a = 1 === a;
                var x = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if (x) {
                    var z = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var C = this._MaybeMarkAsPlaying(m.toLowerCase(), a, 0 !== c, this.DbToLinear(e));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: x.url,
                            type: x.type,
                            isMusic: a,
                            tag: m.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(e),
                            pos: 0,
                            off: z,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: u,
                                y: r,
                                angle: t.GetAngle() - q,
                                innerAngle: f.toRadians(h),
                                outerAngle: f.toRadians(p),
                                outerGain: this.DbToLinear(n),
                                uid: k.GetUID()
                            }
                        })
                    } finally {
                        C && (C.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        SetLooping(a, d) {
            this.PostToDOM("set-looping", {
                tag: a.toLowerCase(),
                isLooping: 0 === d
            })
        },
        SetMuted(a, d) {
            this.PostToDOM("set-muted", {
                tag: a.toLowerCase(),
                isMuted: 0 === d
            })
        },
        SetVolume(a, d) {
            this.PostToDOM("set-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d)
            })
        },
        FadeVolume(a, d, c, e) {
            this.PostToDOM("fade-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d),
                duration: c,
                stopOnEnd: 0 === e
            })
        },
        async Preload(a) {
            const d = a[1],
                c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: a[0],
                url: c.url,
                type: c.type,
                isMusic: d
            }), this._preloadCount++)
        },
        async PreloadByName(a, d) {
            a = 1 === a;
            const c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: d,
                url: c.url,
                type: c.type,
                isMusic: a
            }), this._preloadCount++)
        },
        SetPlaybackRate(a, d) {
            this.PostToDOM("set-playback-rate", {
                tag: a.toLowerCase(),
                rate: Math.max(d, 0)
            })
        },
        Stop(a) {
            this.PostToDOM("stop", {
                tag: a.toLowerCase()
            })
        },
        StopAll() {
            this.PostToDOM("stop-all")
        },
        SetPaused(a, d) {
            this.PostToDOM("set-paused", {
                tag: a.toLowerCase(),
                paused: 0 === d
            })
        },
        Seek(a, d) {
            this.PostToDOM("seek", {
                tag: a.toLowerCase(),
                pos: d
            })
        },
        SetSilent(a) {
            2 === a && (a = this._isSilent ? 1 : 0);
            a = 0 === a;
            this._isSilent !== a && (this._isSilent = a, this.PostToDOM("set-silent", {
                isSilent: a
            }))
        },
        SetMasterVolume(a) {
            a = this.DbToLinear(a);
            this._masterVolume !== a && (this._masterVolume = a, this.PostToDOM("set-master-volume", {
                vol: a
            }))
        },
        AddFilterEffect(a, d, c, e, k, h, p) {
            a = a.toLowerCase();
            d = b[d];
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "filter",
                tag: a,
                params: [d, c, e, k, h, f.clamp(p / 100, 0, 1)]
            })
        },
        AddDelayEffect(a, d, c, e) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "delay",
                tag: a,
                params: [d, this.DbToLinear(c), f.clamp(e / 100, 0, 1)]
            })
        },
        AddFlangerEffect(a, d,
            c, e, k, h) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "flanger",
                tag: a,
                params: [d / 1E3, c / 1E3, e, k / 100, f.clamp(h / 100, 0, 1)]
            })
        },
        AddPhaserEffect(a, d, c, e, k, h, p) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "phaser",
                tag: a,
                params: [d, c, e, k, h, f.clamp(p / 100, 0, 1)]
            })
        },
        AddConvolutionEffect(a, d, c, e) {
            a = a.toLowerCase();
            const k = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d[0]);
            k && (this._IncrementEffectCount(a), this.PostToDOM("add-effect", {
                type: "convolution",
                tag: a,
                bufferOriginalUrl: d[0],
                bufferUrl: k.url,
                bufferType: k.type,
                params: [0 === c, f.clamp(e / 100, 0, 1)]
            }))
        },
        AddGainEffect(a, d) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [this.DbToLinear(d)]
            })
        },
        AddMuteEffect(a) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [0]
            })
        },
        AddTremoloEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "tremolo",
                tag: a,
                params: [d, f.clamp(c / 100, 0, 1)]
            })
        },
        AddRingModEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "ringmod",
                tag: a,
                params: [d, f.clamp(c / 100, 0, 1)]
            })
        },
        AddDistortionEffect(a, d, c, e, k, h) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "distortion",
                tag: a,
                params: [this.DbToLinearNoCap(d), this.DbToLinearNoCap(c), e, this.DbToLinearNoCap(k), f.clamp(h / 100, 0, 1)]
            })
        },
        AddCompressorEffect(a, d, c, e, k, h) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "compressor",
                tag: a,
                params: [d, c, e, k / 1E3, h / 1E3]
            })
        },
        AddAnalyserEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "analyser",
                tag: a,
                params: [d, c]
            })
        },
        RemoveEffects(a) {
            a = a.toLowerCase();
            this._effectCount.set(a, 0);
            this.PostToDOM("remove-effects", {
                tag: a
            });
            this._lastFxState = {}
        },
        SetEffectParameter(a, d, c, e, k, h) {
            this.PostToDOM("set-effect-param", {
                tag: a.toLowerCase(),
                index: Math.floor(d),
                param: c,
                value: e,
                ramp: k,
                time: h
            })
        },
        SetListenerObject(a) {
            a &&
                (a = a.GetFirstPicked()) && a.GetWorldInfo() && (this._listenerInst = a)
        },
        SetListenerZ(a) {
            this._listenerZ = a
        },
        ScheduleNextPlay(a) {
            this._nextPlayTime = Math.max(a, 0)
        },
        UnloadAudio(a) {
            const d = a[1];
            (a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0])) && this.PostToDOM("unload", {
                url: a.url,
                type: a.type,
                isMusic: d
            })
        },
        UnloadAudioByName(a, d) {
            a = 1 === a;
            (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase())) && this.PostToDOM("unload", {
                url: d.url,
                type: d.type,
                isMusic: a
            })
        },
        UnloadAll() {
            this.PostToDOM("unload-all")
        },
        AddRemoteURL(a, d, c) {
            this._remoteUrls.set(c.toLowerCase(), {
                url: a,
                type: d
            })
        }
    }
}
"use strict";
self.C3.Plugins.Audio.Exps = {
    Duration(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? f.duration : 0
    },
    PlaybackTime(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? f.playbackTime : 0
    },
    PlaybackRate(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? f.playbackRate : 0
    },
    Volume(f) {
        return (f = this._GetFirstAudioStateByTag(f)) ? this.LinearToDb(f.volume) : 0
    },
    MasterVolume() {
        return this.LinearToDb(this._masterVolume)
    },
    EffectCount(f) {
        return this._effectCount.get(f.toLowerCase()) || 0
    },
    AnalyserFreqBinCount(f, b) {
        return (f = this.GetAnalyserData(f,
            Math.floor(b))) ? f.binCount : 0
    },
    AnalyserFreqBinAt(f, b, a) {
        f = this.GetAnalyserData(f, Math.floor(b));
        if (!f) return 0;
        a = Math.floor(a);
        return 0 > a || a >= f.binCount ? 0 : f.freqBins[a]
    },
    AnalyserPeakLevel(f, b) {
        return (f = this.GetAnalyserData(f, Math.floor(b))) ? f.peak : 0
    },
    AnalyserRMSLevel(f, b) {
        return (f = this.GetAnalyserData(f, Math.floor(b))) ? f.rms : 0
    },
    SampleRate() {
        return this._sampleRate
    },
    CurrentTime() {
        return self.C3_GetAudioContextCurrentTime ? self.C3_GetAudioContextCurrentTime() : performance.now() / 1E3
    }
};
"use strict"; {
    const f = self.C3;
    f.Behaviors.Sin = class extends f.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Sin.Type = class extends f.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
}
"use strict"; {
    const f = self.C3,
        b = self.C3X,
        a = self.IBehaviorInstance,
        d = 2 * Math.PI,
        c = Math.PI / 2,
        e = 3 * Math.PI / 2,
        k = [0, 1, 8, 3, 4, 2, 5, 6, 9, 7];
    f.Behaviors.Sin.Instance = class extends f.SDKBehaviorInstanceBase {
        constructor(m, t) {
            super(m);
            this._mag = this._period = this._wave = this._movement = this._i = 0;
            this._isEnabled = !0;
            this._ratio = this._lastKnownValue2 = this._lastKnownValue = this._initialValue2 = this._initialValue = this._magnitudeRandom = this._periodOffsetRandom = this._periodRandom = this._baseMag = this._basePeriodOffset = this._basePeriod = 0;
            t &&
                (this._movement = k[t[0]], this._wave = t[1], this._periodRandom = this._runtime.Random() * t[3], this._basePeriod = t[2], this._period = t[2], this._period += this._periodRandom, this._basePeriodOffset = t[4], 0 !== this._period && (this._periodOffsetRandom = this._runtime.Random() * t[5], this._i = t[4] / this._period * d, this._i += this._periodOffsetRandom / this._period * d), this._magnitudeRandom = this._runtime.Random() * t[7], this._baseMag = t[6], this._mag = t[6], this._mag += this._magnitudeRandom, this._isEnabled = !!t[8]);
            5 === this._movement && (this._mag =
                f.toRadians(this._mag));
            this.Init();
            this._isEnabled && this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                i: this._i,
                e: this._isEnabled,
                mv: this._movement,
                w: this._wave,
                p: this._period,
                mag: this._mag,
                iv: this._initialValue,
                iv2: this._initialValue2,
                r: this._ratio,
                lkv: this._lastKnownValue,
                lkv2: this._lastKnownValue2
            }
        }
        LoadFromJson(m) {
            this._i = m.i;
            this._SetEnabled(m.e);
            this._movement = m.mv;
            this._wave = m.w;
            this._period = m.p;
            this._mag = m.mag;
            this._initialValue = m.iv;
            this._initialValue2 = m.iv2;
            this._ratio =
                m.r;
            this._lastKnownValue = m.lkv;
            this._lastKnownValue2 = m.lkv2
        }
        Init() {
            const m = this._inst.GetWorldInfo();
            switch (this._movement) {
                case 0:
                    this._initialValue = m.GetX();
                    break;
                case 1:
                    this._initialValue = m.GetY();
                    break;
                case 2:
                    this._initialValue = m.GetWidth();
                    this._ratio = m.GetHeight() / m.GetWidth();
                    break;
                case 3:
                    this._initialValue = m.GetWidth();
                    break;
                case 4:
                    this._initialValue = m.GetHeight();
                    break;
                case 5:
                    this._initialValue = m.GetAngle();
                    break;
                case 6:
                    this._initialValue = m.GetOpacity();
                    break;
                case 7:
                    this._initialValue = 0;
                    break;
                case 8:
                    this._initialValue = m.GetX();
                    this._initialValue2 = m.GetY();
                    break;
                case 9:
                    this._initialValue = m.GetZElevation()
            }
            this._lastKnownValue = this._initialValue;
            this._lastKnownValue2 = this._initialValue2
        }
        WaveFunc(m) {
            m %= d;
            switch (this._wave) {
                case 0:
                    return Math.sin(m);
                case 1:
                    return m <= c ? m / c : m <= e ? 1 - 2 * (m - c) / Math.PI : (m - e) / c - 1;
                case 2:
                    return 2 * m / d - 1;
                case 3:
                    return -2 * m / d + 1;
                case 4:
                    return m < Math.PI ? -1 : 1
            }
            return 0
        }
        Tick() {
            const m = this._runtime.GetDt(this._inst);
            this._isEnabled && 0 !== m && (this._i = 0 === this._period ? 0 :
                (this._i + m / this._period * d) % d, this._UpdateFromPhase())
        }
        _UpdateFromPhase() {
            const m = this._inst.GetWorldInfo();
            switch (this._movement) {
                case 0:
                    m.GetX() !== this._lastKnownValue && (this._initialValue += m.GetX() - this._lastKnownValue);
                    m.SetX(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = m.GetX();
                    break;
                case 1:
                    m.GetY() !== this._lastKnownValue && (this._initialValue += m.GetY() - this._lastKnownValue);
                    m.SetY(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = m.GetY();
                    break;
                case 2:
                    m.SetWidth(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    m.SetHeight(m.GetWidth() * this._ratio);
                    break;
                case 3:
                    m.SetWidth(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    break;
                case 4:
                    m.SetHeight(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    break;
                case 5:
                    m.GetAngle() !== this._lastKnownValue && (this._initialValue = f.clampAngle(this._initialValue + (m.GetAngle() - this._lastKnownValue)));
                    m.SetAngle(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = m.GetAngle();
                    break;
                case 6:
                    m.SetOpacity(this._initialValue + this.WaveFunc(this._i) * this._mag / 100);
                    break;
                case 8:
                    m.GetX() !== this._lastKnownValue && (this._initialValue += m.GetX() - this._lastKnownValue);
                    m.GetY() !== this._lastKnownValue2 && (this._initialValue2 += m.GetY() - this._lastKnownValue2);
                    m.SetX(this._initialValue + Math.cos(m.GetAngle()) * this.WaveFunc(this._i) * this._mag);
                    m.SetY(this._initialValue2 + Math.sin(m.GetAngle()) * this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = m.GetX();
                    this._lastKnownValue2 = m.GetY();
                    break;
                case 9:
                    m.SetZElevation(this._initialValue + this.WaveFunc(this._i) * this._mag)
            }
            m.SetBboxChanged()
        }
        _OnSpriteFrameChanged(m, t) {}
        _SetPeriod(m) {
            this._period = m
        }
        _GetPeriod() {
            return this._period
        }
        _SetMagnitude(m) {
            this._mag = m
        }
        _SetMagnitude_ConvertAngle(m) {
            5 === this._movement && (m = f.toRadians(m));
            this._SetMagnitude(m)
        }
        _GetMagnitude() {
            return this._mag
        }
        _GetMagnitude_ConvertAngle() {
            let m = this._GetMagnitude();
            5 === this._movement && (m = f.toDegrees(m));
            return m
        }
        _SetMovement(m) {
            5 === this._movement && 5 !== m && (this._mag = f.toDegrees(this._mag));
            this._movement = m;
            this.Init()
        }
        _GetMovement() {
            return this._movement
        }
        _SetWave(m) {
            this._wave = m
        }
        _GetWave() {
            return this._wave
        }
        _SetPhase(m) {
            this._i = f.clamp(m, 0, 2 * Math.PI);
            this._UpdateFromPhase()
        }
        _GetPhase() {
            return this._i
        }
        _SetEnabled(m) {
            (this._isEnabled = !!m) ? this._StartTicking(): this._StopTicking()
        }
        _IsEnabled() {
            return this._isEnabled
        }
        GetPropertyValueByIndex(m) {
            switch (m) {
                case 0:
                    return this._movement;
                case 1:
                    return this._wave;
                case 2:
                    return this._basePeriod;
                case 6:
                    return this._baseMag;
                case 8:
                    return this._isEnabled
            }
        }
        SetPropertyValueByIndex(m,
            t) {
            switch (m) {
                case 0:
                    this._movement = k[t];
                    this.Init();
                    break;
                case 1:
                    this._wave = t;
                    break;
                case 2:
                    this._basePeriod = t;
                    this._period = this._basePeriod + this._periodRandom;
                    this._isEnabled || (0 !== this._period ? (this._i = this._basePeriodOffset / this._period * d, this._i += this._periodOffsetRandom / this._period * d) : this._i = 0);
                    break;
                case 6:
                    this._baseMag = t;
                    this._mag = this._baseMag + this._magnitudeRandom;
                    5 === this._movement && (this._mag = f.toRadians(this._mag));
                    break;
                case 8:
                    this._isEnabled = !!t
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" +
                    this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.sin.properties.enabled.name",
                    value: this._IsEnabled(),
                    onedit: m => this._SetEnabled(m)
                }, {
                    name: "behaviors.sin.properties.period.name",
                    value: this._GetPeriod(),
                    onedit: m => this._SetPeriod(m)
                }, {
                    name: "behaviors.sin.properties.magnitude.name",
                    value: this._GetMagnitude_ConvertAngle(),
                    onedit: m => this._SetMagnitude_ConvertAngle(m)
                }, {
                    name: "behaviors.sin.debugger.value",
                    value: this.WaveFunc(this._GetPhase()) * this._GetMagnitude_ConvertAngle()
                }]
            }]
        }
        GetScriptInterfaceClass() {
            return self.ISineBehaviorInstance
        }
    };
    const h = new WeakMap,
        p = "horizontal vertical size width height angle opacity value-only forwards-backwards z-elevation".split(" "),
        n = ["sine", "triangle", "sawtooth", "reverse-sawtooth", "square"];
    self.ISineBehaviorInstance = class extends a {
        constructor() {
            super();
            h.set(this, a._GetInitInst().GetSdkInstance())
        }
        set period(m) {
            b.RequireFiniteNumber(m);
            h.get(this)._SetPeriod(m)
        }
        get period() {
            return h.get(this)._GetPeriod()
        }
        set magnitude(m) {
            b.RequireFiniteNumber(m);
            h.get(this)._SetMagnitude(m)
        }
        get magnitude() {
            return h.get(this)._GetMagnitude()
        }
        set phase(m) {
            h.get(this)._SetPhase(m)
        }
        get phase() {
            return h.get(this)._GetPhase()
        }
        set movement(m) {
            b.RequireString(m);
            m = p.indexOf(m);
            if (-1 === m) throw Error("invalid movement");
            h.get(this)._SetMovement(m)
        }
        get movement() {
            return p[h.get(this)._GetMovement()]
        }
        set wave(m) {
            b.RequireString(m);
            m = n.indexOf(m);
            if (-1 === m) throw Error("invalid wave");
            h.get(this)._SetWave(m)
        }
        get wave() {
            return n[h.get(this)._GetWave()]
        }
        get value() {
            const m = h.get(this);
            return m.WaveFunc(m._GetPhase()) * m._GetMagnitude()
        }
        updateInitialState() {
            h.get(this).Init()
        }
        set isEnabled(m) {
            h.get(this)._SetEnabled(!!m)
        }
        get isEnabled() {
            return h.get(this)._IsEnabled()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Sin.Cnds = {
        IsEnabled() {
            return this._IsEnabled()
        },
        CompareMovement(b) {
            return this._GetMovement() === b
        },
        ComparePeriod(b, a) {
            return f.compare(this._GetPeriod(), b, a)
        },
        CompareMagnitude(b, a) {
            return f.compare(this._GetMagnitude_ConvertAngle(), b, a)
        },
        CompareWave(b) {
            return this._GetWave() === b
        }
    }
}
"use strict";
self.C3.Behaviors.Sin.Acts = {
    SetEnabled(f) {
        this._SetEnabled(0 !== f)
    },
    SetPeriod(f) {
        this._SetPeriod(f)
    },
    SetMagnitude(f) {
        this._SetMagnitude_ConvertAngle(f)
    },
    SetMovement(f) {
        this._SetMovement(f)
    },
    SetWave(f) {
        this._wave = f
    },
    SetPhase(f) {
        const b = 2 * Math.PI;
        this._SetPhase(f * b % b)
    },
    UpdateInitialState() {
        this.Init()
    }
};
"use strict";
self.C3.Behaviors.Sin.Exps = {
    CyclePosition() {
        return this._GetPhase() / (2 * Math.PI)
    },
    Period() {
        return this._GetPeriod()
    },
    Magnitude() {
        return this._GetMagnitude_ConvertAngle()
    },
    Value() {
        return this.WaveFunc(this._GetPhase()) * this._GetMagnitude_ConvertAngle()
    }
};
"use strict"; {
    const f = self.C3;
    f.Behaviors.Tween = class extends f.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Tween.Type = class extends f.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
}
"use strict"; {
    const f = self.C3,
        b = f.Behaviors.Tween;
    b.Instance = class extends f.SDKBehaviorInstanceBase {
        constructor(a, d) {
            super(a);
            this._allowMultiple = !1;
            this._enabled = !0;
            d && (this._allowMultiple = !1, this._enabled = !!d[0]);
            this._activeTweens = new Map;
            this._disabledTweens = [];
            this._waitingForReleaseTweens = new Map;
            this._waitingForReleaseTweensJson = this._disabledTweensJson = this._activeTweensJson = this._finishingTween = null;
            this._finishingTweenName = "";
            this._enabled && this._StartTicking2();
            this._afterLoad = c => this._OnAfterLoad(c);
            this.GetRuntime().Dispatcher().addEventListener("afterload", this._afterLoad)
        }
        Release() {
            this.GetRuntime().Dispatcher().removeEventListener("afterload", this._afterLoad);
            this._afterLoad = null;
            this._finishingTween && (this.ReleaseAndCompleteTween(this._finishingTween), this._finishingTween = null);
            this.ReleaseAndCompleteTweens();
            this._tweens = null;
            this.ClearDisabledList();
            this._disabledTweens = null;
            this._ReleaseWaitingTweens();
            this._waitingForReleaseTweens = null;
            super.Release()
        }
        SetEnabled(a) {
            (this._enabled = a) ?
            this._StartTicking2(): this._StopTicking2()
        }
        GetEnabled() {
            return this._enabled
        }
        AddToDisabledList(a) {
            this._disabledTweens.push(a)
        }
        IsInDisabledList(a) {
            return this._disabledTweens.includes(a)
        }
        ClearDisabledList() {
            f.clearArray(this._disabledTweens)
        }
        GetFinishingTween() {
            return this._finishingTween
        }
        IsInstanceValid() {
            const a = this.GetObjectInstance();
            return a ? !a.IsDestroyed() : !1
        }
        GetTween(a, d, c = !1) {
            if ((d = d ? this.PropertyTweens(d, c) : this.AllTweens(c)) && d.length)
                for (const e of d)
                    if (e.HasTags(a)) return e
        }
        GetTweenIncludingWaitingForRelease(a,
            d) {
            return this.GetTween(a, d, !0)
        }* GetTweens(a, d, c = !1) {
            if ((d = d ? this.PropertyTweens(d, c) : this.AllTweens(c)) && d.length)
                for (const e of d) e.HasTags(a) && (yield e)
        }* GetTweensIncludingWaitingForRelease(a, d) {
            yield* this.GetTweens(a, d, !0)
        }
        PropertyTweens(a, d) {
            if (d) return d = this._activeTweens.get(a), a = this._waitingForReleaseTweens.get(a), d || (d = []), a || (a = []), d.concat(a).filter(c => c);
            (a = this._activeTweens.get(a)) || (a = []);
            return a.filter(c => c)
        }
        AllTweens(a) {
            if (a) {
                a = [...this._activeTweens.values()].flat();
                const d = [...this._waitingForReleaseTweens.values()].flat();
                return a.concat(d).filter(c => c)
            }
            return [...this._activeTweens.values()].flat().filter(d => d)
        }
        AllTweensIncludingWaitingForRelease() {
            return this.AllTweens(!0)
        }
        SaveToJson() {
            return {
                s: !1,
                e: !!this._enabled,
                at: this._SaveActiveTweensToJson(),
                dt: this._SaveDisabledTweensToJson(),
                wt: this._SaveWaitingForReleaseTweensToJson(),
                ft: this._SaveFinishingTweenToJson()
            }
        }
        LoadFromJson(a) {
            a && (this._activeTweensJson = a.at, this._disabledTweensJson = a.dt, this._waitingForReleaseTweensJson = a.wt, this._finishingTweenName = a.ft, this._allowMultiple = !1, this._enabled = !!a.e)
        }
        _OnAfterLoad(a) {
            a = this.GetRuntime().GetTimelineManager();
            this._PopulateTweenMap(this._activeTweensJson, this._activeTweens, a);
            if (this._disabledTweensJson) {
                f.clearArray(this._disabledTweens);
                for (const d of this._disabledTweensJson) this._PopulateTweenArray(this._disabledTweens, d, a)
            }
            this._PopulateTweenMap(this._waitingForReleaseTweensJson, this._waitingForReleaseTweens, a);
            this._finishingTween = this._GetTween(this._finishingTweenName, a);
            this._enabled ? this._StartTicking2() : this._StopTicking2()
        }
        _PopulateTweenMap(a,
            d, c) {
            if (a)
                for (const k in a) {
                    let h = d.get(k);
                    h ? f.clearArray(h) : h = [];
                    var e = a[k];
                    for (const p of e) this._PopulateTweenArray(h, p.name, c) ? this._LoadTweenFromJson(p.name, p, c) : (e = f.Tween.Build({
                        runtime: this.GetRuntime(),
                        json: p
                    }), e.AddCompletedCallback(n => this._FinishTriggers(n)), c.AddScheduledTimeline(e), this._PopulateTweenArray(h, e, c));
                    d.set(k, h)
                }
        }
        _GetTween(a, d) {
            return d.GetScheduledOrPlayingTimelineByName(a)
        }
        _PopulateTweenArray(a, d, c) {
            if ("string" === typeof d) {
                if (d = this._GetTween(d, c)) return !!a.push(d)
            } else return !!a.push(d);
            return !1
        }
        _LoadTweenFromJson(a, d, c) {
            "string" === typeof a ? (a = this._GetTween(a, c)) && a._LoadFromJson(d) : a._LoadFromJson(d)
        }
        _SaveActiveTweensToJson() {
            const a = {};
            for (const [d, c] of this._activeTweens) a[d] = c.map(e => e._SaveToJson());
            return a
        }
        _SaveDisabledTweensToJson() {
            return this._disabledTweens.map(a => a.GetName())
        }
        _SaveWaitingForReleaseTweensToJson() {
            const a = {};
            for (const [d, c] of this._waitingForReleaseTweens) a[d] = c.map(e => e._SaveToJson());
            return a
        }
        _SaveFinishingTweenToJson() {
            return this._finishingTween ? this._finishingTween.GetName() :
                ""
        }
        Tick2() {
            this._ReleaseWaitingTweens()
        }
        CreateTween(a) {
            var d = b.Config.GetPropertyTracksConfig(a.property, a.startValue, a.endValue, a.ease, a.resultMode, this.GetObjectInstance());
            const c = b.Maps.GetPropertyFromIndex(a.property);
            b.Maps.IsValueId(c) || this.ReleaseTweens(a.property);
            d = f.Tween.Build({
                runtime: this.GetRuntime(),
                id: c,
                tags: a.tags,
                time: a.time,
                instance: this.GetObjectInstance(),
                releaseOnComplete: !!a.releaseOnComplete,
                loop: !!a.loop,
                pingPong: !!a.pingPong,
                initialValueMode: a.initialValueMode,
                propertyTracksConfig: d
            });
            d.AddCompletedCallback(e => this._FinishTriggers(e));
            this._AddTween(d, a.property);
            return d
        }
        ReleaseTween(a, d = !1) {
            var c = a.GetId();
            if (this._activeTweens.has(c) && (c = this._activeTweens.get(c))) {
                const e = c.indexOf(a); - 1 !== e && c.splice(e, 1)
            }
            a.IsReleased() || this._IsInWaitingList(a) || (a.Stop(d), this._AddToWaitingList(a))
        }
        ReleaseTweens(a, d = !1) {
            if (f.IsFiniteNumber(a)) {
                var c = b.Maps.GetPropertyFromIndex(a);
                if (this._activeTweens.has(c)) {
                    c = this._activeTweens.get(c);
                    var e = this.GetFinishingTween();
                    for (var k of c) k ===
                        e || k.IsReleased() || this._IsInWaitingList(k) || (k.Stop(d), k.Release());
                    f.clearArray(c)
                }
            } else {
                k = this.GetFinishingTween();
                for (c of this.AllTweens()) c === k || c.IsReleased() || this._IsInWaitingList(c) || (c.Stop(d), c.Release());
                for (e of this._activeTweens.keys()) f.clearArray(this._activeTweens.get(e)), this._activeTweens.delete(e);
                this._activeTweens.clear()
            }
        }
        ReleaseAndCompleteTween(a) {
            this.ReleaseTween(a, !0)
        }
        ReleaseAndCompleteTweens() {
            this.ReleaseTweens(NaN, !0)
        }
        GetPropertyValueByIndex(a) {
            switch (a) {
                case 0:
                    return this._enabled
            }
        }
        SetPropertyValueByIndex(a,
            d) {
            switch (a) {
                case 0:
                    this._enabled = !!d
            }
        }
        _GetBehaviorType(a) {
            a = a.GetInstance().GetBehaviorInstances();
            for (const d of a)
                if (a = d.GetBehaviorType(), a.GetInstanceSdkCtor() === this.constructor) return a
        }
        Trigger(a, d, c, e) {
            return this._runtime ? super.Trigger(a) : d.Trigger(a, c, e)
        }
        _FinishTriggers(a) {
            this._finishingTween = a;
            b.Cnds.SetFinishingTween(a);
            let d, c;
            if (this.GetRuntime()) d = this._inst, c = this._runtime, this.Trigger(b.Cnds.OnTweensFinished), this.Trigger(b.Cnds.OnAnyTweensFinished), this.ReleaseTween(a);
            else {
                d = a.GetInstance();
                if (!d || d && d.IsDestroyed()) return;
                c = d.GetRuntime();
                const e = this._GetBehaviorType(a);
                this.Trigger(b.Cnds.OnTweensFinished, c, d, e);
                this.Trigger(b.Cnds.OnAnyTweensFinished, c, d, e);
                a.Stop()
            }
            this._finishingTween = null;
            b.Cnds.SetFinishingTween(null);
            a.GetDestroyInstanceOnComplete() && c.DestroyInstance(d)
        }
        _AddTween(a, d) {
            d = b.Maps.GetPropertyFromIndex(d);
            this._activeTweens.has(d) || this._activeTweens.set(d, []);
            this._activeTweens.get(d).push(a)
        }
        _AddToWaitingList(a) {
            const d = a.GetId();
            this._waitingForReleaseTweens.has(d) ||
                this._waitingForReleaseTweens.set(d, []);
            this._waitingForReleaseTweens.get(d).push(a)
        }
        _IsInWaitingList(a) {
            const d = a.GetId();
            return this._waitingForReleaseTweens.has(d) ? this._waitingForReleaseTweens.get(d).includes(a) : !1
        }
        _ReleaseWaitingTweens() {
            if (this._waitingForReleaseTweens.size) {
                for (const a of this._waitingForReleaseTweens.values()) {
                    for (const d of a) d.IsReleased() || d.Release();
                    f.clearArray(a)
                }
                this._waitingForReleaseTweens.clear()
            }
        }
    }
}
"use strict"; {
    const f = self.C3;
    let b = null;
    f.Behaviors.Tween.Cnds = {
        SetFinishingTween(a) {
            b = a
        },
        OnTweensFinished(a) {
            return b.HasTags(a)
        },
        OnAnyTweensFinished() {
            return !0
        },
        IsPlaying(a) {
            return (a = [...this.GetTweensIncludingWaitingForRelease(a)], a.length) ? a.some(f.Tween.IsPlaying) : !1
        },
        IsAnyPlaying() {
            const a = [...this.AllTweensIncludingWaitingForRelease()];
            return a && a.length ? a.some(f.Tween.IsPlaying) : !1
        },
        IsPaused(a) {
            return (a = [...this.GetTweensIncludingWaitingForRelease(a)], a.length) ? a.some(f.Tween.IsPaused) : !1
        },
        IsAnyPaused() {
            const a = [...this.AllTweensIncludingWaitingForRelease()];
            return a && a.length ? a.some(f.Tween.IsPaused) : !1
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = self.Ease,
        a = f.Behaviors.Tween;
    a.Acts = {
        SetEnabled(d) {
            this.SetEnabled(!!d);
            for (const c of this.AllTweens()) d ? this.IsInDisabledList(c) && c.Resume() : ((c.IsPlaying() || c.IsScheduled()) && this.AddToDisabledList(c), c.Stop());
            d && this.ClearDisabledList()
        },
        async TweenOneProperty(...d) {
            this.GetEnabled() && this.IsInstanceValid() && (d = this.CreateTween(a.TweenArguments.OneProperty(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        async TweenTwoProperties(...d) {
            this.GetEnabled() && this.IsInstanceValid() &&
                (d = this.CreateTween(a.TweenArguments.TwoProperties(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        async TweenValue(...d) {
            this.GetEnabled() && this.IsInstanceValid() && (d = this.CreateTween(a.TweenArguments.ValueProperty(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        PauseTweens(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.GetTweens(d)) c.Stop()
        },
        PauseAllTweens() {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const d of this.AllTweens()) d.Stop()
        },
        ResumeTweens(d) {
            if (this.GetEnabled() &&
                this.IsInstanceValid())
                for (const c of this.GetTweens(d)) c.Resume()
        },
        ResumeAllTweens() {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const d of this.AllTweens()) d.Resume()
        },
        StopTweens(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.GetTweens(d)) this.ReleaseTween(c)
        },
        StopAllTweens() {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const d of this.AllTweens()) this.ReleaseTween(d)
        },
        SetOnePropertyTweensEndValue(d, c, e) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                c = f.Behaviors.Tween.Maps.GetSinglePropertyFromIndex(c);
                for (const k of this.GetTweens(d)) k.BeforeSetEndValues([c]), k.SetEndValue(e, c)
            }
        },
        SetTwoPropertiesTweensEndValue(d, c, e, k) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                c = f.Behaviors.Tween.Maps.GetRealProperties(c);
                for (const h of this.GetTweens(d)) h.BeforeSetEndValues(c), h.SetEndValue(e, c[0]), h.SetEndValue(k, c[1])
            }
        },
        SetValuePropertyTweensStartValue(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const e of this.GetTweens(d, "value")) e.SetStartValue(c, "value")
        },
        SetValuePropertyTweensEndValue(d, c) {
            if (this.GetEnabled() &&
                this.IsInstanceValid())
                for (const e of this.GetTweens(d, "value")) e.BeforeSetEndValues(["value"]), e.SetEndValue(c, "value")
        },
        SetTweensEase(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                c = b.GetEaseFromIndex(c);
                for (const e of this.GetTweens(d)) e.SetEase(c)
            }
        },
        SetAllTweensEase(d) {
            if (this.GetEnabled() && this.IsInstanceValid()) {
                d = b.GetEaseFromIndex(d);
                for (const c of this.AllTweens()) c.SetEase(d)
            }
        },
        SetTweensTime(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const e of this.GetTweens(d)) e.SetTime(c)
        },
        SetAllTweensTime(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.AllTweens()) c.SetTime(d)
        },
        SetTweensPlaybackRate(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const e of this.GetTweens(d)) e.SetPlaybackRate(c)
        },
        SetAllTweensPlaybackRate(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.AllTweens()) c.SetPlaybackRate(d)
        },
        SetTweensDestroyOnComplete(d, c) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const e of this.GetTweens(d)) e.SetDestroyInstanceOnComplete(!!c)
        },
        SetAllTweensDestroyOnComplete(d) {
            if (this.GetEnabled() && this.IsInstanceValid())
                for (const c of this.AllTweens()) c.SetDestroyInstanceOnComplete(!!d)
        }
    }
}
"use strict";
self.C3.Behaviors.Tween.Exps = {
    Time(f) {
        return (f = this.GetTweenIncludingWaitingForRelease(f)) ? f.GetTime() : 0
    },
    Progress(f) {
        return (f = this.GetTweenIncludingWaitingForRelease(f)) ? f.GetTime() / f.GetTotalTime() : 0
    },
    Value(f) {
        return (f = this.GetTweenIncludingWaitingForRelease(f, "value")) ? f.GetPropertyTrack("value").GetSourceAdapterValue() : 0
    },
    Tags() {
        return this.GetFinishingTween() ? this.GetFinishingTween().GetStringTags() : ""
    }
};
"use strict"; {
    const f = self.C3,
        b = self.Ease,
        a = ["position", "size", "scale"],
        d = "offsetX offsetY offsetWidth offsetHeight offsetAngle offsetOpacity offsetColor offsetZElevation offsetScaleX offsetScaleY".split(" "),
        c = ["value"],
        e = [].concat(a).concat(d).concat(c),
        k = {
            position: ["offsetX", "offsetY"],
            size: ["offsetWidth", "offsetHeight"],
            scale: ["offsetScaleX", "offsetScaleY"]
        },
        h = Object.assign({}, e.reduce((p, n) => Object.assign({}, p, {
            [n]: [n]
        }), {}), k);
    f.Behaviors.Tween.Maps = class {
        constructor() {}
        static GetEases() {
            return [...b.GetRuntimeEaseNames()]
        }
        static GetEaseFromIndex(p) {
            return [...b.GetRuntimeEaseNames()][p]
        }
        static GetPropertyFromIndex(p) {
            return e[p]
        }
        static GetPropertyIndexFromName(p) {
            return e.indexOf(p)
        }
        static GetPairPropertyFromIndex(p) {
            return a[p]
        }
        static GetSinglePropertyFromIndex(p) {
            return d[p]
        }
        static GetValuePropertyFromIndex(p) {
            return c[p]
        }
        static GetPairProperties(p) {
            return k[p]
        }
        static GetRealProperties(p) {
            return f.IsString(p) ?
                h[p] : h[e[p]]
        }
        static IsPairId(p) {
            return !!k[p]
        }
        static IsColorId(p) {
            return "offsetColor" === p
        }
        static IsAngleId(p) {
            return "offsetAngle" === p
        }
        static IsOpacityId(p) {
            return "offsetOpacity" === p
        }
        static IsValueId(p) {
            return "value" === p
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = f.Behaviors.Tween,
        a = new Map;
    b.Config = class {
        constructor() {}
        static GetPropertyTracksConfig(d, c, e, k, h, p) {
            0 === a.size && this._CreateConfigObjects();
            var n = b.PropertyTypes.Pick(d);
            n = a.get(n);
            f.IsFiniteNumber(d) && (d = b.Maps.GetPropertyFromIndex(d));
            return this._GetConfig(n, d, c, e, k, h, p)
        }
        static TransformValue(d, c) {
            return f.Behaviors.Tween.GetPropertyTracksConfig(d).valueGetter(c)
        }
        static _CreateConfigObjects() {
            const d = b.PropertyTypes,
                c = b.ValueGetters;
            this._AddConfigObject(d.PAIR, this._GetPairConfig,
                c._GetPropertyValue);
            this._AddConfigObject(d.COLOR, this._GetColorConfig, c._GetColorPropertyValue);
            this._AddConfigObject(d.ANGLE, this._GetAngleConfig, c._GetPropertyAngleValue);
            this._AddConfigObject(d.VALUE, this._GetValueConfig, c._GetPropertyValue);
            this._AddConfigObject(d.OTHER, this._GetCommonConfig, c._GetPropertyValue)
        }
        static _AddConfigObject(d, c, e) {
            a.set(d, this._CreateConfigObject(d, c, e))
        }
        static _CreateConfigObject(d, c, e) {
            return {
                name: d,
                configFunc: c,
                valueGetter: e
            }
        }
        static _GetConfig(d, c, e, k, h, p, n) {
            return d.configFunc(c,
                d.valueGetter(e), d.valueGetter(k), h, p, n)
        }
        static _GetPairConfig(d, c, e, k, h, p) {
            return b.Maps.GetPairProperties(d).map((n, m) => ({
                sourceId: "world-instance",
                property: n,
                type: "float",
                valueType: "numeric",
                startValue: c[m],
                endValue: e[m],
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: h
            }))
        }
        static _GetColorConfig(d, c, e, k, h, p) {
            return f.Plugins.Text && p.GetPlugin() instanceof f.Plugins.Text ? {
                sourceId: "plugin",
                sourceArgs: [7],
                property: "color",
                type: "color",
                valueType: "color",
                startValue: c,
                endValue: e,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: h
            } : {
                sourceId: "world-instance",
                property: d,
                type: "color",
                valueType: "color",
                startValue: c,
                endValue: e,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: h
            }
        }
        static _GetAngleConfig(d, c, e, k, h, p) {
            return {
                sourceId: "world-instance",
                property: d,
                type: "angle",
                valueType: "angle",
                startValue: c,
                endValue: e,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: h
            }
        }
        static _GetCommonConfig(d, c, e, k, h, p) {
            return {
                sourceId: "world-instance",
                property: d,
                type: "float",
                valueType: "numeric",
                startValue: c,
                endValue: e,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: h
            }
        }
        static _GetValueConfig(d, c, e, k, h, p) {
            return {
                sourceId: "value",
                property: d,
                type: "float",
                valueType: "numeric",
                startValue: c,
                endValue: e,
                ease: b.Maps.GetEaseFromIndex(k),
                resultMode: h
            }
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = f.Behaviors.Tween,
        a = Object.assign({}, {
            resultMode: "absolute"
        }, {
            tags: "",
            property: "",
            time: 0,
            ease: 0,
            releaseOnComplete: 0,
            loop: !1,
            pingPong: !1
        }),
        d = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: 0,
            endValue: 0
        }),
        c = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: [0, 0],
            endValue: [0, 0]
        }),
        e = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: [0, 0, 0],
            endValue: [0, 0, 0]
        }),
        k = Object.assign({}, d, {
            initialValueMode: "start-value"
        });
    b.TweenArguments = class {
        constructor() {}
        static _SetCommonProperties(h,
            p, n, m, t, q, u) {
            h.tags = p;
            h.time = n;
            h.ease = m;
            h.releaseOnComplete = t;
            h.loop = q;
            h.pingPong = u
        }
        static OneProperty(h, p, n, m, t, q, u, r, x) {
            h = b.Maps.GetSinglePropertyFromIndex(n);
            n = b.Maps.IsColorId(h) ? e : d;
            this._SetCommonProperties(n, p, t, q, u, r, x);
            b.Maps.IsColorId(h) ? (e.endValue[0] = f.GetRValue(m), e.endValue[1] = f.GetGValue(m), e.endValue[2] = f.GetBValue(m), e.property = b.Maps.GetPropertyIndexFromName(h)) : b.Maps.IsOpacityId(h) ? d.endValue = m / 100 : d.endValue = m;
            n.property = b.Maps.GetPropertyIndexFromName(h);
            return n
        }
        static TwoProperties(h,
            p, n, m, t, q, u, r, x, z) {
            this._SetCommonProperties(c, p, q, u, r, x, z);
            h = b.Maps.GetPairPropertyFromIndex(n);
            c.endValue[0] = m;
            c.endValue[1] = t;
            c.property = b.Maps.GetPropertyIndexFromName(h);
            return c
        }
        static ValueProperty(h, p, n, m, t, q, u, r, x) {
            this._SetCommonProperties(k, p, t, q, u, r, x);
            k.startValue = n;
            k.endValue = m;
            k.property = b.Maps.GetPropertyIndexFromName("value");
            return k
        }
    }
}
"use strict"; {
    const f = self.C3,
        b = f.Behaviors.Tween,
        a = [];
    b.PropertyTypes = class {
        constructor() {}
        static Pick(d) {
            0 === a.length && (a.push({
                checkFunc: b.Maps.IsPairId,
                result: this.PAIR
            }), a.push({
                checkFunc: b.Maps.IsColorId,
                result: this.COLOR
            }), a.push({
                checkFunc: b.Maps.IsAngleId,
                result: this.ANGLE
            }), a.push({
                checkFunc: b.Maps.IsValueId,
                result: this.VALUE
            }), a.push({
                checkFunc: () => !0,
                result: this.OTHER
            }));
            f.IsFiniteNumber(d) && (d = f.Behaviors.Tween.Maps.GetPropertyFromIndex(d));
            for (const c of a)
                if (c.checkFunc(d)) return c.result
        }
        static get PAIR() {
            return "pair"
        }
        static get COLOR() {
            return "color"
        }
        static get ANGLE() {
            return "angle"
        }
        static get VALUE() {
            return "value"
        }
        static get OTHER() {
            return "other"
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Tween.ValueGetters = class {
        constructor() {}
        static _GetPropertyAngleValue(b) {
            b = f.toRadians(parseFloat(b));
            return f.clampAngle(b)
        }
        static _GetColorPropertyValue(b) {
            return b.slice(0)
        }
        static _GetPropertyValue(b) {
            return b
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Fade = class extends f.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Fade.Type = class extends f.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
}
"use strict"; {
    const f = self.C3;
    f.Behaviors.Fade.Instance = class extends f.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._fadeOutTime = this._waitTime = this._fadeInTime = 0;
            this._activeAtStart = this._destroy = !0;
            this._setMaxOpacity = !1;
            this._stage = 0;
            this._stageTime = f.New(f.KahanSum);
            this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1;
            a && (this._fadeInTime = a[0], this._waitTime = a[1], this._fadeOutTime = a[2], this._destroy = !!a[3], this._stage = (this._activeAtStart = !!a[4]) ? 0 : 3);
            this._activeAtStart && (0 === this._fadeInTime ?
                (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender()));
            this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                fit: this._fadeInTime,
                wt: this._waitTime,
                fot: this._fadeOutTime,
                d: this._destroy,
                s: this._stage,
                st: this._stageTime.Get(),
                mo: this._maxOpacity
            }
        }
        LoadFromJson(b) {
            this._fadeInTime = b.fit;
            this._waitTime = b.wt;
            this._fadeOutTime = b.fot;
            this._destroy = b.d;
            this._stage = b.s;
            this._stageTime.Set(b.st);
            this._maxOpacity = b.mo
        }
        Tick() {
            var b =
                this._runtime.GetDt(this._inst);
            this._stageTime.Add(b);
            b = this._inst.GetWorldInfo();
            0 === this._stage && (b.SetOpacity(this._stageTime.Get() / this._fadeInTime * this._maxOpacity), this._runtime.UpdateRender(), b.GetOpacity() >= this._maxOpacity && (b.SetOpacity(this._maxOpacity), this._stage = 1, this._stageTime.Reset(), this.Trigger(f.Behaviors.Fade.Cnds.OnFadeInEnd)));
            1 === this._stage && this._stageTime.Get() >= this._waitTime && (this._stage = 2, this._stageTime.Reset(), this.Trigger(f.Behaviors.Fade.Cnds.OnWaitEnd));
            2 === this._stage &&
                0 !== this._fadeOutTime && (b.SetOpacity(this._maxOpacity - this._stageTime.Get() / this._fadeOutTime * this._maxOpacity), this._runtime.UpdateRender(), 0 >= b.GetOpacity() && (this._stage = 3, this._stageTime.Reset(), this.Trigger(f.Behaviors.Fade.Cnds.OnFadeOutEnd), this._destroy && this._runtime.DestroyInstance(this._inst)))
        }
        Start() {
            this._stage = 0;
            this._stageTime.Reset();
            0 === this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender())
        }
        GetPropertyValueByIndex(b) {
            switch (b) {
                case 0:
                    return this._fadeInTime;
                case 1:
                    return this._waitTime;
                case 2:
                    return this._fadeOutTime;
                case 3:
                    return this._destroy
            }
        }
        SetPropertyValueByIndex(b, a) {
            switch (b) {
                case 0:
                    this._fadeInTime = a;
                    break;
                case 1:
                    this._waitTime = a;
                    break;
                case 2:
                    this._fadeOutTime = a;
                    break;
                case 3:
                    this._destroy = !!a
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.fade.properties.fade-in-time.name",
                    value: this._fadeInTime,
                    onedit: b => this._fadeInTime = b
                }, {
                    name: "behaviors.fade.properties.wait-time.name",
                    value: this._waitTime,
                    onedit: b => this._waitTime = b
                }, {
                    name: "behaviors.fade.properties.fade-out-time.name",
                    value: this._fadeOutTime,
                    onedit: b => this._fadeOutTime = b
                }, {
                    name: "behaviors.fade.debugger.stage",
                    value: ["behaviors.fade.debugger." + ["fade-in", "wait", "fade-out", "done"][this._stage]]
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Fade.Cnds = {
    OnFadeOutEnd() {
        return !0
    },
    OnFadeInEnd() {
        return !0
    },
    OnWaitEnd() {
        return !0
    }
};
"use strict";
self.C3.Behaviors.Fade.Acts = {
    StartFade() {
        this._activeAtStart || this._setMaxOpacity || (this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1, this._setMaxOpacity = !0);
        3 === this._stage && this.Start()
    },
    RestartFade() {
        this.Start()
    },
    SetFadeInTime(f) {
        0 > f && (f = 0);
        this._fadeInTime = f
    },
    SetWaitTime(f) {
        0 > f && (f = 0);
        this._waitTime = f
    },
    SetFadeOutTime(f) {
        0 > f && (f = 0);
        this._fadeOutTime = f
    }
};
"use strict";
self.C3.Behaviors.Fade.Exps = {
    FadeInTime() {
        return this._fadeInTime
    },
    WaitTime() {
        return this._waitTime
    },
    FadeOutTime() {
        return this._fadeOutTime
    }
}; {
    const f = self.C3;
    self.C3_GetObjectRefTable = function() {
        return [f.Plugins.Sprite, f.Behaviors.Sin, f.Plugins.Touch, f.Plugins.Function, f.Plugins.Mouse, f.Plugins.Browser, f.Behaviors.Tween, f.Plugins.Audio, f.Behaviors.Fade, f.Plugins.Touch.Cnds.OnTouchObject, f.Plugins.System.Acts.GoToLayout, f.Plugins.Audio.Acts.Play, f.Plugins.System.Cnds.IsGroupActive, f.Plugins.System.Cnds.OnLayoutStart, f.Plugins.Sprite.Acts.SetAnimFrame, f.Plugins.System.Cnds.PickByComparison, f.Plugins.Sprite.Acts.SetPos, f.Plugins.Sprite.Exps.X,
            f.Plugins.Sprite.Exps.Y, f.Plugins.Sprite.Exps.AnimationFrame, f.Plugins.Sprite.Exps.ImagePointX, f.Plugins.Sprite.Exps.ImagePointY, f.Plugins.Touch.Cnds.IsTouchingObject, f.Plugins.System.Cnds.CompareVar, f.Plugins.System.Acts.CreateObject, f.Plugins.Touch.Exps.X, f.Plugins.Touch.Exps.Y, f.Plugins.Sprite.Acts.MoveToTop, f.Plugins.Sprite.Acts.SetSize, f.Plugins.Audio.Acts.PlayByName, f.Plugins.System.Exps.choose, f.Plugins.System.Acts.SetVar, f.Plugins.Sprite.Exps.UID, f.Plugins.Touch.Cnds.OnTouchEnd, f.Plugins.System.Acts.SnapshotCanvas,
            f.Plugins.System.Cnds.OnCanvasSnapshot, f.Plugins.Browser.Acts.InvokeDownload, f.Plugins.System.Exps.canvassnapshot, f.Plugins.System.Acts.RestartLayout, f.Plugins.System.Cnds.EveryTick, f.Plugins.Mouse.Cnds.IsOverObject, f.Plugins.Mouse.Exps.X, f.Plugins.Mouse.Exps.Y, f.Plugins.System.Cnds.Else, f.Plugins.Audio.Acts.SetMasterVolume, f.Plugins.Audio.Cnds.IsTagPlaying, f.Plugins.Function.Acts.CallFunction, f.Plugins.Function.Cnds.OnFunction, f.Behaviors.Tween.Acts.TweenTwoProperties, f.Plugins.System.Exps.random,
            f.Plugins.System.Acts.Wait
        ]
    };
    self.C3_JsPropNameTable = [{
            playbutton: 0
        }, {
            Sine: 0
        }, {
            ang: 0
        }, {
            gametitle: 0
        }, {
            bg: 0
        }, {
            frame: 0
        }, {
            images: 0
        }, {
            Touch: 0
        }, {
            mute: 0
        }, {
            Sprite: 0
        }, {
            voltar: 0
        }, {
            brush: 0
        }, {
            brushColor: 0
        }, {
            brush_local: 0
        }, {
            tamanho: 0
        }, {
            brushSize: 0
        }, {
            brush_size_local: 0
        }, {
            cam: 0
        }, {
            objects: 0
        }, {
            color_size: 0
        }, {
            paint: 0
        }, {
            Function: 0
        }, {
            frame2: 0
        }, {
            select_level: 0
        }, {
            pincel: 0
        }, {
            Mouse: 0
        }, {
            mousePosition: 0
        }, {
            select_level_title: 0
        }, {
            eraser: 0
        }, {
            restry: 0
        }, {
            Browser: 0
        }, {
            black_screen: 0
        }, {
            Tween: 0
        }, {
            lv: 0
        }, {
            Audio: 0
        }, {
            Fade: 0
        }, {
            Fade2: 0
        },
        {
            NG_STUDIO: 0
        }, {
            pencil_erase: 0
        }, {
            id_pencil: 0
        }, {
            ready: 0
        }, {
            size: 0
        }, {
            color: 0
        }, {
            audio: 0
        }, {
            LevelSelect: 0
        }
    ]
}
"use strict";
self.C3_ExpressionFuncs = [() => 0, () => "", () => "System", f => {
        const b = f._GetNode(0).GetVar();
        return () => b.GetValue()
    }, f => {
        const b = f._GetNode(0);
        return () => b.ExpInstVar()
    }, f => {
        const b = f._GetNode(0);
        return () => b.ExpObject()
    }, f => {
        const b = f._GetNode(0);
        return () => b.ExpObject(1)
    }, () => "Touching", () => 1, () => "game", f => {
        const b = f._GetNode(0).GetBoundMethod();
        return () => b()
    }, f => {
        const b = f._GetNode(0).GetBoundMethod();
        return () => b("haha", "goodjob")
    }, () => 23, () => 75, () => "ColoringKids", () => "Mouse", () => -100, () => -10, () => "music",
    () => "sound", () => 247, () => 236, f => {
        const b = f._GetNode(0).GetBoundMethod();
        return () => b(.3, 1)
    }, () => 3
];
var module$str$c3runtime = {};
var module$str$__c3root__ = {};